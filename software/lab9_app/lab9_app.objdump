
lab9_app.elf:     file format elf32-littlenios2
lab9_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012dfc memsz 0x00012dfc flags r-x
    LOAD off    0x00013e1c vaddr 0x10012e1c paddr 0x10014ac8 align 2**12
         filesz 0x00001cac memsz 0x00001cac flags rw-
    LOAD off    0x00016774 vaddr 0x10016774 paddr 0x10016774 align 2**12
         filesz 0x00000000 memsz 0x000003ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012600  100001b8  100001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000664  100127b8  100127b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cac  10012e1c  10014ac8  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003ec  10016774  10016774  00016774  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00015ac8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001158  00000000  00000000  00015af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000317d7  00000000  00000000  00016c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c654  00000000  00000000  0004841f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000e1ed  00000000  00000000  00054a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001fec  00000000  00000000  00062c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003883  00000000  00000000  00064c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00018754  00000000  00000000  000684cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00080c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00080c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00085281  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00085284  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00085290  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00085291  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00085292  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00085296  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0008529a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0008529e  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000852a9  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000852b4  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000008  00000000  00000000  000852bf  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001a  00000000  00000000  000852c7  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000623d7  00000000  00000000  000852e1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001b8 l    d  .text	00000000 .text
100127b8 l    d  .rodata	00000000 .rodata
10012e1c l    d  .rwdata	00000000 .rwdata
10016774 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab9_app_bsp//obj/HAL/src/crt0.o
100001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 AES.c
00000000 l    df *ABS*	00000000 keyexpansion.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
100011cc l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10001540 l     F .text	00000034 __sprint_r
1001283a l     O .rodata	00000010 blanks.3546
1001284a l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 vfscanf.c
10012862 l     O .rodata	00000022 basefix.3458
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
10012985 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
10004d10 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10006780 l     F .text	00000008 __fp_lock
10006788 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10013044 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
10012b2c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012c74 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
10009ef8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
10013858 l     O .rwdata	00000014 fpi.2046
10012c90 l     O .rodata	00000028 tinytens
1001386c l     O .rwdata	00000014 fpinan.2082
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
1000cf28 l     F .text	00000110 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
1000eb18 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
1001010c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10010228 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10010254 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10010354 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10010448 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10010534 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10010710 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014ab8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10010984 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010ac4 l     F .text	00000038 alt_dev_reg
10013a28 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010d9c l     F .text	00000204 altera_avalon_jtag_uart_irq
10010fa0 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10011734 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011bc0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011d18 l     F .text	00000050 alt_get_errno
10011d68 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
10001394 g     F .text	0000001c putchar
100095dc g     F .text	00000074 _mprec_log10
10000a68 g     F .text	000000bc charToHex
100096cc g     F .text	00000084 __any_on
1000dacc g     F .text	00000064 _isatty_r
10012b5c g     O .rodata	00000028 __mprec_tinytens
10010658 g     F .text	00000078 alt_main
1000ff9c g     F .text	00000044 __ashldi3
100013b0 g     F .text	00000084 _puts_r
100168d0 g     O .bss	00000100 alt_irq
1000db30 g     F .text	0000006c _lseek_r
10014ac8 g       *ABS*	00000000 __flash_rwdata_start
1000f3b8 g     F .text	0000005c __eqdf2
10016b60 g       *ABS*	00000000 __alt_heap_start
10001350 g     F .text	0000003c printf
10000d14 g     F .text	00000088 RotWord
10000b8c g     F .text	00000188 SubWord
1000a434 g     F .text	0000005c __sseek
10006824 g     F .text	0000010c __sinit
1000ca7c g     F .text	0000013c __swbuf_r
10007770 g     F .text	0000009c _setlocale_r
1000679c g     F .text	00000078 __sfmoreglue
1000ca60 g     F .text	0000001c ungetc
10000b24 g     F .text	00000068 charsToHex
100106f0 g     F .text	00000020 __malloc_unlock
1000a53c g     F .text	00001548 _strtod_r
10008498 g     F .text	0000018c memmove
10006814 g     F .text	00000010 _cleanup
10008700 g     F .text	000000a8 _Balloc
1000f470 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000cec0 g     F .text	00000068 _fstat_r
1001678c g     O .bss	00000004 errno
10004b08 g     F .text	00000024 __svfscanf
1000fb34 g     F .text	0000002c __make_fp
10016794 g     O .bss	00000004 alt_argv
10000660 g     F .text	00000130 ShiftRows
1001ca88 g       *ABS*	00000000 _gp
10012f44 g     O .rwdata	00000100 sbox
100138a8 g     O .rwdata	00000180 alt_fd_list
1000138c g     F .text	00000008 _putchar_r
1001216c g     F .text	00000090 alt_find_dev
10008358 g     F .text	00000140 memcpy
1000d840 g     F .text	0000028c __hexnan
10006790 g     F .text	0000000c _cleanup_r
1000f5f0 g     F .text	000000d4 __floatsidf
10011ca0 g     F .text	00000078 alt_io_redirect
1000f538 g     F .text	0000005c __ltdf2
100127b8 g       *ABS*	00000000 __DTOR_END__
10001434 g     F .text	00000014 puts
100081dc g     F .text	00000040 mbrtowc
10004abc g     F .text	0000004c _vfscanf_r
10009538 g     F .text	000000a4 __ratio
100111a0 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10001324 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100012ec g     F .text	00000008 __udivsi3
100103a4 g     F .text	000000a4 isatty
10007738 g     F .text	00000038 iswspace
10012bac g     O .rodata	000000c8 __mprec_tens
1000780c g     F .text	0000000c __locale_charset
1000dd18 g     F .text	00000084 __fixunsdfsi
10016788 g     O .bss	00000004 __malloc_top_pad
1000c41c g     F .text	00000024 strtoul
10014a94 g     O .rwdata	00000004 __mb_cur_max
10007818 g     F .text	0000000c _localeconv_r
1000c440 g     F .text	00000394 _strtoull_r
10008b30 g     F .text	0000003c __i2b
100070f4 g     F .text	000004e4 __sfvwrite_r
1000a164 g     F .text	00000064 _sbrk_r
1000db9c g     F .text	0000006c _read_r
10013444 g     O .rwdata	0000000c __lc_ctype
10014ab0 g     O .rwdata	00000004 alt_max_fd
1000fd84 g     F .text	00000104 __unpack_d
1000cd70 g     F .text	0000013c _fclose_r
10006750 g     F .text	00000030 fflush
10016784 g     O .bss	00000004 __malloc_max_sbrked_mem
10000d9c g     F .text	00000200 KeyExpansion
1000ee6c g     F .text	00000054 __adddf3
1000ea14 g     F .text	00000054 __nesf2
100092ac g     F .text	00000148 __b2d
1000e3ec g     F .text	00000628 __umoddi3
10010584 g     F .text	000000d4 lseek
10014a8c g     O .rwdata	00000004 _global_impure_ptr
100098fc g     F .text	000005fc _realloc_r
10016b60 g       *ABS*	00000000 __bss_end
10011ad0 g     F .text	000000f0 alt_iic_isr_register
10012048 g     F .text	00000104 alt_tick
100167d0 g     O .bss	00000100 __hexdig
1000dd9c g     F .text	00000650 __udivdi3
10012b84 g     O .rodata	00000028 __mprec_bigtens
10008914 g     F .text	00000104 __s2b
1000f7e8 g     F .text	0000011c __floatunsidf
1000904c g     F .text	00000058 __mcmp
10014a88 g     O .rwdata	00000004 __ctype_ptr
10006a3c g     F .text	00000018 __fp_lock_all
10011a84 g     F .text	0000004c alt_ic_irq_enabled
10011fb0 g     F .text	00000098 alt_alarm_stop
1000be24 g     F .text	00000024 strtol
1001679c g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000cc alt_irq_handler
10013880 g     O .rwdata	00000028 alt_dev_null
1000f9b0 g     F .text	000000c8 __unpack_f
10011718 g     F .text	0000001c alt_dcache_flush_all
10008a18 g     F .text	00000068 __hi0bits
1000f6c4 g     F .text	000000c4 __fixdfsi
1000ba84 g     F .text	0000001c strtod
10014ac8 g       *ABS*	00000000 __ram_rwdata_end
10014aa8 g     O .rwdata	00000008 alt_dev_list
100109d4 g     F .text	000000f0 write
10009750 g     F .text	000000bc _putc_r
1000ea68 g     F .text	0000005c __gtsf2
10012e1c g       *ABS*	00000000 __ram_rodata_end
100102a4 g     F .text	000000b0 fstat
1000ff58 g     F .text	00000044 __lshrdi3
1000f594 g     F .text	0000005c __ledf2
10008dc4 g     F .text	0000012c __pow5mult
1001677c g     O .bss	00000004 __nlocale_changed
100012f4 g     F .text	00000008 __umodsi3
10001488 g     F .text	0000002c _scanf_r
10016b60 g       *ABS*	00000000 end
1000ffe0 g     F .text	0000012c __pack_f
10010cdc g     F .text	000000c0 altera_avalon_jtag_uart_init
100127b8 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f904 g     F .text	000000ac __clzsi2
100113b8 g     F .text	00000220 altera_avalon_jtag_uart_write
10006a2c g     F .text	00000004 __sfp_lock_acquire
10008260 g     F .text	000000f8 memchr
10001574 g     F .text	00001e7c ___vfprintf_internal_r
1000a294 g     F .text	00000058 _sprintf_r
10006e24 g     F .text	000002d0 _free_r
10000790 g     F .text	00000228 MixColumns
100125dc g     F .text	000001a0 __call_exitprocs
10016778 g     O .bss	00000004 __mlocale_changed
10014a98 g     O .rwdata	00000004 __malloc_sbrk_base
100001b8 g     F .text	0000003c _start
100167a0 g     O .bss	00000004 _alt_tick_rate
1000be48 g     F .text	00000330 _strtoll_r
10008ef0 g     F .text	0000015c __lshift
100167a4 g     O .bss	00000004 _alt_nticks
10010760 g     F .text	000000f4 read
10010b30 g     F .text	00000048 alt_sys_init
100124ac g     F .text	00000130 __register_exitproc
10008b6c g     F .text	00000258 __multiply
10011044 g     F .text	00000068 altera_avalon_jtag_uart_close
100012fc g     F .text	00000028 __mulsi3
10012e1c g       *ABS*	00000000 __ram_rwdata_start
100127b8 g       *ABS*	00000000 __ram_rodata_start
100167a8 g     O .bss	00000028 __malloc_current_mallinfo
100093f4 g     F .text	00000144 __d2b
10010b78 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000c178 g     F .text	000002a4 _strtoul_r
10012310 g     F .text	000000d4 alt_get_fd
1000fe88 g     F .text	000000d0 __fpcmp_parts_d
1000cd0c g     F .text	00000064 _close_r
10012430 g     F .text	0000007c memcmp
10010c38 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100001f4 g     F .text	00000260 AES
10016b60 g       *ABS*	00000000 __alt_stack_base
10010c88 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004b9c g     F .text	00000174 __swsetup_r
1000f204 g     F .text	000001b4 __divdf3
10006930 g     F .text	000000fc __sfp
10009650 g     F .text	0000007c __copybits
10013450 g     O .rwdata	00000408 __malloc_av_
10006a38 g     F .text	00000004 __sinit_lock_release
1000ef20 g     F .text	000002e4 __muldf3
1000a358 g     F .text	00000054 __sread
10006ca8 g     F .text	00000040 fread
100121fc g     F .text	00000114 alt_find_file
10011784 g     F .text	000000a0 alt_dev_llist_insert
100106d0 g     F .text	00000020 __malloc_lock
100108d4 g     F .text	000000b0 sbrk
10006568 g     F .text	000001e8 _fflush_r
100005bc g     F .text	000000a4 SubBytes
1000cc40 g     F .text	000000cc _calloc_r
100009b8 g     F .text	000000b0 xtime
10016774 g       *ABS*	00000000 __bss_start
10008624 g     F .text	000000dc memset
10000f9c g     F .text	00000230 main
10016798 g     O .bss	00000004 alt_envp
10016780 g     O .bss	00000004 __malloc_max_total_mem
10010bd8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000cbb8 g     F .text	0000001c __swbuf
1000eac4 g     F .text	00000054 __ltsf2
10006a6c g     F .text	0000023c _fread_r
1000a490 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000ceac g     F .text	00000014 fclose
1000bbc0 g     F .text	00000264 _strtol_r
1000f788 g     F .text	00000060 __truncdfsf2
100169d0 g     O .bss	00000190 _atexit0
10004f4c g     F .text	0000161c _dtoa_r
100079f4 g     F .text	00000784 _malloc_r
10014ab4 g     O .rwdata	00000004 alt_errno
1000c7d4 g     F .text	000000f0 __submore
100075d8 g     F .text	000000a8 _fwalk
1000821c g     F .text	00000044 _mbtowc_r
1000980c g     F .text	000000f0 putc
10001240 g     F .text	00000050 __divsi3
10012cd4 g     O .rodata	00000014 __thenan_df
10006ce8 g     F .text	0000013c _malloc_trim_r
100127b8 g       *ABS*	00000000 __CTOR_END__
1000a498 g     F .text	000000a4 strcmp
100127b8 g       *ABS*	00000000 __flash_rodata_start
100127b8 g       *ABS*	00000000 __DTOR_LIST__
1000f414 g     F .text	0000005c __nedf2
10010afc g     F .text	00000034 alt_irq_init
10010854 g     F .text	00000080 alt_release_fd
1000a2ec g     F .text	0000006c sprintf
10012ce8 g     O .rodata	00000100 __clz_tab
10016774 g     O .bss	00000004 _PathLocale
1000baa0 g     F .text	00000120 strtof
100123e4 g     F .text	00000014 atexit
1000cbd4 g     F .text	0000006c _write_r
10007824 g     F .text	0000001c setlocale
10001448 g     F .text	00000040 scanf
1000a28c g     F .text	00000008 nanf
10014a90 g     O .rwdata	00000004 _impure_ptr
10016790 g     O .bss	00000004 alt_argc
10008178 g     F .text	00000064 _mbrtowc_r
10011880 g     F .text	0000005c _do_dtors
10009f14 g     F .text	000001ec __srefill_r
10000020 g       .exceptions	00000000 alt_irq_entry
1000924c g     F .text	00000060 __ulp
1000a100 g     F .text	00000038 __isinfd
10006a54 g     F .text	00000018 __fp_unlock_all
10014aa0 g     O .rwdata	00000008 alt_fs_list
10012f1c g     O .rwdata	00000028 Rcon
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007840 g     F .text	0000000c localeconv
100118f8 g     F .text	00000050 alt_ic_isr_register
1000d038 g     F .text	00000090 __hexdig_init
10014ac8 g       *ABS*	00000000 _edata
10016b60 g       *ABS*	00000000 _end
100001b8 g       *ABS*	00000000 __ram_exceptions_end
10004b2c g     F .text	00000070 vfscanf
100110ac g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
100119e4 g     F .text	000000a0 alt_ic_irq_disable
1000a3ac g     F .text	00000088 __swrite
10014a9c g     O .rwdata	00000004 __malloc_trim_threshold
1001214c g     F .text	00000020 altera_nios2_qsys_irq_init
100123f8 g     F .text	00000038 exit
10007680 g     F .text	000000b8 _fwalk_reent
100090a4 g     F .text	000001a8 __mdiff
10001290 g     F .text	0000005c __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006a30 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000a1c8 g     F .text	000000c4 __sccl
10012884 g     O .rodata	00000101 _ctype_
1000fa78 g     F .text	000000bc __fpcmp_parts_f
1001277c g     F .text	0000003c _exit
1000a138 g     F .text	0000002c __isnand
100115d8 g     F .text	00000140 alt_alarm_start
1000dc08 g     F .text	00000110 __muldi3
1000784c g     F .text	000001a8 __smakebuf_r
100014b4 g     F .text	0000008c strlen
10011e58 g     F .text	00000158 open
1000f4d4 g     F .text	00000064 __gedf2
10012e1c g     O .rwdata	00000100 fbox
1000d0c8 g     F .text	00000778 __gethex
100118dc g     F .text	0000001c alt_icache_flush_all
10014abc g     O .rwdata	00000004 alt_priority_mask
10011948 g     F .text	0000009c alt_ic_irq_enable
100033f0 g     F .text	00000024 __vfprintf_internal
1000eec0 g     F .text	00000060 __subdf3
10008a80 g     F .text	000000b0 __lo0bits
10003414 g     F .text	000016a8 __svfscanf_r
10014ac0 g     O .rwdata	00000008 alt_alarm_list
1000c8c4 g     F .text	0000019c _ungetc_r
10000454 g     F .text	00000168 AddRoundKey
10011824 g     F .text	0000005c _do_ctors
1001015c g     F .text	000000cc close
100104b4 g     F .text	00000080 alt_load
1000fb60 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
10006a34 g     F .text	00000004 __sinit_lock_acquire
100087d0 g     F .text	00000144 __multadd
100087a8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406e14 	ori	at,at,440
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18da3404 	addi	r3,r3,26832
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	211a3404 	addi	r4,r4,26832
1000014c:	e0bffd17 	ldw	r2,-12(fp)
10000150:	100490fa 	slli	r2,r2,3
10000154:	2085883a 	add	r2,r4,r2
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
100001a4:	e037883a 	mov	sp,fp
100001a8:	dfc00117 	ldw	ra,4(sp)
100001ac:	df000017 	ldw	fp,0(sp)
100001b0:	dec00204 	addi	sp,sp,8
100001b4:	f800283a 	ret

Disassembly of section .text:

100001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001b8:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c0:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c4:	d6b2a214 	ori	gp,gp,51848
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001c8:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001cc:	1099dd14 	ori	r2,r2,26484

    movhi r3, %hi(__bss_end)
100001d0:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d4:	18dad814 	ori	r3,r3,27488

    beq r2, r3, 1f
100001d8:	10c00326 	beq	r2,r3,100001e8 <_start+0x30>

0:
    stw zero, (r2)
100001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e4:	10fffd36 	bltu	r2,r3,100001dc <__alt_data_end+0xf80001dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001e8:	00104b40 	call	100104b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001ec:	00106580 	call	10010658 <alt_main>

100001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f0:	003fff06 	br	100001f0 <__alt_data_end+0xf80001f0>

100001f4 <AES>:

unsigned char fbox[256] =   {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

void AES(unsigned char in[16], unsigned char out[16], unsigned long w[44])
{
100001f4:	defff004 	addi	sp,sp,-64
100001f8:	dfc00f15 	stw	ra,60(sp)
100001fc:	df000e15 	stw	fp,56(sp)
10000200:	df000e04 	addi	fp,sp,56
10000204:	e13ffd15 	stw	r4,-12(fp)
10000208:	e17ffe15 	stw	r5,-8(fp)
1000020c:	e1bfff15 	stw	r6,-4(fp)
	unsigned char state[16];
	unsigned long temp[4];
	int i, j, k;
	for (i = 0; i < 16; i++)
10000210:	e03ff215 	stw	zero,-56(fp)
10000214:	00000b06 	br	10000244 <AES+0x50>
	{
		state[i] = in[i];
10000218:	e0bff217 	ldw	r2,-56(fp)
1000021c:	e0fffd17 	ldw	r3,-12(fp)
10000220:	1885883a 	add	r2,r3,r2
10000224:	10c00003 	ldbu	r3,0(r2)
10000228:	e13ff504 	addi	r4,fp,-44
1000022c:	e0bff217 	ldw	r2,-56(fp)
10000230:	2085883a 	add	r2,r4,r2
10000234:	10c00005 	stb	r3,0(r2)
void AES(unsigned char in[16], unsigned char out[16], unsigned long w[44])
{
	unsigned char state[16];
	unsigned long temp[4];
	int i, j, k;
	for (i = 0; i < 16; i++)
10000238:	e0bff217 	ldw	r2,-56(fp)
1000023c:	10800044 	addi	r2,r2,1
10000240:	e0bff215 	stw	r2,-56(fp)
10000244:	e0bff217 	ldw	r2,-56(fp)
10000248:	10800410 	cmplti	r2,r2,16
1000024c:	103ff21e 	bne	r2,zero,10000218 <__alt_data_end+0xf8000218>
	{
		state[i] = in[i];
		//printf("%x", state[i]);
	}
	//printf("\n");
	for (i = 0; i < 4; i++)
10000250:	e03ff215 	stw	zero,-56(fp)
10000254:	00001006 	br	10000298 <AES+0xa4>
	{
	 	temp[i] = w[i];
10000258:	e0bff217 	ldw	r2,-56(fp)
1000025c:	1085883a 	add	r2,r2,r2
10000260:	1085883a 	add	r2,r2,r2
10000264:	e0ffff17 	ldw	r3,-4(fp)
10000268:	1885883a 	add	r2,r3,r2
1000026c:	10c00017 	ldw	r3,0(r2)
10000270:	e0bff217 	ldw	r2,-56(fp)
10000274:	1085883a 	add	r2,r2,r2
10000278:	1085883a 	add	r2,r2,r2
1000027c:	e13ff204 	addi	r4,fp,-56
10000280:	2085883a 	add	r2,r4,r2
10000284:	10800704 	addi	r2,r2,28
10000288:	10c00015 	stw	r3,0(r2)
	{
		state[i] = in[i];
		//printf("%x", state[i]);
	}
	//printf("\n");
	for (i = 0; i < 4; i++)
1000028c:	e0bff217 	ldw	r2,-56(fp)
10000290:	10800044 	addi	r2,r2,1
10000294:	e0bff215 	stw	r2,-56(fp)
10000298:	e0bff217 	ldw	r2,-56(fp)
1000029c:	10800110 	cmplti	r2,r2,4
100002a0:	103fed1e 	bne	r2,zero,10000258 <__alt_data_end+0xf8000258>
	{
	 	temp[i] = w[i];
	}
	AddRoundKey(state, temp);
100002a4:	e0fff504 	addi	r3,fp,-44
100002a8:	e0bff904 	addi	r2,fp,-28
100002ac:	1809883a 	mov	r4,r3
100002b0:	100b883a 	mov	r5,r2
100002b4:	00004540 	call	10000454 <AddRoundKey>
	{
		printf("%x", state[i]);
	}
	printf("\n");
	*/
	for(j = 1; j < 10; j++)
100002b8:	00800044 	movi	r2,1
100002bc:	e0bff315 	stw	r2,-52(fp)
100002c0:	00002b06 	br	10000370 <AES+0x17c>
	{
		SubBytes(state);
100002c4:	e0bff504 	addi	r2,fp,-44
100002c8:	1009883a 	mov	r4,r2
100002cc:	00005bc0 	call	100005bc <SubBytes>
				printf("%x", state[i]);
			}
			printf("\n");
		}
		*/
		ShiftRows(state);
100002d0:	e0bff504 	addi	r2,fp,-44
100002d4:	1009883a 	mov	r4,r2
100002d8:	00006600 	call	10000660 <ShiftRows>
				printf("%x", state[i]);
			}
			printf("\n");
		}
		*/
		MixColumns(state);
100002dc:	e0bff504 	addi	r2,fp,-44
100002e0:	1009883a 	mov	r4,r2
100002e4:	00007900 	call	10000790 <MixColumns>
				printf("%x", state[i]);
			}
			printf("\n");
		}
		*/
		for(k = 0; k < 4; k++)
100002e8:	e03ff415 	stw	zero,-48(fp)
100002ec:	00001506 	br	10000344 <AES+0x150>
		{
			temp[k] = w[j*4 + k];
100002f0:	e0bff317 	ldw	r2,-52(fp)
100002f4:	1085883a 	add	r2,r2,r2
100002f8:	1085883a 	add	r2,r2,r2
100002fc:	1007883a 	mov	r3,r2
10000300:	e0bff417 	ldw	r2,-48(fp)
10000304:	1885883a 	add	r2,r3,r2
10000308:	1085883a 	add	r2,r2,r2
1000030c:	1085883a 	add	r2,r2,r2
10000310:	e0ffff17 	ldw	r3,-4(fp)
10000314:	1885883a 	add	r2,r3,r2
10000318:	10c00017 	ldw	r3,0(r2)
1000031c:	e0bff417 	ldw	r2,-48(fp)
10000320:	1085883a 	add	r2,r2,r2
10000324:	1085883a 	add	r2,r2,r2
10000328:	e13ff204 	addi	r4,fp,-56
1000032c:	2085883a 	add	r2,r4,r2
10000330:	10800704 	addi	r2,r2,28
10000334:	10c00015 	stw	r3,0(r2)
				printf("%x", state[i]);
			}
			printf("\n");
		}
		*/
		for(k = 0; k < 4; k++)
10000338:	e0bff417 	ldw	r2,-48(fp)
1000033c:	10800044 	addi	r2,r2,1
10000340:	e0bff415 	stw	r2,-48(fp)
10000344:	e0bff417 	ldw	r2,-48(fp)
10000348:	10800110 	cmplti	r2,r2,4
1000034c:	103fe81e 	bne	r2,zero,100002f0 <__alt_data_end+0xf80002f0>
		{
			temp[k] = w[j*4 + k];
		}
		AddRoundKey(state, temp);
10000350:	e0fff504 	addi	r3,fp,-44
10000354:	e0bff904 	addi	r2,fp,-28
10000358:	1809883a 	mov	r4,r3
1000035c:	100b883a 	mov	r5,r2
10000360:	00004540 	call	10000454 <AddRoundKey>
	{
		printf("%x", state[i]);
	}
	printf("\n");
	*/
	for(j = 1; j < 10; j++)
10000364:	e0bff317 	ldw	r2,-52(fp)
10000368:	10800044 	addi	r2,r2,1
1000036c:	e0bff315 	stw	r2,-52(fp)
10000370:	e0bff317 	ldw	r2,-52(fp)
10000374:	10800290 	cmplti	r2,r2,10
10000378:	103fd21e 	bne	r2,zero,100002c4 <__alt_data_end+0xf80002c4>
		{
			temp[k] = w[j*4 + k];
		}
		AddRoundKey(state, temp);
	}
	SubBytes(state);
1000037c:	e0bff504 	addi	r2,fp,-44
10000380:	1009883a 	mov	r4,r2
10000384:	00005bc0 	call	100005bc <SubBytes>
	ShiftRows(state);
10000388:	e0bff504 	addi	r2,fp,-44
1000038c:	1009883a 	mov	r4,r2
10000390:	00006600 	call	10000660 <ShiftRows>
	for(k = 0; k < 4; k++)
10000394:	e03ff415 	stw	zero,-48(fp)
10000398:	00001106 	br	100003e0 <AES+0x1ec>
	{
		temp[k] = w[40 + k];
1000039c:	e0bff417 	ldw	r2,-48(fp)
100003a0:	10800a04 	addi	r2,r2,40
100003a4:	1085883a 	add	r2,r2,r2
100003a8:	1085883a 	add	r2,r2,r2
100003ac:	e0ffff17 	ldw	r3,-4(fp)
100003b0:	1885883a 	add	r2,r3,r2
100003b4:	10c00017 	ldw	r3,0(r2)
100003b8:	e0bff417 	ldw	r2,-48(fp)
100003bc:	1085883a 	add	r2,r2,r2
100003c0:	1085883a 	add	r2,r2,r2
100003c4:	e13ff204 	addi	r4,fp,-56
100003c8:	2085883a 	add	r2,r4,r2
100003cc:	10800704 	addi	r2,r2,28
100003d0:	10c00015 	stw	r3,0(r2)
		}
		AddRoundKey(state, temp);
	}
	SubBytes(state);
	ShiftRows(state);
	for(k = 0; k < 4; k++)
100003d4:	e0bff417 	ldw	r2,-48(fp)
100003d8:	10800044 	addi	r2,r2,1
100003dc:	e0bff415 	stw	r2,-48(fp)
100003e0:	e0bff417 	ldw	r2,-48(fp)
100003e4:	10800110 	cmplti	r2,r2,4
100003e8:	103fec1e 	bne	r2,zero,1000039c <__alt_data_end+0xf800039c>
	{
		temp[k] = w[40 + k];
	}
	AddRoundKey(state, temp);
100003ec:	e0fff504 	addi	r3,fp,-44
100003f0:	e0bff904 	addi	r2,fp,-28
100003f4:	1809883a 	mov	r4,r3
100003f8:	100b883a 	mov	r5,r2
100003fc:	00004540 	call	10000454 <AddRoundKey>
	for (i = 0; i < 16; i++)
10000400:	e03ff215 	stw	zero,-56(fp)
10000404:	00000b06 	br	10000434 <AES+0x240>
	{
		out[i] = state[i];
10000408:	e0bff217 	ldw	r2,-56(fp)
1000040c:	e0fffe17 	ldw	r3,-8(fp)
10000410:	1885883a 	add	r2,r3,r2
10000414:	e13ff504 	addi	r4,fp,-44
10000418:	e0fff217 	ldw	r3,-56(fp)
1000041c:	20c7883a 	add	r3,r4,r3
10000420:	18c00003 	ldbu	r3,0(r3)
10000424:	10c00005 	stb	r3,0(r2)
	for(k = 0; k < 4; k++)
	{
		temp[k] = w[40 + k];
	}
	AddRoundKey(state, temp);
	for (i = 0; i < 16; i++)
10000428:	e0bff217 	ldw	r2,-56(fp)
1000042c:	10800044 	addi	r2,r2,1
10000430:	e0bff215 	stw	r2,-56(fp)
10000434:	e0bff217 	ldw	r2,-56(fp)
10000438:	10800410 	cmplti	r2,r2,16
1000043c:	103ff21e 	bne	r2,zero,10000408 <__alt_data_end+0xf8000408>
	{
		out[i] = state[i];
	}
}
10000440:	e037883a 	mov	sp,fp
10000444:	dfc00117 	ldw	ra,4(sp)
10000448:	df000017 	ldw	fp,0(sp)
1000044c:	dec00204 	addi	sp,sp,8
10000450:	f800283a 	ret

10000454 <AddRoundKey>:

void AddRoundKey(unsigned char state[16], unsigned long key[4])
{
10000454:	defffc04 	addi	sp,sp,-16
10000458:	df000315 	stw	fp,12(sp)
1000045c:	df000304 	addi	fp,sp,12
10000460:	e13ffe15 	stw	r4,-8(fp)
10000464:	e17fff15 	stw	r5,-4(fp)
	//long : 4 bytes, char : 1 byte
	int i, j;
	unsigned char temp;

	for (i = 0; i < 4; i++)
10000468:	e03ffd15 	stw	zero,-12(fp)
1000046c:	00004c06 	br	100005a0 <AddRoundKey+0x14c>
	{
		state[i] ^= key[0] >> (24 - i * 8);
10000470:	e0bffd17 	ldw	r2,-12(fp)
10000474:	e0fffe17 	ldw	r3,-8(fp)
10000478:	1885883a 	add	r2,r3,r2
1000047c:	e0fffd17 	ldw	r3,-12(fp)
10000480:	e13ffe17 	ldw	r4,-8(fp)
10000484:	20c7883a 	add	r3,r4,r3
10000488:	19000003 	ldbu	r4,0(r3)
1000048c:	e0ffff17 	ldw	r3,-4(fp)
10000490:	19400017 	ldw	r5,0(r3)
10000494:	018000c4 	movi	r6,3
10000498:	e0fffd17 	ldw	r3,-12(fp)
1000049c:	30c7c83a 	sub	r3,r6,r3
100004a0:	180690fa 	slli	r3,r3,3
100004a4:	28c6d83a 	srl	r3,r5,r3
100004a8:	20c6f03a 	xor	r3,r4,r3
100004ac:	10c00005 	stb	r3,0(r2)
		state[4+i] ^= key[1] >> (24 - i * 8);
100004b0:	e0bffd17 	ldw	r2,-12(fp)
100004b4:	10800104 	addi	r2,r2,4
100004b8:	e0fffe17 	ldw	r3,-8(fp)
100004bc:	1885883a 	add	r2,r3,r2
100004c0:	e0fffd17 	ldw	r3,-12(fp)
100004c4:	18c00104 	addi	r3,r3,4
100004c8:	e13ffe17 	ldw	r4,-8(fp)
100004cc:	20c7883a 	add	r3,r4,r3
100004d0:	19000003 	ldbu	r4,0(r3)
100004d4:	e0ffff17 	ldw	r3,-4(fp)
100004d8:	18c00104 	addi	r3,r3,4
100004dc:	19400017 	ldw	r5,0(r3)
100004e0:	018000c4 	movi	r6,3
100004e4:	e0fffd17 	ldw	r3,-12(fp)
100004e8:	30c7c83a 	sub	r3,r6,r3
100004ec:	180690fa 	slli	r3,r3,3
100004f0:	28c6d83a 	srl	r3,r5,r3
100004f4:	20c6f03a 	xor	r3,r4,r3
100004f8:	10c00005 	stb	r3,0(r2)
		state[8+i] ^= key[2] >> (24 - i * 8);
100004fc:	e0bffd17 	ldw	r2,-12(fp)
10000500:	10800204 	addi	r2,r2,8
10000504:	e0fffe17 	ldw	r3,-8(fp)
10000508:	1885883a 	add	r2,r3,r2
1000050c:	e0fffd17 	ldw	r3,-12(fp)
10000510:	18c00204 	addi	r3,r3,8
10000514:	e13ffe17 	ldw	r4,-8(fp)
10000518:	20c7883a 	add	r3,r4,r3
1000051c:	19000003 	ldbu	r4,0(r3)
10000520:	e0ffff17 	ldw	r3,-4(fp)
10000524:	18c00204 	addi	r3,r3,8
10000528:	19400017 	ldw	r5,0(r3)
1000052c:	018000c4 	movi	r6,3
10000530:	e0fffd17 	ldw	r3,-12(fp)
10000534:	30c7c83a 	sub	r3,r6,r3
10000538:	180690fa 	slli	r3,r3,3
1000053c:	28c6d83a 	srl	r3,r5,r3
10000540:	20c6f03a 	xor	r3,r4,r3
10000544:	10c00005 	stb	r3,0(r2)
		state[12+i] ^= key[3] >> (24 - i * 8);
10000548:	e0bffd17 	ldw	r2,-12(fp)
1000054c:	10800304 	addi	r2,r2,12
10000550:	e0fffe17 	ldw	r3,-8(fp)
10000554:	1885883a 	add	r2,r3,r2
10000558:	e0fffd17 	ldw	r3,-12(fp)
1000055c:	18c00304 	addi	r3,r3,12
10000560:	e13ffe17 	ldw	r4,-8(fp)
10000564:	20c7883a 	add	r3,r4,r3
10000568:	19000003 	ldbu	r4,0(r3)
1000056c:	e0ffff17 	ldw	r3,-4(fp)
10000570:	18c00304 	addi	r3,r3,12
10000574:	19400017 	ldw	r5,0(r3)
10000578:	018000c4 	movi	r6,3
1000057c:	e0fffd17 	ldw	r3,-12(fp)
10000580:	30c7c83a 	sub	r3,r6,r3
10000584:	180690fa 	slli	r3,r3,3
10000588:	28c6d83a 	srl	r3,r5,r3
1000058c:	20c6f03a 	xor	r3,r4,r3
10000590:	10c00005 	stb	r3,0(r2)
{
	//long : 4 bytes, char : 1 byte
	int i, j;
	unsigned char temp;

	for (i = 0; i < 4; i++)
10000594:	e0bffd17 	ldw	r2,-12(fp)
10000598:	10800044 	addi	r2,r2,1
1000059c:	e0bffd15 	stw	r2,-12(fp)
100005a0:	e0bffd17 	ldw	r2,-12(fp)
100005a4:	10800110 	cmplti	r2,r2,4
100005a8:	103fb11e 	bne	r2,zero,10000470 <__alt_data_end+0xf8000470>
		{
			temp = key[i] >> (24 - j*8);
			state[j*4+i] = state [j*4+i] ^ temp;
		}
	} */
}
100005ac:	e037883a 	mov	sp,fp
100005b0:	df000017 	ldw	fp,0(sp)
100005b4:	dec00104 	addi	sp,sp,4
100005b8:	f800283a 	ret

100005bc <SubBytes>:

void SubBytes(unsigned char state[16])
{
100005bc:	defffc04 	addi	sp,sp,-16
100005c0:	df000315 	stw	fp,12(sp)
100005c4:	df000304 	addi	fp,sp,12
100005c8:	e13fff15 	stw	r4,-4(fp)
	//length 16 array of byte chars
	//hex values of byte -> row & column
	//unsigned char temp[16] = state;
	unsigned char x, y;
	int i;
	for(i = 0; i < 16; i++)
100005cc:	e03ffd15 	stw	zero,-12(fp)
100005d0:	00001c06 	br	10000644 <SubBytes+0x88>
	{
		y = (state[i]>> 4);
100005d4:	e0bffd17 	ldw	r2,-12(fp)
100005d8:	e0ffff17 	ldw	r3,-4(fp)
100005dc:	1885883a 	add	r2,r3,r2
100005e0:	10800003 	ldbu	r2,0(r2)
100005e4:	10803fcc 	andi	r2,r2,255
100005e8:	1004d13a 	srli	r2,r2,4
100005ec:	e0bffe05 	stb	r2,-8(fp)
		x = state[i] & 0x0F;
100005f0:	e0bffd17 	ldw	r2,-12(fp)
100005f4:	e0ffff17 	ldw	r3,-4(fp)
100005f8:	1885883a 	add	r2,r3,r2
100005fc:	10800003 	ldbu	r2,0(r2)
10000600:	108003cc 	andi	r2,r2,15
10000604:	e0bffe45 	stb	r2,-7(fp)
		state[i] = fbox[y*16 + x];
10000608:	e0bffd17 	ldw	r2,-12(fp)
1000060c:	e0ffff17 	ldw	r3,-4(fp)
10000610:	1885883a 	add	r2,r3,r2
10000614:	e0fffe03 	ldbu	r3,-8(fp)
10000618:	1808913a 	slli	r4,r3,4
1000061c:	e0fffe43 	ldbu	r3,-7(fp)
10000620:	20c7883a 	add	r3,r4,r3
10000624:	01040074 	movhi	r4,4097
10000628:	210b8704 	addi	r4,r4,11804
1000062c:	20c7883a 	add	r3,r4,r3
10000630:	18c00003 	ldbu	r3,0(r3)
10000634:	10c00005 	stb	r3,0(r2)
	//length 16 array of byte chars
	//hex values of byte -> row & column
	//unsigned char temp[16] = state;
	unsigned char x, y;
	int i;
	for(i = 0; i < 16; i++)
10000638:	e0bffd17 	ldw	r2,-12(fp)
1000063c:	10800044 	addi	r2,r2,1
10000640:	e0bffd15 	stw	r2,-12(fp)
10000644:	e0bffd17 	ldw	r2,-12(fp)
10000648:	10800410 	cmplti	r2,r2,16
1000064c:	103fe11e 	bne	r2,zero,100005d4 <__alt_data_end+0xf80005d4>
	{
		y = (state[i]>> 4);
		x = state[i] & 0x0F;
		state[i] = fbox[y*16 + x];
	}
}
10000650:	e037883a 	mov	sp,fp
10000654:	df000017 	ldw	fp,0(sp)
10000658:	dec00104 	addi	sp,sp,4
1000065c:	f800283a 	ret

10000660 <ShiftRows>:

void ShiftRows(unsigned char state[16])
{
10000660:	defffd04 	addi	sp,sp,-12
10000664:	df000215 	stw	fp,8(sp)
10000668:	df000204 	addi	fp,sp,8
1000066c:	e13fff15 	stw	r4,-4(fp)
	unsigned char temp;
	unsigned char temp2;
	//1 shift
	temp = state[1];
10000670:	e0bfff17 	ldw	r2,-4(fp)
10000674:	10800043 	ldbu	r2,1(r2)
10000678:	e0bffe05 	stb	r2,-8(fp)
	state[1] = state[5];
1000067c:	e0bfff17 	ldw	r2,-4(fp)
10000680:	10800044 	addi	r2,r2,1
10000684:	e0ffff17 	ldw	r3,-4(fp)
10000688:	18c00143 	ldbu	r3,5(r3)
1000068c:	10c00005 	stb	r3,0(r2)
	state[5] = state[9];
10000690:	e0bfff17 	ldw	r2,-4(fp)
10000694:	10800144 	addi	r2,r2,5
10000698:	e0ffff17 	ldw	r3,-4(fp)
1000069c:	18c00243 	ldbu	r3,9(r3)
100006a0:	10c00005 	stb	r3,0(r2)
	state[9] = state[13];
100006a4:	e0bfff17 	ldw	r2,-4(fp)
100006a8:	10800244 	addi	r2,r2,9
100006ac:	e0ffff17 	ldw	r3,-4(fp)
100006b0:	18c00343 	ldbu	r3,13(r3)
100006b4:	10c00005 	stb	r3,0(r2)
	state[13] = temp;
100006b8:	e0bfff17 	ldw	r2,-4(fp)
100006bc:	10800344 	addi	r2,r2,13
100006c0:	e0fffe03 	ldbu	r3,-8(fp)
100006c4:	10c00005 	stb	r3,0(r2)
	//2 shift
	temp = state[2];
100006c8:	e0bfff17 	ldw	r2,-4(fp)
100006cc:	10800083 	ldbu	r2,2(r2)
100006d0:	e0bffe05 	stb	r2,-8(fp)
	temp2 = state[6];
100006d4:	e0bfff17 	ldw	r2,-4(fp)
100006d8:	10800183 	ldbu	r2,6(r2)
100006dc:	e0bffe45 	stb	r2,-7(fp)
	state[2] = state[10];
100006e0:	e0bfff17 	ldw	r2,-4(fp)
100006e4:	10800084 	addi	r2,r2,2
100006e8:	e0ffff17 	ldw	r3,-4(fp)
100006ec:	18c00283 	ldbu	r3,10(r3)
100006f0:	10c00005 	stb	r3,0(r2)
	state[6] = state[14];
100006f4:	e0bfff17 	ldw	r2,-4(fp)
100006f8:	10800184 	addi	r2,r2,6
100006fc:	e0ffff17 	ldw	r3,-4(fp)
10000700:	18c00383 	ldbu	r3,14(r3)
10000704:	10c00005 	stb	r3,0(r2)
	state[10] = temp;
10000708:	e0bfff17 	ldw	r2,-4(fp)
1000070c:	10800284 	addi	r2,r2,10
10000710:	e0fffe03 	ldbu	r3,-8(fp)
10000714:	10c00005 	stb	r3,0(r2)
	state[14] = temp2;
10000718:	e0bfff17 	ldw	r2,-4(fp)
1000071c:	10800384 	addi	r2,r2,14
10000720:	e0fffe43 	ldbu	r3,-7(fp)
10000724:	10c00005 	stb	r3,0(r2)
	//3 shift
	temp = state[15];
10000728:	e0bfff17 	ldw	r2,-4(fp)
1000072c:	108003c3 	ldbu	r2,15(r2)
10000730:	e0bffe05 	stb	r2,-8(fp)
	state[15] = state[11];
10000734:	e0bfff17 	ldw	r2,-4(fp)
10000738:	108003c4 	addi	r2,r2,15
1000073c:	e0ffff17 	ldw	r3,-4(fp)
10000740:	18c002c3 	ldbu	r3,11(r3)
10000744:	10c00005 	stb	r3,0(r2)
	state[11] = state[7];
10000748:	e0bfff17 	ldw	r2,-4(fp)
1000074c:	108002c4 	addi	r2,r2,11
10000750:	e0ffff17 	ldw	r3,-4(fp)
10000754:	18c001c3 	ldbu	r3,7(r3)
10000758:	10c00005 	stb	r3,0(r2)
	state[7] = state[3];
1000075c:	e0bfff17 	ldw	r2,-4(fp)
10000760:	108001c4 	addi	r2,r2,7
10000764:	e0ffff17 	ldw	r3,-4(fp)
10000768:	18c000c3 	ldbu	r3,3(r3)
1000076c:	10c00005 	stb	r3,0(r2)
	state[3] = temp;
10000770:	e0bfff17 	ldw	r2,-4(fp)
10000774:	108000c4 	addi	r2,r2,3
10000778:	e0fffe03 	ldbu	r3,-8(fp)
1000077c:	10c00005 	stb	r3,0(r2)
}
10000780:	e037883a 	mov	sp,fp
10000784:	df000017 	ldw	fp,0(sp)
10000788:	dec00104 	addi	sp,sp,4
1000078c:	f800283a 	ret

10000790 <MixColumns>:

void MixColumns(unsigned char state[16])
{
10000790:	defff904 	addi	sp,sp,-28
10000794:	dfc00615 	stw	ra,24(sp)
10000798:	df000515 	stw	fp,20(sp)
1000079c:	dc400415 	stw	r17,16(sp)
100007a0:	dc000315 	stw	r16,12(sp)
100007a4:	df000304 	addi	fp,sp,12
100007a8:	e13fff15 	stw	r4,-4(fp)
	unsigned char a[4];
	unsigned char c;
	unsigned char i;
	for(i = 0; i < 4; i++) {
100007ac:	e03ffd45 	stb	zero,-11(fp)
100007b0:	00007706 	br	10000990 <MixColumns+0x200>
		for(c=0;c<4;c++) {
100007b4:	e03ffd05 	stb	zero,-12(fp)
100007b8:	00001006 	br	100007fc <MixColumns+0x6c>
			a[c] = state[i*4+c];
100007bc:	e13ffd03 	ldbu	r4,-12(fp)
100007c0:	e0bffd43 	ldbu	r2,-11(fp)
100007c4:	1085883a 	add	r2,r2,r2
100007c8:	1085883a 	add	r2,r2,r2
100007cc:	1007883a 	mov	r3,r2
100007d0:	e0bffd03 	ldbu	r2,-12(fp)
100007d4:	1885883a 	add	r2,r3,r2
100007d8:	e0ffff17 	ldw	r3,-4(fp)
100007dc:	1885883a 	add	r2,r3,r2
100007e0:	10c00003 	ldbu	r3,0(r2)
100007e4:	e0bffd84 	addi	r2,fp,-10
100007e8:	1105883a 	add	r2,r2,r4
100007ec:	10c00005 	stb	r3,0(r2)
{
	unsigned char a[4];
	unsigned char c;
	unsigned char i;
	for(i = 0; i < 4; i++) {
		for(c=0;c<4;c++) {
100007f0:	e0bffd03 	ldbu	r2,-12(fp)
100007f4:	10800044 	addi	r2,r2,1
100007f8:	e0bffd05 	stb	r2,-12(fp)
100007fc:	e0bffd03 	ldbu	r2,-12(fp)
10000800:	10800130 	cmpltui	r2,r2,4
10000804:	103fed1e 	bne	r2,zero,100007bc <__alt_data_end+0xf80007bc>
			a[c] = state[i*4+c];
		}
		state[i*4] = xtime(a[0],2) ^ a[3] ^ a[2] ^ xtime(a[1],3);
10000808:	e0bffd43 	ldbu	r2,-11(fp)
1000080c:	1085883a 	add	r2,r2,r2
10000810:	1085883a 	add	r2,r2,r2
10000814:	e0ffff17 	ldw	r3,-4(fp)
10000818:	18a1883a 	add	r16,r3,r2
1000081c:	e0bffd83 	ldbu	r2,-10(fp)
10000820:	10803fcc 	andi	r2,r2,255
10000824:	1009883a 	mov	r4,r2
10000828:	01400084 	movi	r5,2
1000082c:	00009b80 	call	100009b8 <xtime>
10000830:	e0fffe43 	ldbu	r3,-7(fp)
10000834:	10c4f03a 	xor	r2,r2,r3
10000838:	1007883a 	mov	r3,r2
1000083c:	e0bffe03 	ldbu	r2,-8(fp)
10000840:	1884f03a 	xor	r2,r3,r2
10000844:	1023883a 	mov	r17,r2
10000848:	e0bffdc3 	ldbu	r2,-9(fp)
1000084c:	10803fcc 	andi	r2,r2,255
10000850:	1009883a 	mov	r4,r2
10000854:	014000c4 	movi	r5,3
10000858:	00009b80 	call	100009b8 <xtime>
1000085c:	8884f03a 	xor	r2,r17,r2
10000860:	80800005 	stb	r2,0(r16)
		state[i*4+1] = xtime(a[1],2) ^ a[0] ^ a[3] ^ xtime(a[2],3);
10000864:	e0bffd43 	ldbu	r2,-11(fp)
10000868:	1085883a 	add	r2,r2,r2
1000086c:	1085883a 	add	r2,r2,r2
10000870:	10800044 	addi	r2,r2,1
10000874:	e0ffff17 	ldw	r3,-4(fp)
10000878:	18a1883a 	add	r16,r3,r2
1000087c:	e0bffdc3 	ldbu	r2,-9(fp)
10000880:	10803fcc 	andi	r2,r2,255
10000884:	1009883a 	mov	r4,r2
10000888:	01400084 	movi	r5,2
1000088c:	00009b80 	call	100009b8 <xtime>
10000890:	e0fffd83 	ldbu	r3,-10(fp)
10000894:	10c4f03a 	xor	r2,r2,r3
10000898:	1007883a 	mov	r3,r2
1000089c:	e0bffe43 	ldbu	r2,-7(fp)
100008a0:	1884f03a 	xor	r2,r3,r2
100008a4:	1023883a 	mov	r17,r2
100008a8:	e0bffe03 	ldbu	r2,-8(fp)
100008ac:	10803fcc 	andi	r2,r2,255
100008b0:	1009883a 	mov	r4,r2
100008b4:	014000c4 	movi	r5,3
100008b8:	00009b80 	call	100009b8 <xtime>
100008bc:	8884f03a 	xor	r2,r17,r2
100008c0:	80800005 	stb	r2,0(r16)
		state[i*4+2] = xtime(a[2],2) ^ a[1] ^ a[0] ^ xtime(a[3],3);
100008c4:	e0bffd43 	ldbu	r2,-11(fp)
100008c8:	1085883a 	add	r2,r2,r2
100008cc:	1085883a 	add	r2,r2,r2
100008d0:	10800084 	addi	r2,r2,2
100008d4:	e0ffff17 	ldw	r3,-4(fp)
100008d8:	18a1883a 	add	r16,r3,r2
100008dc:	e0bffe03 	ldbu	r2,-8(fp)
100008e0:	10803fcc 	andi	r2,r2,255
100008e4:	1009883a 	mov	r4,r2
100008e8:	01400084 	movi	r5,2
100008ec:	00009b80 	call	100009b8 <xtime>
100008f0:	e0fffdc3 	ldbu	r3,-9(fp)
100008f4:	10c4f03a 	xor	r2,r2,r3
100008f8:	1007883a 	mov	r3,r2
100008fc:	e0bffd83 	ldbu	r2,-10(fp)
10000900:	1884f03a 	xor	r2,r3,r2
10000904:	1023883a 	mov	r17,r2
10000908:	e0bffe43 	ldbu	r2,-7(fp)
1000090c:	10803fcc 	andi	r2,r2,255
10000910:	1009883a 	mov	r4,r2
10000914:	014000c4 	movi	r5,3
10000918:	00009b80 	call	100009b8 <xtime>
1000091c:	8884f03a 	xor	r2,r17,r2
10000920:	80800005 	stb	r2,0(r16)
		state[i*4+3] = xtime(a[3],2) ^a[2] ^ a[1] ^ xtime(a[0],3);
10000924:	e0bffd43 	ldbu	r2,-11(fp)
10000928:	1085883a 	add	r2,r2,r2
1000092c:	1085883a 	add	r2,r2,r2
10000930:	108000c4 	addi	r2,r2,3
10000934:	e0ffff17 	ldw	r3,-4(fp)
10000938:	18a1883a 	add	r16,r3,r2
1000093c:	e0bffe43 	ldbu	r2,-7(fp)
10000940:	10803fcc 	andi	r2,r2,255
10000944:	1009883a 	mov	r4,r2
10000948:	01400084 	movi	r5,2
1000094c:	00009b80 	call	100009b8 <xtime>
10000950:	e0fffe03 	ldbu	r3,-8(fp)
10000954:	10c4f03a 	xor	r2,r2,r3
10000958:	1007883a 	mov	r3,r2
1000095c:	e0bffdc3 	ldbu	r2,-9(fp)
10000960:	1884f03a 	xor	r2,r3,r2
10000964:	1023883a 	mov	r17,r2
10000968:	e0bffd83 	ldbu	r2,-10(fp)
1000096c:	10803fcc 	andi	r2,r2,255
10000970:	1009883a 	mov	r4,r2
10000974:	014000c4 	movi	r5,3
10000978:	00009b80 	call	100009b8 <xtime>
1000097c:	8884f03a 	xor	r2,r17,r2
10000980:	80800005 	stb	r2,0(r16)
void MixColumns(unsigned char state[16])
{
	unsigned char a[4];
	unsigned char c;
	unsigned char i;
	for(i = 0; i < 4; i++) {
10000984:	e0bffd43 	ldbu	r2,-11(fp)
10000988:	10800044 	addi	r2,r2,1
1000098c:	e0bffd45 	stb	r2,-11(fp)
10000990:	e0bffd43 	ldbu	r2,-11(fp)
10000994:	10800130 	cmpltui	r2,r2,4
10000998:	103f861e 	bne	r2,zero,100007b4 <__alt_data_end+0xf80007b4>
		state[i*4+1] = xtime(a[1],2) ^ a[0] ^ a[3] ^ xtime(a[2],3);
		state[i*4+2] = xtime(a[2],2) ^ a[1] ^ a[0] ^ xtime(a[3],3);
		state[i*4+3] = xtime(a[3],2) ^a[2] ^ a[1] ^ xtime(a[0],3);
	}

}
1000099c:	e037883a 	mov	sp,fp
100009a0:	dfc00317 	ldw	ra,12(sp)
100009a4:	df000217 	ldw	fp,8(sp)
100009a8:	dc400117 	ldw	r17,4(sp)
100009ac:	dc000017 	ldw	r16,0(sp)
100009b0:	dec00404 	addi	sp,sp,16
100009b4:	f800283a 	ret

100009b8 <xtime>:

unsigned char xtime(unsigned char a, unsigned char b) {
100009b8:	defffc04 	addi	sp,sp,-16
100009bc:	df000315 	stw	fp,12(sp)
100009c0:	df000304 	addi	fp,sp,12
100009c4:	2007883a 	mov	r3,r4
100009c8:	2805883a 	mov	r2,r5
100009cc:	e0fffe05 	stb	r3,-8(fp)
100009d0:	e0bfff05 	stb	r2,-4(fp)
	unsigned char p = 0;
100009d4:	e03ffd05 	stb	zero,-12(fp)
	unsigned char i;
	unsigned char hi_bit_set;
	for (i = 0; i < 8; i++) {
100009d8:	e03ffd45 	stb	zero,-11(fp)
100009dc:	00001a06 	br	10000a48 <xtime+0x90>
		if ((b & 1))
100009e0:	e0bfff03 	ldbu	r2,-4(fp)
100009e4:	1080004c 	andi	r2,r2,1
100009e8:	10000426 	beq	r2,zero,100009fc <xtime+0x44>
			p ^= a;
100009ec:	e0fffd03 	ldbu	r3,-12(fp)
100009f0:	e0bffe03 	ldbu	r2,-8(fp)
100009f4:	1884f03a 	xor	r2,r3,r2
100009f8:	e0bffd05 	stb	r2,-12(fp)
		hi_bit_set = (a & 0x80);
100009fc:	e0fffe03 	ldbu	r3,-8(fp)
10000a00:	00bfe004 	movi	r2,-128
10000a04:	1884703a 	and	r2,r3,r2
10000a08:	e0bffd85 	stb	r2,-10(fp)
		a <<= 1;
10000a0c:	e0bffe03 	ldbu	r2,-8(fp)
10000a10:	1085883a 	add	r2,r2,r2
10000a14:	e0bffe05 	stb	r2,-8(fp)
		if (hi_bit_set == 0x80)
10000a18:	e0bffd83 	ldbu	r2,-10(fp)
10000a1c:	10802018 	cmpnei	r2,r2,128
10000a20:	1000031e 	bne	r2,zero,10000a30 <xtime+0x78>
			a ^= 0x1b;
10000a24:	e0bffe03 	ldbu	r2,-8(fp)
10000a28:	108006dc 	xori	r2,r2,27
10000a2c:	e0bffe05 	stb	r2,-8(fp)
		b >>= 1;
10000a30:	e0bfff03 	ldbu	r2,-4(fp)
10000a34:	1004d07a 	srli	r2,r2,1
10000a38:	e0bfff05 	stb	r2,-4(fp)

unsigned char xtime(unsigned char a, unsigned char b) {
	unsigned char p = 0;
	unsigned char i;
	unsigned char hi_bit_set;
	for (i = 0; i < 8; i++) {
10000a3c:	e0bffd43 	ldbu	r2,-11(fp)
10000a40:	10800044 	addi	r2,r2,1
10000a44:	e0bffd45 	stb	r2,-11(fp)
10000a48:	e0bffd43 	ldbu	r2,-11(fp)
10000a4c:	10800230 	cmpltui	r2,r2,8
10000a50:	103fe31e 	bne	r2,zero,100009e0 <__alt_data_end+0xf80009e0>
		a <<= 1;
		if (hi_bit_set == 0x80)
			a ^= 0x1b;
		b >>= 1;
	}
	return p;
10000a54:	e0bffd03 	ldbu	r2,-12(fp)
}
10000a58:	e037883a 	mov	sp,fp
10000a5c:	df000017 	ldw	fp,0(sp)
10000a60:	dec00104 	addi	sp,sp,4
10000a64:	f800283a 	ret

10000a68 <charToHex>:

char charToHex(char c)
{
10000a68:	defffd04 	addi	sp,sp,-12
10000a6c:	df000215 	stw	fp,8(sp)
10000a70:	df000204 	addi	fp,sp,8
10000a74:	2005883a 	mov	r2,r4
10000a78:	e0bfff05 	stb	r2,-4(fp)
	char hex = c;
10000a7c:	e0bfff03 	ldbu	r2,-4(fp)
10000a80:	e0bffe05 	stb	r2,-8(fp)

	if (hex >= '0' && hex <= '9')
10000a84:	e0bffe07 	ldb	r2,-8(fp)
10000a88:	10800c10 	cmplti	r2,r2,48
10000a8c:	1000071e 	bne	r2,zero,10000aac <charToHex+0x44>
10000a90:	e0bffe07 	ldb	r2,-8(fp)
10000a94:	10800e88 	cmpgei	r2,r2,58
10000a98:	1000041e 	bne	r2,zero,10000aac <charToHex+0x44>
		hex -= '0';
10000a9c:	e0bffe03 	ldbu	r2,-8(fp)
10000aa0:	10bff404 	addi	r2,r2,-48
10000aa4:	e0bffe05 	stb	r2,-8(fp)
10000aa8:	00001906 	br	10000b10 <charToHex+0xa8>
	else if (hex >= 'A' && hex <= 'F')
10000aac:	e0bffe07 	ldb	r2,-8(fp)
10000ab0:	10801050 	cmplti	r2,r2,65
10000ab4:	10000a1e 	bne	r2,zero,10000ae0 <charToHex+0x78>
10000ab8:	e0bffe07 	ldb	r2,-8(fp)
10000abc:	108011c8 	cmpgei	r2,r2,71
10000ac0:	1000071e 	bne	r2,zero,10000ae0 <charToHex+0x78>
	{
		hex -= 'A';
10000ac4:	e0bffe03 	ldbu	r2,-8(fp)
10000ac8:	10bfefc4 	addi	r2,r2,-65
10000acc:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000ad0:	e0bffe03 	ldbu	r2,-8(fp)
10000ad4:	10800284 	addi	r2,r2,10
10000ad8:	e0bffe05 	stb	r2,-8(fp)
10000adc:	00000c06 	br	10000b10 <charToHex+0xa8>
	}
	else if (hex >= 'a' && hex <= 'f')
10000ae0:	e0bffe07 	ldb	r2,-8(fp)
10000ae4:	10801850 	cmplti	r2,r2,97
10000ae8:	1000091e 	bne	r2,zero,10000b10 <charToHex+0xa8>
10000aec:	e0bffe07 	ldb	r2,-8(fp)
10000af0:	108019c8 	cmpgei	r2,r2,103
10000af4:	1000061e 	bne	r2,zero,10000b10 <charToHex+0xa8>
	{
		hex -= 'a';
10000af8:	e0bffe03 	ldbu	r2,-8(fp)
10000afc:	10bfe7c4 	addi	r2,r2,-97
10000b00:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000b04:	e0bffe03 	ldbu	r2,-8(fp)
10000b08:	10800284 	addi	r2,r2,10
10000b0c:	e0bffe05 	stb	r2,-8(fp)
	}
	return hex;
10000b10:	e0bffe03 	ldbu	r2,-8(fp)
}
10000b14:	e037883a 	mov	sp,fp
10000b18:	df000017 	ldw	fp,0(sp)
10000b1c:	dec00104 	addi	sp,sp,4
10000b20:	f800283a 	ret

10000b24 <charsToHex>:

char charsToHex(char c1, char c2)
{
10000b24:	defffb04 	addi	sp,sp,-20
10000b28:	dfc00415 	stw	ra,16(sp)
10000b2c:	df000315 	stw	fp,12(sp)
10000b30:	df000304 	addi	fp,sp,12
10000b34:	2007883a 	mov	r3,r4
10000b38:	2805883a 	mov	r2,r5
10000b3c:	e0fffe05 	stb	r3,-8(fp)
10000b40:	e0bfff05 	stb	r2,-4(fp)
	char hex1 = charToHex(c1);
10000b44:	e0bffe07 	ldb	r2,-8(fp)
10000b48:	1009883a 	mov	r4,r2
10000b4c:	0000a680 	call	10000a68 <charToHex>
10000b50:	e0bffd05 	stb	r2,-12(fp)
	char hex2 = charToHex(c2);
10000b54:	e0bfff07 	ldb	r2,-4(fp)
10000b58:	1009883a 	mov	r4,r2
10000b5c:	0000a680 	call	10000a68 <charToHex>
10000b60:	e0bffd45 	stb	r2,-11(fp)
	return (hex1 << 4) + hex2;
10000b64:	e0bffd03 	ldbu	r2,-12(fp)
10000b68:	1004913a 	slli	r2,r2,4
10000b6c:	1007883a 	mov	r3,r2
10000b70:	e0bffd43 	ldbu	r2,-11(fp)
10000b74:	1885883a 	add	r2,r3,r2
}
10000b78:	e037883a 	mov	sp,fp
10000b7c:	dfc00117 	ldw	ra,4(sp)
10000b80:	df000017 	ldw	fp,0(sp)
10000b84:	dec00204 	addi	sp,sp,8
10000b88:	f800283a 	ret

10000b8c <SubWord>:
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

unsigned long SubWord(unsigned long word) {
10000b8c:	defff604 	addi	sp,sp,-40
10000b90:	df000915 	stw	fp,36(sp)
10000b94:	df000904 	addi	fp,sp,36
10000b98:	e13fff15 	stw	r4,-4(fp)
	unsigned long x, y;
	unsigned long bite;
	unsigned long result;
	unsigned long firstbyte, secondbyte, thirdbyte, fourthbyte;

	bite = word >> 24;
10000b9c:	e0bfff17 	ldw	r2,-4(fp)
10000ba0:	1004d63a 	srli	r2,r2,24
10000ba4:	e0bff715 	stw	r2,-36(fp)
	y = (bite >> 4);
10000ba8:	e0bff717 	ldw	r2,-36(fp)
10000bac:	1004d13a 	srli	r2,r2,4
10000bb0:	e0bff815 	stw	r2,-32(fp)
	x = bite & 0x0F;
10000bb4:	e0bff717 	ldw	r2,-36(fp)
10000bb8:	108003cc 	andi	r2,r2,15
10000bbc:	e0bff915 	stw	r2,-28(fp)
	firstbyte = sbox[y*16 + x];
10000bc0:	e0bff817 	ldw	r2,-32(fp)
10000bc4:	1006913a 	slli	r3,r2,4
10000bc8:	e0bff917 	ldw	r2,-28(fp)
10000bcc:	1885883a 	add	r2,r3,r2
10000bd0:	00c40074 	movhi	r3,4097
10000bd4:	18cbd104 	addi	r3,r3,12100
10000bd8:	1885883a 	add	r2,r3,r2
10000bdc:	10800003 	ldbu	r2,0(r2)
10000be0:	10803fcc 	andi	r2,r2,255
10000be4:	e0bffa15 	stw	r2,-24(fp)

	bite = (word >> 16) & 0x00FF;
10000be8:	e0bfff17 	ldw	r2,-4(fp)
10000bec:	1004d43a 	srli	r2,r2,16
10000bf0:	10803fcc 	andi	r2,r2,255
10000bf4:	e0bff715 	stw	r2,-36(fp)
	y = (bite >> 4);
10000bf8:	e0bff717 	ldw	r2,-36(fp)
10000bfc:	1004d13a 	srli	r2,r2,4
10000c00:	e0bff815 	stw	r2,-32(fp)
	x = bite & 0x0F;
10000c04:	e0bff717 	ldw	r2,-36(fp)
10000c08:	108003cc 	andi	r2,r2,15
10000c0c:	e0bff915 	stw	r2,-28(fp)
	secondbyte = sbox[y*16 + x];
10000c10:	e0bff817 	ldw	r2,-32(fp)
10000c14:	1006913a 	slli	r3,r2,4
10000c18:	e0bff917 	ldw	r2,-28(fp)
10000c1c:	1885883a 	add	r2,r3,r2
10000c20:	00c40074 	movhi	r3,4097
10000c24:	18cbd104 	addi	r3,r3,12100
10000c28:	1885883a 	add	r2,r3,r2
10000c2c:	10800003 	ldbu	r2,0(r2)
10000c30:	10803fcc 	andi	r2,r2,255
10000c34:	e0bffb15 	stw	r2,-20(fp)

	bite = (word >> 8) & 0x0000FF;
10000c38:	e0bfff17 	ldw	r2,-4(fp)
10000c3c:	1004d23a 	srli	r2,r2,8
10000c40:	10803fcc 	andi	r2,r2,255
10000c44:	e0bff715 	stw	r2,-36(fp)
	y = (bite >> 4);
10000c48:	e0bff717 	ldw	r2,-36(fp)
10000c4c:	1004d13a 	srli	r2,r2,4
10000c50:	e0bff815 	stw	r2,-32(fp)
	x = bite & 0x0F;
10000c54:	e0bff717 	ldw	r2,-36(fp)
10000c58:	108003cc 	andi	r2,r2,15
10000c5c:	e0bff915 	stw	r2,-28(fp)
	thirdbyte = sbox[y*16 + x];
10000c60:	e0bff817 	ldw	r2,-32(fp)
10000c64:	1006913a 	slli	r3,r2,4
10000c68:	e0bff917 	ldw	r2,-28(fp)
10000c6c:	1885883a 	add	r2,r3,r2
10000c70:	00c40074 	movhi	r3,4097
10000c74:	18cbd104 	addi	r3,r3,12100
10000c78:	1885883a 	add	r2,r3,r2
10000c7c:	10800003 	ldbu	r2,0(r2)
10000c80:	10803fcc 	andi	r2,r2,255
10000c84:	e0bffc15 	stw	r2,-16(fp)

	bite = word & 0x000000FF;
10000c88:	e0bfff17 	ldw	r2,-4(fp)
10000c8c:	10803fcc 	andi	r2,r2,255
10000c90:	e0bff715 	stw	r2,-36(fp)
	y = (bite >> 4);
10000c94:	e0bff717 	ldw	r2,-36(fp)
10000c98:	1004d13a 	srli	r2,r2,4
10000c9c:	e0bff815 	stw	r2,-32(fp)
	x = bite & 0x0F;
10000ca0:	e0bff717 	ldw	r2,-36(fp)
10000ca4:	108003cc 	andi	r2,r2,15
10000ca8:	e0bff915 	stw	r2,-28(fp)
	fourthbyte = sbox[y*16 + x];
10000cac:	e0bff817 	ldw	r2,-32(fp)
10000cb0:	1006913a 	slli	r3,r2,4
10000cb4:	e0bff917 	ldw	r2,-28(fp)
10000cb8:	1885883a 	add	r2,r3,r2
10000cbc:	00c40074 	movhi	r3,4097
10000cc0:	18cbd104 	addi	r3,r3,12100
10000cc4:	1885883a 	add	r2,r3,r2
10000cc8:	10800003 	ldbu	r2,0(r2)
10000ccc:	10803fcc 	andi	r2,r2,255
10000cd0:	e0bffd15 	stw	r2,-12(fp)

	result = (firstbyte << 24) + (secondbyte << 16) + (thirdbyte << 8) + fourthbyte;
10000cd4:	e0bffa17 	ldw	r2,-24(fp)
10000cd8:	1006963a 	slli	r3,r2,24
10000cdc:	e0bffb17 	ldw	r2,-20(fp)
10000ce0:	1004943a 	slli	r2,r2,16
10000ce4:	1887883a 	add	r3,r3,r2
10000ce8:	e0bffc17 	ldw	r2,-16(fp)
10000cec:	1004923a 	slli	r2,r2,8
10000cf0:	1887883a 	add	r3,r3,r2
10000cf4:	e0bffd17 	ldw	r2,-12(fp)
10000cf8:	1885883a 	add	r2,r3,r2
10000cfc:	e0bffe15 	stw	r2,-8(fp)
	return result;
10000d00:	e0bffe17 	ldw	r2,-8(fp)

}
10000d04:	e037883a 	mov	sp,fp
10000d08:	df000017 	ldw	fp,0(sp)
10000d0c:	dec00104 	addi	sp,sp,4
10000d10:	f800283a 	ret

10000d14 <RotWord>:

unsigned long RotWord(unsigned long word) {
10000d14:	defff904 	addi	sp,sp,-28
10000d18:	df000615 	stw	fp,24(sp)
10000d1c:	df000604 	addi	fp,sp,24
10000d20:	e13fff15 	stw	r4,-4(fp)
	unsigned long result;
	unsigned long firstbyte, secondbyte, thirdbyte, fourthbyte;
	firstbyte = word >> 24;
10000d24:	e0bfff17 	ldw	r2,-4(fp)
10000d28:	1004d63a 	srli	r2,r2,24
10000d2c:	e0bffa15 	stw	r2,-24(fp)
	secondbyte = (word >> 16) & 0x00FF;
10000d30:	e0bfff17 	ldw	r2,-4(fp)
10000d34:	1004d43a 	srli	r2,r2,16
10000d38:	10803fcc 	andi	r2,r2,255
10000d3c:	e0bffb15 	stw	r2,-20(fp)
	thirdbyte = (word >> 8) & 0x0000FF;
10000d40:	e0bfff17 	ldw	r2,-4(fp)
10000d44:	1004d23a 	srli	r2,r2,8
10000d48:	10803fcc 	andi	r2,r2,255
10000d4c:	e0bffc15 	stw	r2,-16(fp)
	fourthbyte = word & 0x000000FF;
10000d50:	e0bfff17 	ldw	r2,-4(fp)
10000d54:	10803fcc 	andi	r2,r2,255
10000d58:	e0bffd15 	stw	r2,-12(fp)
	result = (secondbyte << 24) + (thirdbyte << 16) + (fourthbyte << 8) + firstbyte;
10000d5c:	e0bffb17 	ldw	r2,-20(fp)
10000d60:	1006963a 	slli	r3,r2,24
10000d64:	e0bffc17 	ldw	r2,-16(fp)
10000d68:	1004943a 	slli	r2,r2,16
10000d6c:	1887883a 	add	r3,r3,r2
10000d70:	e0bffd17 	ldw	r2,-12(fp)
10000d74:	1004923a 	slli	r2,r2,8
10000d78:	1887883a 	add	r3,r3,r2
10000d7c:	e0bffa17 	ldw	r2,-24(fp)
10000d80:	1885883a 	add	r2,r3,r2
10000d84:	e0bffe15 	stw	r2,-8(fp)
	return result;
10000d88:	e0bffe17 	ldw	r2,-8(fp)
}
10000d8c:	e037883a 	mov	sp,fp
10000d90:	df000017 	ldw	fp,0(sp)
10000d94:	dec00104 	addi	sp,sp,4
10000d98:	f800283a 	ret

10000d9c <KeyExpansion>:

void KeyExpansion(unsigned char key[16], unsigned long w[44], int Nk)
{
10000d9c:	defff604 	addi	sp,sp,-40
10000da0:	dfc00915 	stw	ra,36(sp)
10000da4:	df000815 	stw	fp,32(sp)
10000da8:	dc000715 	stw	r16,28(sp)
10000dac:	df000704 	addi	fp,sp,28
10000db0:	e13ffd15 	stw	r4,-12(fp)
10000db4:	e17ffe15 	stw	r5,-8(fp)
10000db8:	e1bfff15 	stw	r6,-4(fp)
	int Nb = 4;
10000dbc:	00800104 	movi	r2,4
10000dc0:	e0bffb15 	stw	r2,-20(fp)
	int Nr = 10;
10000dc4:	00800284 	movi	r2,10
10000dc8:	e0bffc15 	stw	r2,-16(fp)
	unsigned long temp;
	int i = 0;
10000dcc:	e03ffa15 	stw	zero,-24(fp)

	while (i < Nk)
10000dd0:	00002e06 	br	10000e8c <KeyExpansion+0xf0>
	{
		w[i] = (key[4*i] << 24) + (key[4*i+1] << 16) + (key[4*i+2] << 8) + key[4*i+3];
10000dd4:	e0bffa17 	ldw	r2,-24(fp)
10000dd8:	1085883a 	add	r2,r2,r2
10000ddc:	1085883a 	add	r2,r2,r2
10000de0:	e0fffe17 	ldw	r3,-8(fp)
10000de4:	1887883a 	add	r3,r3,r2
10000de8:	e0bffa17 	ldw	r2,-24(fp)
10000dec:	1085883a 	add	r2,r2,r2
10000df0:	1085883a 	add	r2,r2,r2
10000df4:	e13ffd17 	ldw	r4,-12(fp)
10000df8:	2085883a 	add	r2,r4,r2
10000dfc:	10800003 	ldbu	r2,0(r2)
10000e00:	10803fcc 	andi	r2,r2,255
10000e04:	1008963a 	slli	r4,r2,24
10000e08:	e0bffa17 	ldw	r2,-24(fp)
10000e0c:	1085883a 	add	r2,r2,r2
10000e10:	1085883a 	add	r2,r2,r2
10000e14:	10800044 	addi	r2,r2,1
10000e18:	e17ffd17 	ldw	r5,-12(fp)
10000e1c:	2885883a 	add	r2,r5,r2
10000e20:	10800003 	ldbu	r2,0(r2)
10000e24:	10803fcc 	andi	r2,r2,255
10000e28:	1004943a 	slli	r2,r2,16
10000e2c:	2089883a 	add	r4,r4,r2
10000e30:	e0bffa17 	ldw	r2,-24(fp)
10000e34:	1085883a 	add	r2,r2,r2
10000e38:	1085883a 	add	r2,r2,r2
10000e3c:	10800084 	addi	r2,r2,2
10000e40:	e17ffd17 	ldw	r5,-12(fp)
10000e44:	2885883a 	add	r2,r5,r2
10000e48:	10800003 	ldbu	r2,0(r2)
10000e4c:	10803fcc 	andi	r2,r2,255
10000e50:	1004923a 	slli	r2,r2,8
10000e54:	2089883a 	add	r4,r4,r2
10000e58:	e0bffa17 	ldw	r2,-24(fp)
10000e5c:	1085883a 	add	r2,r2,r2
10000e60:	1085883a 	add	r2,r2,r2
10000e64:	108000c4 	addi	r2,r2,3
10000e68:	e17ffd17 	ldw	r5,-12(fp)
10000e6c:	2885883a 	add	r2,r5,r2
10000e70:	10800003 	ldbu	r2,0(r2)
10000e74:	10803fcc 	andi	r2,r2,255
10000e78:	2085883a 	add	r2,r4,r2
10000e7c:	18800015 	stw	r2,0(r3)
		i++;
10000e80:	e0bffa17 	ldw	r2,-24(fp)
10000e84:	10800044 	addi	r2,r2,1
10000e88:	e0bffa15 	stw	r2,-24(fp)
	int Nb = 4;
	int Nr = 10;
	unsigned long temp;
	int i = 0;

	while (i < Nk)
10000e8c:	e0fffa17 	ldw	r3,-24(fp)
10000e90:	e0bfff17 	ldw	r2,-4(fp)
10000e94:	18bfcf16 	blt	r3,r2,10000dd4 <__alt_data_end+0xf8000dd4>
	{
		w[i] = (key[4*i] << 24) + (key[4*i+1] << 16) + (key[4*i+2] << 8) + key[4*i+3];
		i++;
	}
	i = Nk;
10000e98:	e0bfff17 	ldw	r2,-4(fp)
10000e9c:	e0bffa15 	stw	r2,-24(fp)
	while (i < Nb * (Nr + 1))
10000ea0:	00003106 	br	10000f68 <KeyExpansion+0x1cc>
	{
		temp = w[i-1];
10000ea4:	e0bffa17 	ldw	r2,-24(fp)
10000ea8:	10bfffc4 	addi	r2,r2,-1
10000eac:	1085883a 	add	r2,r2,r2
10000eb0:	1085883a 	add	r2,r2,r2
10000eb4:	e0fffe17 	ldw	r3,-8(fp)
10000eb8:	1885883a 	add	r2,r3,r2
10000ebc:	10800017 	ldw	r2,0(r2)
10000ec0:	e0bff915 	stw	r2,-28(fp)
		if ((i % Nk) == 0)
10000ec4:	e0bffa17 	ldw	r2,-24(fp)
10000ec8:	1009883a 	mov	r4,r2
10000ecc:	e17fff17 	ldw	r5,-4(fp)
10000ed0:	00012900 	call	10001290 <__modsi3>
10000ed4:	1000111e 	bne	r2,zero,10000f1c <KeyExpansion+0x180>
		{
			temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk - 1];
10000ed8:	e13ff917 	ldw	r4,-28(fp)
10000edc:	0000d140 	call	10000d14 <RotWord>
10000ee0:	1009883a 	mov	r4,r2
10000ee4:	0000b8c0 	call	10000b8c <SubWord>
10000ee8:	1021883a 	mov	r16,r2
10000eec:	e13ffa17 	ldw	r4,-24(fp)
10000ef0:	e17fff17 	ldw	r5,-4(fp)
10000ef4:	00012400 	call	10001240 <__divsi3>
10000ef8:	10bfffc4 	addi	r2,r2,-1
10000efc:	00c40074 	movhi	r3,4097
10000f00:	18cbc704 	addi	r3,r3,12060
10000f04:	1085883a 	add	r2,r2,r2
10000f08:	1085883a 	add	r2,r2,r2
10000f0c:	1885883a 	add	r2,r3,r2
10000f10:	10800017 	ldw	r2,0(r2)
10000f14:	8084f03a 	xor	r2,r16,r2
10000f18:	e0bff915 	stw	r2,-28(fp)
		}
		w[i] = w[i-Nk] ^ temp;
10000f1c:	e0bffa17 	ldw	r2,-24(fp)
10000f20:	1085883a 	add	r2,r2,r2
10000f24:	1085883a 	add	r2,r2,r2
10000f28:	e0fffe17 	ldw	r3,-8(fp)
10000f2c:	1887883a 	add	r3,r3,r2
10000f30:	e13ffa17 	ldw	r4,-24(fp)
10000f34:	e0bfff17 	ldw	r2,-4(fp)
10000f38:	2085c83a 	sub	r2,r4,r2
10000f3c:	1085883a 	add	r2,r2,r2
10000f40:	1085883a 	add	r2,r2,r2
10000f44:	e13ffe17 	ldw	r4,-8(fp)
10000f48:	2085883a 	add	r2,r4,r2
10000f4c:	11000017 	ldw	r4,0(r2)
10000f50:	e0bff917 	ldw	r2,-28(fp)
10000f54:	2084f03a 	xor	r2,r4,r2
10000f58:	18800015 	stw	r2,0(r3)
		i++;
10000f5c:	e0bffa17 	ldw	r2,-24(fp)
10000f60:	10800044 	addi	r2,r2,1
10000f64:	e0bffa15 	stw	r2,-24(fp)
	{
		w[i] = (key[4*i] << 24) + (key[4*i+1] << 16) + (key[4*i+2] << 8) + key[4*i+3];
		i++;
	}
	i = Nk;
	while (i < Nb * (Nr + 1))
10000f68:	e0bffc17 	ldw	r2,-16(fp)
10000f6c:	10800044 	addi	r2,r2,1
10000f70:	1009883a 	mov	r4,r2
10000f74:	e17ffb17 	ldw	r5,-20(fp)
10000f78:	00012fc0 	call	100012fc <__mulsi3>
10000f7c:	e0fffa17 	ldw	r3,-24(fp)
10000f80:	18bfc816 	blt	r3,r2,10000ea4 <__alt_data_end+0xf8000ea4>
			temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk - 1];
		}
		w[i] = w[i-Nk] ^ temp;
		i++;
	}
};
10000f84:	e037883a 	mov	sp,fp
10000f88:	dfc00217 	ldw	ra,8(sp)
10000f8c:	df000117 	ldw	fp,4(sp)
10000f90:	dc000017 	ldw	r16,0(sp)
10000f94:	dec00304 	addi	sp,sp,12
10000f98:	f800283a 	ret

10000f9c <main>:
#include "AES.h"
#include "keyexpansion.h"
#include <stdio.h>
#include <stdlib.h>

int main() {
10000f9c:	deffb004 	addi	sp,sp,-320
10000fa0:	dfc04f15 	stw	ra,316(sp)
10000fa4:	df004e15 	stw	fp,312(sp)
10000fa8:	df004e04 	addi	fp,sp,312
	int Nk = 4;
10000fac:	00800104 	movi	r2,4
10000fb0:	e0bfb415 	stw	r2,-304(fp)
	int Nb = 4;
10000fb4:	00800104 	movi	r2,4
10000fb8:	e0bfb515 	stw	r2,-300(fp)
	int Nr = 10;
10000fbc:	00800284 	movi	r2,10
10000fc0:	e0bfb615 	stw	r2,-296(fp)
	for (j = 40; j < 44; j++) {
		printf("%x", key_expansion[j]);
	}
	printf("\n");
	*/
	printf("Enter Decrypted Message: ");
10000fc4:	01040074 	movhi	r4,4097
10000fc8:	2109ee04 	addi	r4,r4,10168
10000fcc:	00013500 	call	10001350 <printf>
	scanf("%s", &decrypted_message);
10000fd0:	e0bfbf44 	addi	r2,fp,-259
10000fd4:	01040074 	movhi	r4,4097
10000fd8:	2109f504 	addi	r4,r4,10196
10000fdc:	100b883a 	mov	r5,r2
10000fe0:	00014480 	call	10001448 <scanf>

	printf("Enter Key: ");
10000fe4:	01040074 	movhi	r4,4097
10000fe8:	2109f604 	addi	r4,r4,10200
10000fec:	00013500 	call	10001350 <printf>
	scanf("%s", &key);
10000ff0:	e0bfb704 	addi	r2,fp,-292
10000ff4:	01040074 	movhi	r4,4097
10000ff8:	2109f504 	addi	r4,r4,10196
10000ffc:	100b883a 	mov	r5,r2
10001000:	00014480 	call	10001448 <scanf>

	for (i = 0; i < 16; i++)
10001004:	e03fb215 	stw	zero,-312(fp)
10001008:	00001c06 	br	1000107c <main+0xe0>
	{
		pairs_hex[i] = charsToHex(decrypted_message[2 * i], decrypted_message[2 * i + 1]);
1000100c:	e0bfb217 	ldw	r2,-312(fp)
10001010:	1085883a 	add	r2,r2,r2
10001014:	e0ffbf44 	addi	r3,fp,-259
10001018:	1885883a 	add	r2,r3,r2
1000101c:	10800003 	ldbu	r2,0(r2)
10001020:	10c03fcc 	andi	r3,r2,255
10001024:	18c0201c 	xori	r3,r3,128
10001028:	18ffe004 	addi	r3,r3,-128
1000102c:	e0bfb217 	ldw	r2,-312(fp)
10001030:	1085883a 	add	r2,r2,r2
10001034:	10800044 	addi	r2,r2,1
10001038:	e13fbf44 	addi	r4,fp,-259
1000103c:	2085883a 	add	r2,r4,r2
10001040:	10800003 	ldbu	r2,0(r2)
10001044:	10803fcc 	andi	r2,r2,255
10001048:	1080201c 	xori	r2,r2,128
1000104c:	10bfe004 	addi	r2,r2,-128
10001050:	1809883a 	mov	r4,r3
10001054:	100b883a 	mov	r5,r2
10001058:	0000b240 	call	10000b24 <charsToHex>
1000105c:	1007883a 	mov	r3,r2
10001060:	e13fcb84 	addi	r4,fp,-210
10001064:	e0bfb217 	ldw	r2,-312(fp)
10001068:	2085883a 	add	r2,r4,r2
1000106c:	10c00005 	stb	r3,0(r2)
	scanf("%s", &decrypted_message);

	printf("Enter Key: ");
	scanf("%s", &key);

	for (i = 0; i < 16; i++)
10001070:	e0bfb217 	ldw	r2,-312(fp)
10001074:	10800044 	addi	r2,r2,1
10001078:	e0bfb215 	stw	r2,-312(fp)
1000107c:	e0bfb217 	ldw	r2,-312(fp)
10001080:	10800410 	cmplti	r2,r2,16
10001084:	103fe11e 	bne	r2,zero,1000100c <__alt_data_end+0xf800100c>
	{
		pairs_hex[i] = charsToHex(decrypted_message[2 * i], decrypted_message[2 * i + 1]);
	}

	for (i = 0; i < 16; i++)
10001088:	e03fb215 	stw	zero,-312(fp)
1000108c:	00001c06 	br	10001100 <main+0x164>
	{
		key_pairs_hex[i] = charsToHex(key[2 * i], key[2 * i + 1]);
10001090:	e0bfb217 	ldw	r2,-312(fp)
10001094:	1085883a 	add	r2,r2,r2
10001098:	e0ffb704 	addi	r3,fp,-292
1000109c:	1885883a 	add	r2,r3,r2
100010a0:	10800003 	ldbu	r2,0(r2)
100010a4:	10c03fcc 	andi	r3,r2,255
100010a8:	18c0201c 	xori	r3,r3,128
100010ac:	18ffe004 	addi	r3,r3,-128
100010b0:	e0bfb217 	ldw	r2,-312(fp)
100010b4:	1085883a 	add	r2,r2,r2
100010b8:	10800044 	addi	r2,r2,1
100010bc:	e13fb704 	addi	r4,fp,-292
100010c0:	2085883a 	add	r2,r4,r2
100010c4:	10800003 	ldbu	r2,0(r2)
100010c8:	10803fcc 	andi	r2,r2,255
100010cc:	1080201c 	xori	r2,r2,128
100010d0:	10bfe004 	addi	r2,r2,-128
100010d4:	1809883a 	mov	r4,r3
100010d8:	100b883a 	mov	r5,r2
100010dc:	0000b240 	call	10000b24 <charsToHex>
100010e0:	1007883a 	mov	r3,r2
100010e4:	e13fcf84 	addi	r4,fp,-194
100010e8:	e0bfb217 	ldw	r2,-312(fp)
100010ec:	2085883a 	add	r2,r4,r2
100010f0:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < 16; i++)
	{
		pairs_hex[i] = charsToHex(decrypted_message[2 * i], decrypted_message[2 * i + 1]);
	}

	for (i = 0; i < 16; i++)
100010f4:	e0bfb217 	ldw	r2,-312(fp)
100010f8:	10800044 	addi	r2,r2,1
100010fc:	e0bfb215 	stw	r2,-312(fp)
10001100:	e0bfb217 	ldw	r2,-312(fp)
10001104:	10800410 	cmplti	r2,r2,16
10001108:	103fe11e 	bne	r2,zero,10001090 <__alt_data_end+0xf8001090>
	{
		key_pairs_hex[i] = charsToHex(key[2 * i], key[2 * i + 1]);
	}

	KeyExpansion(key_pairs_hex, key_expansion, Nk);
1000110c:	e0ffcf84 	addi	r3,fp,-194
10001110:	e0bfd404 	addi	r2,fp,-176
10001114:	1809883a 	mov	r4,r3
10001118:	100b883a 	mov	r5,r2
1000111c:	e1bfb417 	ldw	r6,-304(fp)
10001120:	0000d9c0 	call	10000d9c <KeyExpansion>

	int j;
	for (j = 0; j < 500; j++) {
10001124:	e03fb315 	stw	zero,-308(fp)
10001128:	00001c06 	br	1000119c <main+0x200>
	AES(pairs_hex, encrypted_message, key_expansion);
1000112c:	e13fcb84 	addi	r4,fp,-210
10001130:	e0ffc784 	addi	r3,fp,-226
10001134:	e0bfd404 	addi	r2,fp,-176
10001138:	180b883a 	mov	r5,r3
1000113c:	100d883a 	mov	r6,r2
10001140:	00001f40 	call	100001f4 <AES>

	for (i = 0; i < 16; i++)
10001144:	e03fb215 	stw	zero,-312(fp)
10001148:	00000c06 	br	1000117c <main+0x1e0>
	{
		printf("%02x", encrypted_message[i]);
1000114c:	e0ffc784 	addi	r3,fp,-226
10001150:	e0bfb217 	ldw	r2,-312(fp)
10001154:	1885883a 	add	r2,r3,r2
10001158:	10800003 	ldbu	r2,0(r2)
1000115c:	10803fcc 	andi	r2,r2,255
10001160:	01040074 	movhi	r4,4097
10001164:	2109f904 	addi	r4,r4,10212
10001168:	100b883a 	mov	r5,r2
1000116c:	00013500 	call	10001350 <printf>

	int j;
	for (j = 0; j < 500; j++) {
	AES(pairs_hex, encrypted_message, key_expansion);

	for (i = 0; i < 16; i++)
10001170:	e0bfb217 	ldw	r2,-312(fp)
10001174:	10800044 	addi	r2,r2,1
10001178:	e0bfb215 	stw	r2,-312(fp)
1000117c:	e0bfb217 	ldw	r2,-312(fp)
10001180:	10800410 	cmplti	r2,r2,16
10001184:	103ff11e 	bne	r2,zero,1000114c <__alt_data_end+0xf800114c>
	{
		printf("%02x", encrypted_message[i]);
	}
	printf("\n");
10001188:	01000284 	movi	r4,10
1000118c:	00013940 	call	10001394 <putchar>
	}

	KeyExpansion(key_pairs_hex, key_expansion, Nk);

	int j;
	for (j = 0; j < 500; j++) {
10001190:	e0bfb317 	ldw	r2,-308(fp)
10001194:	10800044 	addi	r2,r2,1
10001198:	e0bfb315 	stw	r2,-308(fp)
1000119c:	e0bfb317 	ldw	r2,-308(fp)
100011a0:	10807d10 	cmplti	r2,r2,500
100011a4:	103fe11e 	bne	r2,zero,1000112c <__alt_data_end+0xf800112c>
	{
		printf("%02x", encrypted_message[i]);
	}
	printf("\n");
	}
	printf("done\n");
100011a8:	01040074 	movhi	r4,4097
100011ac:	2109fb04 	addi	r4,r4,10220
100011b0:	00014340 	call	10001434 <puts>
	return 0;
100011b4:	0005883a 	mov	r2,zero
}
100011b8:	e037883a 	mov	sp,fp
100011bc:	dfc00117 	ldw	ra,4(sp)
100011c0:	df000017 	ldw	fp,0(sp)
100011c4:	dec00204 	addi	sp,sp,8
100011c8:	f800283a 	ret

100011cc <udivmodsi4>:
100011cc:	2005883a 	mov	r2,r4
100011d0:	2900182e 	bgeu	r5,r4,10001234 <udivmodsi4+0x68>
100011d4:	28001716 	blt	r5,zero,10001234 <udivmodsi4+0x68>
100011d8:	01000804 	movi	r4,32
100011dc:	00c00044 	movi	r3,1
100011e0:	00000206 	br	100011ec <udivmodsi4+0x20>
100011e4:	20001126 	beq	r4,zero,1000122c <udivmodsi4+0x60>
100011e8:	28000516 	blt	r5,zero,10001200 <udivmodsi4+0x34>
100011ec:	294b883a 	add	r5,r5,r5
100011f0:	213fffc4 	addi	r4,r4,-1
100011f4:	18c7883a 	add	r3,r3,r3
100011f8:	28bffa36 	bltu	r5,r2,100011e4 <__alt_data_end+0xf80011e4>
100011fc:	18000b26 	beq	r3,zero,1000122c <udivmodsi4+0x60>
10001200:	0009883a 	mov	r4,zero
10001204:	11400236 	bltu	r2,r5,10001210 <udivmodsi4+0x44>
10001208:	1145c83a 	sub	r2,r2,r5
1000120c:	20c8b03a 	or	r4,r4,r3
10001210:	1806d07a 	srli	r3,r3,1
10001214:	280ad07a 	srli	r5,r5,1
10001218:	183ffa1e 	bne	r3,zero,10001204 <__alt_data_end+0xf8001204>
1000121c:	3000021e 	bne	r6,zero,10001228 <udivmodsi4+0x5c>
10001220:	2005883a 	mov	r2,r4
10001224:	f800283a 	ret
10001228:	f800283a 	ret
1000122c:	0009883a 	mov	r4,zero
10001230:	003ffa06 	br	1000121c <__alt_data_end+0xf800121c>
10001234:	00c00044 	movi	r3,1
10001238:	0009883a 	mov	r4,zero
1000123c:	003ff106 	br	10001204 <__alt_data_end+0xf8001204>

10001240 <__divsi3>:
10001240:	defffe04 	addi	sp,sp,-8
10001244:	dfc00115 	stw	ra,4(sp)
10001248:	dc000015 	stw	r16,0(sp)
1000124c:	20000a16 	blt	r4,zero,10001278 <__divsi3+0x38>
10001250:	0021883a 	mov	r16,zero
10001254:	28000b16 	blt	r5,zero,10001284 <__divsi3+0x44>
10001258:	000d883a 	mov	r6,zero
1000125c:	00011cc0 	call	100011cc <udivmodsi4>
10001260:	80000126 	beq	r16,zero,10001268 <__divsi3+0x28>
10001264:	0085c83a 	sub	r2,zero,r2
10001268:	dfc00117 	ldw	ra,4(sp)
1000126c:	dc000017 	ldw	r16,0(sp)
10001270:	dec00204 	addi	sp,sp,8
10001274:	f800283a 	ret
10001278:	0109c83a 	sub	r4,zero,r4
1000127c:	04000044 	movi	r16,1
10001280:	283ff50e 	bge	r5,zero,10001258 <__alt_data_end+0xf8001258>
10001284:	014bc83a 	sub	r5,zero,r5
10001288:	8400005c 	xori	r16,r16,1
1000128c:	003ff206 	br	10001258 <__alt_data_end+0xf8001258>

10001290 <__modsi3>:
10001290:	deffff04 	addi	sp,sp,-4
10001294:	dfc00015 	stw	ra,0(sp)
10001298:	20000516 	blt	r4,zero,100012b0 <__modsi3+0x20>
1000129c:	28000c16 	blt	r5,zero,100012d0 <__modsi3+0x40>
100012a0:	01800044 	movi	r6,1
100012a4:	dfc00017 	ldw	ra,0(sp)
100012a8:	dec00104 	addi	sp,sp,4
100012ac:	00011cc1 	jmpi	100011cc <udivmodsi4>
100012b0:	0109c83a 	sub	r4,zero,r4
100012b4:	28000b16 	blt	r5,zero,100012e4 <__modsi3+0x54>
100012b8:	01800044 	movi	r6,1
100012bc:	00011cc0 	call	100011cc <udivmodsi4>
100012c0:	0085c83a 	sub	r2,zero,r2
100012c4:	dfc00017 	ldw	ra,0(sp)
100012c8:	dec00104 	addi	sp,sp,4
100012cc:	f800283a 	ret
100012d0:	014bc83a 	sub	r5,zero,r5
100012d4:	01800044 	movi	r6,1
100012d8:	dfc00017 	ldw	ra,0(sp)
100012dc:	dec00104 	addi	sp,sp,4
100012e0:	00011cc1 	jmpi	100011cc <udivmodsi4>
100012e4:	014bc83a 	sub	r5,zero,r5
100012e8:	003ff306 	br	100012b8 <__alt_data_end+0xf80012b8>

100012ec <__udivsi3>:
100012ec:	000d883a 	mov	r6,zero
100012f0:	00011cc1 	jmpi	100011cc <udivmodsi4>

100012f4 <__umodsi3>:
100012f4:	01800044 	movi	r6,1
100012f8:	00011cc1 	jmpi	100011cc <udivmodsi4>

100012fc <__mulsi3>:
100012fc:	0005883a 	mov	r2,zero
10001300:	20000726 	beq	r4,zero,10001320 <__mulsi3+0x24>
10001304:	20c0004c 	andi	r3,r4,1
10001308:	2008d07a 	srli	r4,r4,1
1000130c:	18000126 	beq	r3,zero,10001314 <__mulsi3+0x18>
10001310:	1145883a 	add	r2,r2,r5
10001314:	294b883a 	add	r5,r5,r5
10001318:	203ffa1e 	bne	r4,zero,10001304 <__alt_data_end+0xf8001304>
1000131c:	f800283a 	ret
10001320:	f800283a 	ret

10001324 <_printf_r>:
10001324:	defffd04 	addi	sp,sp,-12
10001328:	dfc00015 	stw	ra,0(sp)
1000132c:	d9800115 	stw	r6,4(sp)
10001330:	d9c00215 	stw	r7,8(sp)
10001334:	280d883a 	mov	r6,r5
10001338:	21400217 	ldw	r5,8(r4)
1000133c:	d9c00104 	addi	r7,sp,4
10001340:	00015740 	call	10001574 <___vfprintf_internal_r>
10001344:	dfc00017 	ldw	ra,0(sp)
10001348:	dec00304 	addi	sp,sp,12
1000134c:	f800283a 	ret

10001350 <printf>:
10001350:	defffc04 	addi	sp,sp,-16
10001354:	dfc00015 	stw	ra,0(sp)
10001358:	d9400115 	stw	r5,4(sp)
1000135c:	d9800215 	stw	r6,8(sp)
10001360:	d9c00315 	stw	r7,12(sp)
10001364:	00840074 	movhi	r2,4097
10001368:	1092a404 	addi	r2,r2,19088
1000136c:	10800017 	ldw	r2,0(r2)
10001370:	200b883a 	mov	r5,r4
10001374:	d9800104 	addi	r6,sp,4
10001378:	11000217 	ldw	r4,8(r2)
1000137c:	00033f00 	call	100033f0 <__vfprintf_internal>
10001380:	dfc00017 	ldw	ra,0(sp)
10001384:	dec00404 	addi	sp,sp,16
10001388:	f800283a 	ret

1000138c <_putchar_r>:
1000138c:	21800217 	ldw	r6,8(r4)
10001390:	00097501 	jmpi	10009750 <_putc_r>

10001394 <putchar>:
10001394:	00840074 	movhi	r2,4097
10001398:	1092a404 	addi	r2,r2,19088
1000139c:	10800017 	ldw	r2,0(r2)
100013a0:	200b883a 	mov	r5,r4
100013a4:	11800217 	ldw	r6,8(r2)
100013a8:	1009883a 	mov	r4,r2
100013ac:	00097501 	jmpi	10009750 <_putc_r>

100013b0 <_puts_r>:
100013b0:	defff604 	addi	sp,sp,-40
100013b4:	dc400815 	stw	r17,32(sp)
100013b8:	2023883a 	mov	r17,r4
100013bc:	2809883a 	mov	r4,r5
100013c0:	dc000715 	stw	r16,28(sp)
100013c4:	dfc00915 	stw	ra,36(sp)
100013c8:	2821883a 	mov	r16,r5
100013cc:	00014b40 	call	100014b4 <strlen>
100013d0:	10c00044 	addi	r3,r2,1
100013d4:	d8800115 	stw	r2,4(sp)
100013d8:	89400217 	ldw	r5,8(r17)
100013dc:	00840074 	movhi	r2,4097
100013e0:	1089fd04 	addi	r2,r2,10228
100013e4:	d8800215 	stw	r2,8(sp)
100013e8:	00800044 	movi	r2,1
100013ec:	d8800315 	stw	r2,12(sp)
100013f0:	8809883a 	mov	r4,r17
100013f4:	00800084 	movi	r2,2
100013f8:	d9800404 	addi	r6,sp,16
100013fc:	dc000015 	stw	r16,0(sp)
10001400:	d8c00615 	stw	r3,24(sp)
10001404:	dec00415 	stw	sp,16(sp)
10001408:	d8800515 	stw	r2,20(sp)
1000140c:	00070f40 	call	100070f4 <__sfvwrite_r>
10001410:	1000061e 	bne	r2,zero,1000142c <_puts_r+0x7c>
10001414:	00800284 	movi	r2,10
10001418:	dfc00917 	ldw	ra,36(sp)
1000141c:	dc400817 	ldw	r17,32(sp)
10001420:	dc000717 	ldw	r16,28(sp)
10001424:	dec00a04 	addi	sp,sp,40
10001428:	f800283a 	ret
1000142c:	00bfffc4 	movi	r2,-1
10001430:	003ff906 	br	10001418 <__alt_data_end+0xf8001418>

10001434 <puts>:
10001434:	00840074 	movhi	r2,4097
10001438:	1092a404 	addi	r2,r2,19088
1000143c:	200b883a 	mov	r5,r4
10001440:	11000017 	ldw	r4,0(r2)
10001444:	00013b01 	jmpi	100013b0 <_puts_r>

10001448 <scanf>:
10001448:	defffc04 	addi	sp,sp,-16
1000144c:	dfc00015 	stw	ra,0(sp)
10001450:	d9400115 	stw	r5,4(sp)
10001454:	d9800215 	stw	r6,8(sp)
10001458:	d9c00315 	stw	r7,12(sp)
1000145c:	00840074 	movhi	r2,4097
10001460:	1092a404 	addi	r2,r2,19088
10001464:	10800017 	ldw	r2,0(r2)
10001468:	200d883a 	mov	r6,r4
1000146c:	d9c00104 	addi	r7,sp,4
10001470:	11400117 	ldw	r5,4(r2)
10001474:	1009883a 	mov	r4,r2
10001478:	00034140 	call	10003414 <__svfscanf_r>
1000147c:	dfc00017 	ldw	ra,0(sp)
10001480:	dec00404 	addi	sp,sp,16
10001484:	f800283a 	ret

10001488 <_scanf_r>:
10001488:	defffd04 	addi	sp,sp,-12
1000148c:	dfc00015 	stw	ra,0(sp)
10001490:	d9800115 	stw	r6,4(sp)
10001494:	d9c00215 	stw	r7,8(sp)
10001498:	280d883a 	mov	r6,r5
1000149c:	21400117 	ldw	r5,4(r4)
100014a0:	d9c00104 	addi	r7,sp,4
100014a4:	00034140 	call	10003414 <__svfscanf_r>
100014a8:	dfc00017 	ldw	ra,0(sp)
100014ac:	dec00304 	addi	sp,sp,12
100014b0:	f800283a 	ret

100014b4 <strlen>:
100014b4:	208000cc 	andi	r2,r4,3
100014b8:	10001f1e 	bne	r2,zero,10001538 <strlen+0x84>
100014bc:	20800017 	ldw	r2,0(r4)
100014c0:	01ffbff4 	movhi	r7,65279
100014c4:	39ffbfc4 	addi	r7,r7,-257
100014c8:	01a02074 	movhi	r6,32897
100014cc:	31a02004 	addi	r6,r6,-32640
100014d0:	11c7883a 	add	r3,r2,r7
100014d4:	0084303a 	nor	r2,zero,r2
100014d8:	1886703a 	and	r3,r3,r2
100014dc:	1986703a 	and	r3,r3,r6
100014e0:	2005883a 	mov	r2,r4
100014e4:	1800101e 	bne	r3,zero,10001528 <strlen+0x74>
100014e8:	10800104 	addi	r2,r2,4
100014ec:	10c00017 	ldw	r3,0(r2)
100014f0:	19cb883a 	add	r5,r3,r7
100014f4:	00c6303a 	nor	r3,zero,r3
100014f8:	28c6703a 	and	r3,r5,r3
100014fc:	1986703a 	and	r3,r3,r6
10001500:	1800091e 	bne	r3,zero,10001528 <strlen+0x74>
10001504:	10800104 	addi	r2,r2,4
10001508:	10c00017 	ldw	r3,0(r2)
1000150c:	19cb883a 	add	r5,r3,r7
10001510:	00c6303a 	nor	r3,zero,r3
10001514:	28c6703a 	and	r3,r5,r3
10001518:	1986703a 	and	r3,r3,r6
1000151c:	183ff226 	beq	r3,zero,100014e8 <__alt_data_end+0xf80014e8>
10001520:	00000106 	br	10001528 <strlen+0x74>
10001524:	10800044 	addi	r2,r2,1
10001528:	10c00007 	ldb	r3,0(r2)
1000152c:	183ffd1e 	bne	r3,zero,10001524 <__alt_data_end+0xf8001524>
10001530:	1105c83a 	sub	r2,r2,r4
10001534:	f800283a 	ret
10001538:	2005883a 	mov	r2,r4
1000153c:	003ffa06 	br	10001528 <__alt_data_end+0xf8001528>

10001540 <__sprint_r>:
10001540:	30800217 	ldw	r2,8(r6)
10001544:	defffe04 	addi	sp,sp,-8
10001548:	dc000015 	stw	r16,0(sp)
1000154c:	dfc00115 	stw	ra,4(sp)
10001550:	3021883a 	mov	r16,r6
10001554:	10000226 	beq	r2,zero,10001560 <__sprint_r+0x20>
10001558:	00070f40 	call	100070f4 <__sfvwrite_r>
1000155c:	80000215 	stw	zero,8(r16)
10001560:	80000115 	stw	zero,4(r16)
10001564:	dfc00117 	ldw	ra,4(sp)
10001568:	dc000017 	ldw	r16,0(sp)
1000156c:	dec00204 	addi	sp,sp,8
10001570:	f800283a 	ret

10001574 <___vfprintf_internal_r>:
10001574:	defeb904 	addi	sp,sp,-1308
10001578:	dc013d15 	stw	r16,1268(sp)
1000157c:	d9013015 	stw	r4,1216(sp)
10001580:	dfc14615 	stw	ra,1304(sp)
10001584:	df014515 	stw	fp,1300(sp)
10001588:	ddc14415 	stw	r23,1296(sp)
1000158c:	dd814315 	stw	r22,1292(sp)
10001590:	dd414215 	stw	r21,1288(sp)
10001594:	dd014115 	stw	r20,1284(sp)
10001598:	dcc14015 	stw	r19,1280(sp)
1000159c:	dc813f15 	stw	r18,1276(sp)
100015a0:	dc413e15 	stw	r17,1272(sp)
100015a4:	d9412915 	stw	r5,1188(sp)
100015a8:	3021883a 	mov	r16,r6
100015ac:	d9c12d15 	stw	r7,1204(sp)
100015b0:	00078180 	call	10007818 <_localeconv_r>
100015b4:	10800017 	ldw	r2,0(r2)
100015b8:	d9013017 	ldw	r4,1216(sp)
100015bc:	d8013315 	stw	zero,1228(sp)
100015c0:	d8813715 	stw	r2,1244(sp)
100015c4:	d8013415 	stw	zero,1232(sp)
100015c8:	20000226 	beq	r4,zero,100015d4 <___vfprintf_internal_r+0x60>
100015cc:	20800e17 	ldw	r2,56(r4)
100015d0:	10014b26 	beq	r2,zero,10001b00 <___vfprintf_internal_r+0x58c>
100015d4:	d8c12917 	ldw	r3,1188(sp)
100015d8:	1880030b 	ldhu	r2,12(r3)
100015dc:	10c0020c 	andi	r3,r2,8
100015e0:	18ffffcc 	andi	r3,r3,65535
100015e4:	18e0001c 	xori	r3,r3,32768
100015e8:	18e00004 	addi	r3,r3,-32768
100015ec:	1800ed26 	beq	r3,zero,100019a4 <___vfprintf_internal_r+0x430>
100015f0:	d9012917 	ldw	r4,1188(sp)
100015f4:	20c00417 	ldw	r3,16(r4)
100015f8:	1800ea26 	beq	r3,zero,100019a4 <___vfprintf_internal_r+0x430>
100015fc:	1100068c 	andi	r4,r2,26
10001600:	00c00284 	movi	r3,10
10001604:	20c0f026 	beq	r4,r3,100019c8 <___vfprintf_internal_r+0x454>
10001608:	d9010dc4 	addi	r4,sp,1079
1000160c:	d8810e04 	addi	r2,sp,1080
10001610:	dc413017 	ldw	r17,1216(sp)
10001614:	d8c00404 	addi	r3,sp,16
10001618:	d9012615 	stw	r4,1176(sp)
1000161c:	1109c83a 	sub	r4,r2,r4
10001620:	d8812715 	stw	r2,1180(sp)
10001624:	d8c11b15 	stw	r3,1132(sp)
10001628:	d8011d15 	stw	zero,1140(sp)
1000162c:	d8011c15 	stw	zero,1136(sp)
10001630:	802b883a 	mov	r21,r16
10001634:	d8013215 	stw	zero,1224(sp)
10001638:	d8013615 	stw	zero,1240(sp)
1000163c:	d8013515 	stw	zero,1236(sp)
10001640:	d8012c15 	stw	zero,1200(sp)
10001644:	1813883a 	mov	r9,r3
10001648:	d9013915 	stw	r4,1252(sp)
1000164c:	a8800007 	ldb	r2,0(r21)
10001650:	1002f326 	beq	r2,zero,10002220 <___vfprintf_internal_r+0xcac>
10001654:	00c00944 	movi	r3,37
10001658:	a825883a 	mov	r18,r21
1000165c:	10c0021e 	bne	r2,r3,10001668 <___vfprintf_internal_r+0xf4>
10001660:	00001406 	br	100016b4 <___vfprintf_internal_r+0x140>
10001664:	10c00326 	beq	r2,r3,10001674 <___vfprintf_internal_r+0x100>
10001668:	94800044 	addi	r18,r18,1
1000166c:	90800007 	ldb	r2,0(r18)
10001670:	103ffc1e 	bne	r2,zero,10001664 <__alt_data_end+0xf8001664>
10001674:	9561c83a 	sub	r16,r18,r21
10001678:	80000e26 	beq	r16,zero,100016b4 <___vfprintf_internal_r+0x140>
1000167c:	da011d17 	ldw	r8,1140(sp)
10001680:	d8c11c17 	ldw	r3,1136(sp)
10001684:	4d400015 	stw	r21,0(r9)
10001688:	4c000115 	stw	r16,4(r9)
1000168c:	4411883a 	add	r8,r8,r16
10001690:	18c00044 	addi	r3,r3,1
10001694:	da011d15 	stw	r8,1140(sp)
10001698:	d8c11c15 	stw	r3,1136(sp)
1000169c:	008001c4 	movi	r2,7
100016a0:	10c11016 	blt	r2,r3,10001ae4 <___vfprintf_internal_r+0x570>
100016a4:	4a400204 	addi	r9,r9,8
100016a8:	d8812c17 	ldw	r2,1200(sp)
100016ac:	1405883a 	add	r2,r2,r16
100016b0:	d8812c15 	stw	r2,1200(sp)
100016b4:	90800007 	ldb	r2,0(r18)
100016b8:	1000ee26 	beq	r2,zero,10001a74 <___vfprintf_internal_r+0x500>
100016bc:	95400044 	addi	r21,r18,1
100016c0:	94800047 	ldb	r18,1(r18)
100016c4:	073fffc4 	movi	fp,-1
100016c8:	e007883a 	mov	r3,fp
100016cc:	d8012585 	stb	zero,1174(sp)
100016d0:	d8012e15 	stw	zero,1208(sp)
100016d4:	0021883a 	mov	r16,zero
100016d8:	05001604 	movi	r20,88
100016dc:	04c00244 	movi	r19,9
100016e0:	4839883a 	mov	fp,r9
100016e4:	ad400044 	addi	r21,r21,1
100016e8:	90bff804 	addi	r2,r18,-32
100016ec:	a080462e 	bgeu	r20,r2,10001808 <___vfprintf_internal_r+0x294>
100016f0:	e013883a 	mov	r9,fp
100016f4:	9000df26 	beq	r18,zero,10001a74 <___vfprintf_internal_r+0x500>
100016f8:	00c00044 	movi	r3,1
100016fc:	d8c12815 	stw	r3,1184(sp)
10001700:	dc810405 	stb	r18,1040(sp)
10001704:	d8012585 	stb	zero,1174(sp)
10001708:	d8c12b15 	stw	r3,1196(sp)
1000170c:	dcc10404 	addi	r19,sp,1040
10001710:	d8013115 	stw	zero,1220(sp)
10001714:	80c0008c 	andi	r3,r16,2
10001718:	d8c12a15 	stw	r3,1192(sp)
1000171c:	18000326 	beq	r3,zero,1000172c <___vfprintf_internal_r+0x1b8>
10001720:	d8c12817 	ldw	r3,1184(sp)
10001724:	18c00084 	addi	r3,r3,2
10001728:	d8c12815 	stw	r3,1184(sp)
1000172c:	80c0210c 	andi	r3,r16,132
10001730:	d8c12f15 	stw	r3,1212(sp)
10001734:	1802251e 	bne	r3,zero,10001fcc <___vfprintf_internal_r+0xa58>
10001738:	d9012e17 	ldw	r4,1208(sp)
1000173c:	d8c12817 	ldw	r3,1184(sp)
10001740:	20edc83a 	sub	r22,r4,r3
10001744:	0582210e 	bge	zero,r22,10001fcc <___vfprintf_internal_r+0xa58>
10001748:	02800404 	movi	r10,16
1000174c:	da011d17 	ldw	r8,1140(sp)
10001750:	d8c11c17 	ldw	r3,1136(sp)
10001754:	05c40074 	movhi	r23,4097
10001758:	bdca0e84 	addi	r23,r23,10298
1000175c:	5580200e 	bge	r10,r22,100017e0 <___vfprintf_internal_r+0x26c>
10001760:	dc813815 	stw	r18,1248(sp)
10001764:	5039883a 	mov	fp,r10
10001768:	b825883a 	mov	r18,r23
1000176c:	050001c4 	movi	r20,7
10001770:	b02f883a 	mov	r23,r22
10001774:	802d883a 	mov	r22,r16
10001778:	dc012917 	ldw	r16,1188(sp)
1000177c:	00000306 	br	1000178c <___vfprintf_internal_r+0x218>
10001780:	bdfffc04 	addi	r23,r23,-16
10001784:	4a400204 	addi	r9,r9,8
10001788:	e5c0110e 	bge	fp,r23,100017d0 <___vfprintf_internal_r+0x25c>
1000178c:	4c800015 	stw	r18,0(r9)
10001790:	4f000115 	stw	fp,4(r9)
10001794:	42000404 	addi	r8,r8,16
10001798:	18c00044 	addi	r3,r3,1
1000179c:	da011d15 	stw	r8,1140(sp)
100017a0:	d8c11c15 	stw	r3,1136(sp)
100017a4:	a0fff60e 	bge	r20,r3,10001780 <__alt_data_end+0xf8001780>
100017a8:	8809883a 	mov	r4,r17
100017ac:	800b883a 	mov	r5,r16
100017b0:	d9811b04 	addi	r6,sp,1132
100017b4:	00015400 	call	10001540 <__sprint_r>
100017b8:	1000b41e 	bne	r2,zero,10001a8c <___vfprintf_internal_r+0x518>
100017bc:	bdfffc04 	addi	r23,r23,-16
100017c0:	da011d17 	ldw	r8,1140(sp)
100017c4:	d8c11c17 	ldw	r3,1136(sp)
100017c8:	da400404 	addi	r9,sp,16
100017cc:	e5ffef16 	blt	fp,r23,1000178c <__alt_data_end+0xf800178c>
100017d0:	b021883a 	mov	r16,r22
100017d4:	b82d883a 	mov	r22,r23
100017d8:	902f883a 	mov	r23,r18
100017dc:	dc813817 	ldw	r18,1248(sp)
100017e0:	4dc00015 	stw	r23,0(r9)
100017e4:	4d800115 	stw	r22,4(r9)
100017e8:	4591883a 	add	r8,r8,r22
100017ec:	18c00044 	addi	r3,r3,1
100017f0:	da011d15 	stw	r8,1140(sp)
100017f4:	d8c11c15 	stw	r3,1136(sp)
100017f8:	008001c4 	movi	r2,7
100017fc:	10c3fe16 	blt	r2,r3,100027f8 <___vfprintf_internal_r+0x1284>
10001800:	4a400204 	addi	r9,r9,8
10001804:	0001f306 	br	10001fd4 <___vfprintf_internal_r+0xa60>
10001808:	1085883a 	add	r2,r2,r2
1000180c:	1085883a 	add	r2,r2,r2
10001810:	01040034 	movhi	r4,4096
10001814:	21060904 	addi	r4,r4,6180
10001818:	1105883a 	add	r2,r2,r4
1000181c:	10800017 	ldw	r2,0(r2)
10001820:	1000683a 	jmp	r2
10001824:	10001f00 	call	110001f0 <_gp+0xfe3768>
10001828:	100016f0 	cmpltui	zero,r2,91
1000182c:	100016f0 	cmpltui	zero,r2,91
10001830:	10001f18 	cmpnei	zero,r2,124
10001834:	100016f0 	cmpltui	zero,r2,91
10001838:	100016f0 	cmpltui	zero,r2,91
1000183c:	100016f0 	cmpltui	zero,r2,91
10001840:	100016f0 	cmpltui	zero,r2,91
10001844:	100016f0 	cmpltui	zero,r2,91
10001848:	100016f0 	cmpltui	zero,r2,91
1000184c:	10001dd0 	cmplti	zero,r2,119
10001850:	10001f64 	muli	zero,r2,125
10001854:	100016f0 	cmpltui	zero,r2,91
10001858:	10001998 	cmpnei	zero,r2,102
1000185c:	10001d38 	rdprs	zero,r2,116
10001860:	100016f0 	cmpltui	zero,r2,91
10001864:	10001f24 	muli	zero,r2,124
10001868:	10001f30 	cmpltui	zero,r2,124
1000186c:	10001f30 	cmpltui	zero,r2,124
10001870:	10001f30 	cmpltui	zero,r2,124
10001874:	10001f30 	cmpltui	zero,r2,124
10001878:	10001f30 	cmpltui	zero,r2,124
1000187c:	10001f30 	cmpltui	zero,r2,124
10001880:	10001f30 	cmpltui	zero,r2,124
10001884:	10001f30 	cmpltui	zero,r2,124
10001888:	10001f30 	cmpltui	zero,r2,124
1000188c:	100016f0 	cmpltui	zero,r2,91
10001890:	100016f0 	cmpltui	zero,r2,91
10001894:	100016f0 	cmpltui	zero,r2,91
10001898:	100016f0 	cmpltui	zero,r2,91
1000189c:	100016f0 	cmpltui	zero,r2,91
100018a0:	100016f0 	cmpltui	zero,r2,91
100018a4:	100016f0 	cmpltui	zero,r2,91
100018a8:	100016f0 	cmpltui	zero,r2,91
100018ac:	100016f0 	cmpltui	zero,r2,91
100018b0:	100016f0 	cmpltui	zero,r2,91
100018b4:	10001b08 	cmpgei	zero,r2,108
100018b8:	10001bc8 	cmpgei	zero,r2,111
100018bc:	100016f0 	cmpltui	zero,r2,91
100018c0:	10001bc8 	cmpgei	zero,r2,111
100018c4:	100016f0 	cmpltui	zero,r2,91
100018c8:	100016f0 	cmpltui	zero,r2,91
100018cc:	100016f0 	cmpltui	zero,r2,91
100018d0:	100016f0 	cmpltui	zero,r2,91
100018d4:	10001c5c 	xori	zero,r2,113
100018d8:	100016f0 	cmpltui	zero,r2,91
100018dc:	100016f0 	cmpltui	zero,r2,91
100018e0:	10001c68 	cmpgeui	zero,r2,113
100018e4:	100016f0 	cmpltui	zero,r2,91
100018e8:	100016f0 	cmpltui	zero,r2,91
100018ec:	100016f0 	cmpltui	zero,r2,91
100018f0:	100016f0 	cmpltui	zero,r2,91
100018f4:	100016f0 	cmpltui	zero,r2,91
100018f8:	10001ca0 	cmpeqi	zero,r2,114
100018fc:	100016f0 	cmpltui	zero,r2,91
10001900:	100016f0 	cmpltui	zero,r2,91
10001904:	10001cdc 	xori	zero,r2,115
10001908:	100016f0 	cmpltui	zero,r2,91
1000190c:	100016f0 	cmpltui	zero,r2,91
10001910:	100016f0 	cmpltui	zero,r2,91
10001914:	100016f0 	cmpltui	zero,r2,91
10001918:	100016f0 	cmpltui	zero,r2,91
1000191c:	100016f0 	cmpltui	zero,r2,91
10001920:	100016f0 	cmpltui	zero,r2,91
10001924:	100016f0 	cmpltui	zero,r2,91
10001928:	100016f0 	cmpltui	zero,r2,91
1000192c:	100016f0 	cmpltui	zero,r2,91
10001930:	10001f74 	orhi	zero,r2,125
10001934:	10001fa8 	cmpgeui	zero,r2,126
10001938:	10001bc8 	cmpgei	zero,r2,111
1000193c:	10001bc8 	cmpgei	zero,r2,111
10001940:	10001bc8 	cmpgei	zero,r2,111
10001944:	10001ef4 	orhi	zero,r2,123
10001948:	10001fa8 	cmpgeui	zero,r2,126
1000194c:	100016f0 	cmpltui	zero,r2,91
10001950:	100016f0 	cmpltui	zero,r2,91
10001954:	10001d80 	call	110001d8 <_gp+0xfe3750>
10001958:	100016f0 	cmpltui	zero,r2,91
1000195c:	10001d98 	cmpnei	zero,r2,118
10001960:	10001fb4 	orhi	zero,r2,126
10001964:	10001df8 	rdprs	zero,r2,119
10001968:	10001e48 	cmpgei	zero,r2,121
1000196c:	100016f0 	cmpltui	zero,r2,91
10001970:	10001e54 	ori	zero,r2,121
10001974:	100016f0 	cmpltui	zero,r2,91
10001978:	10001fc0 	call	110001fc <_gp+0xfe3774>
1000197c:	100016f0 	cmpltui	zero,r2,91
10001980:	100016f0 	cmpltui	zero,r2,91
10001984:	10001eb8 	rdprs	zero,r2,122
10001988:	d9012e17 	ldw	r4,1208(sp)
1000198c:	d8812d15 	stw	r2,1204(sp)
10001990:	0109c83a 	sub	r4,zero,r4
10001994:	d9012e15 	stw	r4,1208(sp)
10001998:	84000114 	ori	r16,r16,4
1000199c:	ac800007 	ldb	r18,0(r21)
100019a0:	003f5006 	br	100016e4 <__alt_data_end+0xf80016e4>
100019a4:	d9013017 	ldw	r4,1216(sp)
100019a8:	d9412917 	ldw	r5,1188(sp)
100019ac:	0004b9c0 	call	10004b9c <__swsetup_r>
100019b0:	10003d1e 	bne	r2,zero,10001aa8 <___vfprintf_internal_r+0x534>
100019b4:	d8c12917 	ldw	r3,1188(sp)
100019b8:	1880030b 	ldhu	r2,12(r3)
100019bc:	00c00284 	movi	r3,10
100019c0:	1100068c 	andi	r4,r2,26
100019c4:	20ff101e 	bne	r4,r3,10001608 <__alt_data_end+0xf8001608>
100019c8:	d9012917 	ldw	r4,1188(sp)
100019cc:	20c0038b 	ldhu	r3,14(r4)
100019d0:	193fffcc 	andi	r4,r3,65535
100019d4:	2120001c 	xori	r4,r4,32768
100019d8:	21200004 	addi	r4,r4,-32768
100019dc:	203f0a16 	blt	r4,zero,10001608 <__alt_data_end+0xf8001608>
100019e0:	d9012917 	ldw	r4,1188(sp)
100019e4:	d9c12d17 	ldw	r7,1204(sp)
100019e8:	10bfff4c 	andi	r2,r2,65533
100019ec:	22800717 	ldw	r10,28(r4)
100019f0:	22400917 	ldw	r9,36(r4)
100019f4:	d9013017 	ldw	r4,1216(sp)
100019f8:	02010004 	movi	r8,1024
100019fc:	d881070d 	sth	r2,1052(sp)
10001a00:	d9410404 	addi	r5,sp,1040
10001a04:	d8800404 	addi	r2,sp,16
10001a08:	800d883a 	mov	r6,r16
10001a0c:	d8c1078d 	sth	r3,1054(sp)
10001a10:	da810b15 	stw	r10,1068(sp)
10001a14:	da410d15 	stw	r9,1076(sp)
10001a18:	d8810415 	stw	r2,1040(sp)
10001a1c:	d8810815 	stw	r2,1056(sp)
10001a20:	da010615 	stw	r8,1048(sp)
10001a24:	da010915 	stw	r8,1060(sp)
10001a28:	d8010a15 	stw	zero,1064(sp)
10001a2c:	00015740 	call	10001574 <___vfprintf_internal_r>
10001a30:	d8812c15 	stw	r2,1200(sp)
10001a34:	10000416 	blt	r2,zero,10001a48 <___vfprintf_internal_r+0x4d4>
10001a38:	d9013017 	ldw	r4,1216(sp)
10001a3c:	d9410404 	addi	r5,sp,1040
10001a40:	00065680 	call	10006568 <_fflush_r>
10001a44:	1006501e 	bne	r2,zero,10003388 <___vfprintf_internal_r+0x1e14>
10001a48:	d881070b 	ldhu	r2,1052(sp)
10001a4c:	1080100c 	andi	r2,r2,64
10001a50:	10bfffcc 	andi	r2,r2,65535
10001a54:	10a0001c 	xori	r2,r2,32768
10001a58:	10a00004 	addi	r2,r2,-32768
10001a5c:	10001426 	beq	r2,zero,10001ab0 <___vfprintf_internal_r+0x53c>
10001a60:	d8c12917 	ldw	r3,1188(sp)
10001a64:	1880030b 	ldhu	r2,12(r3)
10001a68:	10801014 	ori	r2,r2,64
10001a6c:	1880030d 	sth	r2,12(r3)
10001a70:	00000f06 	br	10001ab0 <___vfprintf_internal_r+0x53c>
10001a74:	d8811d17 	ldw	r2,1140(sp)
10001a78:	10000426 	beq	r2,zero,10001a8c <___vfprintf_internal_r+0x518>
10001a7c:	d9013017 	ldw	r4,1216(sp)
10001a80:	d9412917 	ldw	r5,1188(sp)
10001a84:	d9811b04 	addi	r6,sp,1132
10001a88:	00015400 	call	10001540 <__sprint_r>
10001a8c:	d8c12917 	ldw	r3,1188(sp)
10001a90:	1880030b 	ldhu	r2,12(r3)
10001a94:	1080100c 	andi	r2,r2,64
10001a98:	10bfffcc 	andi	r2,r2,65535
10001a9c:	10a0001c 	xori	r2,r2,32768
10001aa0:	10a00004 	addi	r2,r2,-32768
10001aa4:	10000226 	beq	r2,zero,10001ab0 <___vfprintf_internal_r+0x53c>
10001aa8:	00bfffc4 	movi	r2,-1
10001aac:	d8812c15 	stw	r2,1200(sp)
10001ab0:	d8812c17 	ldw	r2,1200(sp)
10001ab4:	dfc14617 	ldw	ra,1304(sp)
10001ab8:	df014517 	ldw	fp,1300(sp)
10001abc:	ddc14417 	ldw	r23,1296(sp)
10001ac0:	dd814317 	ldw	r22,1292(sp)
10001ac4:	dd414217 	ldw	r21,1288(sp)
10001ac8:	dd014117 	ldw	r20,1284(sp)
10001acc:	dcc14017 	ldw	r19,1280(sp)
10001ad0:	dc813f17 	ldw	r18,1276(sp)
10001ad4:	dc413e17 	ldw	r17,1272(sp)
10001ad8:	dc013d17 	ldw	r16,1268(sp)
10001adc:	dec14704 	addi	sp,sp,1308
10001ae0:	f800283a 	ret
10001ae4:	d9412917 	ldw	r5,1188(sp)
10001ae8:	8809883a 	mov	r4,r17
10001aec:	d9811b04 	addi	r6,sp,1132
10001af0:	00015400 	call	10001540 <__sprint_r>
10001af4:	103fe51e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10001af8:	da400404 	addi	r9,sp,16
10001afc:	003eea06 	br	100016a8 <__alt_data_end+0xf80016a8>
10001b00:	00068240 	call	10006824 <__sinit>
10001b04:	003eb306 	br	100015d4 <__alt_data_end+0xf80015d4>
10001b08:	e013883a 	mov	r9,fp
10001b0c:	84000414 	ori	r16,r16,16
10001b10:	1839883a 	mov	fp,r3
10001b14:	8080080c 	andi	r2,r16,32
10001b18:	10034426 	beq	r2,zero,1000282c <___vfprintf_internal_r+0x12b8>
10001b1c:	d8c12d17 	ldw	r3,1204(sp)
10001b20:	18800117 	ldw	r2,4(r3)
10001b24:	1dc00017 	ldw	r23,0(r3)
10001b28:	18c00204 	addi	r3,r3,8
10001b2c:	d8c12d15 	stw	r3,1204(sp)
10001b30:	102d883a 	mov	r22,r2
10001b34:	1003020e 	bge	r2,zero,10002740 <___vfprintf_internal_r+0x11cc>
10001b38:	05efc83a 	sub	r23,zero,r23
10001b3c:	b804c03a 	cmpne	r2,r23,zero
10001b40:	05adc83a 	sub	r22,zero,r22
10001b44:	b0adc83a 	sub	r22,r22,r2
10001b48:	00800b44 	movi	r2,45
10001b4c:	d8812585 	stb	r2,1174(sp)
10001b50:	00c00044 	movi	r3,1
10001b54:	bd84b03a 	or	r2,r23,r22
10001b58:	e0000216 	blt	fp,zero,10001b64 <___vfprintf_internal_r+0x5f0>
10001b5c:	013fdfc4 	movi	r4,-129
10001b60:	8120703a 	and	r16,r16,r4
10001b64:	1001cc1e 	bne	r2,zero,10002298 <___vfprintf_internal_r+0xd24>
10001b68:	e001cb1e 	bne	fp,zero,10002298 <___vfprintf_internal_r+0xd24>
10001b6c:	18c03fcc 	andi	r3,r3,255
10001b70:	1802ca1e 	bne	r3,zero,1000269c <___vfprintf_internal_r+0x1128>
10001b74:	8080004c 	andi	r2,r16,1
10001b78:	1002c826 	beq	r2,zero,1000269c <___vfprintf_internal_r+0x1128>
10001b7c:	d8c13917 	ldw	r3,1252(sp)
10001b80:	00800c04 	movi	r2,48
10001b84:	d8810dc5 	stb	r2,1079(sp)
10001b88:	d8c12b15 	stw	r3,1196(sp)
10001b8c:	dcc10dc4 	addi	r19,sp,1079
10001b90:	d8812b17 	ldw	r2,1196(sp)
10001b94:	d8812815 	stw	r2,1184(sp)
10001b98:	1700010e 	bge	r2,fp,10001ba0 <___vfprintf_internal_r+0x62c>
10001b9c:	df012815 	stw	fp,1184(sp)
10001ba0:	d8812583 	ldbu	r2,1174(sp)
10001ba4:	df013115 	stw	fp,1220(sp)
10001ba8:	10803fcc 	andi	r2,r2,255
10001bac:	1080201c 	xori	r2,r2,128
10001bb0:	10bfe004 	addi	r2,r2,-128
10001bb4:	103ed726 	beq	r2,zero,10001714 <__alt_data_end+0xf8001714>
10001bb8:	d8c12817 	ldw	r3,1184(sp)
10001bbc:	18c00044 	addi	r3,r3,1
10001bc0:	d8c12815 	stw	r3,1184(sp)
10001bc4:	003ed306 	br	10001714 <__alt_data_end+0xf8001714>
10001bc8:	8080020c 	andi	r2,r16,8
10001bcc:	e013883a 	mov	r9,fp
10001bd0:	1839883a 	mov	fp,r3
10001bd4:	1003a626 	beq	r2,zero,10002a70 <___vfprintf_internal_r+0x14fc>
10001bd8:	d9012d17 	ldw	r4,1204(sp)
10001bdc:	25800017 	ldw	r22,0(r4)
10001be0:	25000117 	ldw	r20,4(r4)
10001be4:	21000204 	addi	r4,r4,8
10001be8:	d9012d15 	stw	r4,1204(sp)
10001bec:	dd813315 	stw	r22,1228(sp)
10001bf0:	dd013415 	stw	r20,1232(sp)
10001bf4:	b009883a 	mov	r4,r22
10001bf8:	a00b883a 	mov	r5,r20
10001bfc:	da413c15 	stw	r9,1264(sp)
10001c00:	000a1000 	call	1000a100 <__isinfd>
10001c04:	da413c17 	ldw	r9,1264(sp)
10001c08:	b009883a 	mov	r4,r22
10001c0c:	a00b883a 	mov	r5,r20
10001c10:	10041d26 	beq	r2,zero,10002c88 <___vfprintf_internal_r+0x1714>
10001c14:	000d883a 	mov	r6,zero
10001c18:	000f883a 	mov	r7,zero
10001c1c:	000f5380 	call	1000f538 <__ltdf2>
10001c20:	da413c17 	ldw	r9,1264(sp)
10001c24:	1004da16 	blt	r2,zero,10002f90 <___vfprintf_internal_r+0x1a1c>
10001c28:	d8812583 	ldbu	r2,1174(sp)
10001c2c:	00c011c4 	movi	r3,71
10001c30:	1c83d116 	blt	r3,r18,10002b78 <___vfprintf_internal_r+0x1604>
10001c34:	04c40074 	movhi	r19,4097
10001c38:	9cc9fe04 	addi	r19,r19,10232
10001c3c:	00c000c4 	movi	r3,3
10001c40:	d8c12815 	stw	r3,1184(sp)
10001c44:	00ffdfc4 	movi	r3,-129
10001c48:	80e0703a 	and	r16,r16,r3
10001c4c:	d8c12817 	ldw	r3,1184(sp)
10001c50:	d8013115 	stw	zero,1220(sp)
10001c54:	d8c12b15 	stw	r3,1196(sp)
10001c58:	003fd306 	br	10001ba8 <__alt_data_end+0xf8001ba8>
10001c5c:	84000214 	ori	r16,r16,8
10001c60:	ac800007 	ldb	r18,0(r21)
10001c64:	003e9f06 	br	100016e4 <__alt_data_end+0xf80016e4>
10001c68:	e013883a 	mov	r9,fp
10001c6c:	84000414 	ori	r16,r16,16
10001c70:	1839883a 	mov	fp,r3
10001c74:	8080080c 	andi	r2,r16,32
10001c78:	10031d26 	beq	r2,zero,100028f0 <___vfprintf_internal_r+0x137c>
10001c7c:	d8812d17 	ldw	r2,1204(sp)
10001c80:	0007883a 	mov	r3,zero
10001c84:	15c00017 	ldw	r23,0(r2)
10001c88:	15800117 	ldw	r22,4(r2)
10001c8c:	10800204 	addi	r2,r2,8
10001c90:	d8812d15 	stw	r2,1204(sp)
10001c94:	d8012585 	stb	zero,1174(sp)
10001c98:	bd84b03a 	or	r2,r23,r22
10001c9c:	003fae06 	br	10001b58 <__alt_data_end+0xf8001b58>
10001ca0:	e013883a 	mov	r9,fp
10001ca4:	84000414 	ori	r16,r16,16
10001ca8:	1839883a 	mov	fp,r3
10001cac:	8080080c 	andi	r2,r16,32
10001cb0:	1002e726 	beq	r2,zero,10002850 <___vfprintf_internal_r+0x12dc>
10001cb4:	d8c12d17 	ldw	r3,1204(sp)
10001cb8:	d9012d17 	ldw	r4,1204(sp)
10001cbc:	1dc00017 	ldw	r23,0(r3)
10001cc0:	1d800117 	ldw	r22,4(r3)
10001cc4:	21000204 	addi	r4,r4,8
10001cc8:	00c00044 	movi	r3,1
10001ccc:	d9012d15 	stw	r4,1204(sp)
10001cd0:	bd84b03a 	or	r2,r23,r22
10001cd4:	d8012585 	stb	zero,1174(sp)
10001cd8:	003f9f06 	br	10001b58 <__alt_data_end+0xf8001b58>
10001cdc:	e013883a 	mov	r9,fp
10001ce0:	1839883a 	mov	fp,r3
10001ce4:	00c40074 	movhi	r3,4097
10001ce8:	18ca0204 	addi	r3,r3,10248
10001cec:	d8c13615 	stw	r3,1240(sp)
10001cf0:	8080080c 	andi	r2,r16,32
10001cf4:	10007726 	beq	r2,zero,10001ed4 <___vfprintf_internal_r+0x960>
10001cf8:	d9012d17 	ldw	r4,1204(sp)
10001cfc:	25c00017 	ldw	r23,0(r4)
10001d00:	25800117 	ldw	r22,4(r4)
10001d04:	21000204 	addi	r4,r4,8
10001d08:	d9012d15 	stw	r4,1204(sp)
10001d0c:	8080004c 	andi	r2,r16,1
10001d10:	1002c226 	beq	r2,zero,1000281c <___vfprintf_internal_r+0x12a8>
10001d14:	bd84b03a 	or	r2,r23,r22
10001d18:	10035d26 	beq	r2,zero,10002a90 <___vfprintf_internal_r+0x151c>
10001d1c:	00c00c04 	movi	r3,48
10001d20:	d8c12505 	stb	r3,1172(sp)
10001d24:	dc812545 	stb	r18,1173(sp)
10001d28:	84000094 	ori	r16,r16,2
10001d2c:	00c00084 	movi	r3,2
10001d30:	d8012585 	stb	zero,1174(sp)
10001d34:	003f8806 	br	10001b58 <__alt_data_end+0xf8001b58>
10001d38:	ac800007 	ldb	r18,0(r21)
10001d3c:	00c00a84 	movi	r3,42
10001d40:	adc00044 	addi	r23,r21,1
10001d44:	90c57526 	beq	r18,r3,1000331c <___vfprintf_internal_r+0x1da8>
10001d48:	95bff404 	addi	r22,r18,-48
10001d4c:	0009883a 	mov	r4,zero
10001d50:	9d84ff36 	bltu	r19,r22,10003150 <___vfprintf_internal_r+0x1bdc>
10001d54:	01400284 	movi	r5,10
10001d58:	00012fc0 	call	100012fc <__mulsi3>
10001d5c:	bc800007 	ldb	r18,0(r23)
10001d60:	b089883a 	add	r4,r22,r2
10001d64:	bdc00044 	addi	r23,r23,1
10001d68:	95bff404 	addi	r22,r18,-48
10001d6c:	9dbff92e 	bgeu	r19,r22,10001d54 <__alt_data_end+0xf8001d54>
10001d70:	2007883a 	mov	r3,r4
10001d74:	20044316 	blt	r4,zero,10002e84 <___vfprintf_internal_r+0x1910>
10001d78:	b82b883a 	mov	r21,r23
10001d7c:	003e5a06 	br	100016e8 <__alt_data_end+0xf80016e8>
10001d80:	ac800007 	ldb	r18,0(r21)
10001d84:	01001b04 	movi	r4,108
10001d88:	a805883a 	mov	r2,r21
10001d8c:	91045526 	beq	r18,r4,10002ee4 <___vfprintf_internal_r+0x1970>
10001d90:	84000414 	ori	r16,r16,16
10001d94:	003e5306 	br	100016e4 <__alt_data_end+0xf80016e4>
10001d98:	8080080c 	andi	r2,r16,32
10001d9c:	e013883a 	mov	r9,fp
10001da0:	10034026 	beq	r2,zero,10002aa4 <___vfprintf_internal_r+0x1530>
10001da4:	d9012d17 	ldw	r4,1204(sp)
10001da8:	20800017 	ldw	r2,0(r4)
10001dac:	d9012c17 	ldw	r4,1200(sp)
10001db0:	2007d7fa 	srai	r3,r4,31
10001db4:	d9012d17 	ldw	r4,1204(sp)
10001db8:	10c00115 	stw	r3,4(r2)
10001dbc:	21000104 	addi	r4,r4,4
10001dc0:	d9012d15 	stw	r4,1204(sp)
10001dc4:	d9012c17 	ldw	r4,1200(sp)
10001dc8:	11000015 	stw	r4,0(r2)
10001dcc:	003e1f06 	br	1000164c <__alt_data_end+0xf800164c>
10001dd0:	d9012d17 	ldw	r4,1204(sp)
10001dd4:	21000017 	ldw	r4,0(r4)
10001dd8:	d9012e15 	stw	r4,1208(sp)
10001ddc:	d9012d17 	ldw	r4,1204(sp)
10001de0:	20800104 	addi	r2,r4,4
10001de4:	d9012e17 	ldw	r4,1208(sp)
10001de8:	203ee716 	blt	r4,zero,10001988 <__alt_data_end+0xf8001988>
10001dec:	d8812d15 	stw	r2,1204(sp)
10001df0:	ac800007 	ldb	r18,0(r21)
10001df4:	003e3b06 	br	100016e4 <__alt_data_end+0xf80016e4>
10001df8:	e013883a 	mov	r9,fp
10001dfc:	1839883a 	mov	fp,r3
10001e00:	d8c12d17 	ldw	r3,1204(sp)
10001e04:	00800c04 	movi	r2,48
10001e08:	01040074 	movhi	r4,4097
10001e0c:	210a0704 	addi	r4,r4,10268
10001e10:	1dc00017 	ldw	r23,0(r3)
10001e14:	18c00104 	addi	r3,r3,4
10001e18:	d8812505 	stb	r2,1172(sp)
10001e1c:	00801e04 	movi	r2,120
10001e20:	d8812545 	stb	r2,1173(sp)
10001e24:	d8c12d15 	stw	r3,1204(sp)
10001e28:	002d883a 	mov	r22,zero
10001e2c:	84000094 	ori	r16,r16,2
10001e30:	d9013615 	stw	r4,1240(sp)
10001e34:	00c00084 	movi	r3,2
10001e38:	04801e04 	movi	r18,120
10001e3c:	b805883a 	mov	r2,r23
10001e40:	d8012585 	stb	zero,1174(sp)
10001e44:	003f4406 	br	10001b58 <__alt_data_end+0xf8001b58>
10001e48:	84000814 	ori	r16,r16,32
10001e4c:	ac800007 	ldb	r18,0(r21)
10001e50:	003e2406 	br	100016e4 <__alt_data_end+0xf80016e4>
10001e54:	d8812d17 	ldw	r2,1204(sp)
10001e58:	d8012585 	stb	zero,1174(sp)
10001e5c:	e013883a 	mov	r9,fp
10001e60:	14c00017 	ldw	r19,0(r2)
10001e64:	1839883a 	mov	fp,r3
10001e68:	15c00104 	addi	r23,r2,4
10001e6c:	98045526 	beq	r19,zero,10002fc4 <___vfprintf_internal_r+0x1a50>
10001e70:	9809883a 	mov	r4,r19
10001e74:	18043116 	blt	r3,zero,10002f3c <___vfprintf_internal_r+0x19c8>
10001e78:	000b883a 	mov	r5,zero
10001e7c:	180d883a 	mov	r6,r3
10001e80:	da413c15 	stw	r9,1264(sp)
10001e84:	00082600 	call	10008260 <memchr>
10001e88:	da413c17 	ldw	r9,1264(sp)
10001e8c:	10047a26 	beq	r2,zero,10003078 <___vfprintf_internal_r+0x1b04>
10001e90:	14c5c83a 	sub	r2,r2,r19
10001e94:	d8812b15 	stw	r2,1196(sp)
10001e98:	e083d40e 	bge	fp,r2,10002dec <___vfprintf_internal_r+0x1878>
10001e9c:	df012815 	stw	fp,1184(sp)
10001ea0:	e004e416 	blt	fp,zero,10003234 <___vfprintf_internal_r+0x1cc0>
10001ea4:	d8812583 	ldbu	r2,1174(sp)
10001ea8:	df012b15 	stw	fp,1196(sp)
10001eac:	ddc12d15 	stw	r23,1204(sp)
10001eb0:	d8013115 	stw	zero,1220(sp)
10001eb4:	003f3c06 	br	10001ba8 <__alt_data_end+0xf8001ba8>
10001eb8:	00840074 	movhi	r2,4097
10001ebc:	108a0704 	addi	r2,r2,10268
10001ec0:	d8813615 	stw	r2,1240(sp)
10001ec4:	8080080c 	andi	r2,r16,32
10001ec8:	e013883a 	mov	r9,fp
10001ecc:	1839883a 	mov	fp,r3
10001ed0:	103f891e 	bne	r2,zero,10001cf8 <__alt_data_end+0xf8001cf8>
10001ed4:	8080040c 	andi	r2,r16,16
10001ed8:	1002c326 	beq	r2,zero,100029e8 <___vfprintf_internal_r+0x1474>
10001edc:	d8812d17 	ldw	r2,1204(sp)
10001ee0:	002d883a 	mov	r22,zero
10001ee4:	15c00017 	ldw	r23,0(r2)
10001ee8:	10800104 	addi	r2,r2,4
10001eec:	d8812d15 	stw	r2,1204(sp)
10001ef0:	003f8606 	br	10001d0c <__alt_data_end+0xf8001d0c>
10001ef4:	84001014 	ori	r16,r16,64
10001ef8:	ac800007 	ldb	r18,0(r21)
10001efc:	003df906 	br	100016e4 <__alt_data_end+0xf80016e4>
10001f00:	d8812587 	ldb	r2,1174(sp)
10001f04:	1002e51e 	bne	r2,zero,10002a9c <___vfprintf_internal_r+0x1528>
10001f08:	00800804 	movi	r2,32
10001f0c:	d8812585 	stb	r2,1174(sp)
10001f10:	ac800007 	ldb	r18,0(r21)
10001f14:	003df306 	br	100016e4 <__alt_data_end+0xf80016e4>
10001f18:	84000054 	ori	r16,r16,1
10001f1c:	ac800007 	ldb	r18,0(r21)
10001f20:	003df006 	br	100016e4 <__alt_data_end+0xf80016e4>
10001f24:	84002014 	ori	r16,r16,128
10001f28:	ac800007 	ldb	r18,0(r21)
10001f2c:	003ded06 	br	100016e4 <__alt_data_end+0xf80016e4>
10001f30:	0009883a 	mov	r4,zero
10001f34:	95bff404 	addi	r22,r18,-48
10001f38:	182f883a 	mov	r23,r3
10001f3c:	01400284 	movi	r5,10
10001f40:	00012fc0 	call	100012fc <__mulsi3>
10001f44:	ac800007 	ldb	r18,0(r21)
10001f48:	1589883a 	add	r4,r2,r22
10001f4c:	ad400044 	addi	r21,r21,1
10001f50:	95bff404 	addi	r22,r18,-48
10001f54:	9dbff92e 	bgeu	r19,r22,10001f3c <__alt_data_end+0xf8001f3c>
10001f58:	b807883a 	mov	r3,r23
10001f5c:	d9012e15 	stw	r4,1208(sp)
10001f60:	003de106 	br	100016e8 <__alt_data_end+0xf80016e8>
10001f64:	00800ac4 	movi	r2,43
10001f68:	d8812585 	stb	r2,1174(sp)
10001f6c:	ac800007 	ldb	r18,0(r21)
10001f70:	003ddc06 	br	100016e4 <__alt_data_end+0xf80016e4>
10001f74:	d8c12d17 	ldw	r3,1204(sp)
10001f78:	d9012d17 	ldw	r4,1204(sp)
10001f7c:	e013883a 	mov	r9,fp
10001f80:	18800017 	ldw	r2,0(r3)
10001f84:	21000104 	addi	r4,r4,4
10001f88:	00c00044 	movi	r3,1
10001f8c:	d8c12815 	stw	r3,1184(sp)
10001f90:	d8012585 	stb	zero,1174(sp)
10001f94:	d8810405 	stb	r2,1040(sp)
10001f98:	d9012d15 	stw	r4,1204(sp)
10001f9c:	d8c12b15 	stw	r3,1196(sp)
10001fa0:	dcc10404 	addi	r19,sp,1040
10001fa4:	003dda06 	br	10001710 <__alt_data_end+0xf8001710>
10001fa8:	e013883a 	mov	r9,fp
10001fac:	1839883a 	mov	fp,r3
10001fb0:	003ed806 	br	10001b14 <__alt_data_end+0xf8001b14>
10001fb4:	e013883a 	mov	r9,fp
10001fb8:	1839883a 	mov	fp,r3
10001fbc:	003f2d06 	br	10001c74 <__alt_data_end+0xf8001c74>
10001fc0:	e013883a 	mov	r9,fp
10001fc4:	1839883a 	mov	fp,r3
10001fc8:	003f3806 	br	10001cac <__alt_data_end+0xf8001cac>
10001fcc:	da011d17 	ldw	r8,1140(sp)
10001fd0:	d8c11c17 	ldw	r3,1136(sp)
10001fd4:	d8812587 	ldb	r2,1174(sp)
10001fd8:	10000b26 	beq	r2,zero,10002008 <___vfprintf_internal_r+0xa94>
10001fdc:	d8812584 	addi	r2,sp,1174
10001fe0:	48800015 	stw	r2,0(r9)
10001fe4:	00800044 	movi	r2,1
10001fe8:	48800115 	stw	r2,4(r9)
10001fec:	4091883a 	add	r8,r8,r2
10001ff0:	1887883a 	add	r3,r3,r2
10001ff4:	da011d15 	stw	r8,1140(sp)
10001ff8:	d8c11c15 	stw	r3,1136(sp)
10001ffc:	008001c4 	movi	r2,7
10002000:	10c18e16 	blt	r2,r3,1000263c <___vfprintf_internal_r+0x10c8>
10002004:	4a400204 	addi	r9,r9,8
10002008:	d9012a17 	ldw	r4,1192(sp)
1000200c:	20000b26 	beq	r4,zero,1000203c <___vfprintf_internal_r+0xac8>
10002010:	d8812504 	addi	r2,sp,1172
10002014:	48800015 	stw	r2,0(r9)
10002018:	00800084 	movi	r2,2
1000201c:	48800115 	stw	r2,4(r9)
10002020:	4091883a 	add	r8,r8,r2
10002024:	18c00044 	addi	r3,r3,1
10002028:	da011d15 	stw	r8,1140(sp)
1000202c:	d8c11c15 	stw	r3,1136(sp)
10002030:	008001c4 	movi	r2,7
10002034:	10c17816 	blt	r2,r3,10002618 <___vfprintf_internal_r+0x10a4>
10002038:	4a400204 	addi	r9,r9,8
1000203c:	d9012f17 	ldw	r4,1212(sp)
10002040:	00802004 	movi	r2,128
10002044:	2080fc26 	beq	r4,r2,10002438 <___vfprintf_internal_r+0xec4>
10002048:	d8813117 	ldw	r2,1220(sp)
1000204c:	d9012b17 	ldw	r4,1196(sp)
10002050:	112fc83a 	sub	r23,r2,r4
10002054:	05c02a0e 	bge	zero,r23,10002100 <___vfprintf_internal_r+0xb8c>
10002058:	07000404 	movi	fp,16
1000205c:	05040074 	movhi	r20,4097
10002060:	a50a1284 	addi	r20,r20,10314
10002064:	e5c01d0e 	bge	fp,r23,100020dc <___vfprintf_internal_r+0xb68>
10002068:	dc812a15 	stw	r18,1192(sp)
1000206c:	058001c4 	movi	r22,7
10002070:	a025883a 	mov	r18,r20
10002074:	8029883a 	mov	r20,r16
10002078:	dc012917 	ldw	r16,1188(sp)
1000207c:	00000306 	br	1000208c <___vfprintf_internal_r+0xb18>
10002080:	bdfffc04 	addi	r23,r23,-16
10002084:	4a400204 	addi	r9,r9,8
10002088:	e5c0110e 	bge	fp,r23,100020d0 <___vfprintf_internal_r+0xb5c>
1000208c:	4c800015 	stw	r18,0(r9)
10002090:	4f000115 	stw	fp,4(r9)
10002094:	42000404 	addi	r8,r8,16
10002098:	18c00044 	addi	r3,r3,1
1000209c:	da011d15 	stw	r8,1140(sp)
100020a0:	d8c11c15 	stw	r3,1136(sp)
100020a4:	b0fff60e 	bge	r22,r3,10002080 <__alt_data_end+0xf8002080>
100020a8:	8809883a 	mov	r4,r17
100020ac:	800b883a 	mov	r5,r16
100020b0:	d9811b04 	addi	r6,sp,1132
100020b4:	00015400 	call	10001540 <__sprint_r>
100020b8:	103e741e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
100020bc:	bdfffc04 	addi	r23,r23,-16
100020c0:	da011d17 	ldw	r8,1140(sp)
100020c4:	d8c11c17 	ldw	r3,1136(sp)
100020c8:	da400404 	addi	r9,sp,16
100020cc:	e5ffef16 	blt	fp,r23,1000208c <__alt_data_end+0xf800208c>
100020d0:	a021883a 	mov	r16,r20
100020d4:	9029883a 	mov	r20,r18
100020d8:	dc812a17 	ldw	r18,1192(sp)
100020dc:	4d000015 	stw	r20,0(r9)
100020e0:	4dc00115 	stw	r23,4(r9)
100020e4:	45d1883a 	add	r8,r8,r23
100020e8:	18c00044 	addi	r3,r3,1
100020ec:	da011d15 	stw	r8,1140(sp)
100020f0:	d8c11c15 	stw	r3,1136(sp)
100020f4:	008001c4 	movi	r2,7
100020f8:	10c13e16 	blt	r2,r3,100025f4 <___vfprintf_internal_r+0x1080>
100020fc:	4a400204 	addi	r9,r9,8
10002100:	8080400c 	andi	r2,r16,256
10002104:	1000831e 	bne	r2,zero,10002314 <___vfprintf_internal_r+0xda0>
10002108:	d8812b17 	ldw	r2,1196(sp)
1000210c:	4cc00015 	stw	r19,0(r9)
10002110:	48800115 	stw	r2,4(r9)
10002114:	4091883a 	add	r8,r8,r2
10002118:	18c00044 	addi	r3,r3,1
1000211c:	da011d15 	stw	r8,1140(sp)
10002120:	d8c11c15 	stw	r3,1136(sp)
10002124:	008001c4 	movi	r2,7
10002128:	10c05316 	blt	r2,r3,10002278 <___vfprintf_internal_r+0xd04>
1000212c:	4a400204 	addi	r9,r9,8
10002130:	8400010c 	andi	r16,r16,4
10002134:	80002e26 	beq	r16,zero,100021f0 <___vfprintf_internal_r+0xc7c>
10002138:	d8812e17 	ldw	r2,1208(sp)
1000213c:	d8c12817 	ldw	r3,1184(sp)
10002140:	10e1c83a 	sub	r16,r2,r3
10002144:	04002a0e 	bge	zero,r16,100021f0 <___vfprintf_internal_r+0xc7c>
10002148:	04800404 	movi	r18,16
1000214c:	d8c11c17 	ldw	r3,1136(sp)
10002150:	05c40074 	movhi	r23,4097
10002154:	bdca0e84 	addi	r23,r23,10298
10002158:	9400170e 	bge	r18,r16,100021b8 <___vfprintf_internal_r+0xc44>
1000215c:	04c001c4 	movi	r19,7
10002160:	dd012917 	ldw	r20,1188(sp)
10002164:	00000306 	br	10002174 <___vfprintf_internal_r+0xc00>
10002168:	843ffc04 	addi	r16,r16,-16
1000216c:	4a400204 	addi	r9,r9,8
10002170:	9400110e 	bge	r18,r16,100021b8 <___vfprintf_internal_r+0xc44>
10002174:	4dc00015 	stw	r23,0(r9)
10002178:	4c800115 	stw	r18,4(r9)
1000217c:	42000404 	addi	r8,r8,16
10002180:	18c00044 	addi	r3,r3,1
10002184:	da011d15 	stw	r8,1140(sp)
10002188:	d8c11c15 	stw	r3,1136(sp)
1000218c:	98fff60e 	bge	r19,r3,10002168 <__alt_data_end+0xf8002168>
10002190:	8809883a 	mov	r4,r17
10002194:	a00b883a 	mov	r5,r20
10002198:	d9811b04 	addi	r6,sp,1132
1000219c:	00015400 	call	10001540 <__sprint_r>
100021a0:	103e3a1e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
100021a4:	843ffc04 	addi	r16,r16,-16
100021a8:	da011d17 	ldw	r8,1140(sp)
100021ac:	d8c11c17 	ldw	r3,1136(sp)
100021b0:	da400404 	addi	r9,sp,16
100021b4:	943fef16 	blt	r18,r16,10002174 <__alt_data_end+0xf8002174>
100021b8:	4dc00015 	stw	r23,0(r9)
100021bc:	4c000115 	stw	r16,4(r9)
100021c0:	8211883a 	add	r8,r16,r8
100021c4:	18c00044 	addi	r3,r3,1
100021c8:	da011d15 	stw	r8,1140(sp)
100021cc:	d8c11c15 	stw	r3,1136(sp)
100021d0:	008001c4 	movi	r2,7
100021d4:	10c0060e 	bge	r2,r3,100021f0 <___vfprintf_internal_r+0xc7c>
100021d8:	d9412917 	ldw	r5,1188(sp)
100021dc:	8809883a 	mov	r4,r17
100021e0:	d9811b04 	addi	r6,sp,1132
100021e4:	00015400 	call	10001540 <__sprint_r>
100021e8:	103e281e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
100021ec:	da011d17 	ldw	r8,1140(sp)
100021f0:	dd012817 	ldw	r20,1184(sp)
100021f4:	d9012e17 	ldw	r4,1208(sp)
100021f8:	a100010e 	bge	r20,r4,10002200 <___vfprintf_internal_r+0xc8c>
100021fc:	2029883a 	mov	r20,r4
10002200:	d8812c17 	ldw	r2,1200(sp)
10002204:	1505883a 	add	r2,r2,r20
10002208:	d8812c15 	stw	r2,1200(sp)
1000220c:	4000b91e 	bne	r8,zero,100024f4 <___vfprintf_internal_r+0xf80>
10002210:	d8011c15 	stw	zero,1136(sp)
10002214:	a8800007 	ldb	r2,0(r21)
10002218:	da400404 	addi	r9,sp,16
1000221c:	103d0d1e 	bne	r2,zero,10001654 <__alt_data_end+0xf8001654>
10002220:	a825883a 	mov	r18,r21
10002224:	003d2306 	br	100016b4 <__alt_data_end+0xf80016b4>
10002228:	d9412917 	ldw	r5,1188(sp)
1000222c:	8809883a 	mov	r4,r17
10002230:	d9811b04 	addi	r6,sp,1132
10002234:	00015400 	call	10001540 <__sprint_r>
10002238:	103e141e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
1000223c:	da011d17 	ldw	r8,1140(sp)
10002240:	da400404 	addi	r9,sp,16
10002244:	8080004c 	andi	r2,r16,1
10002248:	103fb926 	beq	r2,zero,10002130 <__alt_data_end+0xf8002130>
1000224c:	d8c11c17 	ldw	r3,1136(sp)
10002250:	d9013717 	ldw	r4,1244(sp)
10002254:	00800044 	movi	r2,1
10002258:	48800115 	stw	r2,4(r9)
1000225c:	49000015 	stw	r4,0(r9)
10002260:	4091883a 	add	r8,r8,r2
10002264:	1887883a 	add	r3,r3,r2
10002268:	da011d15 	stw	r8,1140(sp)
1000226c:	d8c11c15 	stw	r3,1136(sp)
10002270:	008001c4 	movi	r2,7
10002274:	10ffad0e 	bge	r2,r3,1000212c <__alt_data_end+0xf800212c>
10002278:	d9412917 	ldw	r5,1188(sp)
1000227c:	8809883a 	mov	r4,r17
10002280:	d9811b04 	addi	r6,sp,1132
10002284:	00015400 	call	10001540 <__sprint_r>
10002288:	103e001e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
1000228c:	da400404 	addi	r9,sp,16
10002290:	da011d17 	ldw	r8,1140(sp)
10002294:	003fa606 	br	10002130 <__alt_data_end+0xf8002130>
10002298:	18803fcc 	andi	r2,r3,255
1000229c:	00c00044 	movi	r3,1
100022a0:	10c10126 	beq	r2,r3,100026a8 <___vfprintf_internal_r+0x1134>
100022a4:	00c00084 	movi	r3,2
100022a8:	10c0ed26 	beq	r2,r3,10002660 <___vfprintf_internal_r+0x10ec>
100022ac:	d8c10dc4 	addi	r3,sp,1079
100022b0:	b808d0fa 	srli	r4,r23,3
100022b4:	b00a977a 	slli	r5,r22,29
100022b8:	b02cd0fa 	srli	r22,r22,3
100022bc:	bdc001cc 	andi	r23,r23,7
100022c0:	b8800c04 	addi	r2,r23,48
100022c4:	292eb03a 	or	r23,r5,r4
100022c8:	18800005 	stb	r2,0(r3)
100022cc:	bd88b03a 	or	r4,r23,r22
100022d0:	1827883a 	mov	r19,r3
100022d4:	18ffffc4 	addi	r3,r3,-1
100022d8:	203ff51e 	bne	r4,zero,100022b0 <__alt_data_end+0xf80022b0>
100022dc:	8100004c 	andi	r4,r16,1
100022e0:	980b883a 	mov	r5,r19
100022e4:	20000726 	beq	r4,zero,10002304 <___vfprintf_internal_r+0xd90>
100022e8:	10803fcc 	andi	r2,r2,255
100022ec:	1080201c 	xori	r2,r2,128
100022f0:	10bfe004 	addi	r2,r2,-128
100022f4:	01000c04 	movi	r4,48
100022f8:	11000226 	beq	r2,r4,10002304 <___vfprintf_internal_r+0xd90>
100022fc:	1827883a 	mov	r19,r3
10002300:	293fffc5 	stb	r4,-1(r5)
10002304:	d8812717 	ldw	r2,1180(sp)
10002308:	14c5c83a 	sub	r2,r2,r19
1000230c:	d8812b15 	stw	r2,1196(sp)
10002310:	003e1f06 	br	10001b90 <__alt_data_end+0xf8001b90>
10002314:	00801944 	movi	r2,101
10002318:	14807c0e 	bge	r2,r18,1000250c <___vfprintf_internal_r+0xf98>
1000231c:	d9013317 	ldw	r4,1228(sp)
10002320:	d9413417 	ldw	r5,1232(sp)
10002324:	000d883a 	mov	r6,zero
10002328:	000f883a 	mov	r7,zero
1000232c:	d8c13b15 	stw	r3,1260(sp)
10002330:	da013a15 	stw	r8,1256(sp)
10002334:	da413c15 	stw	r9,1264(sp)
10002338:	000f4140 	call	1000f414 <__nedf2>
1000233c:	d8c13b17 	ldw	r3,1260(sp)
10002340:	da013a17 	ldw	r8,1256(sp)
10002344:	da413c17 	ldw	r9,1264(sp)
10002348:	1001001e 	bne	r2,zero,1000274c <___vfprintf_internal_r+0x11d8>
1000234c:	00840074 	movhi	r2,4097
10002350:	108a0e04 	addi	r2,r2,10296
10002354:	48800015 	stw	r2,0(r9)
10002358:	00800044 	movi	r2,1
1000235c:	48800115 	stw	r2,4(r9)
10002360:	4091883a 	add	r8,r8,r2
10002364:	1887883a 	add	r3,r3,r2
10002368:	da011d15 	stw	r8,1140(sp)
1000236c:	d8c11c15 	stw	r3,1136(sp)
10002370:	008001c4 	movi	r2,7
10002374:	10c20316 	blt	r2,r3,10002b84 <___vfprintf_internal_r+0x1610>
10002378:	4a400204 	addi	r9,r9,8
1000237c:	d8812417 	ldw	r2,1168(sp)
10002380:	d8c13217 	ldw	r3,1224(sp)
10002384:	10c00216 	blt	r2,r3,10002390 <___vfprintf_internal_r+0xe1c>
10002388:	8080004c 	andi	r2,r16,1
1000238c:	103f6826 	beq	r2,zero,10002130 <__alt_data_end+0xf8002130>
10002390:	d8c11c17 	ldw	r3,1136(sp)
10002394:	d9013717 	ldw	r4,1244(sp)
10002398:	00800044 	movi	r2,1
1000239c:	48800115 	stw	r2,4(r9)
100023a0:	49000015 	stw	r4,0(r9)
100023a4:	4091883a 	add	r8,r8,r2
100023a8:	1887883a 	add	r3,r3,r2
100023ac:	da011d15 	stw	r8,1140(sp)
100023b0:	d8c11c15 	stw	r3,1136(sp)
100023b4:	008001c4 	movi	r2,7
100023b8:	10c2ce16 	blt	r2,r3,10002ef4 <___vfprintf_internal_r+0x1980>
100023bc:	4a400204 	addi	r9,r9,8
100023c0:	d8813217 	ldw	r2,1224(sp)
100023c4:	14bfffc4 	addi	r18,r2,-1
100023c8:	04bf590e 	bge	zero,r18,10002130 <__alt_data_end+0xf8002130>
100023cc:	04c00404 	movi	r19,16
100023d0:	d8c11c17 	ldw	r3,1136(sp)
100023d4:	05040074 	movhi	r20,4097
100023d8:	a50a1284 	addi	r20,r20,10314
100023dc:	9c818a0e 	bge	r19,r18,10002a08 <___vfprintf_internal_r+0x1494>
100023e0:	058001c4 	movi	r22,7
100023e4:	ddc12917 	ldw	r23,1188(sp)
100023e8:	00000306 	br	100023f8 <___vfprintf_internal_r+0xe84>
100023ec:	4a400204 	addi	r9,r9,8
100023f0:	94bffc04 	addi	r18,r18,-16
100023f4:	9c81840e 	bge	r19,r18,10002a08 <___vfprintf_internal_r+0x1494>
100023f8:	4d000015 	stw	r20,0(r9)
100023fc:	4cc00115 	stw	r19,4(r9)
10002400:	42000404 	addi	r8,r8,16
10002404:	18c00044 	addi	r3,r3,1
10002408:	da011d15 	stw	r8,1140(sp)
1000240c:	d8c11c15 	stw	r3,1136(sp)
10002410:	b0fff60e 	bge	r22,r3,100023ec <__alt_data_end+0xf80023ec>
10002414:	8809883a 	mov	r4,r17
10002418:	b80b883a 	mov	r5,r23
1000241c:	d9811b04 	addi	r6,sp,1132
10002420:	00015400 	call	10001540 <__sprint_r>
10002424:	103d991e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10002428:	da011d17 	ldw	r8,1140(sp)
1000242c:	d8c11c17 	ldw	r3,1136(sp)
10002430:	da400404 	addi	r9,sp,16
10002434:	003fee06 	br	100023f0 <__alt_data_end+0xf80023f0>
10002438:	d8812e17 	ldw	r2,1208(sp)
1000243c:	d9012817 	ldw	r4,1184(sp)
10002440:	112fc83a 	sub	r23,r2,r4
10002444:	05ff000e 	bge	zero,r23,10002048 <__alt_data_end+0xf8002048>
10002448:	07000404 	movi	fp,16
1000244c:	05040074 	movhi	r20,4097
10002450:	a50a1284 	addi	r20,r20,10314
10002454:	e5c01d0e 	bge	fp,r23,100024cc <___vfprintf_internal_r+0xf58>
10002458:	dc812a15 	stw	r18,1192(sp)
1000245c:	058001c4 	movi	r22,7
10002460:	a025883a 	mov	r18,r20
10002464:	8029883a 	mov	r20,r16
10002468:	dc012917 	ldw	r16,1188(sp)
1000246c:	00000306 	br	1000247c <___vfprintf_internal_r+0xf08>
10002470:	bdfffc04 	addi	r23,r23,-16
10002474:	4a400204 	addi	r9,r9,8
10002478:	e5c0110e 	bge	fp,r23,100024c0 <___vfprintf_internal_r+0xf4c>
1000247c:	4c800015 	stw	r18,0(r9)
10002480:	4f000115 	stw	fp,4(r9)
10002484:	42000404 	addi	r8,r8,16
10002488:	18c00044 	addi	r3,r3,1
1000248c:	da011d15 	stw	r8,1140(sp)
10002490:	d8c11c15 	stw	r3,1136(sp)
10002494:	b0fff60e 	bge	r22,r3,10002470 <__alt_data_end+0xf8002470>
10002498:	8809883a 	mov	r4,r17
1000249c:	800b883a 	mov	r5,r16
100024a0:	d9811b04 	addi	r6,sp,1132
100024a4:	00015400 	call	10001540 <__sprint_r>
100024a8:	103d781e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
100024ac:	bdfffc04 	addi	r23,r23,-16
100024b0:	da011d17 	ldw	r8,1140(sp)
100024b4:	d8c11c17 	ldw	r3,1136(sp)
100024b8:	da400404 	addi	r9,sp,16
100024bc:	e5ffef16 	blt	fp,r23,1000247c <__alt_data_end+0xf800247c>
100024c0:	a021883a 	mov	r16,r20
100024c4:	9029883a 	mov	r20,r18
100024c8:	dc812a17 	ldw	r18,1192(sp)
100024cc:	4d000015 	stw	r20,0(r9)
100024d0:	4dc00115 	stw	r23,4(r9)
100024d4:	45d1883a 	add	r8,r8,r23
100024d8:	18c00044 	addi	r3,r3,1
100024dc:	da011d15 	stw	r8,1140(sp)
100024e0:	d8c11c15 	stw	r3,1136(sp)
100024e4:	008001c4 	movi	r2,7
100024e8:	10c13616 	blt	r2,r3,100029c4 <___vfprintf_internal_r+0x1450>
100024ec:	4a400204 	addi	r9,r9,8
100024f0:	003ed506 	br	10002048 <__alt_data_end+0xf8002048>
100024f4:	d9412917 	ldw	r5,1188(sp)
100024f8:	8809883a 	mov	r4,r17
100024fc:	d9811b04 	addi	r6,sp,1132
10002500:	00015400 	call	10001540 <__sprint_r>
10002504:	103f4226 	beq	r2,zero,10002210 <__alt_data_end+0xf8002210>
10002508:	003d6006 	br	10001a8c <__alt_data_end+0xf8001a8c>
1000250c:	d9013217 	ldw	r4,1224(sp)
10002510:	00800044 	movi	r2,1
10002514:	4cc00015 	stw	r19,0(r9)
10002518:	1101000e 	bge	r2,r4,1000291c <___vfprintf_internal_r+0x13a8>
1000251c:	00800044 	movi	r2,1
10002520:	48800115 	stw	r2,4(r9)
10002524:	4091883a 	add	r8,r8,r2
10002528:	1887883a 	add	r3,r3,r2
1000252c:	da011d15 	stw	r8,1140(sp)
10002530:	d8c11c15 	stw	r3,1136(sp)
10002534:	008001c4 	movi	r2,7
10002538:	10c10c16 	blt	r2,r3,1000296c <___vfprintf_internal_r+0x13f8>
1000253c:	4a400204 	addi	r9,r9,8
10002540:	d8813717 	ldw	r2,1244(sp)
10002544:	48800015 	stw	r2,0(r9)
10002548:	00800044 	movi	r2,1
1000254c:	48800115 	stw	r2,4(r9)
10002550:	4091883a 	add	r8,r8,r2
10002554:	1887883a 	add	r3,r3,r2
10002558:	da011d15 	stw	r8,1140(sp)
1000255c:	d8c11c15 	stw	r3,1136(sp)
10002560:	008001c4 	movi	r2,7
10002564:	10c10a16 	blt	r2,r3,10002990 <___vfprintf_internal_r+0x141c>
10002568:	4c800204 	addi	r18,r9,8
1000256c:	d9013317 	ldw	r4,1228(sp)
10002570:	d9413417 	ldw	r5,1232(sp)
10002574:	000d883a 	mov	r6,zero
10002578:	000f883a 	mov	r7,zero
1000257c:	d8c13b15 	stw	r3,1260(sp)
10002580:	da013a15 	stw	r8,1256(sp)
10002584:	000f3b80 	call	1000f3b8 <__eqdf2>
10002588:	d8c13b17 	ldw	r3,1260(sp)
1000258c:	da013a17 	ldw	r8,1256(sp)
10002590:	1000ba26 	beq	r2,zero,1000287c <___vfprintf_internal_r+0x1308>
10002594:	d9013217 	ldw	r4,1224(sp)
10002598:	9cc00044 	addi	r19,r19,1
1000259c:	94c00015 	stw	r19,0(r18)
100025a0:	20bfffc4 	addi	r2,r4,-1
100025a4:	90800115 	stw	r2,4(r18)
100025a8:	4091883a 	add	r8,r8,r2
100025ac:	18c00044 	addi	r3,r3,1
100025b0:	da011d15 	stw	r8,1140(sp)
100025b4:	d8c11c15 	stw	r3,1136(sp)
100025b8:	008001c4 	movi	r2,7
100025bc:	10c0e216 	blt	r2,r3,10002948 <___vfprintf_internal_r+0x13d4>
100025c0:	94800204 	addi	r18,r18,8
100025c4:	d9013517 	ldw	r4,1236(sp)
100025c8:	d8811fc4 	addi	r2,sp,1151
100025cc:	90800015 	stw	r2,0(r18)
100025d0:	91000115 	stw	r4,4(r18)
100025d4:	4111883a 	add	r8,r8,r4
100025d8:	18c00044 	addi	r3,r3,1
100025dc:	da011d15 	stw	r8,1140(sp)
100025e0:	d8c11c15 	stw	r3,1136(sp)
100025e4:	008001c4 	movi	r2,7
100025e8:	10ff2316 	blt	r2,r3,10002278 <__alt_data_end+0xf8002278>
100025ec:	92400204 	addi	r9,r18,8
100025f0:	003ecf06 	br	10002130 <__alt_data_end+0xf8002130>
100025f4:	d9412917 	ldw	r5,1188(sp)
100025f8:	8809883a 	mov	r4,r17
100025fc:	d9811b04 	addi	r6,sp,1132
10002600:	00015400 	call	10001540 <__sprint_r>
10002604:	103d211e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10002608:	da011d17 	ldw	r8,1140(sp)
1000260c:	d8c11c17 	ldw	r3,1136(sp)
10002610:	da400404 	addi	r9,sp,16
10002614:	003eba06 	br	10002100 <__alt_data_end+0xf8002100>
10002618:	d9412917 	ldw	r5,1188(sp)
1000261c:	8809883a 	mov	r4,r17
10002620:	d9811b04 	addi	r6,sp,1132
10002624:	00015400 	call	10001540 <__sprint_r>
10002628:	103d181e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
1000262c:	da011d17 	ldw	r8,1140(sp)
10002630:	d8c11c17 	ldw	r3,1136(sp)
10002634:	da400404 	addi	r9,sp,16
10002638:	003e8006 	br	1000203c <__alt_data_end+0xf800203c>
1000263c:	d9412917 	ldw	r5,1188(sp)
10002640:	8809883a 	mov	r4,r17
10002644:	d9811b04 	addi	r6,sp,1132
10002648:	00015400 	call	10001540 <__sprint_r>
1000264c:	103d0f1e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10002650:	da011d17 	ldw	r8,1140(sp)
10002654:	d8c11c17 	ldw	r3,1136(sp)
10002658:	da400404 	addi	r9,sp,16
1000265c:	003e6a06 	br	10002008 <__alt_data_end+0xf8002008>
10002660:	d9413617 	ldw	r5,1240(sp)
10002664:	d8810dc4 	addi	r2,sp,1079
10002668:	b8c003cc 	andi	r3,r23,15
1000266c:	b008973a 	slli	r4,r22,28
10002670:	28c7883a 	add	r3,r5,r3
10002674:	b82ed13a 	srli	r23,r23,4
10002678:	18c00003 	ldbu	r3,0(r3)
1000267c:	b02cd13a 	srli	r22,r22,4
10002680:	25eeb03a 	or	r23,r4,r23
10002684:	10c00005 	stb	r3,0(r2)
10002688:	bd86b03a 	or	r3,r23,r22
1000268c:	1027883a 	mov	r19,r2
10002690:	10bfffc4 	addi	r2,r2,-1
10002694:	183ff41e 	bne	r3,zero,10002668 <__alt_data_end+0xf8002668>
10002698:	003f1a06 	br	10002304 <__alt_data_end+0xf8002304>
1000269c:	d8012b15 	stw	zero,1196(sp)
100026a0:	dcc10e04 	addi	r19,sp,1080
100026a4:	003d3a06 	br	10001b90 <__alt_data_end+0xf8001b90>
100026a8:	b0025426 	beq	r22,zero,10002ffc <___vfprintf_internal_r+0x1a88>
100026ac:	b807883a 	mov	r3,r23
100026b0:	d8810dc4 	addi	r2,sp,1079
100026b4:	882f883a 	mov	r23,r17
100026b8:	04c00244 	movi	r19,9
100026bc:	8023883a 	mov	r17,r16
100026c0:	da412815 	stw	r9,1184(sp)
100026c4:	1821883a 	mov	r16,r3
100026c8:	8009883a 	mov	r4,r16
100026cc:	b00b883a 	mov	r5,r22
100026d0:	01800284 	movi	r6,10
100026d4:	000f883a 	mov	r7,zero
100026d8:	1029883a 	mov	r20,r2
100026dc:	000e3ec0 	call	1000e3ec <__umoddi3>
100026e0:	10800c04 	addi	r2,r2,48
100026e4:	8009883a 	mov	r4,r16
100026e8:	b00b883a 	mov	r5,r22
100026ec:	a0800005 	stb	r2,0(r20)
100026f0:	01800284 	movi	r6,10
100026f4:	000f883a 	mov	r7,zero
100026f8:	000dd9c0 	call	1000dd9c <__udivdi3>
100026fc:	1021883a 	mov	r16,r2
10002700:	182d883a 	mov	r22,r3
10002704:	a0bfffc4 	addi	r2,r20,-1
10002708:	183fef1e 	bne	r3,zero,100026c8 <__alt_data_end+0xf80026c8>
1000270c:	9c3fee36 	bltu	r19,r16,100026c8 <__alt_data_end+0xf80026c8>
10002710:	da412817 	ldw	r9,1184(sp)
10002714:	8005883a 	mov	r2,r16
10002718:	8821883a 	mov	r16,r17
1000271c:	b823883a 	mov	r17,r23
10002720:	102f883a 	mov	r23,r2
10002724:	d8812717 	ldw	r2,1180(sp)
10002728:	a4ffffc4 	addi	r19,r20,-1
1000272c:	bdc00c04 	addi	r23,r23,48
10002730:	14c5c83a 	sub	r2,r2,r19
10002734:	a5ffffc5 	stb	r23,-1(r20)
10002738:	d8812b15 	stw	r2,1196(sp)
1000273c:	003d1406 	br	10001b90 <__alt_data_end+0xf8001b90>
10002740:	00c00044 	movi	r3,1
10002744:	bd84b03a 	or	r2,r23,r22
10002748:	003d0306 	br	10001b58 <__alt_data_end+0xf8001b58>
1000274c:	dc812417 	ldw	r18,1168(sp)
10002750:	0481140e 	bge	zero,r18,10002ba4 <___vfprintf_internal_r+0x1630>
10002754:	d9013217 	ldw	r4,1224(sp)
10002758:	4cc00015 	stw	r19,0(r9)
1000275c:	9100ec16 	blt	r18,r4,10002b10 <___vfprintf_internal_r+0x159c>
10002760:	49000115 	stw	r4,4(r9)
10002764:	4111883a 	add	r8,r8,r4
10002768:	18c00044 	addi	r3,r3,1
1000276c:	da011d15 	stw	r8,1140(sp)
10002770:	d8c11c15 	stw	r3,1136(sp)
10002774:	008001c4 	movi	r2,7
10002778:	10c23616 	blt	r2,r3,10003054 <___vfprintf_internal_r+0x1ae0>
1000277c:	4a400204 	addi	r9,r9,8
10002780:	d8813217 	ldw	r2,1224(sp)
10002784:	90a5c83a 	sub	r18,r18,r2
10002788:	04beae0e 	bge	zero,r18,10002244 <__alt_data_end+0xf8002244>
1000278c:	04c00404 	movi	r19,16
10002790:	d8c11c17 	ldw	r3,1136(sp)
10002794:	05040074 	movhi	r20,4097
10002798:	a50a1284 	addi	r20,r20,10314
1000279c:	9c81dd0e 	bge	r19,r18,10002f14 <___vfprintf_internal_r+0x19a0>
100027a0:	058001c4 	movi	r22,7
100027a4:	ddc12917 	ldw	r23,1188(sp)
100027a8:	00000306 	br	100027b8 <___vfprintf_internal_r+0x1244>
100027ac:	4a400204 	addi	r9,r9,8
100027b0:	94bffc04 	addi	r18,r18,-16
100027b4:	9c81d70e 	bge	r19,r18,10002f14 <___vfprintf_internal_r+0x19a0>
100027b8:	4d000015 	stw	r20,0(r9)
100027bc:	4cc00115 	stw	r19,4(r9)
100027c0:	42000404 	addi	r8,r8,16
100027c4:	18c00044 	addi	r3,r3,1
100027c8:	da011d15 	stw	r8,1140(sp)
100027cc:	d8c11c15 	stw	r3,1136(sp)
100027d0:	b0fff60e 	bge	r22,r3,100027ac <__alt_data_end+0xf80027ac>
100027d4:	8809883a 	mov	r4,r17
100027d8:	b80b883a 	mov	r5,r23
100027dc:	d9811b04 	addi	r6,sp,1132
100027e0:	00015400 	call	10001540 <__sprint_r>
100027e4:	103ca91e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
100027e8:	da011d17 	ldw	r8,1140(sp)
100027ec:	d8c11c17 	ldw	r3,1136(sp)
100027f0:	da400404 	addi	r9,sp,16
100027f4:	003fee06 	br	100027b0 <__alt_data_end+0xf80027b0>
100027f8:	d9412917 	ldw	r5,1188(sp)
100027fc:	8809883a 	mov	r4,r17
10002800:	d9811b04 	addi	r6,sp,1132
10002804:	00015400 	call	10001540 <__sprint_r>
10002808:	103ca01e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
1000280c:	da011d17 	ldw	r8,1140(sp)
10002810:	d8c11c17 	ldw	r3,1136(sp)
10002814:	da400404 	addi	r9,sp,16
10002818:	003dee06 	br	10001fd4 <__alt_data_end+0xf8001fd4>
1000281c:	00c00084 	movi	r3,2
10002820:	bd84b03a 	or	r2,r23,r22
10002824:	d8012585 	stb	zero,1174(sp)
10002828:	003ccb06 	br	10001b58 <__alt_data_end+0xf8001b58>
1000282c:	8080040c 	andi	r2,r16,16
10002830:	1000ae26 	beq	r2,zero,10002aec <___vfprintf_internal_r+0x1578>
10002834:	d9012d17 	ldw	r4,1204(sp)
10002838:	25c00017 	ldw	r23,0(r4)
1000283c:	21000104 	addi	r4,r4,4
10002840:	d9012d15 	stw	r4,1204(sp)
10002844:	b82dd7fa 	srai	r22,r23,31
10002848:	b005883a 	mov	r2,r22
1000284c:	003cb906 	br	10001b34 <__alt_data_end+0xf8001b34>
10002850:	8080040c 	andi	r2,r16,16
10002854:	10007026 	beq	r2,zero,10002a18 <___vfprintf_internal_r+0x14a4>
10002858:	d8812d17 	ldw	r2,1204(sp)
1000285c:	002d883a 	mov	r22,zero
10002860:	00c00044 	movi	r3,1
10002864:	15c00017 	ldw	r23,0(r2)
10002868:	10800104 	addi	r2,r2,4
1000286c:	d8812d15 	stw	r2,1204(sp)
10002870:	d8012585 	stb	zero,1174(sp)
10002874:	b805883a 	mov	r2,r23
10002878:	003cb706 	br	10001b58 <__alt_data_end+0xf8001b58>
1000287c:	d8813217 	ldw	r2,1224(sp)
10002880:	14ffffc4 	addi	r19,r2,-1
10002884:	04ff4f0e 	bge	zero,r19,100025c4 <__alt_data_end+0xf80025c4>
10002888:	05800404 	movi	r22,16
1000288c:	05040074 	movhi	r20,4097
10002890:	a50a1284 	addi	r20,r20,10314
10002894:	b4c0470e 	bge	r22,r19,100029b4 <___vfprintf_internal_r+0x1440>
10002898:	05c001c4 	movi	r23,7
1000289c:	df012917 	ldw	fp,1188(sp)
100028a0:	00000306 	br	100028b0 <___vfprintf_internal_r+0x133c>
100028a4:	94800204 	addi	r18,r18,8
100028a8:	9cfffc04 	addi	r19,r19,-16
100028ac:	b4c0410e 	bge	r22,r19,100029b4 <___vfprintf_internal_r+0x1440>
100028b0:	95000015 	stw	r20,0(r18)
100028b4:	95800115 	stw	r22,4(r18)
100028b8:	42000404 	addi	r8,r8,16
100028bc:	18c00044 	addi	r3,r3,1
100028c0:	da011d15 	stw	r8,1140(sp)
100028c4:	d8c11c15 	stw	r3,1136(sp)
100028c8:	b8fff60e 	bge	r23,r3,100028a4 <__alt_data_end+0xf80028a4>
100028cc:	8809883a 	mov	r4,r17
100028d0:	e00b883a 	mov	r5,fp
100028d4:	d9811b04 	addi	r6,sp,1132
100028d8:	00015400 	call	10001540 <__sprint_r>
100028dc:	103c6b1e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
100028e0:	da011d17 	ldw	r8,1140(sp)
100028e4:	d8c11c17 	ldw	r3,1136(sp)
100028e8:	dc800404 	addi	r18,sp,16
100028ec:	003fee06 	br	100028a8 <__alt_data_end+0xf80028a8>
100028f0:	8080040c 	andi	r2,r16,16
100028f4:	10005326 	beq	r2,zero,10002a44 <___vfprintf_internal_r+0x14d0>
100028f8:	d8c12d17 	ldw	r3,1204(sp)
100028fc:	002d883a 	mov	r22,zero
10002900:	1dc00017 	ldw	r23,0(r3)
10002904:	18c00104 	addi	r3,r3,4
10002908:	d8c12d15 	stw	r3,1204(sp)
1000290c:	b805883a 	mov	r2,r23
10002910:	0007883a 	mov	r3,zero
10002914:	d8012585 	stb	zero,1174(sp)
10002918:	003c8f06 	br	10001b58 <__alt_data_end+0xf8001b58>
1000291c:	8088703a 	and	r4,r16,r2
10002920:	203efe1e 	bne	r4,zero,1000251c <__alt_data_end+0xf800251c>
10002924:	48800115 	stw	r2,4(r9)
10002928:	42000044 	addi	r8,r8,1
1000292c:	18c00044 	addi	r3,r3,1
10002930:	da011d15 	stw	r8,1140(sp)
10002934:	d8c11c15 	stw	r3,1136(sp)
10002938:	008001c4 	movi	r2,7
1000293c:	10c00216 	blt	r2,r3,10002948 <___vfprintf_internal_r+0x13d4>
10002940:	4c800204 	addi	r18,r9,8
10002944:	003f1f06 	br	100025c4 <__alt_data_end+0xf80025c4>
10002948:	d9412917 	ldw	r5,1188(sp)
1000294c:	8809883a 	mov	r4,r17
10002950:	d9811b04 	addi	r6,sp,1132
10002954:	00015400 	call	10001540 <__sprint_r>
10002958:	103c4c1e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
1000295c:	dc800404 	addi	r18,sp,16
10002960:	da011d17 	ldw	r8,1140(sp)
10002964:	d8c11c17 	ldw	r3,1136(sp)
10002968:	003f1606 	br	100025c4 <__alt_data_end+0xf80025c4>
1000296c:	d9412917 	ldw	r5,1188(sp)
10002970:	8809883a 	mov	r4,r17
10002974:	d9811b04 	addi	r6,sp,1132
10002978:	00015400 	call	10001540 <__sprint_r>
1000297c:	103c431e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10002980:	da011d17 	ldw	r8,1140(sp)
10002984:	d8c11c17 	ldw	r3,1136(sp)
10002988:	da400404 	addi	r9,sp,16
1000298c:	003eec06 	br	10002540 <__alt_data_end+0xf8002540>
10002990:	d9412917 	ldw	r5,1188(sp)
10002994:	8809883a 	mov	r4,r17
10002998:	d9811b04 	addi	r6,sp,1132
1000299c:	00015400 	call	10001540 <__sprint_r>
100029a0:	103c3a1e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
100029a4:	da011d17 	ldw	r8,1140(sp)
100029a8:	d8c11c17 	ldw	r3,1136(sp)
100029ac:	dc800404 	addi	r18,sp,16
100029b0:	003eee06 	br	1000256c <__alt_data_end+0xf800256c>
100029b4:	95000015 	stw	r20,0(r18)
100029b8:	94c00115 	stw	r19,4(r18)
100029bc:	44d1883a 	add	r8,r8,r19
100029c0:	003efa06 	br	100025ac <__alt_data_end+0xf80025ac>
100029c4:	d9412917 	ldw	r5,1188(sp)
100029c8:	8809883a 	mov	r4,r17
100029cc:	d9811b04 	addi	r6,sp,1132
100029d0:	00015400 	call	10001540 <__sprint_r>
100029d4:	103c2d1e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
100029d8:	da011d17 	ldw	r8,1140(sp)
100029dc:	d8c11c17 	ldw	r3,1136(sp)
100029e0:	da400404 	addi	r9,sp,16
100029e4:	003d9806 	br	10002048 <__alt_data_end+0xf8002048>
100029e8:	8080100c 	andi	r2,r16,64
100029ec:	10011626 	beq	r2,zero,10002e48 <___vfprintf_internal_r+0x18d4>
100029f0:	d8c12d17 	ldw	r3,1204(sp)
100029f4:	002d883a 	mov	r22,zero
100029f8:	1dc0000b 	ldhu	r23,0(r3)
100029fc:	18c00104 	addi	r3,r3,4
10002a00:	d8c12d15 	stw	r3,1204(sp)
10002a04:	003cc106 	br	10001d0c <__alt_data_end+0xf8001d0c>
10002a08:	4d000015 	stw	r20,0(r9)
10002a0c:	4c800115 	stw	r18,4(r9)
10002a10:	4491883a 	add	r8,r8,r18
10002a14:	003dc006 	br	10002118 <__alt_data_end+0xf8002118>
10002a18:	8080100c 	andi	r2,r16,64
10002a1c:	10010126 	beq	r2,zero,10002e24 <___vfprintf_internal_r+0x18b0>
10002a20:	d8c12d17 	ldw	r3,1204(sp)
10002a24:	002d883a 	mov	r22,zero
10002a28:	1dc0000b 	ldhu	r23,0(r3)
10002a2c:	18c00104 	addi	r3,r3,4
10002a30:	d8c12d15 	stw	r3,1204(sp)
10002a34:	b805883a 	mov	r2,r23
10002a38:	00c00044 	movi	r3,1
10002a3c:	d8012585 	stb	zero,1174(sp)
10002a40:	003c4506 	br	10001b58 <__alt_data_end+0xf8001b58>
10002a44:	8080100c 	andi	r2,r16,64
10002a48:	10010526 	beq	r2,zero,10002e60 <___vfprintf_internal_r+0x18ec>
10002a4c:	d9012d17 	ldw	r4,1204(sp)
10002a50:	002d883a 	mov	r22,zero
10002a54:	0007883a 	mov	r3,zero
10002a58:	25c0000b 	ldhu	r23,0(r4)
10002a5c:	21000104 	addi	r4,r4,4
10002a60:	d9012d15 	stw	r4,1204(sp)
10002a64:	b805883a 	mov	r2,r23
10002a68:	d8012585 	stb	zero,1174(sp)
10002a6c:	003c3a06 	br	10001b58 <__alt_data_end+0xf8001b58>
10002a70:	d8812d17 	ldw	r2,1204(sp)
10002a74:	15800017 	ldw	r22,0(r2)
10002a78:	15000117 	ldw	r20,4(r2)
10002a7c:	10800204 	addi	r2,r2,8
10002a80:	d8812d15 	stw	r2,1204(sp)
10002a84:	dd813315 	stw	r22,1228(sp)
10002a88:	dd013415 	stw	r20,1232(sp)
10002a8c:	003c5906 	br	10001bf4 <__alt_data_end+0xf8001bf4>
10002a90:	00c00084 	movi	r3,2
10002a94:	d8012585 	stb	zero,1174(sp)
10002a98:	003c2f06 	br	10001b58 <__alt_data_end+0xf8001b58>
10002a9c:	ac800007 	ldb	r18,0(r21)
10002aa0:	003b1006 	br	100016e4 <__alt_data_end+0xf80016e4>
10002aa4:	8080040c 	andi	r2,r16,16
10002aa8:	1000091e 	bne	r2,zero,10002ad0 <___vfprintf_internal_r+0x155c>
10002aac:	8400100c 	andi	r16,r16,64
10002ab0:	80000726 	beq	r16,zero,10002ad0 <___vfprintf_internal_r+0x155c>
10002ab4:	d8c12d17 	ldw	r3,1204(sp)
10002ab8:	d9012c17 	ldw	r4,1200(sp)
10002abc:	18800017 	ldw	r2,0(r3)
10002ac0:	18c00104 	addi	r3,r3,4
10002ac4:	d8c12d15 	stw	r3,1204(sp)
10002ac8:	1100000d 	sth	r4,0(r2)
10002acc:	003adf06 	br	1000164c <__alt_data_end+0xf800164c>
10002ad0:	d8c12d17 	ldw	r3,1204(sp)
10002ad4:	d9012c17 	ldw	r4,1200(sp)
10002ad8:	18800017 	ldw	r2,0(r3)
10002adc:	18c00104 	addi	r3,r3,4
10002ae0:	d8c12d15 	stw	r3,1204(sp)
10002ae4:	11000015 	stw	r4,0(r2)
10002ae8:	003ad806 	br	1000164c <__alt_data_end+0xf800164c>
10002aec:	8080100c 	andi	r2,r16,64
10002af0:	1000c526 	beq	r2,zero,10002e08 <___vfprintf_internal_r+0x1894>
10002af4:	d8812d17 	ldw	r2,1204(sp)
10002af8:	15c0000f 	ldh	r23,0(r2)
10002afc:	10800104 	addi	r2,r2,4
10002b00:	d8812d15 	stw	r2,1204(sp)
10002b04:	b82dd7fa 	srai	r22,r23,31
10002b08:	b005883a 	mov	r2,r22
10002b0c:	003c0906 	br	10001b34 <__alt_data_end+0xf8001b34>
10002b10:	4c800115 	stw	r18,4(r9)
10002b14:	9211883a 	add	r8,r18,r8
10002b18:	18c00044 	addi	r3,r3,1
10002b1c:	da011d15 	stw	r8,1140(sp)
10002b20:	d8c11c15 	stw	r3,1136(sp)
10002b24:	008001c4 	movi	r2,7
10002b28:	10c14016 	blt	r2,r3,1000302c <___vfprintf_internal_r+0x1ab8>
10002b2c:	4a400204 	addi	r9,r9,8
10002b30:	d8813717 	ldw	r2,1244(sp)
10002b34:	9ca7883a 	add	r19,r19,r18
10002b38:	48800015 	stw	r2,0(r9)
10002b3c:	00800044 	movi	r2,1
10002b40:	48800115 	stw	r2,4(r9)
10002b44:	4091883a 	add	r8,r8,r2
10002b48:	1887883a 	add	r3,r3,r2
10002b4c:	da011d15 	stw	r8,1140(sp)
10002b50:	d8c11c15 	stw	r3,1136(sp)
10002b54:	008001c4 	movi	r2,7
10002b58:	10c12c16 	blt	r2,r3,1000300c <___vfprintf_internal_r+0x1a98>
10002b5c:	4a400204 	addi	r9,r9,8
10002b60:	d9013217 	ldw	r4,1224(sp)
10002b64:	da011d17 	ldw	r8,1140(sp)
10002b68:	d8c11c17 	ldw	r3,1136(sp)
10002b6c:	24a5c83a 	sub	r18,r4,r18
10002b70:	4cc00015 	stw	r19,0(r9)
10002b74:	003fa506 	br	10002a0c <__alt_data_end+0xf8002a0c>
10002b78:	04c40074 	movhi	r19,4097
10002b7c:	9cc9ff04 	addi	r19,r19,10236
10002b80:	003c2e06 	br	10001c3c <__alt_data_end+0xf8001c3c>
10002b84:	d9412917 	ldw	r5,1188(sp)
10002b88:	8809883a 	mov	r4,r17
10002b8c:	d9811b04 	addi	r6,sp,1132
10002b90:	00015400 	call	10001540 <__sprint_r>
10002b94:	103bbd1e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10002b98:	da011d17 	ldw	r8,1140(sp)
10002b9c:	da400404 	addi	r9,sp,16
10002ba0:	003df606 	br	1000237c <__alt_data_end+0xf800237c>
10002ba4:	00840074 	movhi	r2,4097
10002ba8:	108a0e04 	addi	r2,r2,10296
10002bac:	48800015 	stw	r2,0(r9)
10002bb0:	00800044 	movi	r2,1
10002bb4:	48800115 	stw	r2,4(r9)
10002bb8:	4091883a 	add	r8,r8,r2
10002bbc:	1887883a 	add	r3,r3,r2
10002bc0:	da011d15 	stw	r8,1140(sp)
10002bc4:	d8c11c15 	stw	r3,1136(sp)
10002bc8:	008001c4 	movi	r2,7
10002bcc:	10c0bc16 	blt	r2,r3,10002ec0 <___vfprintf_internal_r+0x194c>
10002bd0:	4a400204 	addi	r9,r9,8
10002bd4:	9000041e 	bne	r18,zero,10002be8 <___vfprintf_internal_r+0x1674>
10002bd8:	d8c13217 	ldw	r3,1224(sp)
10002bdc:	1800021e 	bne	r3,zero,10002be8 <___vfprintf_internal_r+0x1674>
10002be0:	8080004c 	andi	r2,r16,1
10002be4:	103d5226 	beq	r2,zero,10002130 <__alt_data_end+0xf8002130>
10002be8:	d8c11c17 	ldw	r3,1136(sp)
10002bec:	d9013717 	ldw	r4,1244(sp)
10002bf0:	00800044 	movi	r2,1
10002bf4:	48800115 	stw	r2,4(r9)
10002bf8:	49000015 	stw	r4,0(r9)
10002bfc:	4091883a 	add	r8,r8,r2
10002c00:	1887883a 	add	r3,r3,r2
10002c04:	da011d15 	stw	r8,1140(sp)
10002c08:	d8c11c15 	stw	r3,1136(sp)
10002c0c:	008001c4 	movi	r2,7
10002c10:	10c14516 	blt	r2,r3,10003128 <___vfprintf_internal_r+0x1bb4>
10002c14:	4a400204 	addi	r9,r9,8
10002c18:	04a5c83a 	sub	r18,zero,r18
10002c1c:	0480d70e 	bge	zero,r18,10002f7c <___vfprintf_internal_r+0x1a08>
10002c20:	05800404 	movi	r22,16
10002c24:	05040074 	movhi	r20,4097
10002c28:	a50a1284 	addi	r20,r20,10314
10002c2c:	b480db0e 	bge	r22,r18,10002f9c <___vfprintf_internal_r+0x1a28>
10002c30:	05c001c4 	movi	r23,7
10002c34:	df012917 	ldw	fp,1188(sp)
10002c38:	00000306 	br	10002c48 <___vfprintf_internal_r+0x16d4>
10002c3c:	4a400204 	addi	r9,r9,8
10002c40:	94bffc04 	addi	r18,r18,-16
10002c44:	b480d50e 	bge	r22,r18,10002f9c <___vfprintf_internal_r+0x1a28>
10002c48:	4d000015 	stw	r20,0(r9)
10002c4c:	4d800115 	stw	r22,4(r9)
10002c50:	42000404 	addi	r8,r8,16
10002c54:	18c00044 	addi	r3,r3,1
10002c58:	da011d15 	stw	r8,1140(sp)
10002c5c:	d8c11c15 	stw	r3,1136(sp)
10002c60:	b8fff60e 	bge	r23,r3,10002c3c <__alt_data_end+0xf8002c3c>
10002c64:	8809883a 	mov	r4,r17
10002c68:	e00b883a 	mov	r5,fp
10002c6c:	d9811b04 	addi	r6,sp,1132
10002c70:	00015400 	call	10001540 <__sprint_r>
10002c74:	103b851e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10002c78:	da011d17 	ldw	r8,1140(sp)
10002c7c:	d8c11c17 	ldw	r3,1136(sp)
10002c80:	da400404 	addi	r9,sp,16
10002c84:	003fee06 	br	10002c40 <__alt_data_end+0xf8002c40>
10002c88:	da413c15 	stw	r9,1264(sp)
10002c8c:	000a1380 	call	1000a138 <__isnand>
10002c90:	da413c17 	ldw	r9,1264(sp)
10002c94:	10007e1e 	bne	r2,zero,10002e90 <___vfprintf_internal_r+0x191c>
10002c98:	00bfffc4 	movi	r2,-1
10002c9c:	e0816a26 	beq	fp,r2,10003248 <___vfprintf_internal_r+0x1cd4>
10002ca0:	008019c4 	movi	r2,103
10002ca4:	90816526 	beq	r18,r2,1000323c <___vfprintf_internal_r+0x1cc8>
10002ca8:	008011c4 	movi	r2,71
10002cac:	90816326 	beq	r18,r2,1000323c <___vfprintf_internal_r+0x1cc8>
10002cb0:	80c04014 	ori	r3,r16,256
10002cb4:	d8c12a15 	stw	r3,1192(sp)
10002cb8:	a0016516 	blt	r20,zero,10003250 <___vfprintf_internal_r+0x1cdc>
10002cbc:	d8012f05 	stb	zero,1212(sp)
10002cc0:	00801984 	movi	r2,102
10002cc4:	9080f226 	beq	r18,r2,10003090 <___vfprintf_internal_r+0x1b1c>
10002cc8:	00801184 	movi	r2,70
10002ccc:	9080f026 	beq	r18,r2,10003090 <___vfprintf_internal_r+0x1b1c>
10002cd0:	00801944 	movi	r2,101
10002cd4:	90818d26 	beq	r18,r2,1000330c <___vfprintf_internal_r+0x1d98>
10002cd8:	00801144 	movi	r2,69
10002cdc:	90818b26 	beq	r18,r2,1000330c <___vfprintf_internal_r+0x1d98>
10002ce0:	e02f883a 	mov	r23,fp
10002ce4:	d8812404 	addi	r2,sp,1168
10002ce8:	d8800115 	stw	r2,4(sp)
10002cec:	d8812304 	addi	r2,sp,1164
10002cf0:	d8800215 	stw	r2,8(sp)
10002cf4:	d8812204 	addi	r2,sp,1160
10002cf8:	ddc00015 	stw	r23,0(sp)
10002cfc:	d8800315 	stw	r2,12(sp)
10002d00:	8809883a 	mov	r4,r17
10002d04:	b00b883a 	mov	r5,r22
10002d08:	a00d883a 	mov	r6,r20
10002d0c:	01c00084 	movi	r7,2
10002d10:	da413c15 	stw	r9,1264(sp)
10002d14:	0004f4c0 	call	10004f4c <_dtoa_r>
10002d18:	1027883a 	mov	r19,r2
10002d1c:	008019c4 	movi	r2,103
10002d20:	da413c17 	ldw	r9,1264(sp)
10002d24:	9081951e 	bne	r18,r2,1000337c <___vfprintf_internal_r+0x1e08>
10002d28:	8080004c 	andi	r2,r16,1
10002d2c:	10017926 	beq	r2,zero,10003314 <___vfprintf_internal_r+0x1da0>
10002d30:	00801184 	movi	r2,70
10002d34:	9dc7883a 	add	r3,r19,r23
10002d38:	9080e626 	beq	r18,r2,100030d4 <___vfprintf_internal_r+0x1b60>
10002d3c:	b009883a 	mov	r4,r22
10002d40:	a00b883a 	mov	r5,r20
10002d44:	000d883a 	mov	r6,zero
10002d48:	000f883a 	mov	r7,zero
10002d4c:	d8c13b15 	stw	r3,1260(sp)
10002d50:	da413c15 	stw	r9,1264(sp)
10002d54:	000f3b80 	call	1000f3b8 <__eqdf2>
10002d58:	d8c13b17 	ldw	r3,1260(sp)
10002d5c:	da413c17 	ldw	r9,1264(sp)
10002d60:	10000726 	beq	r2,zero,10002d80 <___vfprintf_internal_r+0x180c>
10002d64:	d8812217 	ldw	r2,1160(sp)
10002d68:	10c18a2e 	bgeu	r2,r3,10003394 <___vfprintf_internal_r+0x1e20>
10002d6c:	01000c04 	movi	r4,48
10002d70:	11000005 	stb	r4,0(r2)
10002d74:	10800044 	addi	r2,r2,1
10002d78:	d8812215 	stw	r2,1160(sp)
10002d7c:	10fffc1e 	bne	r2,r3,10002d70 <__alt_data_end+0xf8002d70>
10002d80:	1cc7c83a 	sub	r3,r3,r19
10002d84:	d8c13215 	stw	r3,1224(sp)
10002d88:	008019c4 	movi	r2,103
10002d8c:	9080fa26 	beq	r18,r2,10003178 <___vfprintf_internal_r+0x1c04>
10002d90:	008011c4 	movi	r2,71
10002d94:	9080f826 	beq	r18,r2,10003178 <___vfprintf_internal_r+0x1c04>
10002d98:	00801984 	movi	r2,102
10002d9c:	90818e1e 	bne	r18,r2,100033d8 <___vfprintf_internal_r+0x1e64>
10002da0:	d8812417 	ldw	r2,1168(sp)
10002da4:	d8812b15 	stw	r2,1196(sp)
10002da8:	00817c0e 	bge	zero,r2,1000339c <___vfprintf_internal_r+0x1e28>
10002dac:	e000021e 	bne	fp,zero,10002db8 <___vfprintf_internal_r+0x1844>
10002db0:	8400004c 	andi	r16,r16,1
10002db4:	80000426 	beq	r16,zero,10002dc8 <___vfprintf_internal_r+0x1854>
10002db8:	d8812b17 	ldw	r2,1196(sp)
10002dbc:	e2000044 	addi	r8,fp,1
10002dc0:	1205883a 	add	r2,r2,r8
10002dc4:	d8812b15 	stw	r2,1196(sp)
10002dc8:	d8812815 	stw	r2,1184(sp)
10002dcc:	10010b16 	blt	r2,zero,100031fc <___vfprintf_internal_r+0x1c88>
10002dd0:	ddc12f07 	ldb	r23,1212(sp)
10002dd4:	b800e426 	beq	r23,zero,10003168 <___vfprintf_internal_r+0x1bf4>
10002dd8:	00800b44 	movi	r2,45
10002ddc:	d8812585 	stb	r2,1174(sp)
10002de0:	dc012a17 	ldw	r16,1192(sp)
10002de4:	d8013115 	stw	zero,1220(sp)
10002de8:	003b7306 	br	10001bb8 <__alt_data_end+0xf8001bb8>
10002dec:	d8812b17 	ldw	r2,1196(sp)
10002df0:	d8812815 	stw	r2,1184(sp)
10002df4:	10005716 	blt	r2,zero,10002f54 <___vfprintf_internal_r+0x19e0>
10002df8:	d8812583 	ldbu	r2,1174(sp)
10002dfc:	ddc12d15 	stw	r23,1204(sp)
10002e00:	d8013115 	stw	zero,1220(sp)
10002e04:	003b6806 	br	10001ba8 <__alt_data_end+0xf8001ba8>
10002e08:	d8c12d17 	ldw	r3,1204(sp)
10002e0c:	1dc00017 	ldw	r23,0(r3)
10002e10:	18c00104 	addi	r3,r3,4
10002e14:	d8c12d15 	stw	r3,1204(sp)
10002e18:	b82dd7fa 	srai	r22,r23,31
10002e1c:	b005883a 	mov	r2,r22
10002e20:	003b4406 	br	10001b34 <__alt_data_end+0xf8001b34>
10002e24:	d9012d17 	ldw	r4,1204(sp)
10002e28:	002d883a 	mov	r22,zero
10002e2c:	00c00044 	movi	r3,1
10002e30:	25c00017 	ldw	r23,0(r4)
10002e34:	21000104 	addi	r4,r4,4
10002e38:	d9012d15 	stw	r4,1204(sp)
10002e3c:	b805883a 	mov	r2,r23
10002e40:	d8012585 	stb	zero,1174(sp)
10002e44:	003b4406 	br	10001b58 <__alt_data_end+0xf8001b58>
10002e48:	d9012d17 	ldw	r4,1204(sp)
10002e4c:	002d883a 	mov	r22,zero
10002e50:	25c00017 	ldw	r23,0(r4)
10002e54:	21000104 	addi	r4,r4,4
10002e58:	d9012d15 	stw	r4,1204(sp)
10002e5c:	003bab06 	br	10001d0c <__alt_data_end+0xf8001d0c>
10002e60:	d8812d17 	ldw	r2,1204(sp)
10002e64:	002d883a 	mov	r22,zero
10002e68:	0007883a 	mov	r3,zero
10002e6c:	15c00017 	ldw	r23,0(r2)
10002e70:	10800104 	addi	r2,r2,4
10002e74:	d8812d15 	stw	r2,1204(sp)
10002e78:	d8012585 	stb	zero,1174(sp)
10002e7c:	b805883a 	mov	r2,r23
10002e80:	003b3506 	br	10001b58 <__alt_data_end+0xf8001b58>
10002e84:	00ffffc4 	movi	r3,-1
10002e88:	b82b883a 	mov	r21,r23
10002e8c:	003a1606 	br	100016e8 <__alt_data_end+0xf80016e8>
10002e90:	008011c4 	movi	r2,71
10002e94:	1480b116 	blt	r2,r18,1000315c <___vfprintf_internal_r+0x1be8>
10002e98:	04c40074 	movhi	r19,4097
10002e9c:	9cca0004 	addi	r19,r19,10240
10002ea0:	00c000c4 	movi	r3,3
10002ea4:	00bfdfc4 	movi	r2,-129
10002ea8:	80a0703a 	and	r16,r16,r2
10002eac:	d8c12815 	stw	r3,1184(sp)
10002eb0:	d8812583 	ldbu	r2,1174(sp)
10002eb4:	d8c12b15 	stw	r3,1196(sp)
10002eb8:	d8013115 	stw	zero,1220(sp)
10002ebc:	003b3a06 	br	10001ba8 <__alt_data_end+0xf8001ba8>
10002ec0:	d9412917 	ldw	r5,1188(sp)
10002ec4:	8809883a 	mov	r4,r17
10002ec8:	d9811b04 	addi	r6,sp,1132
10002ecc:	00015400 	call	10001540 <__sprint_r>
10002ed0:	103aee1e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10002ed4:	dc812417 	ldw	r18,1168(sp)
10002ed8:	da011d17 	ldw	r8,1140(sp)
10002edc:	da400404 	addi	r9,sp,16
10002ee0:	003f3c06 	br	10002bd4 <__alt_data_end+0xf8002bd4>
10002ee4:	ad400044 	addi	r21,r21,1
10002ee8:	84000814 	ori	r16,r16,32
10002eec:	14800047 	ldb	r18,1(r2)
10002ef0:	0039fc06 	br	100016e4 <__alt_data_end+0xf80016e4>
10002ef4:	d9412917 	ldw	r5,1188(sp)
10002ef8:	8809883a 	mov	r4,r17
10002efc:	d9811b04 	addi	r6,sp,1132
10002f00:	00015400 	call	10001540 <__sprint_r>
10002f04:	103ae11e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10002f08:	da011d17 	ldw	r8,1140(sp)
10002f0c:	da400404 	addi	r9,sp,16
10002f10:	003d2b06 	br	100023c0 <__alt_data_end+0xf80023c0>
10002f14:	4d000015 	stw	r20,0(r9)
10002f18:	4c800115 	stw	r18,4(r9)
10002f1c:	4491883a 	add	r8,r8,r18
10002f20:	18c00044 	addi	r3,r3,1
10002f24:	da011d15 	stw	r8,1140(sp)
10002f28:	d8c11c15 	stw	r3,1136(sp)
10002f2c:	008001c4 	movi	r2,7
10002f30:	10fcbd16 	blt	r2,r3,10002228 <__alt_data_end+0xf8002228>
10002f34:	4a400204 	addi	r9,r9,8
10002f38:	003cc206 	br	10002244 <__alt_data_end+0xf8002244>
10002f3c:	da413c15 	stw	r9,1264(sp)
10002f40:	00014b40 	call	100014b4 <strlen>
10002f44:	d8812b15 	stw	r2,1196(sp)
10002f48:	d8812815 	stw	r2,1184(sp)
10002f4c:	da413c17 	ldw	r9,1264(sp)
10002f50:	103fa90e 	bge	r2,zero,10002df8 <__alt_data_end+0xf8002df8>
10002f54:	d8012815 	stw	zero,1184(sp)
10002f58:	003fa706 	br	10002df8 <__alt_data_end+0xf8002df8>
10002f5c:	d9412917 	ldw	r5,1188(sp)
10002f60:	8809883a 	mov	r4,r17
10002f64:	d9811b04 	addi	r6,sp,1132
10002f68:	00015400 	call	10001540 <__sprint_r>
10002f6c:	103ac71e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10002f70:	da011d17 	ldw	r8,1140(sp)
10002f74:	d8c11c17 	ldw	r3,1136(sp)
10002f78:	da400404 	addi	r9,sp,16
10002f7c:	d8813217 	ldw	r2,1224(sp)
10002f80:	4cc00015 	stw	r19,0(r9)
10002f84:	48800115 	stw	r2,4(r9)
10002f88:	4091883a 	add	r8,r8,r2
10002f8c:	003c6206 	br	10002118 <__alt_data_end+0xf8002118>
10002f90:	00800b44 	movi	r2,45
10002f94:	d8812585 	stb	r2,1174(sp)
10002f98:	003b2406 	br	10001c2c <__alt_data_end+0xf8001c2c>
10002f9c:	4d000015 	stw	r20,0(r9)
10002fa0:	4c800115 	stw	r18,4(r9)
10002fa4:	4491883a 	add	r8,r8,r18
10002fa8:	18c00044 	addi	r3,r3,1
10002fac:	da011d15 	stw	r8,1140(sp)
10002fb0:	d8c11c15 	stw	r3,1136(sp)
10002fb4:	008001c4 	movi	r2,7
10002fb8:	10ffe816 	blt	r2,r3,10002f5c <__alt_data_end+0xf8002f5c>
10002fbc:	4a400204 	addi	r9,r9,8
10002fc0:	003fee06 	br	10002f7c <__alt_data_end+0xf8002f7c>
10002fc4:	d8c12b15 	stw	r3,1196(sp)
10002fc8:	00800184 	movi	r2,6
10002fcc:	10c0062e 	bgeu	r2,r3,10002fe8 <___vfprintf_internal_r+0x1a74>
10002fd0:	d8812b15 	stw	r2,1196(sp)
10002fd4:	d8812815 	stw	r2,1184(sp)
10002fd8:	ddc12d15 	stw	r23,1204(sp)
10002fdc:	04c40074 	movhi	r19,4097
10002fe0:	9cca0c04 	addi	r19,r19,10288
10002fe4:	0039ca06 	br	10001710 <__alt_data_end+0xf8001710>
10002fe8:	d8812b17 	ldw	r2,1196(sp)
10002fec:	d8812815 	stw	r2,1184(sp)
10002ff0:	103ff90e 	bge	r2,zero,10002fd8 <__alt_data_end+0xf8002fd8>
10002ff4:	d8012815 	stw	zero,1184(sp)
10002ff8:	003ff706 	br	10002fd8 <__alt_data_end+0xf8002fd8>
10002ffc:	00800244 	movi	r2,9
10003000:	15fdaa36 	bltu	r2,r23,100026ac <__alt_data_end+0xf80026ac>
10003004:	dd010e04 	addi	r20,sp,1080
10003008:	003dc606 	br	10002724 <__alt_data_end+0xf8002724>
1000300c:	d9412917 	ldw	r5,1188(sp)
10003010:	8809883a 	mov	r4,r17
10003014:	d9811b04 	addi	r6,sp,1132
10003018:	00015400 	call	10001540 <__sprint_r>
1000301c:	103a9b1e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10003020:	dc812417 	ldw	r18,1168(sp)
10003024:	da400404 	addi	r9,sp,16
10003028:	003ecd06 	br	10002b60 <__alt_data_end+0xf8002b60>
1000302c:	d9412917 	ldw	r5,1188(sp)
10003030:	8809883a 	mov	r4,r17
10003034:	d9811b04 	addi	r6,sp,1132
10003038:	00015400 	call	10001540 <__sprint_r>
1000303c:	103a931e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10003040:	dc812417 	ldw	r18,1168(sp)
10003044:	da011d17 	ldw	r8,1140(sp)
10003048:	d8c11c17 	ldw	r3,1136(sp)
1000304c:	da400404 	addi	r9,sp,16
10003050:	003eb706 	br	10002b30 <__alt_data_end+0xf8002b30>
10003054:	d9412917 	ldw	r5,1188(sp)
10003058:	8809883a 	mov	r4,r17
1000305c:	d9811b04 	addi	r6,sp,1132
10003060:	00015400 	call	10001540 <__sprint_r>
10003064:	103a891e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
10003068:	dc812417 	ldw	r18,1168(sp)
1000306c:	da011d17 	ldw	r8,1140(sp)
10003070:	da400404 	addi	r9,sp,16
10003074:	003dc206 	br	10002780 <__alt_data_end+0xf8002780>
10003078:	df012815 	stw	fp,1184(sp)
1000307c:	d8812583 	ldbu	r2,1174(sp)
10003080:	df012b15 	stw	fp,1196(sp)
10003084:	ddc12d15 	stw	r23,1204(sp)
10003088:	d8013115 	stw	zero,1220(sp)
1000308c:	003ac606 	br	10001ba8 <__alt_data_end+0xf8001ba8>
10003090:	d8812404 	addi	r2,sp,1168
10003094:	d8800115 	stw	r2,4(sp)
10003098:	d8812304 	addi	r2,sp,1164
1000309c:	d8800215 	stw	r2,8(sp)
100030a0:	d8812204 	addi	r2,sp,1160
100030a4:	df000015 	stw	fp,0(sp)
100030a8:	d8800315 	stw	r2,12(sp)
100030ac:	8809883a 	mov	r4,r17
100030b0:	b00b883a 	mov	r5,r22
100030b4:	a00d883a 	mov	r6,r20
100030b8:	01c000c4 	movi	r7,3
100030bc:	da413c15 	stw	r9,1264(sp)
100030c0:	0004f4c0 	call	10004f4c <_dtoa_r>
100030c4:	da413c17 	ldw	r9,1264(sp)
100030c8:	1027883a 	mov	r19,r2
100030cc:	1707883a 	add	r3,r2,fp
100030d0:	e02f883a 	mov	r23,fp
100030d4:	99000007 	ldb	r4,0(r19)
100030d8:	00800c04 	movi	r2,48
100030dc:	20800326 	beq	r4,r2,100030ec <___vfprintf_internal_r+0x1b78>
100030e0:	da812417 	ldw	r10,1168(sp)
100030e4:	1a87883a 	add	r3,r3,r10
100030e8:	003f1406 	br	10002d3c <__alt_data_end+0xf8002d3c>
100030ec:	b009883a 	mov	r4,r22
100030f0:	a00b883a 	mov	r5,r20
100030f4:	000d883a 	mov	r6,zero
100030f8:	000f883a 	mov	r7,zero
100030fc:	d8c13b15 	stw	r3,1260(sp)
10003100:	da413c15 	stw	r9,1264(sp)
10003104:	000f4140 	call	1000f414 <__nedf2>
10003108:	d8c13b17 	ldw	r3,1260(sp)
1000310c:	da413c17 	ldw	r9,1264(sp)
10003110:	103ff326 	beq	r2,zero,100030e0 <__alt_data_end+0xf80030e0>
10003114:	00800044 	movi	r2,1
10003118:	15d5c83a 	sub	r10,r2,r23
1000311c:	da812415 	stw	r10,1168(sp)
10003120:	1a87883a 	add	r3,r3,r10
10003124:	003f0506 	br	10002d3c <__alt_data_end+0xf8002d3c>
10003128:	d9412917 	ldw	r5,1188(sp)
1000312c:	8809883a 	mov	r4,r17
10003130:	d9811b04 	addi	r6,sp,1132
10003134:	00015400 	call	10001540 <__sprint_r>
10003138:	103a541e 	bne	r2,zero,10001a8c <__alt_data_end+0xf8001a8c>
1000313c:	dc812417 	ldw	r18,1168(sp)
10003140:	da011d17 	ldw	r8,1140(sp)
10003144:	d8c11c17 	ldw	r3,1136(sp)
10003148:	da400404 	addi	r9,sp,16
1000314c:	003eb206 	br	10002c18 <__alt_data_end+0xf8002c18>
10003150:	b82b883a 	mov	r21,r23
10003154:	0007883a 	mov	r3,zero
10003158:	00396306 	br	100016e8 <__alt_data_end+0xf80016e8>
1000315c:	04c40074 	movhi	r19,4097
10003160:	9cca0104 	addi	r19,r19,10244
10003164:	003f4e06 	br	10002ea0 <__alt_data_end+0xf8002ea0>
10003168:	d8812583 	ldbu	r2,1174(sp)
1000316c:	dc012a17 	ldw	r16,1192(sp)
10003170:	d8013115 	stw	zero,1220(sp)
10003174:	003a8c06 	br	10001ba8 <__alt_data_end+0xf8001ba8>
10003178:	d8812417 	ldw	r2,1168(sp)
1000317c:	d8812b15 	stw	r2,1196(sp)
10003180:	1029883a 	mov	r20,r2
10003184:	00bfff44 	movi	r2,-3
10003188:	a0800116 	blt	r20,r2,10003190 <___vfprintf_internal_r+0x1c1c>
1000318c:	e5001d0e 	bge	fp,r20,10003204 <___vfprintf_internal_r+0x1c90>
10003190:	94bfff84 	addi	r18,r18,-2
10003194:	a53fffc4 	addi	r20,r20,-1
10003198:	dd012415 	stw	r20,1168(sp)
1000319c:	dc811fc5 	stb	r18,1151(sp)
100031a0:	a0007216 	blt	r20,zero,1000336c <___vfprintf_internal_r+0x1df8>
100031a4:	00800ac4 	movi	r2,43
100031a8:	d8812005 	stb	r2,1152(sp)
100031ac:	00800244 	movi	r2,9
100031b0:	15003516 	blt	r2,r20,10003288 <___vfprintf_internal_r+0x1d14>
100031b4:	00800c04 	movi	r2,48
100031b8:	a5000c04 	addi	r20,r20,48
100031bc:	d8812045 	stb	r2,1153(sp)
100031c0:	dd012085 	stb	r20,1154(sp)
100031c4:	d8c120c4 	addi	r3,sp,1155
100031c8:	d8811fc4 	addi	r2,sp,1151
100031cc:	1885c83a 	sub	r2,r3,r2
100031d0:	d8c13217 	ldw	r3,1224(sp)
100031d4:	d8813515 	stw	r2,1236(sp)
100031d8:	1885883a 	add	r2,r3,r2
100031dc:	d8812b15 	stw	r2,1196(sp)
100031e0:	00800044 	movi	r2,1
100031e4:	10c0580e 	bge	r2,r3,10003348 <___vfprintf_internal_r+0x1dd4>
100031e8:	d8812b17 	ldw	r2,1196(sp)
100031ec:	10800044 	addi	r2,r2,1
100031f0:	d8812b15 	stw	r2,1196(sp)
100031f4:	d8812815 	stw	r2,1184(sp)
100031f8:	103ef50e 	bge	r2,zero,10002dd0 <__alt_data_end+0xf8002dd0>
100031fc:	d8012815 	stw	zero,1184(sp)
10003200:	003ef306 	br	10002dd0 <__alt_data_end+0xf8002dd0>
10003204:	d8812b17 	ldw	r2,1196(sp)
10003208:	d8c13217 	ldw	r3,1224(sp)
1000320c:	10c01416 	blt	r2,r3,10003260 <___vfprintf_internal_r+0x1cec>
10003210:	8400004c 	andi	r16,r16,1
10003214:	80000326 	beq	r16,zero,10003224 <___vfprintf_internal_r+0x1cb0>
10003218:	d8812b17 	ldw	r2,1196(sp)
1000321c:	10800044 	addi	r2,r2,1
10003220:	d8812b15 	stw	r2,1196(sp)
10003224:	d8812815 	stw	r2,1184(sp)
10003228:	10001416 	blt	r2,zero,1000327c <___vfprintf_internal_r+0x1d08>
1000322c:	048019c4 	movi	r18,103
10003230:	003ee706 	br	10002dd0 <__alt_data_end+0xf8002dd0>
10003234:	d8012815 	stw	zero,1184(sp)
10003238:	003b1a06 	br	10001ea4 <__alt_data_end+0xf8001ea4>
1000323c:	e03e9c1e 	bne	fp,zero,10002cb0 <__alt_data_end+0xf8002cb0>
10003240:	07000044 	movi	fp,1
10003244:	003e9a06 	br	10002cb0 <__alt_data_end+0xf8002cb0>
10003248:	07000184 	movi	fp,6
1000324c:	003e9806 	br	10002cb0 <__alt_data_end+0xf8002cb0>
10003250:	00c00b44 	movi	r3,45
10003254:	a520003c 	xorhi	r20,r20,32768
10003258:	d8c12f05 	stb	r3,1212(sp)
1000325c:	003e9806 	br	10002cc0 <__alt_data_end+0xf8002cc0>
10003260:	05003f0e 	bge	zero,r20,10003360 <___vfprintf_internal_r+0x1dec>
10003264:	05000044 	movi	r20,1
10003268:	d8c13217 	ldw	r3,1224(sp)
1000326c:	a0e9883a 	add	r20,r20,r3
10003270:	dd012b15 	stw	r20,1196(sp)
10003274:	dd012815 	stw	r20,1184(sp)
10003278:	a03fec0e 	bge	r20,zero,1000322c <__alt_data_end+0xf800322c>
1000327c:	d8012815 	stw	zero,1184(sp)
10003280:	048019c4 	movi	r18,103
10003284:	003ed206 	br	10002dd0 <__alt_data_end+0xf8002dd0>
10003288:	d8c11f84 	addi	r3,sp,1150
1000328c:	102f883a 	mov	r23,r2
10003290:	4839883a 	mov	fp,r9
10003294:	a009883a 	mov	r4,r20
10003298:	01400284 	movi	r5,10
1000329c:	182d883a 	mov	r22,r3
100032a0:	00012900 	call	10001290 <__modsi3>
100032a4:	10800c04 	addi	r2,r2,48
100032a8:	a009883a 	mov	r4,r20
100032ac:	b0800005 	stb	r2,0(r22)
100032b0:	01400284 	movi	r5,10
100032b4:	00012400 	call	10001240 <__divsi3>
100032b8:	1029883a 	mov	r20,r2
100032bc:	b0ffffc4 	addi	r3,r22,-1
100032c0:	b8bff416 	blt	r23,r2,10003294 <__alt_data_end+0xf8003294>
100032c4:	11400c04 	addi	r5,r2,48
100032c8:	b17fffc5 	stb	r5,-1(r22)
100032cc:	d8811fc4 	addi	r2,sp,1151
100032d0:	e013883a 	mov	r9,fp
100032d4:	18803e2e 	bgeu	r3,r2,100033d0 <___vfprintf_internal_r+0x1e5c>
100032d8:	b007883a 	mov	r3,r22
100032dc:	d9012044 	addi	r4,sp,1153
100032e0:	00000206 	br	100032ec <___vfprintf_internal_r+0x1d78>
100032e4:	19400003 	ldbu	r5,0(r3)
100032e8:	18c00044 	addi	r3,r3,1
100032ec:	21400005 	stb	r5,0(r4)
100032f0:	21000044 	addi	r4,r4,1
100032f4:	10fffb1e 	bne	r2,r3,100032e4 <__alt_data_end+0xf80032e4>
100032f8:	d8c12004 	addi	r3,sp,1152
100032fc:	1d87c83a 	sub	r3,r3,r22
10003300:	d9012044 	addi	r4,sp,1153
10003304:	20c7883a 	add	r3,r4,r3
10003308:	003fb006 	br	100031cc <__alt_data_end+0xf80031cc>
1000330c:	e5c00044 	addi	r23,fp,1
10003310:	003e7406 	br	10002ce4 <__alt_data_end+0xf8002ce4>
10003314:	d8c12217 	ldw	r3,1160(sp)
10003318:	003e9906 	br	10002d80 <__alt_data_end+0xf8002d80>
1000331c:	d9012d17 	ldw	r4,1204(sp)
10003320:	ac800043 	ldbu	r18,1(r21)
10003324:	b82b883a 	mov	r21,r23
10003328:	20c00017 	ldw	r3,0(r4)
1000332c:	20800104 	addi	r2,r4,4
10003330:	d8812d15 	stw	r2,1204(sp)
10003334:	18002116 	blt	r3,zero,100033bc <___vfprintf_internal_r+0x1e48>
10003338:	94803fcc 	andi	r18,r18,255
1000333c:	9480201c 	xori	r18,r18,128
10003340:	94bfe004 	addi	r18,r18,-128
10003344:	0038e706 	br	100016e4 <__alt_data_end+0xf80016e4>
10003348:	80a0703a 	and	r16,r16,r2
1000334c:	803fa61e 	bne	r16,zero,100031e8 <__alt_data_end+0xf80031e8>
10003350:	d8812b17 	ldw	r2,1196(sp)
10003354:	d8812815 	stw	r2,1184(sp)
10003358:	103e9d0e 	bge	r2,zero,10002dd0 <__alt_data_end+0xf8002dd0>
1000335c:	003fa706 	br	100031fc <__alt_data_end+0xf80031fc>
10003360:	00800084 	movi	r2,2
10003364:	1529c83a 	sub	r20,r2,r20
10003368:	003fbf06 	br	10003268 <__alt_data_end+0xf8003268>
1000336c:	00800b44 	movi	r2,45
10003370:	0529c83a 	sub	r20,zero,r20
10003374:	d8812005 	stb	r2,1152(sp)
10003378:	003f8c06 	br	100031ac <__alt_data_end+0xf80031ac>
1000337c:	008011c4 	movi	r2,71
10003380:	90be6926 	beq	r18,r2,10002d28 <__alt_data_end+0xf8002d28>
10003384:	003e6a06 	br	10002d30 <__alt_data_end+0xf8002d30>
10003388:	00bfffc4 	movi	r2,-1
1000338c:	d8812c15 	stw	r2,1200(sp)
10003390:	0039ad06 	br	10001a48 <__alt_data_end+0xf8001a48>
10003394:	1007883a 	mov	r3,r2
10003398:	003e7906 	br	10002d80 <__alt_data_end+0xf8002d80>
1000339c:	e000021e 	bne	fp,zero,100033a8 <___vfprintf_internal_r+0x1e34>
100033a0:	8400004c 	andi	r16,r16,1
100033a4:	80000e26 	beq	r16,zero,100033e0 <___vfprintf_internal_r+0x1e6c>
100033a8:	e7000084 	addi	fp,fp,2
100033ac:	df012b15 	stw	fp,1196(sp)
100033b0:	df012815 	stw	fp,1184(sp)
100033b4:	e03e860e 	bge	fp,zero,10002dd0 <__alt_data_end+0xf8002dd0>
100033b8:	003f9006 	br	100031fc <__alt_data_end+0xf80031fc>
100033bc:	94803fcc 	andi	r18,r18,255
100033c0:	9480201c 	xori	r18,r18,128
100033c4:	00ffffc4 	movi	r3,-1
100033c8:	94bfe004 	addi	r18,r18,-128
100033cc:	0038c506 	br	100016e4 <__alt_data_end+0xf80016e4>
100033d0:	d8c12044 	addi	r3,sp,1153
100033d4:	003f7d06 	br	100031cc <__alt_data_end+0xf80031cc>
100033d8:	dd012417 	ldw	r20,1168(sp)
100033dc:	003f6d06 	br	10003194 <__alt_data_end+0xf8003194>
100033e0:	00c00044 	movi	r3,1
100033e4:	d8c12815 	stw	r3,1184(sp)
100033e8:	d8c12b15 	stw	r3,1196(sp)
100033ec:	003e7806 	br	10002dd0 <__alt_data_end+0xf8002dd0>

100033f0 <__vfprintf_internal>:
100033f0:	00840074 	movhi	r2,4097
100033f4:	1092a404 	addi	r2,r2,19088
100033f8:	2007883a 	mov	r3,r4
100033fc:	11000017 	ldw	r4,0(r2)
10003400:	2805883a 	mov	r2,r5
10003404:	300f883a 	mov	r7,r6
10003408:	180b883a 	mov	r5,r3
1000340c:	100d883a 	mov	r6,r2
10003410:	00015741 	jmpi	10001574 <___vfprintf_internal_r>

10003414 <__svfscanf_r>:
10003414:	deff4c04 	addi	sp,sp,-720
10003418:	ddc0b115 	stw	r23,708(sp)
1000341c:	dd00ae15 	stw	r20,696(sp)
10003420:	dcc0ad15 	stw	r19,692(sp)
10003424:	dc80ac15 	stw	r18,688(sp)
10003428:	dc40ab15 	stw	r17,684(sp)
1000342c:	dc00aa15 	stw	r16,680(sp)
10003430:	dfc0b315 	stw	ra,716(sp)
10003434:	df00b215 	stw	fp,712(sp)
10003438:	dd80b015 	stw	r22,704(sp)
1000343c:	dd40af15 	stw	r21,700(sp)
10003440:	30800007 	ldb	r2,0(r6)
10003444:	002f883a 	mov	r23,zero
10003448:	d9c09c15 	stw	r7,624(sp)
1000344c:	d800a015 	stw	zero,640(sp)
10003450:	d8009f15 	stw	zero,636(sp)
10003454:	d8009e15 	stw	zero,632(sp)
10003458:	d8809b15 	stw	r2,620(sp)
1000345c:	2023883a 	mov	r17,r4
10003460:	04840074 	movhi	r18,4097
10003464:	9492a204 	addi	r18,r18,19080
10003468:	b829883a 	mov	r20,r23
1000346c:	2827883a 	mov	r19,r5
10003470:	34000044 	addi	r16,r6,1
10003474:	10002426 	beq	r2,zero,10003508 <__svfscanf_r+0xf4>
10003478:	95400017 	ldw	r21,0(r18)
1000347c:	a887883a 	add	r3,r21,r2
10003480:	18c00003 	ldbu	r3,0(r3)
10003484:	18c0020c 	andi	r3,r3,8
10003488:	18c03fcc 	andi	r3,r3,255
1000348c:	18c0201c 	xori	r3,r3,128
10003490:	18ffe004 	addi	r3,r3,-128
10003494:	18002926 	beq	r3,zero,1000353c <__svfscanf_r+0x128>
10003498:	98800117 	ldw	r2,4(r19)
1000349c:	0080110e 	bge	zero,r2,100034e4 <__svfscanf_r+0xd0>
100034a0:	98c00017 	ldw	r3,0(r19)
100034a4:	91000017 	ldw	r4,0(r18)
100034a8:	18800003 	ldbu	r2,0(r3)
100034ac:	2085883a 	add	r2,r4,r2
100034b0:	10800003 	ldbu	r2,0(r2)
100034b4:	1080020c 	andi	r2,r2,8
100034b8:	10803fcc 	andi	r2,r2,255
100034bc:	1080201c 	xori	r2,r2,128
100034c0:	10bfe004 	addi	r2,r2,-128
100034c4:	10000b26 	beq	r2,zero,100034f4 <__svfscanf_r+0xe0>
100034c8:	98800117 	ldw	r2,4(r19)
100034cc:	18c00044 	addi	r3,r3,1
100034d0:	98c00015 	stw	r3,0(r19)
100034d4:	10bfffc4 	addi	r2,r2,-1
100034d8:	98800115 	stw	r2,4(r19)
100034dc:	a5000044 	addi	r20,r20,1
100034e0:	00bfef16 	blt	zero,r2,100034a0 <__alt_data_end+0xf80034a0>
100034e4:	8809883a 	mov	r4,r17
100034e8:	980b883a 	mov	r5,r19
100034ec:	0009f140 	call	10009f14 <__srefill_r>
100034f0:	103feb26 	beq	r2,zero,100034a0 <__alt_data_end+0xf80034a0>
100034f4:	800d883a 	mov	r6,r16
100034f8:	30800007 	ldb	r2,0(r6)
100034fc:	34000044 	addi	r16,r6,1
10003500:	d8809b15 	stw	r2,620(sp)
10003504:	103fdc1e 	bne	r2,zero,10003478 <__alt_data_end+0xf8003478>
10003508:	d8809e17 	ldw	r2,632(sp)
1000350c:	dfc0b317 	ldw	ra,716(sp)
10003510:	df00b217 	ldw	fp,712(sp)
10003514:	ddc0b117 	ldw	r23,708(sp)
10003518:	dd80b017 	ldw	r22,704(sp)
1000351c:	dd40af17 	ldw	r21,700(sp)
10003520:	dd00ae17 	ldw	r20,696(sp)
10003524:	dcc0ad17 	ldw	r19,692(sp)
10003528:	dc80ac17 	ldw	r18,688(sp)
1000352c:	dc40ab17 	ldw	r17,684(sp)
10003530:	dc00aa17 	ldw	r16,680(sp)
10003534:	dec0b404 	addi	sp,sp,720
10003538:	f800283a 	ret
1000353c:	00c00944 	movi	r3,37
10003540:	10c00e26 	beq	r2,r3,1000357c <__svfscanf_r+0x168>
10003544:	98800117 	ldw	r2,4(r19)
10003548:	0080e40e 	bge	zero,r2,100038dc <__svfscanf_r+0x4c8>
1000354c:	98800017 	ldw	r2,0(r19)
10003550:	80ffffc7 	ldb	r3,-1(r16)
10003554:	11000003 	ldbu	r4,0(r2)
10003558:	20ffeb1e 	bne	r4,r3,10003508 <__alt_data_end+0xf8003508>
1000355c:	98c00117 	ldw	r3,4(r19)
10003560:	10800044 	addi	r2,r2,1
10003564:	98800015 	stw	r2,0(r19)
10003568:	18bfffc4 	addi	r2,r3,-1
1000356c:	98800115 	stw	r2,4(r19)
10003570:	a5000044 	addi	r20,r20,1
10003574:	800d883a 	mov	r6,r16
10003578:	003fdf06 	br	100034f8 <__alt_data_end+0xf80034f8>
1000357c:	0039883a 	mov	fp,zero
10003580:	35c00043 	ldbu	r23,1(r6)
10003584:	002d883a 	mov	r22,zero
10003588:	00c01e04 	movi	r3,120
1000358c:	01801b04 	movi	r6,108
10003590:	e009883a 	mov	r4,fp
10003594:	b8803fcc 	andi	r2,r23,255
10003598:	87000044 	addi	fp,r16,1
1000359c:	18804f2e 	bgeu	r3,r2,100036dc <__svfscanf_r+0x2c8>
100035a0:	bdc03fcc 	andi	r23,r23,255
100035a4:	bdc0201c 	xori	r23,r23,128
100035a8:	bdffe004 	addi	r23,r23,-128
100035ac:	adeb883a 	add	r21,r21,r23
100035b0:	a8800003 	ldbu	r2,0(r21)
100035b4:	df009d15 	stw	fp,628(sp)
100035b8:	2039883a 	mov	fp,r4
100035bc:	1080004c 	andi	r2,r2,1
100035c0:	1002d926 	beq	r2,zero,10004128 <__svfscanf_r+0xd14>
100035c4:	b5800054 	ori	r22,r22,1
100035c8:	00840074 	movhi	r2,4097
100035cc:	10aef004 	addi	r2,r2,-17472
100035d0:	00c00284 	movi	r3,10
100035d4:	d880a015 	stw	r2,640(sp)
100035d8:	d8c09f15 	stw	r3,636(sp)
100035dc:	040000c4 	movi	r16,3
100035e0:	98800117 	ldw	r2,4(r19)
100035e4:	0081bd0e 	bge	zero,r2,10003cdc <__svfscanf_r+0x8c8>
100035e8:	b080100c 	andi	r2,r22,64
100035ec:	1000ce26 	beq	r2,zero,10003928 <__svfscanf_r+0x514>
100035f0:	00800084 	movi	r2,2
100035f4:	80818426 	beq	r16,r2,10003c08 <__svfscanf_r+0x7f4>
100035f8:	1400f716 	blt	r2,r16,100039d8 <__svfscanf_r+0x5c4>
100035fc:	00800044 	movi	r2,1
10003600:	8080dc26 	beq	r16,r2,10003974 <__svfscanf_r+0x560>
10003604:	e000011e 	bne	fp,zero,1000360c <__svfscanf_r+0x1f8>
10003608:	07000044 	movi	fp,1
1000360c:	b080004c 	andi	r2,r22,1
10003610:	10022826 	beq	r2,zero,10003eb4 <__svfscanf_r+0xaa0>
10003614:	b5c0040c 	andi	r23,r22,16
10003618:	b804601e 	bne	r23,zero,1000479c <__svfscanf_r+0x1388>
1000361c:	d8c09c17 	ldw	r3,624(sp)
10003620:	1d800017 	ldw	r22,0(r3)
10003624:	18c00104 	addi	r3,r3,4
10003628:	d8c09c15 	stw	r3,624(sp)
1000362c:	0021883a 	mov	r16,zero
10003630:	dd409904 	addi	r21,sp,612
10003634:	01040074 	movhi	r4,4097
10003638:	2112a504 	addi	r4,r4,19092
1000363c:	20800017 	ldw	r2,0(r4)
10003640:	8080aa26 	beq	r16,r2,100038ec <__svfscanf_r+0x4d8>
10003644:	98800017 	ldw	r2,0(r19)
10003648:	9a000117 	ldw	r8,4(r19)
1000364c:	d9400104 	addi	r5,sp,4
10003650:	11c00003 	ldbu	r7,0(r2)
10003654:	423fffc4 	addi	r8,r8,-1
10003658:	10800044 	addi	r2,r2,1
1000365c:	2c07883a 	add	r3,r5,r16
10003660:	a809883a 	mov	r4,r21
10003664:	000b883a 	mov	r5,zero
10003668:	01800204 	movi	r6,8
1000366c:	9a000115 	stw	r8,4(r19)
10003670:	98800015 	stw	r2,0(r19)
10003674:	19c00005 	stb	r7,0(r3)
10003678:	84000044 	addi	r16,r16,1
1000367c:	00086240 	call	10008624 <memset>
10003680:	8809883a 	mov	r4,r17
10003684:	dd400015 	stw	r21,0(sp)
10003688:	b00b883a 	mov	r5,r22
1000368c:	d9800104 	addi	r6,sp,4
10003690:	800f883a 	mov	r7,r16
10003694:	00081780 	call	10008178 <_mbrtowc_r>
10003698:	00ffffc4 	movi	r3,-1
1000369c:	10c09326 	beq	r2,r3,100038ec <__svfscanf_r+0x4d8>
100036a0:	1003281e 	bne	r2,zero,10004344 <__svfscanf_r+0xf30>
100036a4:	b800011e 	bne	r23,zero,100036ac <__svfscanf_r+0x298>
100036a8:	b0000015 	stw	zero,0(r22)
100036ac:	a429883a 	add	r20,r20,r16
100036b0:	e73fffc4 	addi	fp,fp,-1
100036b4:	b803281e 	bne	r23,zero,10004358 <__svfscanf_r+0xf44>
100036b8:	b5800104 	addi	r22,r22,4
100036bc:	0021883a 	mov	r16,zero
100036c0:	98800117 	ldw	r2,4(r19)
100036c4:	00820b0e 	bge	zero,r2,10003ef4 <__svfscanf_r+0xae0>
100036c8:	e03fda1e 	bne	fp,zero,10003634 <__alt_data_end+0xf8003634>
100036cc:	b8012226 	beq	r23,zero,10003b58 <__svfscanf_r+0x744>
100036d0:	dc009d17 	ldw	r16,628(sp)
100036d4:	800d883a 	mov	r6,r16
100036d8:	003f8706 	br	100034f8 <__alt_data_end+0xf80034f8>
100036dc:	1085883a 	add	r2,r2,r2
100036e0:	1085883a 	add	r2,r2,r2
100036e4:	01440034 	movhi	r5,4096
100036e8:	294dbe04 	addi	r5,r5,14072
100036ec:	1145883a 	add	r2,r2,r5
100036f0:	10800017 	ldw	r2,0(r2)
100036f4:	1000683a 	jmp	r2
100036f8:	1000390c 	andi	zero,r2,228
100036fc:	100035a0 	cmpeqi	zero,r2,214
10003700:	100035a0 	cmpeqi	zero,r2,214
10003704:	100035a0 	cmpeqi	zero,r2,214
10003708:	100035a0 	cmpeqi	zero,r2,214
1000370c:	100035a0 	cmpeqi	zero,r2,214
10003710:	100035a0 	cmpeqi	zero,r2,214
10003714:	100035a0 	cmpeqi	zero,r2,214
10003718:	100035a0 	cmpeqi	zero,r2,214
1000371c:	100035a0 	cmpeqi	zero,r2,214
10003720:	100035a0 	cmpeqi	zero,r2,214
10003724:	100035a0 	cmpeqi	zero,r2,214
10003728:	100035a0 	cmpeqi	zero,r2,214
1000372c:	100035a0 	cmpeqi	zero,r2,214
10003730:	100035a0 	cmpeqi	zero,r2,214
10003734:	100035a0 	cmpeqi	zero,r2,214
10003738:	100035a0 	cmpeqi	zero,r2,214
1000373c:	100035a0 	cmpeqi	zero,r2,214
10003740:	100035a0 	cmpeqi	zero,r2,214
10003744:	100035a0 	cmpeqi	zero,r2,214
10003748:	100035a0 	cmpeqi	zero,r2,214
1000374c:	100035a0 	cmpeqi	zero,r2,214
10003750:	100035a0 	cmpeqi	zero,r2,214
10003754:	100035a0 	cmpeqi	zero,r2,214
10003758:	100035a0 	cmpeqi	zero,r2,214
1000375c:	100035a0 	cmpeqi	zero,r2,214
10003760:	100035a0 	cmpeqi	zero,r2,214
10003764:	100035a0 	cmpeqi	zero,r2,214
10003768:	100035a0 	cmpeqi	zero,r2,214
1000376c:	100035a0 	cmpeqi	zero,r2,214
10003770:	100035a0 	cmpeqi	zero,r2,214
10003774:	100035a0 	cmpeqi	zero,r2,214
10003778:	100035a0 	cmpeqi	zero,r2,214
1000377c:	100035a0 	cmpeqi	zero,r2,214
10003780:	100035a0 	cmpeqi	zero,r2,214
10003784:	100035a0 	cmpeqi	zero,r2,214
10003788:	100035a0 	cmpeqi	zero,r2,214
1000378c:	100041dc 	xori	zero,r2,263
10003790:	100035a0 	cmpeqi	zero,r2,214
10003794:	100035a0 	cmpeqi	zero,r2,214
10003798:	100035a0 	cmpeqi	zero,r2,214
1000379c:	100035a0 	cmpeqi	zero,r2,214
100037a0:	100041e8 	cmpgeui	zero,r2,263
100037a4:	100035a0 	cmpeqi	zero,r2,214
100037a8:	100035a0 	cmpeqi	zero,r2,214
100037ac:	100035a0 	cmpeqi	zero,r2,214
100037b0:	100035a0 	cmpeqi	zero,r2,214
100037b4:	100035a0 	cmpeqi	zero,r2,214
100037b8:	10004178 	rdprs	zero,r2,261
100037bc:	10004178 	rdprs	zero,r2,261
100037c0:	10004178 	rdprs	zero,r2,261
100037c4:	10004178 	rdprs	zero,r2,261
100037c8:	10004178 	rdprs	zero,r2,261
100037cc:	10004178 	rdprs	zero,r2,261
100037d0:	10004178 	rdprs	zero,r2,261
100037d4:	10004178 	rdprs	zero,r2,261
100037d8:	10004178 	rdprs	zero,r2,261
100037dc:	10004178 	rdprs	zero,r2,261
100037e0:	100035a0 	cmpeqi	zero,r2,214
100037e4:	100035a0 	cmpeqi	zero,r2,214
100037e8:	100035a0 	cmpeqi	zero,r2,214
100037ec:	100035a0 	cmpeqi	zero,r2,214
100037f0:	100035a0 	cmpeqi	zero,r2,214
100037f4:	100035a0 	cmpeqi	zero,r2,214
100037f8:	100035a0 	cmpeqi	zero,r2,214
100037fc:	100035a0 	cmpeqi	zero,r2,214
10003800:	100035a0 	cmpeqi	zero,r2,214
10003804:	100035a0 	cmpeqi	zero,r2,214
10003808:	100041b0 	cmpltui	zero,r2,262
1000380c:	100041bc 	xorhi	zero,r2,262
10003810:	100035a0 	cmpeqi	zero,r2,214
10003814:	100041bc 	xorhi	zero,r2,262
10003818:	100035a0 	cmpeqi	zero,r2,214
1000381c:	100035a0 	cmpeqi	zero,r2,214
10003820:	100035a0 	cmpeqi	zero,r2,214
10003824:	100035a0 	cmpeqi	zero,r2,214
10003828:	100041cc 	andi	zero,r2,263
1000382c:	100035a0 	cmpeqi	zero,r2,214
10003830:	100035a0 	cmpeqi	zero,r2,214
10003834:	100041f8 	rdprs	zero,r2,263
10003838:	100035a0 	cmpeqi	zero,r2,214
1000383c:	100035a0 	cmpeqi	zero,r2,214
10003840:	100035a0 	cmpeqi	zero,r2,214
10003844:	100035a0 	cmpeqi	zero,r2,214
10003848:	100035a0 	cmpeqi	zero,r2,214
1000384c:	100035a0 	cmpeqi	zero,r2,214
10003850:	100035a0 	cmpeqi	zero,r2,214
10003854:	100035a0 	cmpeqi	zero,r2,214
10003858:	10004220 	cmpeqi	zero,r2,264
1000385c:	100035a0 	cmpeqi	zero,r2,214
10003860:	100035a0 	cmpeqi	zero,r2,214
10003864:	10004248 	cmpgei	zero,r2,265
10003868:	100035a0 	cmpeqi	zero,r2,214
1000386c:	100035a0 	cmpeqi	zero,r2,214
10003870:	100035a0 	cmpeqi	zero,r2,214
10003874:	100035a0 	cmpeqi	zero,r2,214
10003878:	100035a0 	cmpeqi	zero,r2,214
1000387c:	100035a0 	cmpeqi	zero,r2,214
10003880:	100035a0 	cmpeqi	zero,r2,214
10003884:	1000426c 	andhi	zero,r2,265
10003888:	10004280 	call	11000428 <_gp+0xfe39a0>
1000388c:	100041bc 	xorhi	zero,r2,262
10003890:	100041bc 	xorhi	zero,r2,262
10003894:	100041bc 	xorhi	zero,r2,262
10003898:	1000428c 	andi	zero,r2,266
1000389c:	1000429c 	xori	zero,r2,266
100038a0:	100035a0 	cmpeqi	zero,r2,214
100038a4:	100035a0 	cmpeqi	zero,r2,214
100038a8:	100042bc 	xorhi	zero,r2,266
100038ac:	100035a0 	cmpeqi	zero,r2,214
100038b0:	100042dc 	xori	zero,r2,267
100038b4:	10004310 	cmplti	zero,r2,268
100038b8:	1000431c 	xori	zero,r2,268
100038bc:	100035a0 	cmpeqi	zero,r2,214
100038c0:	100035a0 	cmpeqi	zero,r2,214
100038c4:	10004144 	addi	zero,r2,261
100038c8:	100035a0 	cmpeqi	zero,r2,214
100038cc:	10004154 	ori	zero,r2,261
100038d0:	100035a0 	cmpeqi	zero,r2,214
100038d4:	100035a0 	cmpeqi	zero,r2,214
100038d8:	10004220 	cmpeqi	zero,r2,264
100038dc:	8809883a 	mov	r4,r17
100038e0:	980b883a 	mov	r5,r19
100038e4:	0009f140 	call	10009f14 <__srefill_r>
100038e8:	103f1826 	beq	r2,zero,1000354c <__alt_data_end+0xf800354c>
100038ec:	d8809e17 	ldw	r2,632(sp)
100038f0:	10000626 	beq	r2,zero,1000390c <__svfscanf_r+0x4f8>
100038f4:	9880030b 	ldhu	r2,12(r19)
100038f8:	1080100c 	andi	r2,r2,64
100038fc:	10bfffcc 	andi	r2,r2,65535
10003900:	10a0001c 	xori	r2,r2,32768
10003904:	10a00004 	addi	r2,r2,-32768
10003908:	103eff26 	beq	r2,zero,10003508 <__alt_data_end+0xf8003508>
1000390c:	00bfffc4 	movi	r2,-1
10003910:	d8809e15 	stw	r2,632(sp)
10003914:	003efc06 	br	10003508 <__alt_data_end+0xf8003508>
10003918:	8809883a 	mov	r4,r17
1000391c:	980b883a 	mov	r5,r19
10003920:	0009f140 	call	10009f14 <__srefill_r>
10003924:	103ff11e 	bne	r2,zero,100038ec <__alt_data_end+0xf80038ec>
10003928:	91400017 	ldw	r5,0(r18)
1000392c:	98800017 	ldw	r2,0(r19)
10003930:	00000206 	br	1000393c <__svfscanf_r+0x528>
10003934:	10800044 	addi	r2,r2,1
10003938:	98800015 	stw	r2,0(r19)
1000393c:	10c00003 	ldbu	r3,0(r2)
10003940:	28c7883a 	add	r3,r5,r3
10003944:	18c00003 	ldbu	r3,0(r3)
10003948:	18c0020c 	andi	r3,r3,8
1000394c:	18c03fcc 	andi	r3,r3,255
10003950:	18c0201c 	xori	r3,r3,128
10003954:	18ffe004 	addi	r3,r3,-128
10003958:	183f2526 	beq	r3,zero,100035f0 <__alt_data_end+0xf80035f0>
1000395c:	98c00117 	ldw	r3,4(r19)
10003960:	a5000044 	addi	r20,r20,1
10003964:	18ffffc4 	addi	r3,r3,-1
10003968:	98c00115 	stw	r3,4(r19)
1000396c:	00fff116 	blt	zero,r3,10003934 <__alt_data_end+0xf8003934>
10003970:	003fe906 	br	10003918 <__alt_data_end+0xf8003918>
10003974:	e000011e 	bne	fp,zero,1000397c <__svfscanf_r+0x568>
10003978:	073fffc4 	movi	fp,-1
1000397c:	b580040c 	andi	r22,r22,16
10003980:	b0016826 	beq	r22,zero,10003f24 <__svfscanf_r+0xb10>
10003984:	98800017 	ldw	r2,0(r19)
10003988:	0021883a 	mov	r16,zero
1000398c:	dd805884 	addi	r22,sp,354
10003990:	10c00003 	ldbu	r3,0(r2)
10003994:	b0c7883a 	add	r3,r22,r3
10003998:	18c00007 	ldb	r3,0(r3)
1000399c:	18039726 	beq	r3,zero,100047fc <__svfscanf_r+0x13e8>
100039a0:	98c00117 	ldw	r3,4(r19)
100039a4:	10800044 	addi	r2,r2,1
100039a8:	84000044 	addi	r16,r16,1
100039ac:	18ffffc4 	addi	r3,r3,-1
100039b0:	98c00115 	stw	r3,4(r19)
100039b4:	98800015 	stw	r2,0(r19)
100039b8:	e4008f26 	beq	fp,r16,10003bf8 <__svfscanf_r+0x7e4>
100039bc:	00fff416 	blt	zero,r3,10003990 <__alt_data_end+0xf8003990>
100039c0:	8809883a 	mov	r4,r17
100039c4:	980b883a 	mov	r5,r19
100039c8:	0009f140 	call	10009f14 <__srefill_r>
100039cc:	10008a1e 	bne	r2,zero,10003bf8 <__svfscanf_r+0x7e4>
100039d0:	98800017 	ldw	r2,0(r19)
100039d4:	003fee06 	br	10003990 <__alt_data_end+0xf8003990>
100039d8:	008000c4 	movi	r2,3
100039dc:	80806426 	beq	r16,r2,10003b70 <__svfscanf_r+0x75c>
100039e0:	00800104 	movi	r2,4
100039e4:	80bf071e 	bne	r16,r2,10003604 <__alt_data_end+0xf8003604>
100039e8:	e0bfffc4 	addi	r2,fp,-1
100039ec:	01005704 	movi	r4,348
100039f0:	20814736 	bltu	r4,r2,10003f10 <__svfscanf_r+0xafc>
100039f4:	0017883a 	mov	r11,zero
100039f8:	b581e014 	ori	r22,r22,1920
100039fc:	0021883a 	mov	r16,zero
10003a00:	d800a115 	stw	zero,644(sp)
10003a04:	d800a315 	stw	zero,652(sp)
10003a08:	002b883a 	mov	r21,zero
10003a0c:	d800a215 	stw	zero,648(sp)
10003a10:	ddc00104 	addi	r23,sp,4
10003a14:	000d883a 	mov	r6,zero
10003a18:	00c01384 	movi	r3,78
10003a1c:	03810004 	movi	r14,1024
10003a20:	033e1fc4 	movi	r12,-1921
10003a24:	03ff5fc4 	movi	r15,-641
10003a28:	99c00017 	ldw	r7,0(r19)
10003a2c:	39400003 	ldbu	r5,0(r7)
10003a30:	28bff544 	addi	r2,r5,-43
10003a34:	10803fcc 	andi	r2,r2,255
10003a38:	1880c82e 	bgeu	r3,r2,10003d5c <__svfscanf_r+0x948>
10003a3c:	a8000226 	beq	r21,zero,10003a48 <__svfscanf_r+0x634>
10003a40:	00bfbfc4 	movi	r2,-257
10003a44:	b0ac703a 	and	r22,r22,r2
10003a48:	31bfffc4 	addi	r6,r6,-1
10003a4c:	00800044 	movi	r2,1
10003a50:	1184092e 	bgeu	r2,r6,10004a78 <__svfscanf_r+0x1664>
10003a54:	80803fcc 	andi	r2,r16,255
10003a58:	1080201c 	xori	r2,r2,128
10003a5c:	10bfe004 	addi	r2,r2,-128
10003a60:	10ffffc4 	addi	r3,r2,-1
10003a64:	01000184 	movi	r4,6
10003a68:	20c01036 	bltu	r4,r3,10003aac <__svfscanf_r+0x698>
10003a6c:	00c00084 	movi	r3,2
10003a70:	1883f50e 	bge	r3,r2,10004a48 <__svfscanf_r+0x1634>
10003a74:	00c000c4 	movi	r3,3
10003a78:	10c00c26 	beq	r2,r3,10003aac <__svfscanf_r+0x698>
10003a7c:	843fff04 	addi	r16,r16,-4
10003a80:	84003fcc 	andi	r16,r16,255
10003a84:	0438303a 	nor	fp,zero,r16
10003a88:	bf39883a 	add	fp,r23,fp
10003a8c:	bdffffc4 	addi	r23,r23,-1
10003a90:	b9400007 	ldb	r5,0(r23)
10003a94:	8809883a 	mov	r4,r17
10003a98:	980d883a 	mov	r6,r19
10003a9c:	000c8c40 	call	1000c8c4 <_ungetc_r>
10003aa0:	bf3ffa1e 	bne	r23,fp,10003a8c <__alt_data_end+0xf8003a8c>
10003aa4:	a27fffc4 	addi	r9,r20,-1
10003aa8:	4c29c83a 	sub	r20,r9,r16
10003aac:	b080400c 	andi	r2,r22,256
10003ab0:	10001326 	beq	r2,zero,10003b00 <__svfscanf_r+0x6ec>
10003ab4:	b081000c 	andi	r2,r22,1024
10003ab8:	1003d21e 	bne	r2,zero,10004a04 <__svfscanf_r+0x15f0>
10003abc:	b97fffc7 	ldb	r5,-1(r23)
10003ac0:	00801944 	movi	r2,101
10003ac4:	bc3fffc4 	addi	r16,r23,-1
10003ac8:	a53fffc4 	addi	r20,r20,-1
10003acc:	28800826 	beq	r5,r2,10003af0 <__svfscanf_r+0x6dc>
10003ad0:	00801144 	movi	r2,69
10003ad4:	28800626 	beq	r5,r2,10003af0 <__svfscanf_r+0x6dc>
10003ad8:	8809883a 	mov	r4,r17
10003adc:	980d883a 	mov	r6,r19
10003ae0:	000c8c40 	call	1000c8c4 <_ungetc_r>
10003ae4:	b97fff87 	ldb	r5,-2(r23)
10003ae8:	bc3fff84 	addi	r16,r23,-2
10003aec:	a53fffc4 	addi	r20,r20,-1
10003af0:	8809883a 	mov	r4,r17
10003af4:	980d883a 	mov	r6,r19
10003af8:	000c8c40 	call	1000c8c4 <_ungetc_r>
10003afc:	802f883a 	mov	r23,r16
10003b00:	b080040c 	andi	r2,r22,16
10003b04:	103ef21e 	bne	r2,zero,100036d0 <__alt_data_end+0xf80036d0>
10003b08:	b8000005 	stb	zero,0(r23)
10003b0c:	b0c1800c 	andi	r3,r22,1536
10003b10:	00810004 	movi	r2,1024
10003b14:	18837726 	beq	r3,r2,100048f4 <__svfscanf_r+0x14e0>
10003b18:	d8c0a317 	ldw	r3,652(sp)
10003b1c:	1803601e 	bne	r3,zero,100048a0 <__svfscanf_r+0x148c>
10003b20:	8809883a 	mov	r4,r17
10003b24:	d9400104 	addi	r5,sp,4
10003b28:	000d883a 	mov	r6,zero
10003b2c:	000a53c0 	call	1000a53c <_strtod_r>
10003b30:	102b883a 	mov	r21,r2
10003b34:	b080004c 	andi	r2,r22,1
10003b38:	182f883a 	mov	r23,r3
10003b3c:	10031f26 	beq	r2,zero,100047bc <__svfscanf_r+0x13a8>
10003b40:	d9409c17 	ldw	r5,624(sp)
10003b44:	28800017 	ldw	r2,0(r5)
10003b48:	29400104 	addi	r5,r5,4
10003b4c:	d9409c15 	stw	r5,624(sp)
10003b50:	15400015 	stw	r21,0(r2)
10003b54:	10c00115 	stw	r3,4(r2)
10003b58:	d8809e17 	ldw	r2,632(sp)
10003b5c:	dc009d17 	ldw	r16,628(sp)
10003b60:	10800044 	addi	r2,r2,1
10003b64:	d8809e15 	stw	r2,632(sp)
10003b68:	800d883a 	mov	r6,r16
10003b6c:	003e6206 	br	100034f8 <__alt_data_end+0xf80034f8>
10003b70:	e0bfffc4 	addi	r2,fp,-1
10003b74:	01005704 	movi	r4,348
10003b78:	2080e82e 	bgeu	r4,r2,10003f1c <__svfscanf_r+0xb08>
10003b7c:	e0ffa8c4 	addi	r3,fp,-349
10003b80:	07005744 	movi	fp,349
10003b84:	da409f17 	ldw	r9,636(sp)
10003b88:	b5836014 	ori	r22,r22,3456
10003b8c:	0021883a 	mov	r16,zero
10003b90:	dd400104 	addi	r21,sp,4
10003b94:	05c01344 	movi	r23,77
10003b98:	01c08004 	movi	r7,512
10003b9c:	01bf7fc4 	movi	r6,-513
10003ba0:	9a000017 	ldw	r8,0(r19)
10003ba4:	41400003 	ldbu	r5,0(r8)
10003ba8:	28bff544 	addi	r2,r5,-43
10003bac:	10803fcc 	andi	r2,r2,255
10003bb0:	b881eb2e 	bgeu	r23,r2,10004360 <__svfscanf_r+0xf4c>
10003bb4:	da409f15 	stw	r9,636(sp)
10003bb8:	b080400c 	andi	r2,r22,256
10003bbc:	10000926 	beq	r2,zero,10003be4 <__svfscanf_r+0x7d0>
10003bc0:	d9400104 	addi	r5,sp,4
10003bc4:	2d40052e 	bgeu	r5,r21,10003bdc <__svfscanf_r+0x7c8>
10003bc8:	a97fffc7 	ldb	r5,-1(r21)
10003bcc:	8809883a 	mov	r4,r17
10003bd0:	980d883a 	mov	r6,r19
10003bd4:	ad7fffc4 	addi	r21,r21,-1
10003bd8:	000c8c40 	call	1000c8c4 <_ungetc_r>
10003bdc:	d8800104 	addi	r2,sp,4
10003be0:	157e4926 	beq	r2,r21,10003508 <__alt_data_end+0xf8003508>
10003be4:	b080040c 	andi	r2,r22,16
10003be8:	1002ac26 	beq	r2,zero,1000469c <__svfscanf_r+0x1288>
10003bec:	d8c00104 	addi	r3,sp,4
10003bf0:	a8ebc83a 	sub	r21,r21,r3
10003bf4:	ac21883a 	add	r16,r21,r16
10003bf8:	a429883a 	add	r20,r20,r16
10003bfc:	dc009d17 	ldw	r16,628(sp)
10003c00:	800d883a 	mov	r6,r16
10003c04:	003e3c06 	br	100034f8 <__alt_data_end+0xf80034f8>
10003c08:	e000011e 	bne	fp,zero,10003c10 <__svfscanf_r+0x7fc>
10003c0c:	073fffc4 	movi	fp,-1
10003c10:	b080004c 	andi	r2,r22,1
10003c14:	b580040c 	andi	r22,r22,16
10003c18:	10003526 	beq	r2,zero,10003cf0 <__svfscanf_r+0x8dc>
10003c1c:	b002dd1e 	bne	r22,zero,10004794 <__svfscanf_r+0x1380>
10003c20:	d8c09c17 	ldw	r3,624(sp)
10003c24:	1d400017 	ldw	r21,0(r3)
10003c28:	18c00104 	addi	r3,r3,4
10003c2c:	d8c09c15 	stw	r3,624(sp)
10003c30:	0021883a 	mov	r16,zero
10003c34:	ddc09904 	addi	r23,sp,612
10003c38:	98c00017 	ldw	r3,0(r19)
10003c3c:	91400017 	ldw	r5,0(r18)
10003c40:	18800003 	ldbu	r2,0(r3)
10003c44:	11003fcc 	andi	r4,r2,255
10003c48:	2909883a 	add	r4,r5,r4
10003c4c:	21000003 	ldbu	r4,0(r4)
10003c50:	2100020c 	andi	r4,r4,8
10003c54:	21003fcc 	andi	r4,r4,255
10003c58:	2100201c 	xori	r4,r4,128
10003c5c:	213fe004 	addi	r4,r4,-128
10003c60:	2002731e 	bne	r4,zero,10004630 <__svfscanf_r+0x121c>
10003c64:	e0027226 	beq	fp,zero,10004630 <__svfscanf_r+0x121c>
10003c68:	01440074 	movhi	r5,4097
10003c6c:	2952a504 	addi	r5,r5,19092
10003c70:	29000017 	ldw	r4,0(r5)
10003c74:	813f1d26 	beq	r16,r4,100038ec <__alt_data_end+0xf80038ec>
10003c78:	9a000117 	ldw	r8,4(r19)
10003c7c:	18c00044 	addi	r3,r3,1
10003c80:	d9000104 	addi	r4,sp,4
10003c84:	423fffc4 	addi	r8,r8,-1
10003c88:	240f883a 	add	r7,r4,r16
10003c8c:	000b883a 	mov	r5,zero
10003c90:	b809883a 	mov	r4,r23
10003c94:	01800204 	movi	r6,8
10003c98:	9a000115 	stw	r8,4(r19)
10003c9c:	98c00015 	stw	r3,0(r19)
10003ca0:	38800005 	stb	r2,0(r7)
10003ca4:	84000044 	addi	r16,r16,1
10003ca8:	00086240 	call	10008624 <memset>
10003cac:	a80b883a 	mov	r5,r21
10003cb0:	8809883a 	mov	r4,r17
10003cb4:	ddc00015 	stw	r23,0(sp)
10003cb8:	d9800104 	addi	r6,sp,4
10003cbc:	800f883a 	mov	r7,r16
10003cc0:	00081780 	call	10008178 <_mbrtowc_r>
10003cc4:	017fffc4 	movi	r5,-1
10003cc8:	117f0826 	beq	r2,r5,100038ec <__alt_data_end+0xf80038ec>
10003ccc:	1002de1e 	bne	r2,zero,10004848 <__svfscanf_r+0x1434>
10003cd0:	a8000015 	stw	zero,0(r21)
10003cd4:	0009883a 	mov	r4,zero
10003cd8:	0002de06 	br	10004854 <__svfscanf_r+0x1440>
10003cdc:	8809883a 	mov	r4,r17
10003ce0:	980b883a 	mov	r5,r19
10003ce4:	0009f140 	call	10009f14 <__srefill_r>
10003ce8:	103e3f26 	beq	r2,zero,100035e8 <__alt_data_end+0xf80035e8>
10003cec:	003eff06 	br	100038ec <__alt_data_end+0xf80038ec>
10003cf0:	b0027e26 	beq	r22,zero,100046ec <__svfscanf_r+0x12d8>
10003cf4:	91400017 	ldw	r5,0(r18)
10003cf8:	98800017 	ldw	r2,0(r19)
10003cfc:	0021883a 	mov	r16,zero
10003d00:	10c00003 	ldbu	r3,0(r2)
10003d04:	28c7883a 	add	r3,r5,r3
10003d08:	18c00003 	ldbu	r3,0(r3)
10003d0c:	18c0020c 	andi	r3,r3,8
10003d10:	18c03fcc 	andi	r3,r3,255
10003d14:	18c0201c 	xori	r3,r3,128
10003d18:	18ffe004 	addi	r3,r3,-128
10003d1c:	183fb61e 	bne	r3,zero,10003bf8 <__alt_data_end+0xf8003bf8>
10003d20:	98c00117 	ldw	r3,4(r19)
10003d24:	10800044 	addi	r2,r2,1
10003d28:	84000044 	addi	r16,r16,1
10003d2c:	18ffffc4 	addi	r3,r3,-1
10003d30:	98c00115 	stw	r3,4(r19)
10003d34:	98800015 	stw	r2,0(r19)
10003d38:	e43faf26 	beq	fp,r16,10003bf8 <__alt_data_end+0xf8003bf8>
10003d3c:	00fff016 	blt	zero,r3,10003d00 <__alt_data_end+0xf8003d00>
10003d40:	8809883a 	mov	r4,r17
10003d44:	980b883a 	mov	r5,r19
10003d48:	0009f140 	call	10009f14 <__srefill_r>
10003d4c:	103faa1e 	bne	r2,zero,10003bf8 <__alt_data_end+0xf8003bf8>
10003d50:	91400017 	ldw	r5,0(r18)
10003d54:	98800017 	ldw	r2,0(r19)
10003d58:	003fe906 	br	10003d00 <__alt_data_end+0xf8003d00>
10003d5c:	1085883a 	add	r2,r2,r2
10003d60:	1085883a 	add	r2,r2,r2
10003d64:	01040034 	movhi	r4,4096
10003d68:	210f5e04 	addi	r4,r4,15736
10003d6c:	1105883a 	add	r2,r2,r4
10003d70:	10800017 	ldw	r2,0(r2)
10003d74:	1000683a 	jmp	r2
10003d78:	10004018 	cmpnei	zero,r2,256
10003d7c:	10003a3c 	xorhi	zero,r2,232
10003d80:	10004018 	cmpnei	zero,r2,256
10003d84:	10004004 	addi	zero,r2,256
10003d88:	10003a3c 	xorhi	zero,r2,232
10003d8c:	10003fe0 	cmpeqi	zero,r2,255
10003d90:	10003f94 	ori	zero,r2,254
10003d94:	10003f94 	ori	zero,r2,254
10003d98:	10003f94 	ori	zero,r2,254
10003d9c:	10003f94 	ori	zero,r2,254
10003da0:	10003f94 	ori	zero,r2,254
10003da4:	10003f94 	ori	zero,r2,254
10003da8:	10003f94 	ori	zero,r2,254
10003dac:	10003f94 	ori	zero,r2,254
10003db0:	10003f94 	ori	zero,r2,254
10003db4:	10003a3c 	xorhi	zero,r2,232
10003db8:	10003a3c 	xorhi	zero,r2,232
10003dbc:	10003a3c 	xorhi	zero,r2,232
10003dc0:	10003a3c 	xorhi	zero,r2,232
10003dc4:	10003a3c 	xorhi	zero,r2,232
10003dc8:	10003a3c 	xorhi	zero,r2,232
10003dcc:	10003a3c 	xorhi	zero,r2,232
10003dd0:	100040fc 	xorhi	zero,r2,259
10003dd4:	10003a3c 	xorhi	zero,r2,232
10003dd8:	10003a3c 	xorhi	zero,r2,232
10003ddc:	10003a3c 	xorhi	zero,r2,232
10003de0:	100040c0 	call	1100040c <_gp+0xfe3984>
10003de4:	1000410c 	andi	zero,r2,260
10003de8:	10003a3c 	xorhi	zero,r2,232
10003dec:	10003a3c 	xorhi	zero,r2,232
10003df0:	10004098 	cmpnei	zero,r2,258
10003df4:	10003a3c 	xorhi	zero,r2,232
10003df8:	10003a3c 	xorhi	zero,r2,232
10003dfc:	10003a3c 	xorhi	zero,r2,232
10003e00:	10003a3c 	xorhi	zero,r2,232
10003e04:	10004064 	muli	zero,r2,257
10003e08:	10003a3c 	xorhi	zero,r2,232
10003e0c:	10003a3c 	xorhi	zero,r2,232
10003e10:	10003a3c 	xorhi	zero,r2,232
10003e14:	10003a3c 	xorhi	zero,r2,232
10003e18:	10003a3c 	xorhi	zero,r2,232
10003e1c:	10004048 	cmpgei	zero,r2,257
10003e20:	10003a3c 	xorhi	zero,r2,232
10003e24:	10003a3c 	xorhi	zero,r2,232
10003e28:	10003a3c 	xorhi	zero,r2,232
10003e2c:	10003a3c 	xorhi	zero,r2,232
10003e30:	1000402c 	andhi	zero,r2,256
10003e34:	10003a3c 	xorhi	zero,r2,232
10003e38:	10003a3c 	xorhi	zero,r2,232
10003e3c:	10003a3c 	xorhi	zero,r2,232
10003e40:	10003a3c 	xorhi	zero,r2,232
10003e44:	10003a3c 	xorhi	zero,r2,232
10003e48:	10003a3c 	xorhi	zero,r2,232
10003e4c:	10003a3c 	xorhi	zero,r2,232
10003e50:	100040fc 	xorhi	zero,r2,259
10003e54:	10003a3c 	xorhi	zero,r2,232
10003e58:	10003a3c 	xorhi	zero,r2,232
10003e5c:	10003a3c 	xorhi	zero,r2,232
10003e60:	100040c0 	call	1100040c <_gp+0xfe3984>
10003e64:	1000410c 	andi	zero,r2,260
10003e68:	10003a3c 	xorhi	zero,r2,232
10003e6c:	10003a3c 	xorhi	zero,r2,232
10003e70:	10004098 	cmpnei	zero,r2,258
10003e74:	10003a3c 	xorhi	zero,r2,232
10003e78:	10003a3c 	xorhi	zero,r2,232
10003e7c:	10003a3c 	xorhi	zero,r2,232
10003e80:	10003a3c 	xorhi	zero,r2,232
10003e84:	10004064 	muli	zero,r2,257
10003e88:	10003a3c 	xorhi	zero,r2,232
10003e8c:	10003a3c 	xorhi	zero,r2,232
10003e90:	10003a3c 	xorhi	zero,r2,232
10003e94:	10003a3c 	xorhi	zero,r2,232
10003e98:	10003a3c 	xorhi	zero,r2,232
10003e9c:	10004048 	cmpgei	zero,r2,257
10003ea0:	10003a3c 	xorhi	zero,r2,232
10003ea4:	10003a3c 	xorhi	zero,r2,232
10003ea8:	10003a3c 	xorhi	zero,r2,232
10003eac:	10003a3c 	xorhi	zero,r2,232
10003eb0:	1000402c 	andhi	zero,r2,256
10003eb4:	b580040c 	andi	r22,r22,16
10003eb8:	b0025226 	beq	r22,zero,10004804 <__svfscanf_r+0x13f0>
10003ebc:	0021883a 	mov	r16,zero
10003ec0:	98800117 	ldw	r2,4(r19)
10003ec4:	17026f0e 	bge	r2,fp,10004884 <__svfscanf_r+0x1470>
10003ec8:	98c00017 	ldw	r3,0(r19)
10003ecc:	8809883a 	mov	r4,r17
10003ed0:	980b883a 	mov	r5,r19
10003ed4:	1887883a 	add	r3,r3,r2
10003ed8:	98c00015 	stw	r3,0(r19)
10003edc:	80a1883a 	add	r16,r16,r2
10003ee0:	e0b9c83a 	sub	fp,fp,r2
10003ee4:	0009f140 	call	10009f14 <__srefill_r>
10003ee8:	103ff526 	beq	r2,zero,10003ec0 <__alt_data_end+0xf8003ec0>
10003eec:	803f421e 	bne	r16,zero,10003bf8 <__alt_data_end+0xf8003bf8>
10003ef0:	003e7e06 	br	100038ec <__alt_data_end+0xf80038ec>
10003ef4:	8809883a 	mov	r4,r17
10003ef8:	980b883a 	mov	r5,r19
10003efc:	0009f140 	call	10009f14 <__srefill_r>
10003f00:	103df126 	beq	r2,zero,100036c8 <__alt_data_end+0xf80036c8>
10003f04:	803e791e 	bne	r16,zero,100038ec <__alt_data_end+0xf80038ec>
10003f08:	b83f1326 	beq	r23,zero,10003b58 <__alt_data_end+0xf8003b58>
10003f0c:	003df006 	br	100036d0 <__alt_data_end+0xf80036d0>
10003f10:	e2ffa8c4 	addi	r11,fp,-349
10003f14:	07005744 	movi	fp,349
10003f18:	003eb706 	br	100039f8 <__alt_data_end+0xf80039f8>
10003f1c:	0007883a 	mov	r3,zero
10003f20:	003f1806 	br	10003b84 <__alt_data_end+0xf8003b84>
10003f24:	d8c09c17 	ldw	r3,624(sp)
10003f28:	98800017 	ldw	r2,0(r19)
10003f2c:	dd805884 	addi	r22,sp,354
10003f30:	1c000017 	ldw	r16,0(r3)
10003f34:	1dc00104 	addi	r23,r3,4
10003f38:	802b883a 	mov	r21,r16
10003f3c:	10c00003 	ldbu	r3,0(r2)
10003f40:	b0c7883a 	add	r3,r22,r3
10003f44:	18c00007 	ldb	r3,0(r3)
10003f48:	1801c226 	beq	r3,zero,10004654 <__svfscanf_r+0x1240>
10003f4c:	98c00117 	ldw	r3,4(r19)
10003f50:	10800044 	addi	r2,r2,1
10003f54:	ad400044 	addi	r21,r21,1
10003f58:	18ffffc4 	addi	r3,r3,-1
10003f5c:	98c00115 	stw	r3,4(r19)
10003f60:	10ffffc3 	ldbu	r3,-1(r2)
10003f64:	e73fffc4 	addi	fp,fp,-1
10003f68:	a8ffffc5 	stb	r3,-1(r21)
10003f6c:	98800015 	stw	r2,0(r19)
10003f70:	e001b826 	beq	fp,zero,10004654 <__svfscanf_r+0x1240>
10003f74:	98c00117 	ldw	r3,4(r19)
10003f78:	00fff016 	blt	zero,r3,10003f3c <__alt_data_end+0xf8003f3c>
10003f7c:	8809883a 	mov	r4,r17
10003f80:	980b883a 	mov	r5,r19
10003f84:	0009f140 	call	10009f14 <__srefill_r>
10003f88:	1001b11e 	bne	r2,zero,10004650 <__svfscanf_r+0x123c>
10003f8c:	98800017 	ldw	r2,0(r19)
10003f90:	003fea06 	br	10003f3c <__alt_data_end+0xf8003f3c>
10003f94:	80803fcc 	andi	r2,r16,255
10003f98:	1080201c 	xori	r2,r2,128
10003f9c:	10bfe004 	addi	r2,r2,-128
10003fa0:	3085883a 	add	r2,r6,r2
10003fa4:	103ea51e 	bne	r2,zero,10003a3c <__alt_data_end+0xf8003a3c>
10003fa8:	00bf9fc4 	movi	r2,-385
10003fac:	b0ac703a 	and	r22,r22,r2
10003fb0:	b9400005 	stb	r5,0(r23)
10003fb4:	bdc00044 	addi	r23,r23,1
10003fb8:	98800117 	ldw	r2,4(r19)
10003fbc:	e73fffc4 	addi	fp,fp,-1
10003fc0:	a5000044 	addi	r20,r20,1
10003fc4:	10bfffc4 	addi	r2,r2,-1
10003fc8:	98800115 	stw	r2,4(r19)
10003fcc:	00816d0e 	bge	zero,r2,10004584 <__svfscanf_r+0x1170>
10003fd0:	39c00044 	addi	r7,r7,1
10003fd4:	99c00015 	stw	r7,0(r19)
10003fd8:	e03e931e 	bne	fp,zero,10003a28 <__alt_data_end+0xf8003a28>
10003fdc:	003e9706 	br	10003a3c <__alt_data_end+0xf8003a3c>
10003fe0:	b080400c 	andi	r2,r22,256
10003fe4:	103feb26 	beq	r2,zero,10003f94 <__alt_data_end+0xf8003f94>
10003fe8:	00bfdfc4 	movi	r2,-129
10003fec:	b0ac703a 	and	r22,r22,r2
10003ff0:	ad400044 	addi	r21,r21,1
10003ff4:	583ff026 	beq	r11,zero,10003fb8 <__alt_data_end+0xf8003fb8>
10003ff8:	5affffc4 	addi	r11,r11,-1
10003ffc:	e7000044 	addi	fp,fp,1
10004000:	003fed06 	br	10003fb8 <__alt_data_end+0xf8003fb8>
10004004:	b080800c 	andi	r2,r22,512
10004008:	103e8c26 	beq	r2,zero,10003a3c <__alt_data_end+0xf8003a3c>
1000400c:	b3ec703a 	and	r22,r22,r15
10004010:	dd40a215 	stw	r21,648(sp)
10004014:	003fe606 	br	10003fb0 <__alt_data_end+0xf8003fb0>
10004018:	b080200c 	andi	r2,r22,128
1000401c:	103e8726 	beq	r2,zero,10003a3c <__alt_data_end+0xf8003a3c>
10004020:	00bfdfc4 	movi	r2,-129
10004024:	b0ac703a 	and	r22,r22,r2
10004028:	003fe106 	br	10003fb0 <__alt_data_end+0xf8003fb0>
1000402c:	81003fcc 	andi	r4,r16,255
10004030:	2100201c 	xori	r4,r4,128
10004034:	213fe004 	addi	r4,r4,-128
10004038:	008001c4 	movi	r2,7
1000403c:	20be7f1e 	bne	r4,r2,10003a3c <__alt_data_end+0xf8003a3c>
10004040:	04000204 	movi	r16,8
10004044:	003fda06 	br	10003fb0 <__alt_data_end+0xf8003fb0>
10004048:	81003fcc 	andi	r4,r16,255
1000404c:	2100201c 	xori	r4,r4,128
10004050:	213fe004 	addi	r4,r4,-128
10004054:	00800184 	movi	r2,6
10004058:	20be781e 	bne	r4,r2,10003a3c <__alt_data_end+0xf8003a3c>
1000405c:	040001c4 	movi	r16,7
10004060:	003fd306 	br	10003fb0 <__alt_data_end+0xf8003fb0>
10004064:	3001891e 	bne	r6,zero,1000468c <__svfscanf_r+0x1278>
10004068:	b101c00c 	andi	r4,r22,1792
1000406c:	0081c004 	movi	r2,1792
10004070:	20821d26 	beq	r4,r2,100048e8 <__svfscanf_r+0x14d4>
10004074:	80803fcc 	andi	r2,r16,255
10004078:	1080201c 	xori	r2,r2,128
1000407c:	10bfe004 	addi	r2,r2,-128
10004080:	01000044 	movi	r4,1
10004084:	11000226 	beq	r2,r4,10004090 <__svfscanf_r+0xc7c>
10004088:	01000104 	movi	r4,4
1000408c:	113e6b1e 	bne	r2,r4,10003a3c <__alt_data_end+0xf8003a3c>
10004090:	84000044 	addi	r16,r16,1
10004094:	003fc606 	br	10003fb0 <__alt_data_end+0xf8003fb0>
10004098:	80803fcc 	andi	r2,r16,255
1000409c:	1080201c 	xori	r2,r2,128
100040a0:	10bfe004 	addi	r2,r2,-128
100040a4:	1001731e 	bne	r2,zero,10004674 <__svfscanf_r+0x1260>
100040a8:	b101c00c 	andi	r4,r22,1792
100040ac:	0081c004 	movi	r2,1792
100040b0:	20be621e 	bne	r4,r2,10003a3c <__alt_data_end+0xf8003a3c>
100040b4:	b32c703a 	and	r22,r22,r12
100040b8:	04000044 	movi	r16,1
100040bc:	003fbc06 	br	10003fb0 <__alt_data_end+0xf8003fb0>
100040c0:	b081400c 	andi	r2,r22,1280
100040c4:	13800326 	beq	r2,r14,100040d4 <__svfscanf_r+0xcc0>
100040c8:	b081000c 	andi	r2,r22,1024
100040cc:	103e5b26 	beq	r2,zero,10003a3c <__alt_data_end+0xf8003a3c>
100040d0:	a83e5d26 	beq	r21,zero,10003a48 <__alt_data_end+0xf8003a48>
100040d4:	b080800c 	andi	r2,r22,512
100040d8:	1000041e 	bne	r2,zero,100040ec <__svfscanf_r+0xcd8>
100040dc:	d880a217 	ldw	r2,648(sp)
100040e0:	ddc0a115 	stw	r23,644(sp)
100040e4:	a8abc83a 	sub	r21,r21,r2
100040e8:	dd40a315 	stw	r21,652(sp)
100040ec:	b32c703a 	and	r22,r22,r12
100040f0:	b5806014 	ori	r22,r22,384
100040f4:	002b883a 	mov	r21,zero
100040f8:	003fad06 	br	10003fb0 <__alt_data_end+0xf8003fb0>
100040fc:	00800044 	movi	r2,1
10004100:	30be4e1e 	bne	r6,r2,10003a3c <__alt_data_end+0xf8003a3c>
10004104:	01800084 	movi	r6,2
10004108:	003fa906 	br	10003fb0 <__alt_data_end+0xf8003fb0>
1000410c:	81003fcc 	andi	r4,r16,255
10004110:	2100201c 	xori	r4,r4,128
10004114:	213fe004 	addi	r4,r4,-128
10004118:	00800084 	movi	r2,2
1000411c:	20be471e 	bne	r4,r2,10003a3c <__alt_data_end+0xf8003a3c>
10004120:	040000c4 	movi	r16,3
10004124:	003fa206 	br	10003fb0 <__alt_data_end+0xf8003fb0>
10004128:	01440074 	movhi	r5,4097
1000412c:	296ef004 	addi	r5,r5,-17472
10004130:	00800284 	movi	r2,10
10004134:	d940a015 	stw	r5,640(sp)
10004138:	d8809f15 	stw	r2,636(sp)
1000413c:	040000c4 	movi	r16,3
10004140:	003d2706 	br	100035e0 <__alt_data_end+0xf80035e0>
10004144:	df009d15 	stw	fp,628(sp)
10004148:	04000084 	movi	r16,2
1000414c:	2039883a 	mov	fp,r4
10004150:	003d2306 	br	100035e0 <__alt_data_end+0xf80035e0>
10004154:	00840074 	movhi	r2,4097
10004158:	10b05e04 	addi	r2,r2,-16008
1000415c:	00c00284 	movi	r3,10
10004160:	df009d15 	stw	fp,628(sp)
10004164:	d880a015 	stw	r2,640(sp)
10004168:	2039883a 	mov	fp,r4
1000416c:	d8c09f15 	stw	r3,636(sp)
10004170:	040000c4 	movi	r16,3
10004174:	003d1a06 	br	100035e0 <__alt_data_end+0xf80035e0>
10004178:	bdc03fcc 	andi	r23,r23,255
1000417c:	01400284 	movi	r5,10
10004180:	bdc0201c 	xori	r23,r23,128
10004184:	d8c0a815 	stw	r3,672(sp)
10004188:	d980a915 	stw	r6,676(sp)
1000418c:	bdffe004 	addi	r23,r23,-128
10004190:	00012fc0 	call	100012fc <__mulsi3>
10004194:	15c5883a 	add	r2,r2,r23
10004198:	113ff404 	addi	r4,r2,-48
1000419c:	85c00043 	ldbu	r23,1(r16)
100041a0:	d8c0a817 	ldw	r3,672(sp)
100041a4:	e021883a 	mov	r16,fp
100041a8:	d980a917 	ldw	r6,676(sp)
100041ac:	003cf906 	br	10003594 <__alt_data_end+0xf8003594>
100041b0:	df009d15 	stw	fp,628(sp)
100041b4:	2039883a 	mov	fp,r4
100041b8:	003d0206 	br	100035c4 <__alt_data_end+0xf80035c4>
100041bc:	df009d15 	stw	fp,628(sp)
100041c0:	04000104 	movi	r16,4
100041c4:	2039883a 	mov	fp,r4
100041c8:	003d0506 	br	100035e0 <__alt_data_end+0xf80035e0>
100041cc:	85c00043 	ldbu	r23,1(r16)
100041d0:	b5800094 	ori	r22,r22,2
100041d4:	e021883a 	mov	r16,fp
100041d8:	003cee06 	br	10003594 <__alt_data_end+0xf8003594>
100041dc:	df009d15 	stw	fp,628(sp)
100041e0:	e021883a 	mov	r16,fp
100041e4:	003cd706 	br	10003544 <__alt_data_end+0xf8003544>
100041e8:	85c00043 	ldbu	r23,1(r16)
100041ec:	b5800414 	ori	r22,r22,16
100041f0:	e021883a 	mov	r16,fp
100041f4:	003ce706 	br	10003594 <__alt_data_end+0xf8003594>
100041f8:	df009d15 	stw	fp,628(sp)
100041fc:	b5800054 	ori	r22,r22,1
10004200:	2039883a 	mov	fp,r4
10004204:	01040074 	movhi	r4,4097
10004208:	21305e04 	addi	r4,r4,-16008
1000420c:	01400204 	movi	r5,8
10004210:	d900a015 	stw	r4,640(sp)
10004214:	d9409f15 	stw	r5,636(sp)
10004218:	040000c4 	movi	r16,3
1000421c:	003cf006 	br	100035e0 <__alt_data_end+0xf80035e0>
10004220:	df009d15 	stw	fp,628(sp)
10004224:	01400404 	movi	r5,16
10004228:	2039883a 	mov	fp,r4
1000422c:	01040074 	movhi	r4,4097
10004230:	21305e04 	addi	r4,r4,-16008
10004234:	b5808014 	ori	r22,r22,512
10004238:	d900a015 	stw	r4,640(sp)
1000423c:	d9409f15 	stw	r5,636(sp)
10004240:	040000c4 	movi	r16,3
10004244:	003ce606 	br	100035e0 <__alt_data_end+0xf80035e0>
10004248:	df009d15 	stw	fp,628(sp)
1000424c:	d9409d17 	ldw	r5,628(sp)
10004250:	2039883a 	mov	fp,r4
10004254:	d9005884 	addi	r4,sp,354
10004258:	000a1c80 	call	1000a1c8 <__sccl>
1000425c:	d8809d15 	stw	r2,628(sp)
10004260:	b5801014 	ori	r22,r22,64
10004264:	04000044 	movi	r16,1
10004268:	003cdd06 	br	100035e0 <__alt_data_end+0xf80035e0>
1000426c:	df009d15 	stw	fp,628(sp)
10004270:	b5801014 	ori	r22,r22,64
10004274:	2039883a 	mov	fp,r4
10004278:	0021883a 	mov	r16,zero
1000427c:	003cd806 	br	100035e0 <__alt_data_end+0xf80035e0>
10004280:	df009d15 	stw	fp,628(sp)
10004284:	2039883a 	mov	fp,r4
10004288:	003ccf06 	br	100035c8 <__alt_data_end+0xf80035c8>
1000428c:	85c00043 	ldbu	r23,1(r16)
10004290:	b5800114 	ori	r22,r22,4
10004294:	e021883a 	mov	r16,fp
10004298:	003cbe06 	br	10003594 <__alt_data_end+0xf8003594>
1000429c:	df009d15 	stw	fp,628(sp)
100042a0:	2039883a 	mov	fp,r4
100042a4:	01040074 	movhi	r4,4097
100042a8:	212ef004 	addi	r4,r4,-17472
100042ac:	d900a015 	stw	r4,640(sp)
100042b0:	d8009f15 	stw	zero,636(sp)
100042b4:	040000c4 	movi	r16,3
100042b8:	003cc906 	br	100035e0 <__alt_data_end+0xf80035e0>
100042bc:	85c00043 	ldbu	r23,1(r16)
100042c0:	b8803fcc 	andi	r2,r23,255
100042c4:	1080201c 	xori	r2,r2,128
100042c8:	10bfe004 	addi	r2,r2,-128
100042cc:	11818f26 	beq	r2,r6,1000490c <__svfscanf_r+0x14f8>
100042d0:	b5800054 	ori	r22,r22,1
100042d4:	e021883a 	mov	r16,fp
100042d8:	003cae06 	br	10003594 <__alt_data_end+0xf8003594>
100042dc:	df009d15 	stw	fp,628(sp)
100042e0:	b080040c 	andi	r2,r22,16
100042e4:	103cfa1e 	bne	r2,zero,100036d0 <__alt_data_end+0xf80036d0>
100042e8:	b080010c 	andi	r2,r22,4
100042ec:	10018b26 	beq	r2,zero,1000491c <__svfscanf_r+0x1508>
100042f0:	d9009c17 	ldw	r4,624(sp)
100042f4:	e021883a 	mov	r16,fp
100042f8:	800d883a 	mov	r6,r16
100042fc:	20800017 	ldw	r2,0(r4)
10004300:	21000104 	addi	r4,r4,4
10004304:	d9009c15 	stw	r4,624(sp)
10004308:	1500000d 	sth	r20,0(r2)
1000430c:	003c7a06 	br	100034f8 <__alt_data_end+0xf80034f8>
10004310:	df009d15 	stw	fp,628(sp)
10004314:	2039883a 	mov	fp,r4
10004318:	003fba06 	br	10004204 <__alt_data_end+0xf8004204>
1000431c:	00840074 	movhi	r2,4097
10004320:	10b05e04 	addi	r2,r2,-16008
10004324:	00c00404 	movi	r3,16
10004328:	df009d15 	stw	fp,628(sp)
1000432c:	b5808814 	ori	r22,r22,544
10004330:	2039883a 	mov	fp,r4
10004334:	d880a015 	stw	r2,640(sp)
10004338:	d8c09f15 	stw	r3,636(sp)
1000433c:	040000c4 	movi	r16,3
10004340:	003ca706 	br	100035e0 <__alt_data_end+0xf80035e0>
10004344:	013fff84 	movi	r4,-2
10004348:	113cdd26 	beq	r2,r4,100036c0 <__alt_data_end+0xf80036c0>
1000434c:	a429883a 	add	r20,r20,r16
10004350:	e73fffc4 	addi	fp,fp,-1
10004354:	b83cd826 	beq	r23,zero,100036b8 <__alt_data_end+0xf80036b8>
10004358:	0021883a 	mov	r16,zero
1000435c:	003cd806 	br	100036c0 <__alt_data_end+0xf80036c0>
10004360:	1085883a 	add	r2,r2,r2
10004364:	1085883a 	add	r2,r2,r2
10004368:	01040034 	movhi	r4,4096
1000436c:	2110df04 	addi	r4,r4,17276
10004370:	1105883a 	add	r2,r2,r4
10004374:	10800017 	ldw	r2,0(r2)
10004378:	1000683a 	jmp	r2
1000437c:	10004570 	cmpltui	zero,r2,277
10004380:	10003bb4 	orhi	zero,r2,238
10004384:	10004570 	cmpltui	zero,r2,277
10004388:	10003bb4 	orhi	zero,r2,238
1000438c:	10003bb4 	orhi	zero,r2,238
10004390:	10004548 	cmpgei	zero,r2,277
10004394:	10004528 	cmpgeui	zero,r2,276
10004398:	10004528 	cmpgeui	zero,r2,276
1000439c:	10004528 	cmpgeui	zero,r2,276
100043a0:	10004528 	cmpgeui	zero,r2,276
100043a4:	10004528 	cmpgeui	zero,r2,276
100043a8:	10004528 	cmpgeui	zero,r2,276
100043ac:	10004528 	cmpgeui	zero,r2,276
100043b0:	10004508 	cmpgei	zero,r2,276
100043b4:	10004508 	cmpgei	zero,r2,276
100043b8:	10003bb4 	orhi	zero,r2,238
100043bc:	10003bb4 	orhi	zero,r2,238
100043c0:	10003bb4 	orhi	zero,r2,238
100043c4:	10003bb4 	orhi	zero,r2,238
100043c8:	10003bb4 	orhi	zero,r2,238
100043cc:	10003bb4 	orhi	zero,r2,238
100043d0:	10003bb4 	orhi	zero,r2,238
100043d4:	100044f4 	orhi	zero,r2,275
100043d8:	100044f4 	orhi	zero,r2,275
100043dc:	100044f4 	orhi	zero,r2,275
100043e0:	100044f4 	orhi	zero,r2,275
100043e4:	100044f4 	orhi	zero,r2,275
100043e8:	100044f4 	orhi	zero,r2,275
100043ec:	10003bb4 	orhi	zero,r2,238
100043f0:	10003bb4 	orhi	zero,r2,238
100043f4:	10003bb4 	orhi	zero,r2,238
100043f8:	10003bb4 	orhi	zero,r2,238
100043fc:	10003bb4 	orhi	zero,r2,238
10004400:	10003bb4 	orhi	zero,r2,238
10004404:	10003bb4 	orhi	zero,r2,238
10004408:	10003bb4 	orhi	zero,r2,238
1000440c:	10003bb4 	orhi	zero,r2,238
10004410:	10003bb4 	orhi	zero,r2,238
10004414:	10003bb4 	orhi	zero,r2,238
10004418:	10003bb4 	orhi	zero,r2,238
1000441c:	10003bb4 	orhi	zero,r2,238
10004420:	10003bb4 	orhi	zero,r2,238
10004424:	10003bb4 	orhi	zero,r2,238
10004428:	10003bb4 	orhi	zero,r2,238
1000442c:	10003bb4 	orhi	zero,r2,238
10004430:	100044b4 	orhi	zero,r2,274
10004434:	10003bb4 	orhi	zero,r2,238
10004438:	10003bb4 	orhi	zero,r2,238
1000443c:	10003bb4 	orhi	zero,r2,238
10004440:	10003bb4 	orhi	zero,r2,238
10004444:	10003bb4 	orhi	zero,r2,238
10004448:	10003bb4 	orhi	zero,r2,238
1000444c:	10003bb4 	orhi	zero,r2,238
10004450:	10003bb4 	orhi	zero,r2,238
10004454:	100044f4 	orhi	zero,r2,275
10004458:	100044f4 	orhi	zero,r2,275
1000445c:	100044f4 	orhi	zero,r2,275
10004460:	100044f4 	orhi	zero,r2,275
10004464:	100044f4 	orhi	zero,r2,275
10004468:	100044f4 	orhi	zero,r2,275
1000446c:	10003bb4 	orhi	zero,r2,238
10004470:	10003bb4 	orhi	zero,r2,238
10004474:	10003bb4 	orhi	zero,r2,238
10004478:	10003bb4 	orhi	zero,r2,238
1000447c:	10003bb4 	orhi	zero,r2,238
10004480:	10003bb4 	orhi	zero,r2,238
10004484:	10003bb4 	orhi	zero,r2,238
10004488:	10003bb4 	orhi	zero,r2,238
1000448c:	10003bb4 	orhi	zero,r2,238
10004490:	10003bb4 	orhi	zero,r2,238
10004494:	10003bb4 	orhi	zero,r2,238
10004498:	10003bb4 	orhi	zero,r2,238
1000449c:	10003bb4 	orhi	zero,r2,238
100044a0:	10003bb4 	orhi	zero,r2,238
100044a4:	10003bb4 	orhi	zero,r2,238
100044a8:	10003bb4 	orhi	zero,r2,238
100044ac:	10003bb4 	orhi	zero,r2,238
100044b0:	100044b4 	orhi	zero,r2,274
100044b4:	b081800c 	andi	r2,r22,1536
100044b8:	11fdbe1e 	bne	r2,r7,10003bb4 <__alt_data_end+0xf8003bb4>
100044bc:	b1ac703a 	and	r22,r22,r6
100044c0:	b5814014 	ori	r22,r22,1280
100044c4:	02400404 	movi	r9,16
100044c8:	a9400005 	stb	r5,0(r21)
100044cc:	ad400044 	addi	r21,r21,1
100044d0:	98800117 	ldw	r2,4(r19)
100044d4:	10bfffc4 	addi	r2,r2,-1
100044d8:	98800115 	stw	r2,4(r19)
100044dc:	00803b0e 	bge	zero,r2,100045cc <__svfscanf_r+0x11b8>
100044e0:	42000044 	addi	r8,r8,1
100044e4:	9a000015 	stw	r8,0(r19)
100044e8:	e73fffc4 	addi	fp,fp,-1
100044ec:	e03dac1e 	bne	fp,zero,10003ba0 <__alt_data_end+0xf8003ba0>
100044f0:	003db006 	br	10003bb4 <__alt_data_end+0xf8003bb4>
100044f4:	00800284 	movi	r2,10
100044f8:	127dae0e 	bge	r2,r9,10003bb4 <__alt_data_end+0xf8003bb4>
100044fc:	00bd1fc4 	movi	r2,-2945
10004500:	b0ac703a 	and	r22,r22,r2
10004504:	003ff006 	br	100044c8 <__alt_data_end+0xf80044c8>
10004508:	4a53883a 	add	r9,r9,r9
1000450c:	01040074 	movhi	r4,4097
10004510:	210a1884 	addi	r4,r4,10338
10004514:	2245883a 	add	r2,r4,r9
10004518:	1240000f 	ldh	r9,0(r2)
1000451c:	00800204 	movi	r2,8
10004520:	127ff616 	blt	r2,r9,100044fc <__alt_data_end+0xf80044fc>
10004524:	003da306 	br	10003bb4 <__alt_data_end+0xf8003bb4>
10004528:	4a53883a 	add	r9,r9,r9
1000452c:	01040074 	movhi	r4,4097
10004530:	210a1884 	addi	r4,r4,10338
10004534:	2245883a 	add	r2,r4,r9
10004538:	1240000f 	ldh	r9,0(r2)
1000453c:	00bd1fc4 	movi	r2,-2945
10004540:	b0ac703a 	and	r22,r22,r2
10004544:	003fe006 	br	100044c8 <__alt_data_end+0xf80044c8>
10004548:	b082000c 	andi	r2,r22,2048
1000454c:	103fde26 	beq	r2,zero,100044c8 <__alt_data_end+0xf80044c8>
10004550:	4800021e 	bne	r9,zero,1000455c <__svfscanf_r+0x1148>
10004554:	b5808014 	ori	r22,r22,512
10004558:	02400204 	movi	r9,8
1000455c:	b081000c 	andi	r2,r22,1024
10004560:	10009f26 	beq	r2,zero,100047e0 <__svfscanf_r+0x13cc>
10004564:	00be9fc4 	movi	r2,-1409
10004568:	b0ac703a 	and	r22,r22,r2
1000456c:	003fd606 	br	100044c8 <__alt_data_end+0xf80044c8>
10004570:	b080200c 	andi	r2,r22,128
10004574:	103d8f26 	beq	r2,zero,10003bb4 <__alt_data_end+0xf8003bb4>
10004578:	00bfdfc4 	movi	r2,-129
1000457c:	b0ac703a 	and	r22,r22,r2
10004580:	003fd106 	br	100044c8 <__alt_data_end+0xf80044c8>
10004584:	8809883a 	mov	r4,r17
10004588:	980b883a 	mov	r5,r19
1000458c:	d8c0a815 	stw	r3,672(sp)
10004590:	d980a915 	stw	r6,676(sp)
10004594:	dac0a715 	stw	r11,668(sp)
10004598:	db00a515 	stw	r12,660(sp)
1000459c:	db80a415 	stw	r14,656(sp)
100045a0:	dbc0a615 	stw	r15,664(sp)
100045a4:	0009f140 	call	10009f14 <__srefill_r>
100045a8:	d8c0a817 	ldw	r3,672(sp)
100045ac:	d980a917 	ldw	r6,676(sp)
100045b0:	dac0a717 	ldw	r11,668(sp)
100045b4:	db00a517 	ldw	r12,660(sp)
100045b8:	db80a417 	ldw	r14,656(sp)
100045bc:	dbc0a617 	ldw	r15,664(sp)
100045c0:	103d1e1e 	bne	r2,zero,10003a3c <__alt_data_end+0xf8003a3c>
100045c4:	e03d181e 	bne	fp,zero,10003a28 <__alt_data_end+0xf8003a28>
100045c8:	003d1c06 	br	10003a3c <__alt_data_end+0xf8003a3c>
100045cc:	8809883a 	mov	r4,r17
100045d0:	980b883a 	mov	r5,r19
100045d4:	d8c0a815 	stw	r3,672(sp)
100045d8:	d980a915 	stw	r6,676(sp)
100045dc:	d9c0a415 	stw	r7,656(sp)
100045e0:	da40a515 	stw	r9,660(sp)
100045e4:	0009f140 	call	10009f14 <__srefill_r>
100045e8:	d8c0a817 	ldw	r3,672(sp)
100045ec:	d980a917 	ldw	r6,676(sp)
100045f0:	d9c0a417 	ldw	r7,656(sp)
100045f4:	da40a517 	ldw	r9,660(sp)
100045f8:	103fbb26 	beq	r2,zero,100044e8 <__alt_data_end+0xf80044e8>
100045fc:	003d6d06 	br	10003bb4 <__alt_data_end+0xf8003bb4>
10004600:	a429883a 	add	r20,r20,r16
10004604:	e73fffc4 	addi	fp,fp,-1
10004608:	b000fc1e 	bne	r22,zero,100049fc <__svfscanf_r+0x15e8>
1000460c:	ad400104 	addi	r21,r21,4
10004610:	0021883a 	mov	r16,zero
10004614:	98800117 	ldw	r2,4(r19)
10004618:	00bd8716 	blt	zero,r2,10003c38 <__alt_data_end+0xf8003c38>
1000461c:	8809883a 	mov	r4,r17
10004620:	980b883a 	mov	r5,r19
10004624:	0009f140 	call	10009f14 <__srefill_r>
10004628:	103d8326 	beq	r2,zero,10003c38 <__alt_data_end+0xf8003c38>
1000462c:	803caf1e 	bne	r16,zero,100038ec <__alt_data_end+0xf80038ec>
10004630:	b03c271e 	bne	r22,zero,100036d0 <__alt_data_end+0xf80036d0>
10004634:	d8809e17 	ldw	r2,632(sp)
10004638:	dc009d17 	ldw	r16,628(sp)
1000463c:	a8000015 	stw	zero,0(r21)
10004640:	10800044 	addi	r2,r2,1
10004644:	d8809e15 	stw	r2,632(sp)
10004648:	800d883a 	mov	r6,r16
1000464c:	003baa06 	br	100034f8 <__alt_data_end+0xf80034f8>
10004650:	857ca626 	beq	r16,r21,100038ec <__alt_data_end+0xf80038ec>
10004654:	ac21c83a 	sub	r16,r21,r16
10004658:	803bab26 	beq	r16,zero,10003508 <__alt_data_end+0xf8003508>
1000465c:	d8809e17 	ldw	r2,632(sp)
10004660:	a8000005 	stb	zero,0(r21)
10004664:	ddc09c15 	stw	r23,624(sp)
10004668:	10800044 	addi	r2,r2,1
1000466c:	d8809e15 	stw	r2,632(sp)
10004670:	003d6106 	br	10003bf8 <__alt_data_end+0xf8003bf8>
10004674:	010000c4 	movi	r4,3
10004678:	113e8526 	beq	r2,r4,10004090 <__alt_data_end+0xf8004090>
1000467c:	01000144 	movi	r4,5
10004680:	113cee1e 	bne	r2,r4,10003a3c <__alt_data_end+0xf8003a3c>
10004684:	84000044 	addi	r16,r16,1
10004688:	003e4906 	br	10003fb0 <__alt_data_end+0xf8003fb0>
1000468c:	00800084 	movi	r2,2
10004690:	30be781e 	bne	r6,r2,10004074 <__alt_data_end+0xf8004074>
10004694:	018000c4 	movi	r6,3
10004698:	003e4506 	br	10003fb0 <__alt_data_end+0xf8003fb0>
1000469c:	d8c0a017 	ldw	r3,640(sp)
100046a0:	d9c09f17 	ldw	r7,636(sp)
100046a4:	8809883a 	mov	r4,r17
100046a8:	d9400104 	addi	r5,sp,4
100046ac:	000d883a 	mov	r6,zero
100046b0:	a8000005 	stb	zero,0(r21)
100046b4:	183ee83a 	callr	r3
100046b8:	b0c0080c 	andi	r3,r22,32
100046bc:	1800391e 	bne	r3,zero,100047a4 <__svfscanf_r+0x1390>
100046c0:	b0c0010c 	andi	r3,r22,4
100046c4:	1800ac26 	beq	r3,zero,10004978 <__svfscanf_r+0x1564>
100046c8:	d9409c17 	ldw	r5,624(sp)
100046cc:	28c00017 	ldw	r3,0(r5)
100046d0:	29400104 	addi	r5,r5,4
100046d4:	d9409c15 	stw	r5,624(sp)
100046d8:	1880000d 	sth	r2,0(r3)
100046dc:	d8809e17 	ldw	r2,632(sp)
100046e0:	10800044 	addi	r2,r2,1
100046e4:	d8809e15 	stw	r2,632(sp)
100046e8:	003d4006 	br	10003bec <__alt_data_end+0xf8003bec>
100046ec:	d8c09c17 	ldw	r3,624(sp)
100046f0:	98800017 	ldw	r2,0(r19)
100046f4:	1d400017 	ldw	r21,0(r3)
100046f8:	1d800104 	addi	r22,r3,4
100046fc:	a821883a 	mov	r16,r21
10004700:	10c00003 	ldbu	r3,0(r2)
10004704:	91400017 	ldw	r5,0(r18)
10004708:	28c7883a 	add	r3,r5,r3
1000470c:	18c00003 	ldbu	r3,0(r3)
10004710:	18c0020c 	andi	r3,r3,8
10004714:	18c03fcc 	andi	r3,r3,255
10004718:	18c0201c 	xori	r3,r3,128
1000471c:	18ffe004 	addi	r3,r3,-128
10004720:	1800121e 	bne	r3,zero,1000476c <__svfscanf_r+0x1358>
10004724:	98c00117 	ldw	r3,4(r19)
10004728:	10800044 	addi	r2,r2,1
1000472c:	84000044 	addi	r16,r16,1
10004730:	18ffffc4 	addi	r3,r3,-1
10004734:	98c00115 	stw	r3,4(r19)
10004738:	10ffffc3 	ldbu	r3,-1(r2)
1000473c:	e73fffc4 	addi	fp,fp,-1
10004740:	80ffffc5 	stb	r3,-1(r16)
10004744:	98800015 	stw	r2,0(r19)
10004748:	e0000826 	beq	fp,zero,1000476c <__svfscanf_r+0x1358>
1000474c:	98c00117 	ldw	r3,4(r19)
10004750:	00ffeb16 	blt	zero,r3,10004700 <__alt_data_end+0xf8004700>
10004754:	8809883a 	mov	r4,r17
10004758:	980b883a 	mov	r5,r19
1000475c:	0009f140 	call	10009f14 <__srefill_r>
10004760:	1000021e 	bne	r2,zero,1000476c <__svfscanf_r+0x1358>
10004764:	98800017 	ldw	r2,0(r19)
10004768:	003fe506 	br	10004700 <__alt_data_end+0xf8004700>
1000476c:	d8809e17 	ldw	r2,632(sp)
10004770:	856bc83a 	sub	r21,r16,r21
10004774:	80000005 	stb	zero,0(r16)
10004778:	dc009d17 	ldw	r16,628(sp)
1000477c:	10800044 	addi	r2,r2,1
10004780:	a569883a 	add	r20,r20,r21
10004784:	d8809e15 	stw	r2,632(sp)
10004788:	dd809c15 	stw	r22,624(sp)
1000478c:	800d883a 	mov	r6,r16
10004790:	003b5906 	br	100034f8 <__alt_data_end+0xf80034f8>
10004794:	dd409b04 	addi	r21,sp,620
10004798:	003d2506 	br	10003c30 <__alt_data_end+0xf8003c30>
1000479c:	002d883a 	mov	r22,zero
100047a0:	003ba206 	br	1000362c <__alt_data_end+0xf800362c>
100047a4:	d9009c17 	ldw	r4,624(sp)
100047a8:	20c00017 	ldw	r3,0(r4)
100047ac:	21000104 	addi	r4,r4,4
100047b0:	d9009c15 	stw	r4,624(sp)
100047b4:	18800015 	stw	r2,0(r3)
100047b8:	003fc806 	br	100046dc <__alt_data_end+0xf80046dc>
100047bc:	b280008c 	andi	r10,r22,2
100047c0:	50008126 	beq	r10,zero,100049c8 <__svfscanf_r+0x15b4>
100047c4:	d8c09c17 	ldw	r3,624(sp)
100047c8:	18800017 	ldw	r2,0(r3)
100047cc:	18c00104 	addi	r3,r3,4
100047d0:	d8c09c15 	stw	r3,624(sp)
100047d4:	15400015 	stw	r21,0(r2)
100047d8:	15c00115 	stw	r23,4(r2)
100047dc:	003cde06 	br	10003b58 <__alt_data_end+0xf8003b58>
100047e0:	00bf1fc4 	movi	r2,-897
100047e4:	b0ac703a 	and	r22,r22,r2
100047e8:	18000226 	beq	r3,zero,100047f4 <__svfscanf_r+0x13e0>
100047ec:	18ffffc4 	addi	r3,r3,-1
100047f0:	e7000044 	addi	fp,fp,1
100047f4:	84000044 	addi	r16,r16,1
100047f8:	003f3506 	br	100044d0 <__alt_data_end+0xf80044d0>
100047fc:	803cfe1e 	bne	r16,zero,10003bf8 <__alt_data_end+0xf8003bf8>
10004800:	003b4106 	br	10003508 <__alt_data_end+0xf8003508>
10004804:	d8c09c17 	ldw	r3,624(sp)
10004808:	01400044 	movi	r5,1
1000480c:	e00d883a 	mov	r6,fp
10004810:	19000017 	ldw	r4,0(r3)
10004814:	980f883a 	mov	r7,r19
10004818:	0006ca80 	call	10006ca8 <fread>
1000481c:	d9009c17 	ldw	r4,624(sp)
10004820:	20c00104 	addi	r3,r4,4
10004824:	103c3126 	beq	r2,zero,100038ec <__alt_data_end+0xf80038ec>
10004828:	1529883a 	add	r20,r2,r20
1000482c:	d8809e17 	ldw	r2,632(sp)
10004830:	dc009d17 	ldw	r16,628(sp)
10004834:	d8c09c15 	stw	r3,624(sp)
10004838:	10800044 	addi	r2,r2,1
1000483c:	d8809e15 	stw	r2,632(sp)
10004840:	800d883a 	mov	r6,r16
10004844:	003b2c06 	br	100034f8 <__alt_data_end+0xf80034f8>
10004848:	00ffff84 	movi	r3,-2
1000484c:	10ff7126 	beq	r2,r3,10004614 <__alt_data_end+0xf8004614>
10004850:	a9000017 	ldw	r4,0(r21)
10004854:	00077380 	call	10007738 <iswspace>
10004858:	103f6926 	beq	r2,zero,10004600 <__alt_data_end+0xf8004600>
1000485c:	803f7426 	beq	r16,zero,10004630 <__alt_data_end+0xf8004630>
10004860:	843fffc4 	addi	r16,r16,-1
10004864:	d9000104 	addi	r4,sp,4
10004868:	2405883a 	add	r2,r4,r16
1000486c:	11400003 	ldbu	r5,0(r2)
10004870:	8809883a 	mov	r4,r17
10004874:	980d883a 	mov	r6,r19
10004878:	000c8c40 	call	1000c8c4 <_ungetc_r>
1000487c:	803ff81e 	bne	r16,zero,10004860 <__alt_data_end+0xf8004860>
10004880:	003f6b06 	br	10004630 <__alt_data_end+0xf8004630>
10004884:	99000017 	ldw	r4,0(r19)
10004888:	1705c83a 	sub	r2,r2,fp
1000488c:	8721883a 	add	r16,r16,fp
10004890:	2707883a 	add	r3,r4,fp
10004894:	98800115 	stw	r2,4(r19)
10004898:	98c00015 	stw	r3,0(r19)
1000489c:	003cd606 	br	10003bf8 <__alt_data_end+0xf8003bf8>
100048a0:	d880a117 	ldw	r2,644(sp)
100048a4:	000d883a 	mov	r6,zero
100048a8:	8809883a 	mov	r4,r17
100048ac:	11400044 	addi	r5,r2,1
100048b0:	01c00284 	movi	r7,10
100048b4:	000bbc00 	call	1000bbc0 <_strtol_r>
100048b8:	d8c0a317 	ldw	r3,652(sp)
100048bc:	10cdc83a 	sub	r6,r2,r3
100048c0:	d900a117 	ldw	r4,644(sp)
100048c4:	d88055c4 	addi	r2,sp,343
100048c8:	20800236 	bltu	r4,r2,100048d4 <__svfscanf_r+0x14c0>
100048cc:	d9005584 	addi	r4,sp,342
100048d0:	d900a115 	stw	r4,644(sp)
100048d4:	d900a117 	ldw	r4,644(sp)
100048d8:	01440074 	movhi	r5,4097
100048dc:	294a1704 	addi	r5,r5,10332
100048e0:	000a2ec0 	call	1000a2ec <sprintf>
100048e4:	003c8e06 	br	10003b20 <__alt_data_end+0xf8003b20>
100048e8:	b32c703a 	and	r22,r22,r12
100048ec:	01800044 	movi	r6,1
100048f0:	003daf06 	br	10003fb0 <__alt_data_end+0xf8003fb0>
100048f4:	d8c0a217 	ldw	r3,648(sp)
100048f8:	a8ebc83a 	sub	r21,r21,r3
100048fc:	054dc83a 	sub	r6,zero,r21
10004900:	a83c8726 	beq	r21,zero,10003b20 <__alt_data_end+0xf8003b20>
10004904:	ddc0a115 	stw	r23,644(sp)
10004908:	003fed06 	br	100048c0 <__alt_data_end+0xf80048c0>
1000490c:	85c00083 	ldbu	r23,2(r16)
10004910:	b5800094 	ori	r22,r22,2
10004914:	84000084 	addi	r16,r16,2
10004918:	003b1e06 	br	10003594 <__alt_data_end+0xf8003594>
1000491c:	b080004c 	andi	r2,r22,1
10004920:	10000d1e 	bne	r2,zero,10004958 <__svfscanf_r+0x1544>
10004924:	b580008c 	andi	r22,r22,2
10004928:	b0000b26 	beq	r22,zero,10004958 <__svfscanf_r+0x1544>
1000492c:	d8c09c17 	ldw	r3,624(sp)
10004930:	d9009c17 	ldw	r4,624(sp)
10004934:	dc009d17 	ldw	r16,628(sp)
10004938:	18800017 	ldw	r2,0(r3)
1000493c:	a007d7fa 	srai	r3,r20,31
10004940:	21000104 	addi	r4,r4,4
10004944:	15000015 	stw	r20,0(r2)
10004948:	10c00115 	stw	r3,4(r2)
1000494c:	d9009c15 	stw	r4,624(sp)
10004950:	800d883a 	mov	r6,r16
10004954:	003ae806 	br	100034f8 <__alt_data_end+0xf80034f8>
10004958:	d9409c17 	ldw	r5,624(sp)
1000495c:	dc009d17 	ldw	r16,628(sp)
10004960:	28800017 	ldw	r2,0(r5)
10004964:	29400104 	addi	r5,r5,4
10004968:	d9409c15 	stw	r5,624(sp)
1000496c:	15000015 	stw	r20,0(r2)
10004970:	800d883a 	mov	r6,r16
10004974:	003ae006 	br	100034f8 <__alt_data_end+0xf80034f8>
10004978:	b0c0004c 	andi	r3,r22,1
1000497c:	183f891e 	bne	r3,zero,100047a4 <__alt_data_end+0xf80047a4>
10004980:	b580008c 	andi	r22,r22,2
10004984:	b03f8726 	beq	r22,zero,100047a4 <__alt_data_end+0xf80047a4>
10004988:	d940a017 	ldw	r5,640(sp)
1000498c:	00840074 	movhi	r2,4097
10004990:	10b05e04 	addi	r2,r2,-16008
10004994:	8809883a 	mov	r4,r17
10004998:	28802626 	beq	r5,r2,10004a34 <__svfscanf_r+0x1620>
1000499c:	d9c09f17 	ldw	r7,636(sp)
100049a0:	d9400104 	addi	r5,sp,4
100049a4:	000d883a 	mov	r6,zero
100049a8:	000be480 	call	1000be48 <_strtoll_r>
100049ac:	d9409c17 	ldw	r5,624(sp)
100049b0:	29000017 	ldw	r4,0(r5)
100049b4:	29400104 	addi	r5,r5,4
100049b8:	d9409c15 	stw	r5,624(sp)
100049bc:	20800015 	stw	r2,0(r4)
100049c0:	20c00115 	stw	r3,4(r4)
100049c4:	003f4506 	br	100046dc <__alt_data_end+0xf80046dc>
100049c8:	d8809c17 	ldw	r2,624(sp)
100049cc:	a809883a 	mov	r4,r21
100049d0:	180b883a 	mov	r5,r3
100049d4:	14000104 	addi	r16,r2,4
100049d8:	15800017 	ldw	r22,0(r2)
100049dc:	000a1380 	call	1000a138 <__isnand>
100049e0:	1000311e 	bne	r2,zero,10004aa8 <__svfscanf_r+0x1694>
100049e4:	a809883a 	mov	r4,r21
100049e8:	b80b883a 	mov	r5,r23
100049ec:	000f7880 	call	1000f788 <__truncdfsf2>
100049f0:	b0800015 	stw	r2,0(r22)
100049f4:	dc009c15 	stw	r16,624(sp)
100049f8:	003c5706 	br	10003b58 <__alt_data_end+0xf8003b58>
100049fc:	0021883a 	mov	r16,zero
10004a00:	003f0406 	br	10004614 <__alt_data_end+0xf8004614>
10004a04:	d9400104 	addi	r5,sp,4
10004a08:	9821883a 	mov	r16,r19
10004a0c:	2dfabe2e 	bgeu	r5,r23,10003508 <__alt_data_end+0xf8003508>
10004a10:	bcbfffc4 	addi	r18,r23,-1
10004a14:	dcc000c4 	addi	r19,sp,3
10004a18:	91400007 	ldb	r5,0(r18)
10004a1c:	8809883a 	mov	r4,r17
10004a20:	94bfffc4 	addi	r18,r18,-1
10004a24:	800d883a 	mov	r6,r16
10004a28:	000c8c40 	call	1000c8c4 <_ungetc_r>
10004a2c:	94fffa1e 	bne	r18,r19,10004a18 <__alt_data_end+0xf8004a18>
10004a30:	003ab506 	br	10003508 <__alt_data_end+0xf8003508>
10004a34:	d9c09f17 	ldw	r7,636(sp)
10004a38:	d9400104 	addi	r5,sp,4
10004a3c:	000d883a 	mov	r6,zero
10004a40:	000c4400 	call	1000c440 <_strtoull_r>
10004a44:	003fd906 	br	100049ac <__alt_data_end+0xf80049ac>
10004a48:	d9000104 	addi	r4,sp,4
10004a4c:	9821883a 	mov	r16,r19
10004a50:	25faad2e 	bgeu	r4,r23,10003508 <__alt_data_end+0xf8003508>
10004a54:	bcbfffc4 	addi	r18,r23,-1
10004a58:	dcc000c4 	addi	r19,sp,3
10004a5c:	91400007 	ldb	r5,0(r18)
10004a60:	8809883a 	mov	r4,r17
10004a64:	94bfffc4 	addi	r18,r18,-1
10004a68:	800d883a 	mov	r6,r16
10004a6c:	000c8c40 	call	1000c8c4 <_ungetc_r>
10004a70:	94fffa1e 	bne	r18,r19,10004a5c <__alt_data_end+0xf8004a5c>
10004a74:	003aa406 	br	10003508 <__alt_data_end+0xf8003508>
10004a78:	d8c00104 	addi	r3,sp,4
10004a7c:	9821883a 	mov	r16,r19
10004a80:	1dfaa12e 	bgeu	r3,r23,10003508 <__alt_data_end+0xf8003508>
10004a84:	bcbfffc4 	addi	r18,r23,-1
10004a88:	dcc000c4 	addi	r19,sp,3
10004a8c:	91400007 	ldb	r5,0(r18)
10004a90:	8809883a 	mov	r4,r17
10004a94:	94bfffc4 	addi	r18,r18,-1
10004a98:	800d883a 	mov	r6,r16
10004a9c:	000c8c40 	call	1000c8c4 <_ungetc_r>
10004aa0:	94fffa1e 	bne	r18,r19,10004a8c <__alt_data_end+0xf8004a8c>
10004aa4:	003a9806 	br	10003508 <__alt_data_end+0xf8003508>
10004aa8:	0009883a 	mov	r4,zero
10004aac:	000a28c0 	call	1000a28c <nanf>
10004ab0:	b0800015 	stw	r2,0(r22)
10004ab4:	dc009c15 	stw	r16,624(sp)
10004ab8:	003c2706 	br	10003b58 <__alt_data_end+0xf8003b58>

10004abc <_vfscanf_r>:
10004abc:	defffb04 	addi	sp,sp,-20
10004ac0:	dc000315 	stw	r16,12(sp)
10004ac4:	dfc00415 	stw	ra,16(sp)
10004ac8:	2021883a 	mov	r16,r4
10004acc:	20000926 	beq	r4,zero,10004af4 <_vfscanf_r+0x38>
10004ad0:	20800e17 	ldw	r2,56(r4)
10004ad4:	1000071e 	bne	r2,zero,10004af4 <_vfscanf_r+0x38>
10004ad8:	d9400015 	stw	r5,0(sp)
10004adc:	d9800115 	stw	r6,4(sp)
10004ae0:	d9c00215 	stw	r7,8(sp)
10004ae4:	00068240 	call	10006824 <__sinit>
10004ae8:	d9c00217 	ldw	r7,8(sp)
10004aec:	d9800117 	ldw	r6,4(sp)
10004af0:	d9400017 	ldw	r5,0(sp)
10004af4:	8009883a 	mov	r4,r16
10004af8:	dfc00417 	ldw	ra,16(sp)
10004afc:	dc000317 	ldw	r16,12(sp)
10004b00:	dec00504 	addi	sp,sp,20
10004b04:	00034141 	jmpi	10003414 <__svfscanf_r>

10004b08 <__svfscanf>:
10004b08:	00840074 	movhi	r2,4097
10004b0c:	1092a404 	addi	r2,r2,19088
10004b10:	2007883a 	mov	r3,r4
10004b14:	11000017 	ldw	r4,0(r2)
10004b18:	2805883a 	mov	r2,r5
10004b1c:	300f883a 	mov	r7,r6
10004b20:	180b883a 	mov	r5,r3
10004b24:	100d883a 	mov	r6,r2
10004b28:	00034141 	jmpi	10003414 <__svfscanf_r>

10004b2c <vfscanf>:
10004b2c:	defffb04 	addi	sp,sp,-20
10004b30:	dc000115 	stw	r16,4(sp)
10004b34:	04040074 	movhi	r16,4097
10004b38:	8412a404 	addi	r16,r16,19088
10004b3c:	80800017 	ldw	r2,0(r16)
10004b40:	dc800315 	stw	r18,12(sp)
10004b44:	dc400215 	stw	r17,8(sp)
10004b48:	dfc00415 	stw	ra,16(sp)
10004b4c:	2025883a 	mov	r18,r4
10004b50:	2823883a 	mov	r17,r5
10004b54:	300f883a 	mov	r7,r6
10004b58:	10000726 	beq	r2,zero,10004b78 <vfscanf+0x4c>
10004b5c:	10c00e17 	ldw	r3,56(r2)
10004b60:	1800051e 	bne	r3,zero,10004b78 <vfscanf+0x4c>
10004b64:	1009883a 	mov	r4,r2
10004b68:	d9800015 	stw	r6,0(sp)
10004b6c:	00068240 	call	10006824 <__sinit>
10004b70:	80800017 	ldw	r2,0(r16)
10004b74:	d9c00017 	ldw	r7,0(sp)
10004b78:	1009883a 	mov	r4,r2
10004b7c:	900b883a 	mov	r5,r18
10004b80:	880d883a 	mov	r6,r17
10004b84:	dfc00417 	ldw	ra,16(sp)
10004b88:	dc800317 	ldw	r18,12(sp)
10004b8c:	dc400217 	ldw	r17,8(sp)
10004b90:	dc000117 	ldw	r16,4(sp)
10004b94:	dec00504 	addi	sp,sp,20
10004b98:	00034141 	jmpi	10003414 <__svfscanf_r>

10004b9c <__swsetup_r>:
10004b9c:	00840074 	movhi	r2,4097
10004ba0:	1092a404 	addi	r2,r2,19088
10004ba4:	10800017 	ldw	r2,0(r2)
10004ba8:	defffd04 	addi	sp,sp,-12
10004bac:	dc400115 	stw	r17,4(sp)
10004bb0:	dc000015 	stw	r16,0(sp)
10004bb4:	dfc00215 	stw	ra,8(sp)
10004bb8:	2023883a 	mov	r17,r4
10004bbc:	2821883a 	mov	r16,r5
10004bc0:	10000226 	beq	r2,zero,10004bcc <__swsetup_r+0x30>
10004bc4:	10c00e17 	ldw	r3,56(r2)
10004bc8:	18003d26 	beq	r3,zero,10004cc0 <__swsetup_r+0x124>
10004bcc:	8080030b 	ldhu	r2,12(r16)
10004bd0:	10c0020c 	andi	r3,r2,8
10004bd4:	18ffffcc 	andi	r3,r3,65535
10004bd8:	18e0001c 	xori	r3,r3,32768
10004bdc:	18e00004 	addi	r3,r3,-32768
10004be0:	18001226 	beq	r3,zero,10004c2c <__swsetup_r+0x90>
10004be4:	80c00417 	ldw	r3,16(r16)
10004be8:	18001f26 	beq	r3,zero,10004c68 <__swsetup_r+0xcc>
10004bec:	1100004c 	andi	r4,r2,1
10004bf0:	2000261e 	bne	r4,zero,10004c8c <__swsetup_r+0xf0>
10004bf4:	1080008c 	andi	r2,r2,2
10004bf8:	10bfffcc 	andi	r2,r2,65535
10004bfc:	10a0001c 	xori	r2,r2,32768
10004c00:	10a00004 	addi	r2,r2,-32768
10004c04:	1000311e 	bne	r2,zero,10004ccc <__swsetup_r+0x130>
10004c08:	80800517 	ldw	r2,20(r16)
10004c0c:	80800215 	stw	r2,8(r16)
10004c10:	18002326 	beq	r3,zero,10004ca0 <__swsetup_r+0x104>
10004c14:	0005883a 	mov	r2,zero
10004c18:	dfc00217 	ldw	ra,8(sp)
10004c1c:	dc400117 	ldw	r17,4(sp)
10004c20:	dc000017 	ldw	r16,0(sp)
10004c24:	dec00304 	addi	sp,sp,12
10004c28:	f800283a 	ret
10004c2c:	10c0040c 	andi	r3,r2,16
10004c30:	18ffffcc 	andi	r3,r3,65535
10004c34:	18e0001c 	xori	r3,r3,32768
10004c38:	18e00004 	addi	r3,r3,-32768
10004c3c:	18001e26 	beq	r3,zero,10004cb8 <__swsetup_r+0x11c>
10004c40:	10c0010c 	andi	r3,r2,4
10004c44:	18ffffcc 	andi	r3,r3,65535
10004c48:	18e0001c 	xori	r3,r3,32768
10004c4c:	18e00004 	addi	r3,r3,-32768
10004c50:	1800211e 	bne	r3,zero,10004cd8 <__swsetup_r+0x13c>
10004c54:	80c00417 	ldw	r3,16(r16)
10004c58:	11400214 	ori	r5,r2,8
10004c5c:	8140030d 	sth	r5,12(r16)
10004c60:	2805883a 	mov	r2,r5
10004c64:	183fe11e 	bne	r3,zero,10004bec <__alt_data_end+0xf8004bec>
10004c68:	1140a00c 	andi	r5,r2,640
10004c6c:	01008004 	movi	r4,512
10004c70:	293fde26 	beq	r5,r4,10004bec <__alt_data_end+0xf8004bec>
10004c74:	8809883a 	mov	r4,r17
10004c78:	800b883a 	mov	r5,r16
10004c7c:	000784c0 	call	1000784c <__smakebuf_r>
10004c80:	8080030b 	ldhu	r2,12(r16)
10004c84:	80c00417 	ldw	r3,16(r16)
10004c88:	003fd806 	br	10004bec <__alt_data_end+0xf8004bec>
10004c8c:	80800517 	ldw	r2,20(r16)
10004c90:	80000215 	stw	zero,8(r16)
10004c94:	0085c83a 	sub	r2,zero,r2
10004c98:	80800615 	stw	r2,24(r16)
10004c9c:	183fdd1e 	bne	r3,zero,10004c14 <__alt_data_end+0xf8004c14>
10004ca0:	8080030b 	ldhu	r2,12(r16)
10004ca4:	1080200c 	andi	r2,r2,128
10004ca8:	10bfffcc 	andi	r2,r2,65535
10004cac:	10a0001c 	xori	r2,r2,32768
10004cb0:	10a00004 	addi	r2,r2,-32768
10004cb4:	103fd826 	beq	r2,zero,10004c18 <__alt_data_end+0xf8004c18>
10004cb8:	00bfffc4 	movi	r2,-1
10004cbc:	003fd606 	br	10004c18 <__alt_data_end+0xf8004c18>
10004cc0:	1009883a 	mov	r4,r2
10004cc4:	00068240 	call	10006824 <__sinit>
10004cc8:	003fc006 	br	10004bcc <__alt_data_end+0xf8004bcc>
10004ccc:	0005883a 	mov	r2,zero
10004cd0:	80800215 	stw	r2,8(r16)
10004cd4:	003fce06 	br	10004c10 <__alt_data_end+0xf8004c10>
10004cd8:	81400c17 	ldw	r5,48(r16)
10004cdc:	28000626 	beq	r5,zero,10004cf8 <__swsetup_r+0x15c>
10004ce0:	80c01004 	addi	r3,r16,64
10004ce4:	28c00326 	beq	r5,r3,10004cf4 <__swsetup_r+0x158>
10004ce8:	8809883a 	mov	r4,r17
10004cec:	0006e240 	call	10006e24 <_free_r>
10004cf0:	8080030b 	ldhu	r2,12(r16)
10004cf4:	80000c15 	stw	zero,48(r16)
10004cf8:	80c00417 	ldw	r3,16(r16)
10004cfc:	013ff6c4 	movi	r4,-37
10004d00:	2084703a 	and	r2,r4,r2
10004d04:	80000115 	stw	zero,4(r16)
10004d08:	80c00015 	stw	r3,0(r16)
10004d0c:	003fd206 	br	10004c58 <__alt_data_end+0xf8004c58>

10004d10 <quorem>:
10004d10:	defff204 	addi	sp,sp,-56
10004d14:	dd000815 	stw	r20,32(sp)
10004d18:	20800417 	ldw	r2,16(r4)
10004d1c:	2d000417 	ldw	r20,16(r5)
10004d20:	dcc00715 	stw	r19,28(sp)
10004d24:	dfc00d15 	stw	ra,52(sp)
10004d28:	df000c15 	stw	fp,48(sp)
10004d2c:	ddc00b15 	stw	r23,44(sp)
10004d30:	dd800a15 	stw	r22,40(sp)
10004d34:	dd400915 	stw	r21,36(sp)
10004d38:	dc800615 	stw	r18,24(sp)
10004d3c:	dc400515 	stw	r17,20(sp)
10004d40:	dc000415 	stw	r16,16(sp)
10004d44:	d9400015 	stw	r5,0(sp)
10004d48:	2027883a 	mov	r19,r4
10004d4c:	15007d16 	blt	r2,r20,10004f44 <quorem+0x234>
10004d50:	a0800104 	addi	r2,r20,4
10004d54:	1085883a 	add	r2,r2,r2
10004d58:	1085883a 	add	r2,r2,r2
10004d5c:	28ad883a 	add	r22,r5,r2
10004d60:	2085883a 	add	r2,r4,r2
10004d64:	10800017 	ldw	r2,0(r2)
10004d68:	b1400017 	ldw	r5,0(r22)
10004d6c:	a53fffc4 	addi	r20,r20,-1
10004d70:	1009883a 	mov	r4,r2
10004d74:	29400044 	addi	r5,r5,1
10004d78:	d8800115 	stw	r2,4(sp)
10004d7c:	00012ec0 	call	100012ec <__udivsi3>
10004d80:	1025883a 	mov	r18,r2
10004d84:	d8800017 	ldw	r2,0(sp)
10004d88:	9f000504 	addi	fp,r19,20
10004d8c:	14000504 	addi	r16,r2,20
10004d90:	90003626 	beq	r18,zero,10004e6c <quorem+0x15c>
10004d94:	802b883a 	mov	r21,r16
10004d98:	e023883a 	mov	r17,fp
10004d9c:	0007883a 	mov	r3,zero
10004da0:	002f883a 	mov	r23,zero
10004da4:	a9800017 	ldw	r6,0(r21)
10004da8:	900b883a 	mov	r5,r18
10004dac:	d8c00315 	stw	r3,12(sp)
10004db0:	313fffcc 	andi	r4,r6,65535
10004db4:	d9800215 	stw	r6,8(sp)
10004db8:	00012fc0 	call	100012fc <__mulsi3>
10004dbc:	d9800217 	ldw	r6,8(sp)
10004dc0:	d8c00317 	ldw	r3,12(sp)
10004dc4:	900b883a 	mov	r5,r18
10004dc8:	3008d43a 	srli	r4,r6,16
10004dcc:	1887883a 	add	r3,r3,r2
10004dd0:	d8c00315 	stw	r3,12(sp)
10004dd4:	00012fc0 	call	100012fc <__mulsi3>
10004dd8:	89400017 	ldw	r5,0(r17)
10004ddc:	d8c00317 	ldw	r3,12(sp)
10004de0:	ad400104 	addi	r21,r21,4
10004de4:	293fffcc 	andi	r4,r5,65535
10004de8:	1810d43a 	srli	r8,r3,16
10004dec:	25c9883a 	add	r4,r4,r23
10004df0:	18ffffcc 	andi	r3,r3,65535
10004df4:	20c9c83a 	sub	r4,r4,r3
10004df8:	280cd43a 	srli	r6,r5,16
10004dfc:	4085883a 	add	r2,r8,r2
10004e00:	2007d43a 	srai	r3,r4,16
10004e04:	117fffcc 	andi	r5,r2,65535
10004e08:	314bc83a 	sub	r5,r6,r5
10004e0c:	28cb883a 	add	r5,r5,r3
10004e10:	8940008d 	sth	r5,2(r17)
10004e14:	8900000d 	sth	r4,0(r17)
10004e18:	1006d43a 	srli	r3,r2,16
10004e1c:	282fd43a 	srai	r23,r5,16
10004e20:	8c400104 	addi	r17,r17,4
10004e24:	b57fdf2e 	bgeu	r22,r21,10004da4 <__alt_data_end+0xf8004da4>
10004e28:	d8c00117 	ldw	r3,4(sp)
10004e2c:	18000f1e 	bne	r3,zero,10004e6c <quorem+0x15c>
10004e30:	a0800144 	addi	r2,r20,5
10004e34:	1085883a 	add	r2,r2,r2
10004e38:	1085883a 	add	r2,r2,r2
10004e3c:	9887883a 	add	r3,r19,r2
10004e40:	18bfff04 	addi	r2,r3,-4
10004e44:	e080082e 	bgeu	fp,r2,10004e68 <quorem+0x158>
10004e48:	18ffff17 	ldw	r3,-4(r3)
10004e4c:	18000326 	beq	r3,zero,10004e5c <quorem+0x14c>
10004e50:	00000506 	br	10004e68 <quorem+0x158>
10004e54:	10c00017 	ldw	r3,0(r2)
10004e58:	1800031e 	bne	r3,zero,10004e68 <quorem+0x158>
10004e5c:	10bfff04 	addi	r2,r2,-4
10004e60:	a53fffc4 	addi	r20,r20,-1
10004e64:	e0bffb36 	bltu	fp,r2,10004e54 <__alt_data_end+0xf8004e54>
10004e68:	9d000415 	stw	r20,16(r19)
10004e6c:	d9400017 	ldw	r5,0(sp)
10004e70:	9809883a 	mov	r4,r19
10004e74:	000904c0 	call	1000904c <__mcmp>
10004e78:	10002516 	blt	r2,zero,10004f10 <quorem+0x200>
10004e7c:	94800044 	addi	r18,r18,1
10004e80:	e007883a 	mov	r3,fp
10004e84:	000d883a 	mov	r6,zero
10004e88:	18800017 	ldw	r2,0(r3)
10004e8c:	82000017 	ldw	r8,0(r16)
10004e90:	84000104 	addi	r16,r16,4
10004e94:	11ffffcc 	andi	r7,r2,65535
10004e98:	413fffcc 	andi	r4,r8,65535
10004e9c:	398d883a 	add	r6,r7,r6
10004ea0:	310fc83a 	sub	r7,r6,r4
10004ea4:	4010d43a 	srli	r8,r8,16
10004ea8:	100cd43a 	srli	r6,r2,16
10004eac:	3809d43a 	srai	r4,r7,16
10004eb0:	19c0000d 	sth	r7,0(r3)
10004eb4:	320dc83a 	sub	r6,r6,r8
10004eb8:	310d883a 	add	r6,r6,r4
10004ebc:	1980008d 	sth	r6,2(r3)
10004ec0:	300dd43a 	srai	r6,r6,16
10004ec4:	18c00104 	addi	r3,r3,4
10004ec8:	b43fef2e 	bgeu	r22,r16,10004e88 <__alt_data_end+0xf8004e88>
10004ecc:	a0800144 	addi	r2,r20,5
10004ed0:	1085883a 	add	r2,r2,r2
10004ed4:	1085883a 	add	r2,r2,r2
10004ed8:	9885883a 	add	r2,r19,r2
10004edc:	10c00017 	ldw	r3,0(r2)
10004ee0:	18000b1e 	bne	r3,zero,10004f10 <quorem+0x200>
10004ee4:	10ffff04 	addi	r3,r2,-4
10004ee8:	e0c0082e 	bgeu	fp,r3,10004f0c <quorem+0x1fc>
10004eec:	10bfff17 	ldw	r2,-4(r2)
10004ef0:	10000326 	beq	r2,zero,10004f00 <quorem+0x1f0>
10004ef4:	00000506 	br	10004f0c <quorem+0x1fc>
10004ef8:	18800017 	ldw	r2,0(r3)
10004efc:	1000031e 	bne	r2,zero,10004f0c <quorem+0x1fc>
10004f00:	18ffff04 	addi	r3,r3,-4
10004f04:	a53fffc4 	addi	r20,r20,-1
10004f08:	e0fffb36 	bltu	fp,r3,10004ef8 <__alt_data_end+0xf8004ef8>
10004f0c:	9d000415 	stw	r20,16(r19)
10004f10:	9005883a 	mov	r2,r18
10004f14:	dfc00d17 	ldw	ra,52(sp)
10004f18:	df000c17 	ldw	fp,48(sp)
10004f1c:	ddc00b17 	ldw	r23,44(sp)
10004f20:	dd800a17 	ldw	r22,40(sp)
10004f24:	dd400917 	ldw	r21,36(sp)
10004f28:	dd000817 	ldw	r20,32(sp)
10004f2c:	dcc00717 	ldw	r19,28(sp)
10004f30:	dc800617 	ldw	r18,24(sp)
10004f34:	dc400517 	ldw	r17,20(sp)
10004f38:	dc000417 	ldw	r16,16(sp)
10004f3c:	dec00e04 	addi	sp,sp,56
10004f40:	f800283a 	ret
10004f44:	0005883a 	mov	r2,zero
10004f48:	003ff206 	br	10004f14 <__alt_data_end+0xf8004f14>

10004f4c <_dtoa_r>:
10004f4c:	20801017 	ldw	r2,64(r4)
10004f50:	deffdf04 	addi	sp,sp,-132
10004f54:	dcc01a15 	stw	r19,104(sp)
10004f58:	dc801915 	stw	r18,100(sp)
10004f5c:	dc401815 	stw	r17,96(sp)
10004f60:	dc001715 	stw	r16,92(sp)
10004f64:	dfc02015 	stw	ra,128(sp)
10004f68:	df001f15 	stw	fp,124(sp)
10004f6c:	ddc01e15 	stw	r23,120(sp)
10004f70:	dd801d15 	stw	r22,116(sp)
10004f74:	dd401c15 	stw	r21,112(sp)
10004f78:	dd001b15 	stw	r20,108(sp)
10004f7c:	d9400315 	stw	r5,12(sp)
10004f80:	d9c00415 	stw	r7,16(sp)
10004f84:	2021883a 	mov	r16,r4
10004f88:	3025883a 	mov	r18,r6
10004f8c:	dcc02317 	ldw	r19,140(sp)
10004f90:	3023883a 	mov	r17,r6
10004f94:	10000826 	beq	r2,zero,10004fb8 <_dtoa_r+0x6c>
10004f98:	20c01117 	ldw	r3,68(r4)
10004f9c:	01800044 	movi	r6,1
10004fa0:	100b883a 	mov	r5,r2
10004fa4:	30cc983a 	sll	r6,r6,r3
10004fa8:	10c00115 	stw	r3,4(r2)
10004fac:	11800215 	stw	r6,8(r2)
10004fb0:	00087a80 	call	100087a8 <_Bfree>
10004fb4:	80001015 	stw	zero,64(r16)
10004fb8:	90002f16 	blt	r18,zero,10005078 <_dtoa_r+0x12c>
10004fbc:	98000015 	stw	zero,0(r19)
10004fc0:	90dffc2c 	andhi	r3,r18,32752
10004fc4:	009ffc34 	movhi	r2,32752
10004fc8:	18801c26 	beq	r3,r2,1000503c <_dtoa_r+0xf0>
10004fcc:	d9000317 	ldw	r4,12(sp)
10004fd0:	880b883a 	mov	r5,r17
10004fd4:	000d883a 	mov	r6,zero
10004fd8:	000f883a 	mov	r7,zero
10004fdc:	000f4140 	call	1000f414 <__nedf2>
10004fe0:	10002c1e 	bne	r2,zero,10005094 <_dtoa_r+0x148>
10004fe4:	d9002217 	ldw	r4,136(sp)
10004fe8:	d9c02417 	ldw	r7,144(sp)
10004fec:	00800044 	movi	r2,1
10004ff0:	20800015 	stw	r2,0(r4)
10004ff4:	38019426 	beq	r7,zero,10005648 <_dtoa_r+0x6fc>
10004ff8:	00840074 	movhi	r2,4097
10004ffc:	108a0e44 	addi	r2,r2,10297
10005000:	38800015 	stw	r2,0(r7)
10005004:	15ffffc4 	addi	r23,r2,-1
10005008:	b805883a 	mov	r2,r23
1000500c:	dfc02017 	ldw	ra,128(sp)
10005010:	df001f17 	ldw	fp,124(sp)
10005014:	ddc01e17 	ldw	r23,120(sp)
10005018:	dd801d17 	ldw	r22,116(sp)
1000501c:	dd401c17 	ldw	r21,112(sp)
10005020:	dd001b17 	ldw	r20,108(sp)
10005024:	dcc01a17 	ldw	r19,104(sp)
10005028:	dc801917 	ldw	r18,100(sp)
1000502c:	dc401817 	ldw	r17,96(sp)
10005030:	dc001717 	ldw	r16,92(sp)
10005034:	dec02104 	addi	sp,sp,132
10005038:	f800283a 	ret
1000503c:	d8c02217 	ldw	r3,136(sp)
10005040:	d9000317 	ldw	r4,12(sp)
10005044:	0089c3c4 	movi	r2,9999
10005048:	18800015 	stw	r2,0(r3)
1000504c:	20016c26 	beq	r4,zero,10005600 <_dtoa_r+0x6b4>
10005050:	05c40074 	movhi	r23,4097
10005054:	bdcac504 	addi	r23,r23,11028
10005058:	d9c02417 	ldw	r7,144(sp)
1000505c:	383fea26 	beq	r7,zero,10005008 <__alt_data_end+0xf8005008>
10005060:	b88000c7 	ldb	r2,3(r23)
10005064:	10016d1e 	bne	r2,zero,1000561c <_dtoa_r+0x6d0>
10005068:	b88000c4 	addi	r2,r23,3
1000506c:	d8c02417 	ldw	r3,144(sp)
10005070:	18800015 	stw	r2,0(r3)
10005074:	003fe406 	br	10005008 <__alt_data_end+0xf8005008>
10005078:	04600034 	movhi	r17,32768
1000507c:	8c7fffc4 	addi	r17,r17,-1
10005080:	9462703a 	and	r17,r18,r17
10005084:	00800044 	movi	r2,1
10005088:	98800015 	stw	r2,0(r19)
1000508c:	8825883a 	mov	r18,r17
10005090:	003fcb06 	br	10004fc0 <__alt_data_end+0xf8004fc0>
10005094:	d9400317 	ldw	r5,12(sp)
10005098:	9028d53a 	srli	r20,r18,20
1000509c:	d8800204 	addi	r2,sp,8
100050a0:	d8800015 	stw	r2,0(sp)
100050a4:	8009883a 	mov	r4,r16
100050a8:	880d883a 	mov	r6,r17
100050ac:	d9c00104 	addi	r7,sp,4
100050b0:	00093f40 	call	100093f4 <__d2b>
100050b4:	a501ffcc 	andi	r20,r20,2047
100050b8:	1039883a 	mov	fp,r2
100050bc:	a001591e 	bne	r20,zero,10005624 <_dtoa_r+0x6d8>
100050c0:	dd400217 	ldw	r21,8(sp)
100050c4:	dd000117 	ldw	r20,4(sp)
100050c8:	00befbc4 	movi	r2,-1041
100050cc:	ad29883a 	add	r20,r21,r20
100050d0:	a082d216 	blt	r20,r2,10005c1c <_dtoa_r+0xcd0>
100050d4:	d8c00317 	ldw	r3,12(sp)
100050d8:	013f0384 	movi	r4,-1010
100050dc:	2509c83a 	sub	r4,r4,r20
100050e0:	a0810484 	addi	r2,r20,1042
100050e4:	9124983a 	sll	r18,r18,r4
100050e8:	1884d83a 	srl	r2,r3,r2
100050ec:	9088b03a 	or	r4,r18,r2
100050f0:	000f7e80 	call	1000f7e8 <__floatunsidf>
100050f4:	1009883a 	mov	r4,r2
100050f8:	017f8434 	movhi	r5,65040
100050fc:	00800044 	movi	r2,1
10005100:	194b883a 	add	r5,r3,r5
10005104:	a53fffc4 	addi	r20,r20,-1
10005108:	d8800f15 	stw	r2,60(sp)
1000510c:	000d883a 	mov	r6,zero
10005110:	01cffe34 	movhi	r7,16376
10005114:	000eec00 	call	1000eec0 <__subdf3>
10005118:	1009883a 	mov	r4,r2
1000511c:	180b883a 	mov	r5,r3
10005120:	0198dbf4 	movhi	r6,25455
10005124:	3190d844 	addi	r6,r6,17249
10005128:	01cff4f4 	movhi	r7,16339
1000512c:	39e1e9c4 	addi	r7,r7,-30809
10005130:	000ef200 	call	1000ef20 <__muldf3>
10005134:	180b883a 	mov	r5,r3
10005138:	01a2d874 	movhi	r6,35681
1000513c:	31b22cc4 	addi	r6,r6,-14157
10005140:	01cff1f4 	movhi	r7,16327
10005144:	39e28a04 	addi	r7,r7,-30168
10005148:	1009883a 	mov	r4,r2
1000514c:	000ee6c0 	call	1000ee6c <__adddf3>
10005150:	a009883a 	mov	r4,r20
10005154:	1027883a 	mov	r19,r2
10005158:	1825883a 	mov	r18,r3
1000515c:	000f5f00 	call	1000f5f0 <__floatsidf>
10005160:	1009883a 	mov	r4,r2
10005164:	180b883a 	mov	r5,r3
10005168:	019427f4 	movhi	r6,20639
1000516c:	319e7ec4 	addi	r6,r6,31227
10005170:	01cff4f4 	movhi	r7,16339
10005174:	39d104c4 	addi	r7,r7,17427
10005178:	000ef200 	call	1000ef20 <__muldf3>
1000517c:	9809883a 	mov	r4,r19
10005180:	900b883a 	mov	r5,r18
10005184:	100d883a 	mov	r6,r2
10005188:	180f883a 	mov	r7,r3
1000518c:	000ee6c0 	call	1000ee6c <__adddf3>
10005190:	1009883a 	mov	r4,r2
10005194:	180b883a 	mov	r5,r3
10005198:	1027883a 	mov	r19,r2
1000519c:	1825883a 	mov	r18,r3
100051a0:	000f6c40 	call	1000f6c4 <__fixdfsi>
100051a4:	9809883a 	mov	r4,r19
100051a8:	900b883a 	mov	r5,r18
100051ac:	000d883a 	mov	r6,zero
100051b0:	000f883a 	mov	r7,zero
100051b4:	d8800615 	stw	r2,24(sp)
100051b8:	000f5380 	call	1000f538 <__ltdf2>
100051bc:	10027e16 	blt	r2,zero,10005bb8 <_dtoa_r+0xc6c>
100051c0:	d8c00617 	ldw	r3,24(sp)
100051c4:	00800584 	movi	r2,22
100051c8:	10c26c36 	bltu	r2,r3,10005b7c <_dtoa_r+0xc30>
100051cc:	180490fa 	slli	r2,r3,3
100051d0:	00c40074 	movhi	r3,4097
100051d4:	18caeb04 	addi	r3,r3,11180
100051d8:	d9800317 	ldw	r6,12(sp)
100051dc:	1885883a 	add	r2,r3,r2
100051e0:	11000017 	ldw	r4,0(r2)
100051e4:	11400117 	ldw	r5,4(r2)
100051e8:	880f883a 	mov	r7,r17
100051ec:	000f4700 	call	1000f470 <__gtdf2>
100051f0:	00828f0e 	bge	zero,r2,10005c30 <_dtoa_r+0xce4>
100051f4:	d8800617 	ldw	r2,24(sp)
100051f8:	d8000d15 	stw	zero,52(sp)
100051fc:	10bfffc4 	addi	r2,r2,-1
10005200:	d8800615 	stw	r2,24(sp)
10005204:	ad29c83a 	sub	r20,r21,r20
10005208:	a53fffc4 	addi	r20,r20,-1
1000520c:	a0026616 	blt	r20,zero,10005ba8 <_dtoa_r+0xc5c>
10005210:	dd000715 	stw	r20,28(sp)
10005214:	d8000815 	stw	zero,32(sp)
10005218:	d8800617 	ldw	r2,24(sp)
1000521c:	10025a16 	blt	r2,zero,10005b88 <_dtoa_r+0xc3c>
10005220:	d8c00717 	ldw	r3,28(sp)
10005224:	d8800b15 	stw	r2,44(sp)
10005228:	d8000a15 	stw	zero,40(sp)
1000522c:	1887883a 	add	r3,r3,r2
10005230:	d8c00715 	stw	r3,28(sp)
10005234:	d9c00417 	ldw	r7,16(sp)
10005238:	00800244 	movi	r2,9
1000523c:	11c10536 	bltu	r2,r7,10005654 <_dtoa_r+0x708>
10005240:	00800144 	movi	r2,5
10005244:	11c4c60e 	bge	r2,r7,10006560 <_dtoa_r+0x1614>
10005248:	39ffff04 	addi	r7,r7,-4
1000524c:	d9c00415 	stw	r7,16(sp)
10005250:	0027883a 	mov	r19,zero
10005254:	d9c00417 	ldw	r7,16(sp)
10005258:	008000c4 	movi	r2,3
1000525c:	3883a226 	beq	r7,r2,100060e8 <_dtoa_r+0x119c>
10005260:	11c2bc16 	blt	r2,r7,10005d54 <_dtoa_r+0xe08>
10005264:	00800084 	movi	r2,2
10005268:	3880fb1e 	bne	r7,r2,10005658 <_dtoa_r+0x70c>
1000526c:	d8000c15 	stw	zero,48(sp)
10005270:	d9002117 	ldw	r4,132(sp)
10005274:	0103ae0e 	bge	zero,r4,10006130 <_dtoa_r+0x11e4>
10005278:	2025883a 	mov	r18,r4
1000527c:	d9000e15 	stw	r4,56(sp)
10005280:	d9000915 	stw	r4,36(sp)
10005284:	80001115 	stw	zero,68(r16)
10005288:	008005c4 	movi	r2,23
1000528c:	1484b22e 	bgeu	r2,r18,10006558 <_dtoa_r+0x160c>
10005290:	00c00044 	movi	r3,1
10005294:	00800104 	movi	r2,4
10005298:	1085883a 	add	r2,r2,r2
1000529c:	11000504 	addi	r4,r2,20
100052a0:	180b883a 	mov	r5,r3
100052a4:	18c00044 	addi	r3,r3,1
100052a8:	913ffb2e 	bgeu	r18,r4,10005298 <__alt_data_end+0xf8005298>
100052ac:	81401115 	stw	r5,68(r16)
100052b0:	8009883a 	mov	r4,r16
100052b4:	00087000 	call	10008700 <_Balloc>
100052b8:	102f883a 	mov	r23,r2
100052bc:	80801015 	stw	r2,64(r16)
100052c0:	00800384 	movi	r2,14
100052c4:	1480f036 	bltu	r2,r18,10005688 <_dtoa_r+0x73c>
100052c8:	9800ef26 	beq	r19,zero,10005688 <_dtoa_r+0x73c>
100052cc:	d8800617 	ldw	r2,24(sp)
100052d0:	00839c0e 	bge	zero,r2,10006144 <_dtoa_r+0x11f8>
100052d4:	d8c00617 	ldw	r3,24(sp)
100052d8:	108003cc 	andi	r2,r2,15
100052dc:	100490fa 	slli	r2,r2,3
100052e0:	182bd13a 	srai	r21,r3,4
100052e4:	00c40074 	movhi	r3,4097
100052e8:	18caeb04 	addi	r3,r3,11180
100052ec:	1885883a 	add	r2,r3,r2
100052f0:	a8c0040c 	andi	r3,r21,16
100052f4:	12800017 	ldw	r10,0(r2)
100052f8:	15800117 	ldw	r22,4(r2)
100052fc:	18038726 	beq	r3,zero,1000611c <_dtoa_r+0x11d0>
10005300:	00840074 	movhi	r2,4097
10005304:	108ae104 	addi	r2,r2,11140
10005308:	11800817 	ldw	r6,32(r2)
1000530c:	11c00917 	ldw	r7,36(r2)
10005310:	d9000317 	ldw	r4,12(sp)
10005314:	880b883a 	mov	r5,r17
10005318:	da801515 	stw	r10,84(sp)
1000531c:	000f2040 	call	1000f204 <__divdf3>
10005320:	da801517 	ldw	r10,84(sp)
10005324:	d8801015 	stw	r2,64(sp)
10005328:	1829883a 	mov	r20,r3
1000532c:	ad4003cc 	andi	r21,r21,15
10005330:	048000c4 	movi	r18,3
10005334:	a8001126 	beq	r21,zero,1000537c <_dtoa_r+0x430>
10005338:	04c40074 	movhi	r19,4097
1000533c:	9ccae104 	addi	r19,r19,11140
10005340:	5005883a 	mov	r2,r10
10005344:	b007883a 	mov	r3,r22
10005348:	a980004c 	andi	r6,r21,1
1000534c:	1009883a 	mov	r4,r2
10005350:	a82bd07a 	srai	r21,r21,1
10005354:	180b883a 	mov	r5,r3
10005358:	30000426 	beq	r6,zero,1000536c <_dtoa_r+0x420>
1000535c:	99800017 	ldw	r6,0(r19)
10005360:	99c00117 	ldw	r7,4(r19)
10005364:	94800044 	addi	r18,r18,1
10005368:	000ef200 	call	1000ef20 <__muldf3>
1000536c:	9cc00204 	addi	r19,r19,8
10005370:	a83ff51e 	bne	r21,zero,10005348 <__alt_data_end+0xf8005348>
10005374:	1015883a 	mov	r10,r2
10005378:	182d883a 	mov	r22,r3
1000537c:	d9001017 	ldw	r4,64(sp)
10005380:	a00b883a 	mov	r5,r20
10005384:	500d883a 	mov	r6,r10
10005388:	b00f883a 	mov	r7,r22
1000538c:	000f2040 	call	1000f204 <__divdf3>
10005390:	1027883a 	mov	r19,r2
10005394:	1829883a 	mov	r20,r3
10005398:	d8c00d17 	ldw	r3,52(sp)
1000539c:	18000626 	beq	r3,zero,100053b8 <_dtoa_r+0x46c>
100053a0:	9809883a 	mov	r4,r19
100053a4:	a00b883a 	mov	r5,r20
100053a8:	000d883a 	mov	r6,zero
100053ac:	01cffc34 	movhi	r7,16368
100053b0:	000f5380 	call	1000f538 <__ltdf2>
100053b4:	10040e16 	blt	r2,zero,100063f0 <_dtoa_r+0x14a4>
100053b8:	9009883a 	mov	r4,r18
100053bc:	000f5f00 	call	1000f5f0 <__floatsidf>
100053c0:	1009883a 	mov	r4,r2
100053c4:	180b883a 	mov	r5,r3
100053c8:	980d883a 	mov	r6,r19
100053cc:	a00f883a 	mov	r7,r20
100053d0:	000ef200 	call	1000ef20 <__muldf3>
100053d4:	1009883a 	mov	r4,r2
100053d8:	180b883a 	mov	r5,r3
100053dc:	000d883a 	mov	r6,zero
100053e0:	01d00734 	movhi	r7,16412
100053e4:	000ee6c0 	call	1000ee6c <__adddf3>
100053e8:	057f3034 	movhi	r21,64704
100053ec:	1d6b883a 	add	r21,r3,r21
100053f0:	d8c00917 	ldw	r3,36(sp)
100053f4:	1025883a 	mov	r18,r2
100053f8:	18031f26 	beq	r3,zero,10006078 <_dtoa_r+0x112c>
100053fc:	d8800617 	ldw	r2,24(sp)
10005400:	dac00917 	ldw	r11,36(sp)
10005404:	d8801315 	stw	r2,76(sp)
10005408:	d8c00c17 	ldw	r3,48(sp)
1000540c:	18039026 	beq	r3,zero,10006250 <_dtoa_r+0x1304>
10005410:	58bfffc4 	addi	r2,r11,-1
10005414:	100490fa 	slli	r2,r2,3
10005418:	00c40074 	movhi	r3,4097
1000541c:	18caeb04 	addi	r3,r3,11180
10005420:	0009883a 	mov	r4,zero
10005424:	1885883a 	add	r2,r3,r2
10005428:	11800017 	ldw	r6,0(r2)
1000542c:	11c00117 	ldw	r7,4(r2)
10005430:	014ff834 	movhi	r5,16352
10005434:	dac01615 	stw	r11,88(sp)
10005438:	000f2040 	call	1000f204 <__divdf3>
1000543c:	900d883a 	mov	r6,r18
10005440:	a80f883a 	mov	r7,r21
10005444:	1009883a 	mov	r4,r2
10005448:	180b883a 	mov	r5,r3
1000544c:	000eec00 	call	1000eec0 <__subdf3>
10005450:	a00b883a 	mov	r5,r20
10005454:	9809883a 	mov	r4,r19
10005458:	182b883a 	mov	r21,r3
1000545c:	d8801015 	stw	r2,64(sp)
10005460:	000f6c40 	call	1000f6c4 <__fixdfsi>
10005464:	1009883a 	mov	r4,r2
10005468:	d8801515 	stw	r2,84(sp)
1000546c:	000f5f00 	call	1000f5f0 <__floatsidf>
10005470:	9809883a 	mov	r4,r19
10005474:	a00b883a 	mov	r5,r20
10005478:	100d883a 	mov	r6,r2
1000547c:	180f883a 	mov	r7,r3
10005480:	000eec00 	call	1000eec0 <__subdf3>
10005484:	da401517 	ldw	r9,84(sp)
10005488:	d9001017 	ldw	r4,64(sp)
1000548c:	a80b883a 	mov	r5,r21
10005490:	4d000c04 	addi	r20,r9,48
10005494:	bd000005 	stb	r20,0(r23)
10005498:	100d883a 	mov	r6,r2
1000549c:	180f883a 	mov	r7,r3
100054a0:	bd800044 	addi	r22,r23,1
100054a4:	1025883a 	mov	r18,r2
100054a8:	1827883a 	mov	r19,r3
100054ac:	000f4700 	call	1000f470 <__gtdf2>
100054b0:	00842216 	blt	zero,r2,1000653c <_dtoa_r+0x15f0>
100054b4:	0009883a 	mov	r4,zero
100054b8:	014ffc34 	movhi	r5,16368
100054bc:	900d883a 	mov	r6,r18
100054c0:	980f883a 	mov	r7,r19
100054c4:	000eec00 	call	1000eec0 <__subdf3>
100054c8:	d9001017 	ldw	r4,64(sp)
100054cc:	a80b883a 	mov	r5,r21
100054d0:	100d883a 	mov	r6,r2
100054d4:	180f883a 	mov	r7,r3
100054d8:	000f4700 	call	1000f470 <__gtdf2>
100054dc:	dac01617 	ldw	r11,88(sp)
100054e0:	00841316 	blt	zero,r2,10006530 <_dtoa_r+0x15e4>
100054e4:	00800044 	movi	r2,1
100054e8:	12c0670e 	bge	r2,r11,10005688 <_dtoa_r+0x73c>
100054ec:	bad7883a 	add	r11,r23,r11
100054f0:	df001115 	stw	fp,68(sp)
100054f4:	dc401215 	stw	r17,72(sp)
100054f8:	5839883a 	mov	fp,r11
100054fc:	dc401017 	ldw	r17,64(sp)
10005500:	00000806 	br	10005524 <_dtoa_r+0x5d8>
10005504:	000eec00 	call	1000eec0 <__subdf3>
10005508:	1009883a 	mov	r4,r2
1000550c:	180b883a 	mov	r5,r3
10005510:	880d883a 	mov	r6,r17
10005514:	a80f883a 	mov	r7,r21
10005518:	000f5380 	call	1000f538 <__ltdf2>
1000551c:	1003ee16 	blt	r2,zero,100064d8 <_dtoa_r+0x158c>
10005520:	b703f126 	beq	r22,fp,100064e8 <_dtoa_r+0x159c>
10005524:	8809883a 	mov	r4,r17
10005528:	a80b883a 	mov	r5,r21
1000552c:	000d883a 	mov	r6,zero
10005530:	01d00934 	movhi	r7,16420
10005534:	000ef200 	call	1000ef20 <__muldf3>
10005538:	000d883a 	mov	r6,zero
1000553c:	01d00934 	movhi	r7,16420
10005540:	9009883a 	mov	r4,r18
10005544:	980b883a 	mov	r5,r19
10005548:	1023883a 	mov	r17,r2
1000554c:	182b883a 	mov	r21,r3
10005550:	000ef200 	call	1000ef20 <__muldf3>
10005554:	180b883a 	mov	r5,r3
10005558:	1009883a 	mov	r4,r2
1000555c:	1825883a 	mov	r18,r3
10005560:	1027883a 	mov	r19,r2
10005564:	000f6c40 	call	1000f6c4 <__fixdfsi>
10005568:	1009883a 	mov	r4,r2
1000556c:	1029883a 	mov	r20,r2
10005570:	000f5f00 	call	1000f5f0 <__floatsidf>
10005574:	9809883a 	mov	r4,r19
10005578:	900b883a 	mov	r5,r18
1000557c:	100d883a 	mov	r6,r2
10005580:	180f883a 	mov	r7,r3
10005584:	000eec00 	call	1000eec0 <__subdf3>
10005588:	a5000c04 	addi	r20,r20,48
1000558c:	b5000005 	stb	r20,0(r22)
10005590:	1009883a 	mov	r4,r2
10005594:	180b883a 	mov	r5,r3
10005598:	880d883a 	mov	r6,r17
1000559c:	a80f883a 	mov	r7,r21
100055a0:	1025883a 	mov	r18,r2
100055a4:	1827883a 	mov	r19,r3
100055a8:	000f5380 	call	1000f538 <__ltdf2>
100055ac:	b5800044 	addi	r22,r22,1
100055b0:	0009883a 	mov	r4,zero
100055b4:	014ffc34 	movhi	r5,16368
100055b8:	900d883a 	mov	r6,r18
100055bc:	980f883a 	mov	r7,r19
100055c0:	103fd00e 	bge	r2,zero,10005504 <__alt_data_end+0xf8005504>
100055c4:	d9001317 	ldw	r4,76(sp)
100055c8:	df001117 	ldw	fp,68(sp)
100055cc:	d9000615 	stw	r4,24(sp)
100055d0:	8009883a 	mov	r4,r16
100055d4:	e00b883a 	mov	r5,fp
100055d8:	00087a80 	call	100087a8 <_Bfree>
100055dc:	d9c00617 	ldw	r7,24(sp)
100055e0:	d8c02217 	ldw	r3,136(sp)
100055e4:	d9002417 	ldw	r4,144(sp)
100055e8:	b0000005 	stb	zero,0(r22)
100055ec:	38800044 	addi	r2,r7,1
100055f0:	18800015 	stw	r2,0(r3)
100055f4:	203e8426 	beq	r4,zero,10005008 <__alt_data_end+0xf8005008>
100055f8:	25800015 	stw	r22,0(r4)
100055fc:	003e8206 	br	10005008 <__alt_data_end+0xf8005008>
10005600:	00800434 	movhi	r2,16
10005604:	10bfffc4 	addi	r2,r2,-1
10005608:	90a4703a 	and	r18,r18,r2
1000560c:	903e901e 	bne	r18,zero,10005050 <__alt_data_end+0xf8005050>
10005610:	05c40074 	movhi	r23,4097
10005614:	bdcac204 	addi	r23,r23,11016
10005618:	003e8f06 	br	10005058 <__alt_data_end+0xf8005058>
1000561c:	b8800204 	addi	r2,r23,8
10005620:	003e9206 	br	1000506c <__alt_data_end+0xf800506c>
10005624:	01400434 	movhi	r5,16
10005628:	297fffc4 	addi	r5,r5,-1
1000562c:	894a703a 	and	r5,r17,r5
10005630:	d9000317 	ldw	r4,12(sp)
10005634:	294ffc34 	orhi	r5,r5,16368
10005638:	a53f0044 	addi	r20,r20,-1023
1000563c:	dd400217 	ldw	r21,8(sp)
10005640:	d8000f15 	stw	zero,60(sp)
10005644:	003eb106 	br	1000510c <__alt_data_end+0xf800510c>
10005648:	05c40074 	movhi	r23,4097
1000564c:	bdca0e04 	addi	r23,r23,10296
10005650:	003e6d06 	br	10005008 <__alt_data_end+0xf8005008>
10005654:	d8000415 	stw	zero,16(sp)
10005658:	80001115 	stw	zero,68(r16)
1000565c:	8009883a 	mov	r4,r16
10005660:	000b883a 	mov	r5,zero
10005664:	00087000 	call	10008700 <_Balloc>
10005668:	01ffffc4 	movi	r7,-1
1000566c:	102f883a 	mov	r23,r2
10005670:	80801015 	stw	r2,64(r16)
10005674:	00800044 	movi	r2,1
10005678:	d9c00915 	stw	r7,36(sp)
1000567c:	d8002115 	stw	zero,132(sp)
10005680:	d9c00e15 	stw	r7,56(sp)
10005684:	d8800c15 	stw	r2,48(sp)
10005688:	d8800117 	ldw	r2,4(sp)
1000568c:	10008b16 	blt	r2,zero,100058bc <_dtoa_r+0x970>
10005690:	d9000617 	ldw	r4,24(sp)
10005694:	00c00384 	movi	r3,14
10005698:	19008816 	blt	r3,r4,100058bc <_dtoa_r+0x970>
1000569c:	200490fa 	slli	r2,r4,3
100056a0:	d9c02117 	ldw	r7,132(sp)
100056a4:	00c40074 	movhi	r3,4097
100056a8:	18caeb04 	addi	r3,r3,11180
100056ac:	1885883a 	add	r2,r3,r2
100056b0:	14800017 	ldw	r18,0(r2)
100056b4:	14c00117 	ldw	r19,4(r2)
100056b8:	3801c916 	blt	r7,zero,10005de0 <_dtoa_r+0xe94>
100056bc:	d9000317 	ldw	r4,12(sp)
100056c0:	900d883a 	mov	r6,r18
100056c4:	980f883a 	mov	r7,r19
100056c8:	880b883a 	mov	r5,r17
100056cc:	000f2040 	call	1000f204 <__divdf3>
100056d0:	180b883a 	mov	r5,r3
100056d4:	1009883a 	mov	r4,r2
100056d8:	000f6c40 	call	1000f6c4 <__fixdfsi>
100056dc:	1009883a 	mov	r4,r2
100056e0:	102b883a 	mov	r21,r2
100056e4:	000f5f00 	call	1000f5f0 <__floatsidf>
100056e8:	1009883a 	mov	r4,r2
100056ec:	180b883a 	mov	r5,r3
100056f0:	900d883a 	mov	r6,r18
100056f4:	980f883a 	mov	r7,r19
100056f8:	000ef200 	call	1000ef20 <__muldf3>
100056fc:	d9000317 	ldw	r4,12(sp)
10005700:	880b883a 	mov	r5,r17
10005704:	100d883a 	mov	r6,r2
10005708:	180f883a 	mov	r7,r3
1000570c:	000eec00 	call	1000eec0 <__subdf3>
10005710:	d9c00917 	ldw	r7,36(sp)
10005714:	1009883a 	mov	r4,r2
10005718:	a8800c04 	addi	r2,r21,48
1000571c:	b8800005 	stb	r2,0(r23)
10005720:	01800044 	movi	r6,1
10005724:	180b883a 	mov	r5,r3
10005728:	2005883a 	mov	r2,r4
1000572c:	bd800044 	addi	r22,r23,1
10005730:	39803726 	beq	r7,r6,10005810 <_dtoa_r+0x8c4>
10005734:	000d883a 	mov	r6,zero
10005738:	01d00934 	movhi	r7,16420
1000573c:	000ef200 	call	1000ef20 <__muldf3>
10005740:	1009883a 	mov	r4,r2
10005744:	180b883a 	mov	r5,r3
10005748:	000d883a 	mov	r6,zero
1000574c:	000f883a 	mov	r7,zero
10005750:	1029883a 	mov	r20,r2
10005754:	1823883a 	mov	r17,r3
10005758:	000f3b80 	call	1000f3b8 <__eqdf2>
1000575c:	103f9c26 	beq	r2,zero,100055d0 <__alt_data_end+0xf80055d0>
10005760:	dd400917 	ldw	r21,36(sp)
10005764:	dc000415 	stw	r16,16(sp)
10005768:	00000906 	br	10005790 <_dtoa_r+0x844>
1000576c:	000ef200 	call	1000ef20 <__muldf3>
10005770:	1009883a 	mov	r4,r2
10005774:	180b883a 	mov	r5,r3
10005778:	000d883a 	mov	r6,zero
1000577c:	000f883a 	mov	r7,zero
10005780:	1029883a 	mov	r20,r2
10005784:	1823883a 	mov	r17,r3
10005788:	000f3b80 	call	1000f3b8 <__eqdf2>
1000578c:	10022926 	beq	r2,zero,10006034 <_dtoa_r+0x10e8>
10005790:	900d883a 	mov	r6,r18
10005794:	980f883a 	mov	r7,r19
10005798:	a009883a 	mov	r4,r20
1000579c:	880b883a 	mov	r5,r17
100057a0:	000f2040 	call	1000f204 <__divdf3>
100057a4:	180b883a 	mov	r5,r3
100057a8:	1009883a 	mov	r4,r2
100057ac:	000f6c40 	call	1000f6c4 <__fixdfsi>
100057b0:	1009883a 	mov	r4,r2
100057b4:	1021883a 	mov	r16,r2
100057b8:	000f5f00 	call	1000f5f0 <__floatsidf>
100057bc:	1009883a 	mov	r4,r2
100057c0:	180b883a 	mov	r5,r3
100057c4:	900d883a 	mov	r6,r18
100057c8:	980f883a 	mov	r7,r19
100057cc:	000ef200 	call	1000ef20 <__muldf3>
100057d0:	a009883a 	mov	r4,r20
100057d4:	880b883a 	mov	r5,r17
100057d8:	100d883a 	mov	r6,r2
100057dc:	180f883a 	mov	r7,r3
100057e0:	000eec00 	call	1000eec0 <__subdf3>
100057e4:	82400c04 	addi	r9,r16,48
100057e8:	b2400005 	stb	r9,0(r22)
100057ec:	b5800044 	addi	r22,r22,1
100057f0:	b5d3c83a 	sub	r9,r22,r23
100057f4:	000d883a 	mov	r6,zero
100057f8:	01d00934 	movhi	r7,16420
100057fc:	1009883a 	mov	r4,r2
10005800:	180b883a 	mov	r5,r3
10005804:	aa7fd91e 	bne	r21,r9,1000576c <__alt_data_end+0xf800576c>
10005808:	802b883a 	mov	r21,r16
1000580c:	dc000417 	ldw	r16,16(sp)
10005810:	1009883a 	mov	r4,r2
10005814:	180b883a 	mov	r5,r3
10005818:	100d883a 	mov	r6,r2
1000581c:	180f883a 	mov	r7,r3
10005820:	000ee6c0 	call	1000ee6c <__adddf3>
10005824:	9009883a 	mov	r4,r18
10005828:	980b883a 	mov	r5,r19
1000582c:	100d883a 	mov	r6,r2
10005830:	180f883a 	mov	r7,r3
10005834:	1023883a 	mov	r17,r2
10005838:	1829883a 	mov	r20,r3
1000583c:	000f5380 	call	1000f538 <__ltdf2>
10005840:	10000816 	blt	r2,zero,10005864 <_dtoa_r+0x918>
10005844:	9009883a 	mov	r4,r18
10005848:	980b883a 	mov	r5,r19
1000584c:	880d883a 	mov	r6,r17
10005850:	a00f883a 	mov	r7,r20
10005854:	000f4140 	call	1000f414 <__nedf2>
10005858:	103f5d1e 	bne	r2,zero,100055d0 <__alt_data_end+0xf80055d0>
1000585c:	ad40004c 	andi	r21,r21,1
10005860:	a83f5b26 	beq	r21,zero,100055d0 <__alt_data_end+0xf80055d0>
10005864:	b53fffc3 	ldbu	r20,-1(r22)
10005868:	b0ffff84 	addi	r3,r22,-2
1000586c:	01400e44 	movi	r5,57
10005870:	00000306 	br	10005880 <_dtoa_r+0x934>
10005874:	1d000003 	ldbu	r20,0(r3)
10005878:	102d883a 	mov	r22,r2
1000587c:	18ffffc4 	addi	r3,r3,-1
10005880:	a1003fcc 	andi	r4,r20,255
10005884:	2100201c 	xori	r4,r4,128
10005888:	213fe004 	addi	r4,r4,-128
1000588c:	b0bfffc4 	addi	r2,r22,-1
10005890:	2142ca1e 	bne	r4,r5,100063bc <_dtoa_r+0x1470>
10005894:	b8bff71e 	bne	r23,r2,10005874 <__alt_data_end+0xf8005874>
10005898:	d8800617 	ldw	r2,24(sp)
1000589c:	05000c44 	movi	r20,49
100058a0:	10800044 	addi	r2,r2,1
100058a4:	d8800615 	stw	r2,24(sp)
100058a8:	00800c04 	movi	r2,48
100058ac:	b8800005 	stb	r2,0(r23)
100058b0:	b805883a 	mov	r2,r23
100058b4:	15000005 	stb	r20,0(r2)
100058b8:	003f4506 	br	100055d0 <__alt_data_end+0xf80055d0>
100058bc:	d9c00c17 	ldw	r7,48(sp)
100058c0:	3800c926 	beq	r7,zero,10005be8 <_dtoa_r+0xc9c>
100058c4:	d9c00417 	ldw	r7,16(sp)
100058c8:	00c00044 	movi	r3,1
100058cc:	19c16c0e 	bge	r3,r7,10005e80 <_dtoa_r+0xf34>
100058d0:	d9000917 	ldw	r4,36(sp)
100058d4:	d9c00a17 	ldw	r7,40(sp)
100058d8:	24ffffc4 	addi	r19,r4,-1
100058dc:	3cc20716 	blt	r7,r19,100060fc <_dtoa_r+0x11b0>
100058e0:	3ce7c83a 	sub	r19,r7,r19
100058e4:	d9c00917 	ldw	r7,36(sp)
100058e8:	3802ae16 	blt	r7,zero,100063a4 <_dtoa_r+0x1458>
100058ec:	dc800817 	ldw	r18,32(sp)
100058f0:	d8800917 	ldw	r2,36(sp)
100058f4:	d8c00817 	ldw	r3,32(sp)
100058f8:	d9c00717 	ldw	r7,28(sp)
100058fc:	8009883a 	mov	r4,r16
10005900:	1887883a 	add	r3,r3,r2
10005904:	388f883a 	add	r7,r7,r2
10005908:	01400044 	movi	r5,1
1000590c:	d8c00815 	stw	r3,32(sp)
10005910:	d9c00715 	stw	r7,28(sp)
10005914:	0008b300 	call	10008b30 <__i2b>
10005918:	102b883a 	mov	r21,r2
1000591c:	90000a26 	beq	r18,zero,10005948 <_dtoa_r+0x9fc>
10005920:	d8800717 	ldw	r2,28(sp)
10005924:	0080080e 	bge	zero,r2,10005948 <_dtoa_r+0x9fc>
10005928:	90812b16 	blt	r18,r2,10005dd8 <_dtoa_r+0xe8c>
1000592c:	d8c00817 	ldw	r3,32(sp)
10005930:	d9000717 	ldw	r4,28(sp)
10005934:	90a5c83a 	sub	r18,r18,r2
10005938:	1887c83a 	sub	r3,r3,r2
1000593c:	2089c83a 	sub	r4,r4,r2
10005940:	d8c00815 	stw	r3,32(sp)
10005944:	d9000715 	stw	r4,28(sp)
10005948:	d9c00a17 	ldw	r7,40(sp)
1000594c:	01c0140e 	bge	zero,r7,100059a0 <_dtoa_r+0xa54>
10005950:	d8800c17 	ldw	r2,48(sp)
10005954:	1001de26 	beq	r2,zero,100060d0 <_dtoa_r+0x1184>
10005958:	04c00e0e 	bge	zero,r19,10005994 <_dtoa_r+0xa48>
1000595c:	a80b883a 	mov	r5,r21
10005960:	8009883a 	mov	r4,r16
10005964:	980d883a 	mov	r6,r19
10005968:	0008dc40 	call	10008dc4 <__pow5mult>
1000596c:	e00d883a 	mov	r6,fp
10005970:	8009883a 	mov	r4,r16
10005974:	100b883a 	mov	r5,r2
10005978:	102b883a 	mov	r21,r2
1000597c:	0008b6c0 	call	10008b6c <__multiply>
10005980:	1029883a 	mov	r20,r2
10005984:	e00b883a 	mov	r5,fp
10005988:	8009883a 	mov	r4,r16
1000598c:	00087a80 	call	100087a8 <_Bfree>
10005990:	a039883a 	mov	fp,r20
10005994:	d8c00a17 	ldw	r3,40(sp)
10005998:	1ccdc83a 	sub	r6,r3,r19
1000599c:	3001291e 	bne	r6,zero,10005e44 <_dtoa_r+0xef8>
100059a0:	8009883a 	mov	r4,r16
100059a4:	01400044 	movi	r5,1
100059a8:	0008b300 	call	10008b30 <__i2b>
100059ac:	d9000b17 	ldw	r4,44(sp)
100059b0:	1029883a 	mov	r20,r2
100059b4:	0100050e 	bge	zero,r4,100059cc <_dtoa_r+0xa80>
100059b8:	d9800b17 	ldw	r6,44(sp)
100059bc:	8009883a 	mov	r4,r16
100059c0:	100b883a 	mov	r5,r2
100059c4:	0008dc40 	call	10008dc4 <__pow5mult>
100059c8:	1029883a 	mov	r20,r2
100059cc:	d9c00417 	ldw	r7,16(sp)
100059d0:	00800044 	movi	r2,1
100059d4:	11c0f00e 	bge	r2,r7,10005d98 <_dtoa_r+0xe4c>
100059d8:	0023883a 	mov	r17,zero
100059dc:	d8800b17 	ldw	r2,44(sp)
100059e0:	1001741e 	bne	r2,zero,10005fb4 <_dtoa_r+0x1068>
100059e4:	00800044 	movi	r2,1
100059e8:	d8c00717 	ldw	r3,28(sp)
100059ec:	10c5883a 	add	r2,r2,r3
100059f0:	108007cc 	andi	r2,r2,31
100059f4:	10008026 	beq	r2,zero,10005bf8 <_dtoa_r+0xcac>
100059f8:	01000804 	movi	r4,32
100059fc:	2089c83a 	sub	r4,r4,r2
10005a00:	00c00104 	movi	r3,4
10005a04:	1902d00e 	bge	r3,r4,10006548 <_dtoa_r+0x15fc>
10005a08:	d9000817 	ldw	r4,32(sp)
10005a0c:	d9c00717 	ldw	r7,28(sp)
10005a10:	00c00704 	movi	r3,28
10005a14:	1885c83a 	sub	r2,r3,r2
10005a18:	2089883a 	add	r4,r4,r2
10005a1c:	388f883a 	add	r7,r7,r2
10005a20:	d9000815 	stw	r4,32(sp)
10005a24:	90a5883a 	add	r18,r18,r2
10005a28:	d9c00715 	stw	r7,28(sp)
10005a2c:	d9c00817 	ldw	r7,32(sp)
10005a30:	01c0050e 	bge	zero,r7,10005a48 <_dtoa_r+0xafc>
10005a34:	e00b883a 	mov	r5,fp
10005a38:	8009883a 	mov	r4,r16
10005a3c:	380d883a 	mov	r6,r7
10005a40:	0008ef00 	call	10008ef0 <__lshift>
10005a44:	1039883a 	mov	fp,r2
10005a48:	d8800717 	ldw	r2,28(sp)
10005a4c:	0080050e 	bge	zero,r2,10005a64 <_dtoa_r+0xb18>
10005a50:	a00b883a 	mov	r5,r20
10005a54:	8009883a 	mov	r4,r16
10005a58:	100d883a 	mov	r6,r2
10005a5c:	0008ef00 	call	10008ef0 <__lshift>
10005a60:	1029883a 	mov	r20,r2
10005a64:	d8c00d17 	ldw	r3,52(sp)
10005a68:	1801401e 	bne	r3,zero,10005f6c <_dtoa_r+0x1020>
10005a6c:	d8800917 	ldw	r2,36(sp)
10005a70:	00815a0e 	bge	zero,r2,10005fdc <_dtoa_r+0x1090>
10005a74:	d8c00c17 	ldw	r3,48(sp)
10005a78:	18006f1e 	bne	r3,zero,10005c38 <_dtoa_r+0xcec>
10005a7c:	b823883a 	mov	r17,r23
10005a80:	dc800917 	ldw	r18,36(sp)
10005a84:	00000206 	br	10005a90 <_dtoa_r+0xb44>
10005a88:	00087d00 	call	100087d0 <__multadd>
10005a8c:	1039883a 	mov	fp,r2
10005a90:	e009883a 	mov	r4,fp
10005a94:	a00b883a 	mov	r5,r20
10005a98:	0004d100 	call	10004d10 <quorem>
10005a9c:	10800c04 	addi	r2,r2,48
10005aa0:	88800005 	stb	r2,0(r17)
10005aa4:	8c400044 	addi	r17,r17,1
10005aa8:	8dc7c83a 	sub	r3,r17,r23
10005aac:	8009883a 	mov	r4,r16
10005ab0:	e00b883a 	mov	r5,fp
10005ab4:	01800284 	movi	r6,10
10005ab8:	000f883a 	mov	r7,zero
10005abc:	1cbff216 	blt	r3,r18,10005a88 <__alt_data_end+0xf8005a88>
10005ac0:	dd800917 	ldw	r22,36(sp)
10005ac4:	1007883a 	mov	r3,r2
10005ac8:	05823a0e 	bge	zero,r22,100063b4 <_dtoa_r+0x1468>
10005acc:	bdad883a 	add	r22,r23,r22
10005ad0:	0023883a 	mov	r17,zero
10005ad4:	e00b883a 	mov	r5,fp
10005ad8:	01800044 	movi	r6,1
10005adc:	8009883a 	mov	r4,r16
10005ae0:	d8c01515 	stw	r3,84(sp)
10005ae4:	0008ef00 	call	10008ef0 <__lshift>
10005ae8:	1009883a 	mov	r4,r2
10005aec:	a00b883a 	mov	r5,r20
10005af0:	1039883a 	mov	fp,r2
10005af4:	000904c0 	call	1000904c <__mcmp>
10005af8:	d8c01517 	ldw	r3,84(sp)
10005afc:	0080d60e 	bge	zero,r2,10005e58 <_dtoa_r+0xf0c>
10005b00:	b13fffc3 	ldbu	r4,-1(r22)
10005b04:	b0ffff84 	addi	r3,r22,-2
10005b08:	01800e44 	movi	r6,57
10005b0c:	00000306 	br	10005b1c <_dtoa_r+0xbd0>
10005b10:	19000003 	ldbu	r4,0(r3)
10005b14:	102d883a 	mov	r22,r2
10005b18:	18ffffc4 	addi	r3,r3,-1
10005b1c:	21403fcc 	andi	r5,r4,255
10005b20:	2940201c 	xori	r5,r5,128
10005b24:	297fe004 	addi	r5,r5,-128
10005b28:	b0bfffc4 	addi	r2,r22,-1
10005b2c:	2981a71e 	bne	r5,r6,100061cc <_dtoa_r+0x1280>
10005b30:	b8bff71e 	bne	r23,r2,10005b10 <__alt_data_end+0xf8005b10>
10005b34:	d8800617 	ldw	r2,24(sp)
10005b38:	10800044 	addi	r2,r2,1
10005b3c:	d8800615 	stw	r2,24(sp)
10005b40:	00800c44 	movi	r2,49
10005b44:	b8800005 	stb	r2,0(r23)
10005b48:	8009883a 	mov	r4,r16
10005b4c:	a00b883a 	mov	r5,r20
10005b50:	00087a80 	call	100087a8 <_Bfree>
10005b54:	a83e9e26 	beq	r21,zero,100055d0 <__alt_data_end+0xf80055d0>
10005b58:	88000426 	beq	r17,zero,10005b6c <_dtoa_r+0xc20>
10005b5c:	8d400326 	beq	r17,r21,10005b6c <_dtoa_r+0xc20>
10005b60:	8009883a 	mov	r4,r16
10005b64:	880b883a 	mov	r5,r17
10005b68:	00087a80 	call	100087a8 <_Bfree>
10005b6c:	8009883a 	mov	r4,r16
10005b70:	a80b883a 	mov	r5,r21
10005b74:	00087a80 	call	100087a8 <_Bfree>
10005b78:	003e9506 	br	100055d0 <__alt_data_end+0xf80055d0>
10005b7c:	00c00044 	movi	r3,1
10005b80:	d8c00d15 	stw	r3,52(sp)
10005b84:	003d9f06 	br	10005204 <__alt_data_end+0xf8005204>
10005b88:	d9000817 	ldw	r4,32(sp)
10005b8c:	d8800617 	ldw	r2,24(sp)
10005b90:	d8000b15 	stw	zero,44(sp)
10005b94:	2089c83a 	sub	r4,r4,r2
10005b98:	0087c83a 	sub	r3,zero,r2
10005b9c:	d9000815 	stw	r4,32(sp)
10005ba0:	d8c00a15 	stw	r3,40(sp)
10005ba4:	003da306 	br	10005234 <__alt_data_end+0xf8005234>
10005ba8:	0529c83a 	sub	r20,zero,r20
10005bac:	dd000815 	stw	r20,32(sp)
10005bb0:	d8000715 	stw	zero,28(sp)
10005bb4:	003d9806 	br	10005218 <__alt_data_end+0xf8005218>
10005bb8:	d9000617 	ldw	r4,24(sp)
10005bbc:	000f5f00 	call	1000f5f0 <__floatsidf>
10005bc0:	1009883a 	mov	r4,r2
10005bc4:	180b883a 	mov	r5,r3
10005bc8:	980d883a 	mov	r6,r19
10005bcc:	900f883a 	mov	r7,r18
10005bd0:	000f3b80 	call	1000f3b8 <__eqdf2>
10005bd4:	103d7a26 	beq	r2,zero,100051c0 <__alt_data_end+0xf80051c0>
10005bd8:	d8800617 	ldw	r2,24(sp)
10005bdc:	10bfffc4 	addi	r2,r2,-1
10005be0:	d8800615 	stw	r2,24(sp)
10005be4:	003d7606 	br	100051c0 <__alt_data_end+0xf80051c0>
10005be8:	dcc00a17 	ldw	r19,40(sp)
10005bec:	dc800817 	ldw	r18,32(sp)
10005bf0:	002b883a 	mov	r21,zero
10005bf4:	003f4906 	br	1000591c <__alt_data_end+0xf800591c>
10005bf8:	00800704 	movi	r2,28
10005bfc:	d8c00817 	ldw	r3,32(sp)
10005c00:	d9000717 	ldw	r4,28(sp)
10005c04:	90a5883a 	add	r18,r18,r2
10005c08:	1887883a 	add	r3,r3,r2
10005c0c:	2089883a 	add	r4,r4,r2
10005c10:	d8c00815 	stw	r3,32(sp)
10005c14:	d9000715 	stw	r4,28(sp)
10005c18:	003f8406 	br	10005a2c <__alt_data_end+0xf8005a2c>
10005c1c:	d9c00317 	ldw	r7,12(sp)
10005c20:	013efb84 	movi	r4,-1042
10005c24:	2509c83a 	sub	r4,r4,r20
10005c28:	3908983a 	sll	r4,r7,r4
10005c2c:	003d3006 	br	100050f0 <__alt_data_end+0xf80050f0>
10005c30:	d8000d15 	stw	zero,52(sp)
10005c34:	003d7306 	br	10005204 <__alt_data_end+0xf8005204>
10005c38:	0480050e 	bge	zero,r18,10005c50 <_dtoa_r+0xd04>
10005c3c:	a80b883a 	mov	r5,r21
10005c40:	8009883a 	mov	r4,r16
10005c44:	900d883a 	mov	r6,r18
10005c48:	0008ef00 	call	10008ef0 <__lshift>
10005c4c:	102b883a 	mov	r21,r2
10005c50:	8801611e 	bne	r17,zero,100061d8 <_dtoa_r+0x128c>
10005c54:	a827883a 	mov	r19,r21
10005c58:	d8c00317 	ldw	r3,12(sp)
10005c5c:	d9000917 	ldw	r4,36(sp)
10005c60:	b8bfffc4 	addi	r2,r23,-1
10005c64:	18c0004c 	andi	r3,r3,1
10005c68:	1105883a 	add	r2,r2,r4
10005c6c:	b825883a 	mov	r18,r23
10005c70:	d8800515 	stw	r2,20(sp)
10005c74:	a823883a 	mov	r17,r21
10005c78:	d8c00315 	stw	r3,12(sp)
10005c7c:	ddc00715 	stw	r23,28(sp)
10005c80:	e009883a 	mov	r4,fp
10005c84:	a00b883a 	mov	r5,r20
10005c88:	0004d100 	call	10004d10 <quorem>
10005c8c:	e009883a 	mov	r4,fp
10005c90:	880b883a 	mov	r5,r17
10005c94:	102d883a 	mov	r22,r2
10005c98:	000904c0 	call	1000904c <__mcmp>
10005c9c:	980d883a 	mov	r6,r19
10005ca0:	8009883a 	mov	r4,r16
10005ca4:	a00b883a 	mov	r5,r20
10005ca8:	102b883a 	mov	r21,r2
10005cac:	00090a40 	call	100090a4 <__mdiff>
10005cb0:	100d883a 	mov	r6,r2
10005cb4:	10800317 	ldw	r2,12(r2)
10005cb8:	b5c00c04 	addi	r23,r22,48
10005cbc:	10008c26 	beq	r2,zero,10005ef0 <_dtoa_r+0xfa4>
10005cc0:	8009883a 	mov	r4,r16
10005cc4:	300b883a 	mov	r5,r6
10005cc8:	00087a80 	call	100087a8 <_Bfree>
10005ccc:	00800044 	movi	r2,1
10005cd0:	a8007116 	blt	r21,zero,10005e98 <_dtoa_r+0xf4c>
10005cd4:	a800041e 	bne	r21,zero,10005ce8 <_dtoa_r+0xd9c>
10005cd8:	d9c00417 	ldw	r7,16(sp)
10005cdc:	3800021e 	bne	r7,zero,10005ce8 <_dtoa_r+0xd9c>
10005ce0:	d8c00317 	ldw	r3,12(sp)
10005ce4:	18006c26 	beq	r3,zero,10005e98 <_dtoa_r+0xf4c>
10005ce8:	00814c16 	blt	zero,r2,1000621c <_dtoa_r+0x12d0>
10005cec:	d8c00517 	ldw	r3,20(sp)
10005cf0:	95400044 	addi	r21,r18,1
10005cf4:	95c00005 	stb	r23,0(r18)
10005cf8:	a82d883a 	mov	r22,r21
10005cfc:	90c14d26 	beq	r18,r3,10006234 <_dtoa_r+0x12e8>
10005d00:	e00b883a 	mov	r5,fp
10005d04:	8009883a 	mov	r4,r16
10005d08:	01800284 	movi	r6,10
10005d0c:	000f883a 	mov	r7,zero
10005d10:	00087d00 	call	100087d0 <__multadd>
10005d14:	1039883a 	mov	fp,r2
10005d18:	8cc08b26 	beq	r17,r19,10005f48 <_dtoa_r+0xffc>
10005d1c:	880b883a 	mov	r5,r17
10005d20:	01800284 	movi	r6,10
10005d24:	000f883a 	mov	r7,zero
10005d28:	8009883a 	mov	r4,r16
10005d2c:	00087d00 	call	100087d0 <__multadd>
10005d30:	980b883a 	mov	r5,r19
10005d34:	8009883a 	mov	r4,r16
10005d38:	01800284 	movi	r6,10
10005d3c:	000f883a 	mov	r7,zero
10005d40:	1023883a 	mov	r17,r2
10005d44:	00087d00 	call	100087d0 <__multadd>
10005d48:	1027883a 	mov	r19,r2
10005d4c:	a825883a 	mov	r18,r21
10005d50:	003fcb06 	br	10005c80 <__alt_data_end+0xf8005c80>
10005d54:	d9c00417 	ldw	r7,16(sp)
10005d58:	00800104 	movi	r2,4
10005d5c:	3880e426 	beq	r7,r2,100060f0 <_dtoa_r+0x11a4>
10005d60:	00800144 	movi	r2,5
10005d64:	38be3c1e 	bne	r7,r2,10005658 <__alt_data_end+0xf8005658>
10005d68:	00c00044 	movi	r3,1
10005d6c:	d8c00c15 	stw	r3,48(sp)
10005d70:	d9c02117 	ldw	r7,132(sp)
10005d74:	d8800617 	ldw	r2,24(sp)
10005d78:	388f883a 	add	r7,r7,r2
10005d7c:	3c800044 	addi	r18,r7,1
10005d80:	d9c00e15 	stw	r7,56(sp)
10005d84:	dc800915 	stw	r18,36(sp)
10005d88:	04bd3e16 	blt	zero,r18,10005284 <__alt_data_end+0xf8005284>
10005d8c:	80001115 	stw	zero,68(r16)
10005d90:	000b883a 	mov	r5,zero
10005d94:	003d4606 	br	100052b0 <__alt_data_end+0xf80052b0>
10005d98:	d8c00317 	ldw	r3,12(sp)
10005d9c:	183f0e1e 	bne	r3,zero,100059d8 <__alt_data_end+0xf80059d8>
10005da0:	00c00434 	movhi	r3,16
10005da4:	18ffffc4 	addi	r3,r3,-1
10005da8:	88c6703a 	and	r3,r17,r3
10005dac:	183f0a1e 	bne	r3,zero,100059d8 <__alt_data_end+0xf80059d8>
10005db0:	8c5ffc2c 	andhi	r17,r17,32752
10005db4:	883f0826 	beq	r17,zero,100059d8 <__alt_data_end+0xf80059d8>
10005db8:	d9000817 	ldw	r4,32(sp)
10005dbc:	d9c00717 	ldw	r7,28(sp)
10005dc0:	1023883a 	mov	r17,r2
10005dc4:	2089883a 	add	r4,r4,r2
10005dc8:	388f883a 	add	r7,r7,r2
10005dcc:	d9000815 	stw	r4,32(sp)
10005dd0:	d9c00715 	stw	r7,28(sp)
10005dd4:	003f0106 	br	100059dc <__alt_data_end+0xf80059dc>
10005dd8:	9005883a 	mov	r2,r18
10005ddc:	003ed306 	br	1000592c <__alt_data_end+0xf800592c>
10005de0:	d8800917 	ldw	r2,36(sp)
10005de4:	00be3516 	blt	zero,r2,100056bc <__alt_data_end+0xf80056bc>
10005de8:	1000b61e 	bne	r2,zero,100060c4 <_dtoa_r+0x1178>
10005dec:	9009883a 	mov	r4,r18
10005df0:	980b883a 	mov	r5,r19
10005df4:	000d883a 	mov	r6,zero
10005df8:	01d00534 	movhi	r7,16404
10005dfc:	000ef200 	call	1000ef20 <__muldf3>
10005e00:	d9800317 	ldw	r6,12(sp)
10005e04:	1009883a 	mov	r4,r2
10005e08:	180b883a 	mov	r5,r3
10005e0c:	880f883a 	mov	r7,r17
10005e10:	000f4d40 	call	1000f4d4 <__gedf2>
10005e14:	0029883a 	mov	r20,zero
10005e18:	002b883a 	mov	r21,zero
10005e1c:	10007e16 	blt	r2,zero,10006018 <_dtoa_r+0x10cc>
10005e20:	d8802117 	ldw	r2,132(sp)
10005e24:	b82d883a 	mov	r22,r23
10005e28:	0084303a 	nor	r2,zero,r2
10005e2c:	d8800615 	stw	r2,24(sp)
10005e30:	8009883a 	mov	r4,r16
10005e34:	a00b883a 	mov	r5,r20
10005e38:	00087a80 	call	100087a8 <_Bfree>
10005e3c:	a83f4b1e 	bne	r21,zero,10005b6c <__alt_data_end+0xf8005b6c>
10005e40:	003de306 	br	100055d0 <__alt_data_end+0xf80055d0>
10005e44:	e00b883a 	mov	r5,fp
10005e48:	8009883a 	mov	r4,r16
10005e4c:	0008dc40 	call	10008dc4 <__pow5mult>
10005e50:	1039883a 	mov	fp,r2
10005e54:	003ed206 	br	100059a0 <__alt_data_end+0xf80059a0>
10005e58:	1000021e 	bne	r2,zero,10005e64 <_dtoa_r+0xf18>
10005e5c:	18c0004c 	andi	r3,r3,1
10005e60:	183f271e 	bne	r3,zero,10005b00 <__alt_data_end+0xf8005b00>
10005e64:	01000c04 	movi	r4,48
10005e68:	00000106 	br	10005e70 <_dtoa_r+0xf24>
10005e6c:	102d883a 	mov	r22,r2
10005e70:	b0bfffc4 	addi	r2,r22,-1
10005e74:	10c00007 	ldb	r3,0(r2)
10005e78:	193ffc26 	beq	r3,r4,10005e6c <__alt_data_end+0xf8005e6c>
10005e7c:	003f3206 	br	10005b48 <__alt_data_end+0xf8005b48>
10005e80:	d8c00f17 	ldw	r3,60(sp)
10005e84:	18015026 	beq	r3,zero,100063c8 <_dtoa_r+0x147c>
10005e88:	10810cc4 	addi	r2,r2,1075
10005e8c:	dcc00a17 	ldw	r19,40(sp)
10005e90:	dc800817 	ldw	r18,32(sp)
10005e94:	003e9706 	br	100058f4 <__alt_data_end+0xf80058f4>
10005e98:	b807883a 	mov	r3,r23
10005e9c:	182b883a 	mov	r21,r3
10005ea0:	ddc00717 	ldw	r23,28(sp)
10005ea4:	00800e0e 	bge	zero,r2,10005ee0 <_dtoa_r+0xf94>
10005ea8:	e00b883a 	mov	r5,fp
10005eac:	01800044 	movi	r6,1
10005eb0:	8009883a 	mov	r4,r16
10005eb4:	d8c01515 	stw	r3,84(sp)
10005eb8:	0008ef00 	call	10008ef0 <__lshift>
10005ebc:	1009883a 	mov	r4,r2
10005ec0:	a00b883a 	mov	r5,r20
10005ec4:	1039883a 	mov	fp,r2
10005ec8:	000904c0 	call	1000904c <__mcmp>
10005ecc:	d8c01517 	ldw	r3,84(sp)
10005ed0:	0081880e 	bge	zero,r2,100064f4 <_dtoa_r+0x15a8>
10005ed4:	00800e44 	movi	r2,57
10005ed8:	b0c00c44 	addi	r3,r22,49
10005edc:	a8816326 	beq	r21,r2,1000646c <_dtoa_r+0x1520>
10005ee0:	90c00005 	stb	r3,0(r18)
10005ee4:	95800044 	addi	r22,r18,1
10005ee8:	982b883a 	mov	r21,r19
10005eec:	003f1606 	br	10005b48 <__alt_data_end+0xf8005b48>
10005ef0:	300b883a 	mov	r5,r6
10005ef4:	e009883a 	mov	r4,fp
10005ef8:	d9801515 	stw	r6,84(sp)
10005efc:	000904c0 	call	1000904c <__mcmp>
10005f00:	d9801517 	ldw	r6,84(sp)
10005f04:	8009883a 	mov	r4,r16
10005f08:	d8801515 	stw	r2,84(sp)
10005f0c:	300b883a 	mov	r5,r6
10005f10:	00087a80 	call	100087a8 <_Bfree>
10005f14:	d8801517 	ldw	r2,84(sp)
10005f18:	103f6d1e 	bne	r2,zero,10005cd0 <__alt_data_end+0xf8005cd0>
10005f1c:	d9c00417 	ldw	r7,16(sp)
10005f20:	383f6b1e 	bne	r7,zero,10005cd0 <__alt_data_end+0xf8005cd0>
10005f24:	d8c00317 	ldw	r3,12(sp)
10005f28:	183f691e 	bne	r3,zero,10005cd0 <__alt_data_end+0xf8005cd0>
10005f2c:	b807883a 	mov	r3,r23
10005f30:	00800e44 	movi	r2,57
10005f34:	ddc00717 	ldw	r23,28(sp)
10005f38:	18814c26 	beq	r3,r2,1000646c <_dtoa_r+0x1520>
10005f3c:	057fe80e 	bge	zero,r21,10005ee0 <__alt_data_end+0xf8005ee0>
10005f40:	b0c00c44 	addi	r3,r22,49
10005f44:	003fe606 	br	10005ee0 <__alt_data_end+0xf8005ee0>
10005f48:	880b883a 	mov	r5,r17
10005f4c:	8009883a 	mov	r4,r16
10005f50:	01800284 	movi	r6,10
10005f54:	000f883a 	mov	r7,zero
10005f58:	00087d00 	call	100087d0 <__multadd>
10005f5c:	1023883a 	mov	r17,r2
10005f60:	1027883a 	mov	r19,r2
10005f64:	a825883a 	mov	r18,r21
10005f68:	003f4506 	br	10005c80 <__alt_data_end+0xf8005c80>
10005f6c:	e009883a 	mov	r4,fp
10005f70:	a00b883a 	mov	r5,r20
10005f74:	000904c0 	call	1000904c <__mcmp>
10005f78:	103ebc0e 	bge	r2,zero,10005a6c <__alt_data_end+0xf8005a6c>
10005f7c:	e00b883a 	mov	r5,fp
10005f80:	8009883a 	mov	r4,r16
10005f84:	01800284 	movi	r6,10
10005f88:	000f883a 	mov	r7,zero
10005f8c:	00087d00 	call	100087d0 <__multadd>
10005f90:	1039883a 	mov	fp,r2
10005f94:	d8800617 	ldw	r2,24(sp)
10005f98:	d8c00c17 	ldw	r3,48(sp)
10005f9c:	10bfffc4 	addi	r2,r2,-1
10005fa0:	d8800615 	stw	r2,24(sp)
10005fa4:	1801571e 	bne	r3,zero,10006504 <_dtoa_r+0x15b8>
10005fa8:	d9c00e17 	ldw	r7,56(sp)
10005fac:	d9c00915 	stw	r7,36(sp)
10005fb0:	003eae06 	br	10005a6c <__alt_data_end+0xf8005a6c>
10005fb4:	a0800417 	ldw	r2,16(r20)
10005fb8:	10800104 	addi	r2,r2,4
10005fbc:	1085883a 	add	r2,r2,r2
10005fc0:	1085883a 	add	r2,r2,r2
10005fc4:	a085883a 	add	r2,r20,r2
10005fc8:	11000017 	ldw	r4,0(r2)
10005fcc:	0008a180 	call	10008a18 <__hi0bits>
10005fd0:	00c00804 	movi	r3,32
10005fd4:	1885c83a 	sub	r2,r3,r2
10005fd8:	003e8306 	br	100059e8 <__alt_data_end+0xf80059e8>
10005fdc:	d9c00417 	ldw	r7,16(sp)
10005fe0:	00800084 	movi	r2,2
10005fe4:	11fea30e 	bge	r2,r7,10005a74 <__alt_data_end+0xf8005a74>
10005fe8:	d8800917 	ldw	r2,36(sp)
10005fec:	103f8c1e 	bne	r2,zero,10005e20 <__alt_data_end+0xf8005e20>
10005ff0:	a00b883a 	mov	r5,r20
10005ff4:	8009883a 	mov	r4,r16
10005ff8:	01800144 	movi	r6,5
10005ffc:	000f883a 	mov	r7,zero
10006000:	00087d00 	call	100087d0 <__multadd>
10006004:	e009883a 	mov	r4,fp
10006008:	100b883a 	mov	r5,r2
1000600c:	1029883a 	mov	r20,r2
10006010:	000904c0 	call	1000904c <__mcmp>
10006014:	00bf820e 	bge	zero,r2,10005e20 <__alt_data_end+0xf8005e20>
10006018:	00800c44 	movi	r2,49
1000601c:	b8800005 	stb	r2,0(r23)
10006020:	d8800617 	ldw	r2,24(sp)
10006024:	bd800044 	addi	r22,r23,1
10006028:	10800044 	addi	r2,r2,1
1000602c:	d8800615 	stw	r2,24(sp)
10006030:	003f7f06 	br	10005e30 <__alt_data_end+0xf8005e30>
10006034:	dc000417 	ldw	r16,16(sp)
10006038:	003d6506 	br	100055d0 <__alt_data_end+0xf80055d0>
1000603c:	9009883a 	mov	r4,r18
10006040:	000f5f00 	call	1000f5f0 <__floatsidf>
10006044:	1009883a 	mov	r4,r2
10006048:	180b883a 	mov	r5,r3
1000604c:	980d883a 	mov	r6,r19
10006050:	a00f883a 	mov	r7,r20
10006054:	000ef200 	call	1000ef20 <__muldf3>
10006058:	1009883a 	mov	r4,r2
1000605c:	180b883a 	mov	r5,r3
10006060:	000d883a 	mov	r6,zero
10006064:	01d00734 	movhi	r7,16412
10006068:	000ee6c0 	call	1000ee6c <__adddf3>
1000606c:	057f3034 	movhi	r21,64704
10006070:	1025883a 	mov	r18,r2
10006074:	1d6b883a 	add	r21,r3,r21
10006078:	9809883a 	mov	r4,r19
1000607c:	a00b883a 	mov	r5,r20
10006080:	000d883a 	mov	r6,zero
10006084:	01d00534 	movhi	r7,16404
10006088:	000eec00 	call	1000eec0 <__subdf3>
1000608c:	1009883a 	mov	r4,r2
10006090:	180b883a 	mov	r5,r3
10006094:	900d883a 	mov	r6,r18
10006098:	a80f883a 	mov	r7,r21
1000609c:	1027883a 	mov	r19,r2
100060a0:	1829883a 	mov	r20,r3
100060a4:	000f4700 	call	1000f470 <__gtdf2>
100060a8:	00806616 	blt	zero,r2,10006244 <_dtoa_r+0x12f8>
100060ac:	a9e0003c 	xorhi	r7,r21,32768
100060b0:	9809883a 	mov	r4,r19
100060b4:	a00b883a 	mov	r5,r20
100060b8:	900d883a 	mov	r6,r18
100060bc:	000f5380 	call	1000f538 <__ltdf2>
100060c0:	103d710e 	bge	r2,zero,10005688 <__alt_data_end+0xf8005688>
100060c4:	0029883a 	mov	r20,zero
100060c8:	002b883a 	mov	r21,zero
100060cc:	003f5406 	br	10005e20 <__alt_data_end+0xf8005e20>
100060d0:	d9800a17 	ldw	r6,40(sp)
100060d4:	e00b883a 	mov	r5,fp
100060d8:	8009883a 	mov	r4,r16
100060dc:	0008dc40 	call	10008dc4 <__pow5mult>
100060e0:	1039883a 	mov	fp,r2
100060e4:	003e2e06 	br	100059a0 <__alt_data_end+0xf80059a0>
100060e8:	d8000c15 	stw	zero,48(sp)
100060ec:	003f2006 	br	10005d70 <__alt_data_end+0xf8005d70>
100060f0:	00800044 	movi	r2,1
100060f4:	d8800c15 	stw	r2,48(sp)
100060f8:	003c5d06 	br	10005270 <__alt_data_end+0xf8005270>
100060fc:	d8c00a17 	ldw	r3,40(sp)
10006100:	d9000b17 	ldw	r4,44(sp)
10006104:	dcc00a15 	stw	r19,40(sp)
10006108:	98c5c83a 	sub	r2,r19,r3
1000610c:	2089883a 	add	r4,r4,r2
10006110:	d9000b15 	stw	r4,44(sp)
10006114:	0027883a 	mov	r19,zero
10006118:	003df206 	br	100058e4 <__alt_data_end+0xf80058e4>
1000611c:	d9000317 	ldw	r4,12(sp)
10006120:	8829883a 	mov	r20,r17
10006124:	04800084 	movi	r18,2
10006128:	d9001015 	stw	r4,64(sp)
1000612c:	003c8106 	br	10005334 <__alt_data_end+0xf8005334>
10006130:	04800044 	movi	r18,1
10006134:	dc800e15 	stw	r18,56(sp)
10006138:	dc800915 	stw	r18,36(sp)
1000613c:	dc802115 	stw	r18,132(sp)
10006140:	003f1206 	br	10005d8c <__alt_data_end+0xf8005d8c>
10006144:	d8800617 	ldw	r2,24(sp)
10006148:	00abc83a 	sub	r21,zero,r2
1000614c:	a800a426 	beq	r21,zero,100063e0 <_dtoa_r+0x1494>
10006150:	a88003cc 	andi	r2,r21,15
10006154:	100490fa 	slli	r2,r2,3
10006158:	00c40074 	movhi	r3,4097
1000615c:	18caeb04 	addi	r3,r3,11180
10006160:	d9000317 	ldw	r4,12(sp)
10006164:	1885883a 	add	r2,r3,r2
10006168:	11800017 	ldw	r6,0(r2)
1000616c:	11c00117 	ldw	r7,4(r2)
10006170:	a82bd13a 	srai	r21,r21,4
10006174:	880b883a 	mov	r5,r17
10006178:	000ef200 	call	1000ef20 <__muldf3>
1000617c:	1027883a 	mov	r19,r2
10006180:	1829883a 	mov	r20,r3
10006184:	a800e826 	beq	r21,zero,10006528 <_dtoa_r+0x15dc>
10006188:	05840074 	movhi	r22,4097
1000618c:	b58ae104 	addi	r22,r22,11140
10006190:	04800084 	movi	r18,2
10006194:	a980004c 	andi	r6,r21,1
10006198:	1009883a 	mov	r4,r2
1000619c:	a82bd07a 	srai	r21,r21,1
100061a0:	180b883a 	mov	r5,r3
100061a4:	30000426 	beq	r6,zero,100061b8 <_dtoa_r+0x126c>
100061a8:	b1800017 	ldw	r6,0(r22)
100061ac:	b1c00117 	ldw	r7,4(r22)
100061b0:	94800044 	addi	r18,r18,1
100061b4:	000ef200 	call	1000ef20 <__muldf3>
100061b8:	b5800204 	addi	r22,r22,8
100061bc:	a83ff51e 	bne	r21,zero,10006194 <__alt_data_end+0xf8006194>
100061c0:	1027883a 	mov	r19,r2
100061c4:	1829883a 	mov	r20,r3
100061c8:	003c7306 	br	10005398 <__alt_data_end+0xf8005398>
100061cc:	21000044 	addi	r4,r4,1
100061d0:	11000005 	stb	r4,0(r2)
100061d4:	003e5c06 	br	10005b48 <__alt_data_end+0xf8005b48>
100061d8:	a9400117 	ldw	r5,4(r21)
100061dc:	8009883a 	mov	r4,r16
100061e0:	00087000 	call	10008700 <_Balloc>
100061e4:	a9800417 	ldw	r6,16(r21)
100061e8:	11000304 	addi	r4,r2,12
100061ec:	a9400304 	addi	r5,r21,12
100061f0:	31800084 	addi	r6,r6,2
100061f4:	318d883a 	add	r6,r6,r6
100061f8:	318d883a 	add	r6,r6,r6
100061fc:	1023883a 	mov	r17,r2
10006200:	00083580 	call	10008358 <memcpy>
10006204:	8009883a 	mov	r4,r16
10006208:	880b883a 	mov	r5,r17
1000620c:	01800044 	movi	r6,1
10006210:	0008ef00 	call	10008ef0 <__lshift>
10006214:	1027883a 	mov	r19,r2
10006218:	003e8f06 	br	10005c58 <__alt_data_end+0xf8005c58>
1000621c:	b807883a 	mov	r3,r23
10006220:	00800e44 	movi	r2,57
10006224:	ddc00717 	ldw	r23,28(sp)
10006228:	18809026 	beq	r3,r2,1000646c <_dtoa_r+0x1520>
1000622c:	18c00044 	addi	r3,r3,1
10006230:	003f2b06 	br	10005ee0 <__alt_data_end+0xf8005ee0>
10006234:	b807883a 	mov	r3,r23
10006238:	982b883a 	mov	r21,r19
1000623c:	ddc00717 	ldw	r23,28(sp)
10006240:	003e2406 	br	10005ad4 <__alt_data_end+0xf8005ad4>
10006244:	0029883a 	mov	r20,zero
10006248:	002b883a 	mov	r21,zero
1000624c:	003f7206 	br	10006018 <__alt_data_end+0xf8006018>
10006250:	593fffc4 	addi	r4,r11,-1
10006254:	200490fa 	slli	r2,r4,3
10006258:	00c40074 	movhi	r3,4097
1000625c:	18caeb04 	addi	r3,r3,11180
10006260:	d9001015 	stw	r4,64(sp)
10006264:	1885883a 	add	r2,r3,r2
10006268:	11000017 	ldw	r4,0(r2)
1000626c:	11400117 	ldw	r5,4(r2)
10006270:	900d883a 	mov	r6,r18
10006274:	a80f883a 	mov	r7,r21
10006278:	dac01615 	stw	r11,88(sp)
1000627c:	000ef200 	call	1000ef20 <__muldf3>
10006280:	a00b883a 	mov	r5,r20
10006284:	9809883a 	mov	r4,r19
10006288:	d8c01215 	stw	r3,72(sp)
1000628c:	d8801115 	stw	r2,68(sp)
10006290:	000f6c40 	call	1000f6c4 <__fixdfsi>
10006294:	1009883a 	mov	r4,r2
10006298:	1025883a 	mov	r18,r2
1000629c:	000f5f00 	call	1000f5f0 <__floatsidf>
100062a0:	9809883a 	mov	r4,r19
100062a4:	a00b883a 	mov	r5,r20
100062a8:	100d883a 	mov	r6,r2
100062ac:	180f883a 	mov	r7,r3
100062b0:	94800c04 	addi	r18,r18,48
100062b4:	000eec00 	call	1000eec0 <__subdf3>
100062b8:	bc800005 	stb	r18,0(r23)
100062bc:	dac01617 	ldw	r11,88(sp)
100062c0:	102b883a 	mov	r21,r2
100062c4:	00800044 	movi	r2,1
100062c8:	bd800044 	addi	r22,r23,1
100062cc:	1815883a 	mov	r10,r3
100062d0:	58802226 	beq	r11,r2,1000635c <_dtoa_r+0x1410>
100062d4:	bad7883a 	add	r11,r23,r11
100062d8:	dc001415 	stw	r16,80(sp)
100062dc:	a805883a 	mov	r2,r21
100062e0:	b027883a 	mov	r19,r22
100062e4:	5821883a 	mov	r16,r11
100062e8:	882b883a 	mov	r21,r17
100062ec:	000d883a 	mov	r6,zero
100062f0:	01d00934 	movhi	r7,16420
100062f4:	1009883a 	mov	r4,r2
100062f8:	180b883a 	mov	r5,r3
100062fc:	000ef200 	call	1000ef20 <__muldf3>
10006300:	180b883a 	mov	r5,r3
10006304:	1009883a 	mov	r4,r2
10006308:	1829883a 	mov	r20,r3
1000630c:	1023883a 	mov	r17,r2
10006310:	000f6c40 	call	1000f6c4 <__fixdfsi>
10006314:	1009883a 	mov	r4,r2
10006318:	1025883a 	mov	r18,r2
1000631c:	000f5f00 	call	1000f5f0 <__floatsidf>
10006320:	8809883a 	mov	r4,r17
10006324:	a00b883a 	mov	r5,r20
10006328:	100d883a 	mov	r6,r2
1000632c:	180f883a 	mov	r7,r3
10006330:	94800c04 	addi	r18,r18,48
10006334:	000eec00 	call	1000eec0 <__subdf3>
10006338:	9cc00044 	addi	r19,r19,1
1000633c:	9cbfffc5 	stb	r18,-1(r19)
10006340:	9c3fea1e 	bne	r19,r16,100062ec <__alt_data_end+0xf80062ec>
10006344:	1815883a 	mov	r10,r3
10006348:	d8c01017 	ldw	r3,64(sp)
1000634c:	dc001417 	ldw	r16,80(sp)
10006350:	a823883a 	mov	r17,r21
10006354:	b0ed883a 	add	r22,r22,r3
10006358:	102b883a 	mov	r21,r2
1000635c:	d9001117 	ldw	r4,68(sp)
10006360:	d9401217 	ldw	r5,72(sp)
10006364:	000d883a 	mov	r6,zero
10006368:	01cff834 	movhi	r7,16352
1000636c:	da801515 	stw	r10,84(sp)
10006370:	000ee6c0 	call	1000ee6c <__adddf3>
10006374:	da801517 	ldw	r10,84(sp)
10006378:	1009883a 	mov	r4,r2
1000637c:	180b883a 	mov	r5,r3
10006380:	500f883a 	mov	r7,r10
10006384:	a80d883a 	mov	r6,r21
10006388:	000f5380 	call	1000f538 <__ltdf2>
1000638c:	da801517 	ldw	r10,84(sp)
10006390:	10003b0e 	bge	r2,zero,10006480 <_dtoa_r+0x1534>
10006394:	d9c01317 	ldw	r7,76(sp)
10006398:	b53fffc3 	ldbu	r20,-1(r22)
1000639c:	d9c00615 	stw	r7,24(sp)
100063a0:	003d3106 	br	10005868 <__alt_data_end+0xf8005868>
100063a4:	d8800817 	ldw	r2,32(sp)
100063a8:	11e5c83a 	sub	r18,r2,r7
100063ac:	0005883a 	mov	r2,zero
100063b0:	003d5006 	br	100058f4 <__alt_data_end+0xf80058f4>
100063b4:	05800044 	movi	r22,1
100063b8:	003dc406 	br	10005acc <__alt_data_end+0xf8005acc>
100063bc:	a5000044 	addi	r20,r20,1
100063c0:	15000005 	stb	r20,0(r2)
100063c4:	003c8206 	br	100055d0 <__alt_data_end+0xf80055d0>
100063c8:	d8800217 	ldw	r2,8(sp)
100063cc:	00c00d84 	movi	r3,54
100063d0:	dcc00a17 	ldw	r19,40(sp)
100063d4:	1885c83a 	sub	r2,r3,r2
100063d8:	dc800817 	ldw	r18,32(sp)
100063dc:	003d4506 	br	100058f4 <__alt_data_end+0xf80058f4>
100063e0:	dcc00317 	ldw	r19,12(sp)
100063e4:	8829883a 	mov	r20,r17
100063e8:	04800084 	movi	r18,2
100063ec:	003bea06 	br	10005398 <__alt_data_end+0xf8005398>
100063f0:	d9000917 	ldw	r4,36(sp)
100063f4:	203f1126 	beq	r4,zero,1000603c <__alt_data_end+0xf800603c>
100063f8:	d9c00e17 	ldw	r7,56(sp)
100063fc:	01fca20e 	bge	zero,r7,10005688 <__alt_data_end+0xf8005688>
10006400:	a00b883a 	mov	r5,r20
10006404:	9809883a 	mov	r4,r19
10006408:	000d883a 	mov	r6,zero
1000640c:	01d00934 	movhi	r7,16420
10006410:	000ef200 	call	1000ef20 <__muldf3>
10006414:	91000044 	addi	r4,r18,1
10006418:	1027883a 	mov	r19,r2
1000641c:	1829883a 	mov	r20,r3
10006420:	000f5f00 	call	1000f5f0 <__floatsidf>
10006424:	9809883a 	mov	r4,r19
10006428:	a00b883a 	mov	r5,r20
1000642c:	100d883a 	mov	r6,r2
10006430:	180f883a 	mov	r7,r3
10006434:	000ef200 	call	1000ef20 <__muldf3>
10006438:	1009883a 	mov	r4,r2
1000643c:	180b883a 	mov	r5,r3
10006440:	000d883a 	mov	r6,zero
10006444:	01d00734 	movhi	r7,16412
10006448:	000ee6c0 	call	1000ee6c <__adddf3>
1000644c:	1025883a 	mov	r18,r2
10006450:	d8800617 	ldw	r2,24(sp)
10006454:	057f3034 	movhi	r21,64704
10006458:	1d6b883a 	add	r21,r3,r21
1000645c:	10bfffc4 	addi	r2,r2,-1
10006460:	d8801315 	stw	r2,76(sp)
10006464:	dac00e17 	ldw	r11,56(sp)
10006468:	003be706 	br	10005408 <__alt_data_end+0xf8005408>
1000646c:	01000e44 	movi	r4,57
10006470:	91000005 	stb	r4,0(r18)
10006474:	95800044 	addi	r22,r18,1
10006478:	982b883a 	mov	r21,r19
1000647c:	003da106 	br	10005b04 <__alt_data_end+0xf8005b04>
10006480:	d9801117 	ldw	r6,68(sp)
10006484:	d9c01217 	ldw	r7,72(sp)
10006488:	0009883a 	mov	r4,zero
1000648c:	014ff834 	movhi	r5,16352
10006490:	da801515 	stw	r10,84(sp)
10006494:	000eec00 	call	1000eec0 <__subdf3>
10006498:	da801517 	ldw	r10,84(sp)
1000649c:	1009883a 	mov	r4,r2
100064a0:	180b883a 	mov	r5,r3
100064a4:	a80d883a 	mov	r6,r21
100064a8:	500f883a 	mov	r7,r10
100064ac:	000f4700 	call	1000f470 <__gtdf2>
100064b0:	00bc750e 	bge	zero,r2,10005688 <__alt_data_end+0xf8005688>
100064b4:	01000c04 	movi	r4,48
100064b8:	00000106 	br	100064c0 <_dtoa_r+0x1574>
100064bc:	102d883a 	mov	r22,r2
100064c0:	b0bfffc4 	addi	r2,r22,-1
100064c4:	10c00007 	ldb	r3,0(r2)
100064c8:	193ffc26 	beq	r3,r4,100064bc <__alt_data_end+0xf80064bc>
100064cc:	d8801317 	ldw	r2,76(sp)
100064d0:	d8800615 	stw	r2,24(sp)
100064d4:	003c3e06 	br	100055d0 <__alt_data_end+0xf80055d0>
100064d8:	d9001317 	ldw	r4,76(sp)
100064dc:	df001117 	ldw	fp,68(sp)
100064e0:	d9000615 	stw	r4,24(sp)
100064e4:	003ce006 	br	10005868 <__alt_data_end+0xf8005868>
100064e8:	df001117 	ldw	fp,68(sp)
100064ec:	dc401217 	ldw	r17,72(sp)
100064f0:	003c6506 	br	10005688 <__alt_data_end+0xf8005688>
100064f4:	103e7a1e 	bne	r2,zero,10005ee0 <__alt_data_end+0xf8005ee0>
100064f8:	1880004c 	andi	r2,r3,1
100064fc:	103e7826 	beq	r2,zero,10005ee0 <__alt_data_end+0xf8005ee0>
10006500:	003e7406 	br	10005ed4 <__alt_data_end+0xf8005ed4>
10006504:	8009883a 	mov	r4,r16
10006508:	a80b883a 	mov	r5,r21
1000650c:	01800284 	movi	r6,10
10006510:	000f883a 	mov	r7,zero
10006514:	00087d00 	call	100087d0 <__multadd>
10006518:	d9000e17 	ldw	r4,56(sp)
1000651c:	102b883a 	mov	r21,r2
10006520:	d9000915 	stw	r4,36(sp)
10006524:	003d5106 	br	10005a6c <__alt_data_end+0xf8005a6c>
10006528:	04800084 	movi	r18,2
1000652c:	003b9a06 	br	10005398 <__alt_data_end+0xf8005398>
10006530:	d8c01317 	ldw	r3,76(sp)
10006534:	d8c00615 	stw	r3,24(sp)
10006538:	003ccb06 	br	10005868 <__alt_data_end+0xf8005868>
1000653c:	d8c01317 	ldw	r3,76(sp)
10006540:	d8c00615 	stw	r3,24(sp)
10006544:	003c2206 	br	100055d0 <__alt_data_end+0xf80055d0>
10006548:	20fd3826 	beq	r4,r3,10005a2c <__alt_data_end+0xf8005a2c>
1000654c:	00c00f04 	movi	r3,60
10006550:	1885c83a 	sub	r2,r3,r2
10006554:	003da906 	br	10005bfc <__alt_data_end+0xf8005bfc>
10006558:	000b883a 	mov	r5,zero
1000655c:	003b5406 	br	100052b0 <__alt_data_end+0xf80052b0>
10006560:	04c00044 	movi	r19,1
10006564:	003b3b06 	br	10005254 <__alt_data_end+0xf8005254>

10006568 <_fflush_r>:
10006568:	defffb04 	addi	sp,sp,-20
1000656c:	dcc00315 	stw	r19,12(sp)
10006570:	dc400115 	stw	r17,4(sp)
10006574:	dfc00415 	stw	ra,16(sp)
10006578:	dc800215 	stw	r18,8(sp)
1000657c:	dc000015 	stw	r16,0(sp)
10006580:	2027883a 	mov	r19,r4
10006584:	2823883a 	mov	r17,r5
10006588:	20000226 	beq	r4,zero,10006594 <_fflush_r+0x2c>
1000658c:	20800e17 	ldw	r2,56(r4)
10006590:	10005726 	beq	r2,zero,100066f0 <_fflush_r+0x188>
10006594:	8880030b 	ldhu	r2,12(r17)
10006598:	10c0020c 	andi	r3,r2,8
1000659c:	18ffffcc 	andi	r3,r3,65535
100065a0:	18e0001c 	xori	r3,r3,32768
100065a4:	18e00004 	addi	r3,r3,-32768
100065a8:	1800311e 	bne	r3,zero,10006670 <_fflush_r+0x108>
100065ac:	89000117 	ldw	r4,4(r17)
100065b0:	10c20014 	ori	r3,r2,2048
100065b4:	88c0030d 	sth	r3,12(r17)
100065b8:	180b883a 	mov	r5,r3
100065bc:	0100520e 	bge	zero,r4,10006708 <_fflush_r+0x1a0>
100065c0:	88c00a17 	ldw	r3,40(r17)
100065c4:	18002226 	beq	r3,zero,10006650 <_fflush_r+0xe8>
100065c8:	1084000c 	andi	r2,r2,4096
100065cc:	10bfffcc 	andi	r2,r2,65535
100065d0:	10a0001c 	xori	r2,r2,32768
100065d4:	10a00004 	addi	r2,r2,-32768
100065d8:	10004e26 	beq	r2,zero,10006714 <_fflush_r+0x1ac>
100065dc:	8c001417 	ldw	r16,80(r17)
100065e0:	2940010c 	andi	r5,r5,4
100065e4:	297fffcc 	andi	r5,r5,65535
100065e8:	2960001c 	xori	r5,r5,32768
100065ec:	29600004 	addi	r5,r5,-32768
100065f0:	28000626 	beq	r5,zero,1000660c <_fflush_r+0xa4>
100065f4:	89000117 	ldw	r4,4(r17)
100065f8:	88800c17 	ldw	r2,48(r17)
100065fc:	8121c83a 	sub	r16,r16,r4
10006600:	10000226 	beq	r2,zero,1000660c <_fflush_r+0xa4>
10006604:	88800f17 	ldw	r2,60(r17)
10006608:	80a1c83a 	sub	r16,r16,r2
1000660c:	89400717 	ldw	r5,28(r17)
10006610:	9809883a 	mov	r4,r19
10006614:	800d883a 	mov	r6,r16
10006618:	000f883a 	mov	r7,zero
1000661c:	183ee83a 	callr	r3
10006620:	8080281e 	bne	r16,r2,100066c4 <_fflush_r+0x15c>
10006624:	8880030b 	ldhu	r2,12(r17)
10006628:	88c00417 	ldw	r3,16(r17)
1000662c:	88000115 	stw	zero,4(r17)
10006630:	113dffcc 	andi	r4,r2,63487
10006634:	1084000c 	andi	r2,r2,4096
10006638:	10bfffcc 	andi	r2,r2,65535
1000663c:	10a0001c 	xori	r2,r2,32768
10006640:	8900030d 	sth	r4,12(r17)
10006644:	88c00015 	stw	r3,0(r17)
10006648:	10a00004 	addi	r2,r2,-32768
1000664c:	10002c1e 	bne	r2,zero,10006700 <_fflush_r+0x198>
10006650:	0005883a 	mov	r2,zero
10006654:	dfc00417 	ldw	ra,16(sp)
10006658:	dcc00317 	ldw	r19,12(sp)
1000665c:	dc800217 	ldw	r18,8(sp)
10006660:	dc400117 	ldw	r17,4(sp)
10006664:	dc000017 	ldw	r16,0(sp)
10006668:	dec00504 	addi	sp,sp,20
1000666c:	f800283a 	ret
10006670:	8c800417 	ldw	r18,16(r17)
10006674:	903ff626 	beq	r18,zero,10006650 <__alt_data_end+0xf8006650>
10006678:	8c000017 	ldw	r16,0(r17)
1000667c:	108000cc 	andi	r2,r2,3
10006680:	8c800015 	stw	r18,0(r17)
10006684:	84a1c83a 	sub	r16,r16,r18
10006688:	10001b1e 	bne	r2,zero,100066f8 <_fflush_r+0x190>
1000668c:	88800517 	ldw	r2,20(r17)
10006690:	88800215 	stw	r2,8(r17)
10006694:	04000316 	blt	zero,r16,100066a4 <_fflush_r+0x13c>
10006698:	003fed06 	br	10006650 <__alt_data_end+0xf8006650>
1000669c:	90a5883a 	add	r18,r18,r2
100066a0:	043feb0e 	bge	zero,r16,10006650 <__alt_data_end+0xf8006650>
100066a4:	88800917 	ldw	r2,36(r17)
100066a8:	89400717 	ldw	r5,28(r17)
100066ac:	800f883a 	mov	r7,r16
100066b0:	900d883a 	mov	r6,r18
100066b4:	9809883a 	mov	r4,r19
100066b8:	103ee83a 	callr	r2
100066bc:	80a1c83a 	sub	r16,r16,r2
100066c0:	00bff616 	blt	zero,r2,1000669c <__alt_data_end+0xf800669c>
100066c4:	88c0030b 	ldhu	r3,12(r17)
100066c8:	00bfffc4 	movi	r2,-1
100066cc:	18c01014 	ori	r3,r3,64
100066d0:	88c0030d 	sth	r3,12(r17)
100066d4:	dfc00417 	ldw	ra,16(sp)
100066d8:	dcc00317 	ldw	r19,12(sp)
100066dc:	dc800217 	ldw	r18,8(sp)
100066e0:	dc400117 	ldw	r17,4(sp)
100066e4:	dc000017 	ldw	r16,0(sp)
100066e8:	dec00504 	addi	sp,sp,20
100066ec:	f800283a 	ret
100066f0:	00068240 	call	10006824 <__sinit>
100066f4:	003fa706 	br	10006594 <__alt_data_end+0xf8006594>
100066f8:	0005883a 	mov	r2,zero
100066fc:	003fe406 	br	10006690 <__alt_data_end+0xf8006690>
10006700:	8c001415 	stw	r16,80(r17)
10006704:	003fd206 	br	10006650 <__alt_data_end+0xf8006650>
10006708:	88c00f17 	ldw	r3,60(r17)
1000670c:	00ffac16 	blt	zero,r3,100065c0 <__alt_data_end+0xf80065c0>
10006710:	003fcf06 	br	10006650 <__alt_data_end+0xf8006650>
10006714:	89400717 	ldw	r5,28(r17)
10006718:	9809883a 	mov	r4,r19
1000671c:	000d883a 	mov	r6,zero
10006720:	01c00044 	movi	r7,1
10006724:	183ee83a 	callr	r3
10006728:	1021883a 	mov	r16,r2
1000672c:	00bfffc4 	movi	r2,-1
10006730:	80800326 	beq	r16,r2,10006740 <_fflush_r+0x1d8>
10006734:	8940030b 	ldhu	r5,12(r17)
10006738:	88c00a17 	ldw	r3,40(r17)
1000673c:	003fa806 	br	100065e0 <__alt_data_end+0xf80065e0>
10006740:	98c00017 	ldw	r3,0(r19)
10006744:	00800744 	movi	r2,29
10006748:	18bfde1e 	bne	r3,r2,100066c4 <__alt_data_end+0xf80066c4>
1000674c:	003fc006 	br	10006650 <__alt_data_end+0xf8006650>

10006750 <fflush>:
10006750:	200b883a 	mov	r5,r4
10006754:	20000426 	beq	r4,zero,10006768 <fflush+0x18>
10006758:	00840074 	movhi	r2,4097
1000675c:	1092a404 	addi	r2,r2,19088
10006760:	11000017 	ldw	r4,0(r2)
10006764:	00065681 	jmpi	10006568 <_fflush_r>
10006768:	00840074 	movhi	r2,4097
1000676c:	1092a304 	addi	r2,r2,19084
10006770:	11000017 	ldw	r4,0(r2)
10006774:	01440034 	movhi	r5,4096
10006778:	29595a04 	addi	r5,r5,25960
1000677c:	00076801 	jmpi	10007680 <_fwalk_reent>

10006780 <__fp_lock>:
10006780:	0005883a 	mov	r2,zero
10006784:	f800283a 	ret

10006788 <__fp_unlock>:
10006788:	0005883a 	mov	r2,zero
1000678c:	f800283a 	ret

10006790 <_cleanup_r>:
10006790:	01440074 	movhi	r5,4097
10006794:	2973ab04 	addi	r5,r5,-12628
10006798:	00075d81 	jmpi	100075d8 <_fwalk>

1000679c <__sfmoreglue>:
1000679c:	defffc04 	addi	sp,sp,-16
100067a0:	dc800215 	stw	r18,8(sp)
100067a4:	2825883a 	mov	r18,r5
100067a8:	dc000015 	stw	r16,0(sp)
100067ac:	01401704 	movi	r5,92
100067b0:	2021883a 	mov	r16,r4
100067b4:	9009883a 	mov	r4,r18
100067b8:	dfc00315 	stw	ra,12(sp)
100067bc:	dc400115 	stw	r17,4(sp)
100067c0:	00012fc0 	call	100012fc <__mulsi3>
100067c4:	8009883a 	mov	r4,r16
100067c8:	11400304 	addi	r5,r2,12
100067cc:	1023883a 	mov	r17,r2
100067d0:	00079f40 	call	100079f4 <_malloc_r>
100067d4:	1021883a 	mov	r16,r2
100067d8:	10000726 	beq	r2,zero,100067f8 <__sfmoreglue+0x5c>
100067dc:	11000304 	addi	r4,r2,12
100067e0:	10000015 	stw	zero,0(r2)
100067e4:	14800115 	stw	r18,4(r2)
100067e8:	11000215 	stw	r4,8(r2)
100067ec:	000b883a 	mov	r5,zero
100067f0:	880d883a 	mov	r6,r17
100067f4:	00086240 	call	10008624 <memset>
100067f8:	8005883a 	mov	r2,r16
100067fc:	dfc00317 	ldw	ra,12(sp)
10006800:	dc800217 	ldw	r18,8(sp)
10006804:	dc400117 	ldw	r17,4(sp)
10006808:	dc000017 	ldw	r16,0(sp)
1000680c:	dec00404 	addi	sp,sp,16
10006810:	f800283a 	ret

10006814 <_cleanup>:
10006814:	00840074 	movhi	r2,4097
10006818:	1092a304 	addi	r2,r2,19084
1000681c:	11000017 	ldw	r4,0(r2)
10006820:	00067901 	jmpi	10006790 <_cleanup_r>

10006824 <__sinit>:
10006824:	20800e17 	ldw	r2,56(r4)
10006828:	1000401e 	bne	r2,zero,1000692c <__sinit+0x108>
1000682c:	21400117 	ldw	r5,4(r4)
10006830:	01840034 	movhi	r6,4096
10006834:	3199e404 	addi	r6,r6,26512
10006838:	20c00217 	ldw	r3,8(r4)
1000683c:	21800f15 	stw	r6,60(r4)
10006840:	2080bb04 	addi	r2,r4,748
10006844:	02400044 	movi	r9,1
10006848:	018000c4 	movi	r6,3
1000684c:	2180b915 	stw	r6,740(r4)
10006850:	2080ba15 	stw	r2,744(r4)
10006854:	22400e15 	stw	r9,56(r4)
10006858:	20800317 	ldw	r2,12(r4)
1000685c:	2000b815 	stw	zero,736(r4)
10006860:	02040074 	movhi	r8,4097
10006864:	4228d604 	addi	r8,r8,-23720
10006868:	01c40074 	movhi	r7,4097
1000686c:	39e8eb04 	addi	r7,r7,-23636
10006870:	01840074 	movhi	r6,4097
10006874:	31a90d04 	addi	r6,r6,-23500
10006878:	01040074 	movhi	r4,4097
1000687c:	21292404 	addi	r4,r4,-23408
10006880:	02800104 	movi	r10,4
10006884:	28000015 	stw	zero,0(r5)
10006888:	28000115 	stw	zero,4(r5)
1000688c:	28000215 	stw	zero,8(r5)
10006890:	2a80030d 	sth	r10,12(r5)
10006894:	2800038d 	sth	zero,14(r5)
10006898:	28000415 	stw	zero,16(r5)
1000689c:	28000515 	stw	zero,20(r5)
100068a0:	28000615 	stw	zero,24(r5)
100068a4:	29400715 	stw	r5,28(r5)
100068a8:	2a000815 	stw	r8,32(r5)
100068ac:	29c00915 	stw	r7,36(r5)
100068b0:	29800a15 	stw	r6,40(r5)
100068b4:	29000b15 	stw	r4,44(r5)
100068b8:	01400284 	movi	r5,10
100068bc:	18000015 	stw	zero,0(r3)
100068c0:	18000115 	stw	zero,4(r3)
100068c4:	18000215 	stw	zero,8(r3)
100068c8:	1940030d 	sth	r5,12(r3)
100068cc:	1a40038d 	sth	r9,14(r3)
100068d0:	18000415 	stw	zero,16(r3)
100068d4:	18000515 	stw	zero,20(r3)
100068d8:	18000615 	stw	zero,24(r3)
100068dc:	18c00715 	stw	r3,28(r3)
100068e0:	1a000815 	stw	r8,32(r3)
100068e4:	19c00915 	stw	r7,36(r3)
100068e8:	19800a15 	stw	r6,40(r3)
100068ec:	19000b15 	stw	r4,44(r3)
100068f0:	00c00484 	movi	r3,18
100068f4:	10c0030d 	sth	r3,12(r2)
100068f8:	00c00084 	movi	r3,2
100068fc:	10000015 	stw	zero,0(r2)
10006900:	10000115 	stw	zero,4(r2)
10006904:	10000215 	stw	zero,8(r2)
10006908:	10c0038d 	sth	r3,14(r2)
1000690c:	10000415 	stw	zero,16(r2)
10006910:	10000515 	stw	zero,20(r2)
10006914:	10000615 	stw	zero,24(r2)
10006918:	10800715 	stw	r2,28(r2)
1000691c:	12000815 	stw	r8,32(r2)
10006920:	11c00915 	stw	r7,36(r2)
10006924:	11800a15 	stw	r6,40(r2)
10006928:	11000b15 	stw	r4,44(r2)
1000692c:	f800283a 	ret

10006930 <__sfp>:
10006930:	defffc04 	addi	sp,sp,-16
10006934:	00840074 	movhi	r2,4097
10006938:	1092a304 	addi	r2,r2,19084
1000693c:	dc400115 	stw	r17,4(sp)
10006940:	14400017 	ldw	r17,0(r2)
10006944:	dc800215 	stw	r18,8(sp)
10006948:	dfc00315 	stw	ra,12(sp)
1000694c:	88800e17 	ldw	r2,56(r17)
10006950:	dc000015 	stw	r16,0(sp)
10006954:	2025883a 	mov	r18,r4
10006958:	10002826 	beq	r2,zero,100069fc <__sfp+0xcc>
1000695c:	8c40b804 	addi	r17,r17,736
10006960:	043fffc4 	movi	r16,-1
10006964:	89400117 	ldw	r5,4(r17)
10006968:	88800217 	ldw	r2,8(r17)
1000696c:	297fffc4 	addi	r5,r5,-1
10006970:	28000a16 	blt	r5,zero,1000699c <__sfp+0x6c>
10006974:	10c0030f 	ldh	r3,12(r2)
10006978:	18000c26 	beq	r3,zero,100069ac <__sfp+0x7c>
1000697c:	10c01a04 	addi	r3,r2,104
10006980:	00000206 	br	1000698c <__sfp+0x5c>
10006984:	19bfe90f 	ldh	r6,-92(r3)
10006988:	30000826 	beq	r6,zero,100069ac <__sfp+0x7c>
1000698c:	297fffc4 	addi	r5,r5,-1
10006990:	18bffd04 	addi	r2,r3,-12
10006994:	18c01704 	addi	r3,r3,92
10006998:	2c3ffa1e 	bne	r5,r16,10006984 <__alt_data_end+0xf8006984>
1000699c:	88800017 	ldw	r2,0(r17)
100069a0:	10001926 	beq	r2,zero,10006a08 <__sfp+0xd8>
100069a4:	1023883a 	mov	r17,r2
100069a8:	003fee06 	br	10006964 <__alt_data_end+0xf8006964>
100069ac:	00ffffc4 	movi	r3,-1
100069b0:	10c0038d 	sth	r3,14(r2)
100069b4:	00c00044 	movi	r3,1
100069b8:	10c0030d 	sth	r3,12(r2)
100069bc:	10000015 	stw	zero,0(r2)
100069c0:	10000215 	stw	zero,8(r2)
100069c4:	10000115 	stw	zero,4(r2)
100069c8:	10000415 	stw	zero,16(r2)
100069cc:	10000515 	stw	zero,20(r2)
100069d0:	10000615 	stw	zero,24(r2)
100069d4:	10000c15 	stw	zero,48(r2)
100069d8:	10000d15 	stw	zero,52(r2)
100069dc:	10001115 	stw	zero,68(r2)
100069e0:	10001215 	stw	zero,72(r2)
100069e4:	dfc00317 	ldw	ra,12(sp)
100069e8:	dc800217 	ldw	r18,8(sp)
100069ec:	dc400117 	ldw	r17,4(sp)
100069f0:	dc000017 	ldw	r16,0(sp)
100069f4:	dec00404 	addi	sp,sp,16
100069f8:	f800283a 	ret
100069fc:	8809883a 	mov	r4,r17
10006a00:	00068240 	call	10006824 <__sinit>
10006a04:	003fd506 	br	1000695c <__alt_data_end+0xf800695c>
10006a08:	9009883a 	mov	r4,r18
10006a0c:	01400104 	movi	r5,4
10006a10:	000679c0 	call	1000679c <__sfmoreglue>
10006a14:	88800015 	stw	r2,0(r17)
10006a18:	103fe21e 	bne	r2,zero,100069a4 <__alt_data_end+0xf80069a4>
10006a1c:	00800304 	movi	r2,12
10006a20:	90800015 	stw	r2,0(r18)
10006a24:	0005883a 	mov	r2,zero
10006a28:	003fee06 	br	100069e4 <__alt_data_end+0xf80069e4>

10006a2c <__sfp_lock_acquire>:
10006a2c:	f800283a 	ret

10006a30 <__sfp_lock_release>:
10006a30:	f800283a 	ret

10006a34 <__sinit_lock_acquire>:
10006a34:	f800283a 	ret

10006a38 <__sinit_lock_release>:
10006a38:	f800283a 	ret

10006a3c <__fp_lock_all>:
10006a3c:	00840074 	movhi	r2,4097
10006a40:	1092a404 	addi	r2,r2,19088
10006a44:	11000017 	ldw	r4,0(r2)
10006a48:	01440034 	movhi	r5,4096
10006a4c:	2959e004 	addi	r5,r5,26496
10006a50:	00075d81 	jmpi	100075d8 <_fwalk>

10006a54 <__fp_unlock_all>:
10006a54:	00840074 	movhi	r2,4097
10006a58:	1092a404 	addi	r2,r2,19088
10006a5c:	11000017 	ldw	r4,0(r2)
10006a60:	01440034 	movhi	r5,4096
10006a64:	2959e204 	addi	r5,r5,26504
10006a68:	00075d81 	jmpi	100075d8 <_fwalk>

10006a6c <_fread_r>:
10006a6c:	defff504 	addi	sp,sp,-44
10006a70:	dd000515 	stw	r20,20(sp)
10006a74:	dcc00415 	stw	r19,16(sp)
10006a78:	2029883a 	mov	r20,r4
10006a7c:	2827883a 	mov	r19,r5
10006a80:	3809883a 	mov	r4,r7
10006a84:	300b883a 	mov	r5,r6
10006a88:	ddc00815 	stw	r23,32(sp)
10006a8c:	dd800715 	stw	r22,28(sp)
10006a90:	dd400615 	stw	r21,24(sp)
10006a94:	dc000115 	stw	r16,4(sp)
10006a98:	dfc00a15 	stw	ra,40(sp)
10006a9c:	df000915 	stw	fp,36(sp)
10006aa0:	dc800315 	stw	r18,12(sp)
10006aa4:	dc400215 	stw	r17,8(sp)
10006aa8:	302f883a 	mov	r23,r6
10006aac:	382b883a 	mov	r21,r7
10006ab0:	00012fc0 	call	100012fc <__mulsi3>
10006ab4:	102d883a 	mov	r22,r2
10006ab8:	dc000b17 	ldw	r16,44(sp)
10006abc:	10002e26 	beq	r2,zero,10006b78 <_fread_r+0x10c>
10006ac0:	a0000226 	beq	r20,zero,10006acc <_fread_r+0x60>
10006ac4:	a0800e17 	ldw	r2,56(r20)
10006ac8:	10006726 	beq	r2,zero,10006c68 <_fread_r+0x1fc>
10006acc:	84400117 	ldw	r17,4(r16)
10006ad0:	88002b16 	blt	r17,zero,10006b80 <_fread_r+0x114>
10006ad4:	8080030b 	ldhu	r2,12(r16)
10006ad8:	8807883a 	mov	r3,r17
10006adc:	1080008c 	andi	r2,r2,2
10006ae0:	10bfffcc 	andi	r2,r2,65535
10006ae4:	10a0001c 	xori	r2,r2,32768
10006ae8:	10a00004 	addi	r2,r2,-32768
10006aec:	10002d1e 	bne	r2,zero,10006ba4 <_fread_r+0x138>
10006af0:	b025883a 	mov	r18,r22
10006af4:	00000106 	br	10006afc <_fread_r+0x90>
10006af8:	84400117 	ldw	r17,4(r16)
10006afc:	9809883a 	mov	r4,r19
10006b00:	880d883a 	mov	r6,r17
10006b04:	81400017 	ldw	r5,0(r16)
10006b08:	8c805c2e 	bgeu	r17,r18,10006c7c <_fread_r+0x210>
10006b0c:	00083580 	call	10008358 <memcpy>
10006b10:	80800017 	ldw	r2,0(r16)
10006b14:	9c67883a 	add	r19,r19,r17
10006b18:	9465c83a 	sub	r18,r18,r17
10006b1c:	1463883a 	add	r17,r2,r17
10006b20:	a009883a 	mov	r4,r20
10006b24:	800b883a 	mov	r5,r16
10006b28:	84400015 	stw	r17,0(r16)
10006b2c:	0009f140 	call	10009f14 <__srefill_r>
10006b30:	103ff126 	beq	r2,zero,10006af8 <__alt_data_end+0xf8006af8>
10006b34:	b489c83a 	sub	r4,r22,r18
10006b38:	b80b883a 	mov	r5,r23
10006b3c:	00012ec0 	call	100012ec <__udivsi3>
10006b40:	102b883a 	mov	r21,r2
10006b44:	a805883a 	mov	r2,r21
10006b48:	dfc00a17 	ldw	ra,40(sp)
10006b4c:	df000917 	ldw	fp,36(sp)
10006b50:	ddc00817 	ldw	r23,32(sp)
10006b54:	dd800717 	ldw	r22,28(sp)
10006b58:	dd400617 	ldw	r21,24(sp)
10006b5c:	dd000517 	ldw	r20,20(sp)
10006b60:	dcc00417 	ldw	r19,16(sp)
10006b64:	dc800317 	ldw	r18,12(sp)
10006b68:	dc400217 	ldw	r17,8(sp)
10006b6c:	dc000117 	ldw	r16,4(sp)
10006b70:	dec00b04 	addi	sp,sp,44
10006b74:	f800283a 	ret
10006b78:	002b883a 	mov	r21,zero
10006b7c:	003ff106 	br	10006b44 <__alt_data_end+0xf8006b44>
10006b80:	8080030b 	ldhu	r2,12(r16)
10006b84:	80000115 	stw	zero,4(r16)
10006b88:	0007883a 	mov	r3,zero
10006b8c:	1080008c 	andi	r2,r2,2
10006b90:	10bfffcc 	andi	r2,r2,65535
10006b94:	10a0001c 	xori	r2,r2,32768
10006b98:	10a00004 	addi	r2,r2,-32768
10006b9c:	0023883a 	mov	r17,zero
10006ba0:	103fd326 	beq	r2,zero,10006af0 <__alt_data_end+0xf8006af0>
10006ba4:	1823883a 	mov	r17,r3
10006ba8:	b0c0012e 	bgeu	r22,r3,10006bb0 <_fread_r+0x144>
10006bac:	b023883a 	mov	r17,r22
10006bb0:	81400017 	ldw	r5,0(r16)
10006bb4:	9809883a 	mov	r4,r19
10006bb8:	880d883a 	mov	r6,r17
10006bbc:	00083580 	call	10008358 <memcpy>
10006bc0:	80800117 	ldw	r2,4(r16)
10006bc4:	84800017 	ldw	r18,0(r16)
10006bc8:	81400c17 	ldw	r5,48(r16)
10006bcc:	1445c83a 	sub	r2,r2,r17
10006bd0:	9465883a 	add	r18,r18,r17
10006bd4:	84800015 	stw	r18,0(r16)
10006bd8:	80800115 	stw	r2,4(r16)
10006bdc:	9c67883a 	add	r19,r19,r17
10006be0:	b463c83a 	sub	r17,r22,r17
10006be4:	28002e26 	beq	r5,zero,10006ca0 <_fread_r+0x234>
10006be8:	883fd626 	beq	r17,zero,10006b44 <__alt_data_end+0xf8006b44>
10006bec:	80801004 	addi	r2,r16,64
10006bf0:	28800326 	beq	r5,r2,10006c00 <_fread_r+0x194>
10006bf4:	a009883a 	mov	r4,r20
10006bf8:	0006e240 	call	10006e24 <_free_r>
10006bfc:	84800017 	ldw	r18,0(r16)
10006c00:	80000c15 	stw	zero,48(r16)
10006c04:	80c00517 	ldw	r3,20(r16)
10006c08:	87000417 	ldw	fp,16(r16)
10006c0c:	d8c00015 	stw	r3,0(sp)
10006c10:	00000106 	br	10006c18 <_fread_r+0x1ac>
10006c14:	883fcb26 	beq	r17,zero,10006b44 <__alt_data_end+0xf8006b44>
10006c18:	84c00415 	stw	r19,16(r16)
10006c1c:	84400515 	stw	r17,20(r16)
10006c20:	84c00015 	stw	r19,0(r16)
10006c24:	a009883a 	mov	r4,r20
10006c28:	800b883a 	mov	r5,r16
10006c2c:	0009f140 	call	10009f14 <__srefill_r>
10006c30:	d8c00017 	ldw	r3,0(sp)
10006c34:	81000117 	ldw	r4,4(r16)
10006c38:	87000415 	stw	fp,16(r16)
10006c3c:	80c00515 	stw	r3,20(r16)
10006c40:	84800015 	stw	r18,0(r16)
10006c44:	80000115 	stw	zero,4(r16)
10006c48:	8923c83a 	sub	r17,r17,r4
10006c4c:	9927883a 	add	r19,r19,r4
10006c50:	103ff026 	beq	r2,zero,10006c14 <__alt_data_end+0xf8006c14>
10006c54:	b449c83a 	sub	r4,r22,r17
10006c58:	b80b883a 	mov	r5,r23
10006c5c:	00012ec0 	call	100012ec <__udivsi3>
10006c60:	102b883a 	mov	r21,r2
10006c64:	003fb706 	br	10006b44 <__alt_data_end+0xf8006b44>
10006c68:	a009883a 	mov	r4,r20
10006c6c:	00068240 	call	10006824 <__sinit>
10006c70:	84400117 	ldw	r17,4(r16)
10006c74:	883f970e 	bge	r17,zero,10006ad4 <__alt_data_end+0xf8006ad4>
10006c78:	003fc106 	br	10006b80 <__alt_data_end+0xf8006b80>
10006c7c:	900d883a 	mov	r6,r18
10006c80:	00083580 	call	10008358 <memcpy>
10006c84:	80800117 	ldw	r2,4(r16)
10006c88:	80c00017 	ldw	r3,0(r16)
10006c8c:	1485c83a 	sub	r2,r2,r18
10006c90:	1ca5883a 	add	r18,r3,r18
10006c94:	80800115 	stw	r2,4(r16)
10006c98:	84800015 	stw	r18,0(r16)
10006c9c:	003fa906 	br	10006b44 <__alt_data_end+0xf8006b44>
10006ca0:	883fd81e 	bne	r17,zero,10006c04 <__alt_data_end+0xf8006c04>
10006ca4:	003fa706 	br	10006b44 <__alt_data_end+0xf8006b44>

10006ca8 <fread>:
10006ca8:	00840074 	movhi	r2,4097
10006cac:	1092a404 	addi	r2,r2,19088
10006cb0:	2011883a 	mov	r8,r4
10006cb4:	11000017 	ldw	r4,0(r2)
10006cb8:	defffe04 	addi	sp,sp,-8
10006cbc:	2807883a 	mov	r3,r5
10006cc0:	3005883a 	mov	r2,r6
10006cc4:	d9c00015 	stw	r7,0(sp)
10006cc8:	400b883a 	mov	r5,r8
10006ccc:	180d883a 	mov	r6,r3
10006cd0:	100f883a 	mov	r7,r2
10006cd4:	dfc00115 	stw	ra,4(sp)
10006cd8:	0006a6c0 	call	10006a6c <_fread_r>
10006cdc:	dfc00117 	ldw	ra,4(sp)
10006ce0:	dec00204 	addi	sp,sp,8
10006ce4:	f800283a 	ret

10006ce8 <_malloc_trim_r>:
10006ce8:	defffb04 	addi	sp,sp,-20
10006cec:	dcc00315 	stw	r19,12(sp)
10006cf0:	dc800215 	stw	r18,8(sp)
10006cf4:	dc400115 	stw	r17,4(sp)
10006cf8:	dc000015 	stw	r16,0(sp)
10006cfc:	2827883a 	mov	r19,r5
10006d00:	dfc00415 	stw	ra,16(sp)
10006d04:	04440074 	movhi	r17,4097
10006d08:	8c4d1404 	addi	r17,r17,13392
10006d0c:	2021883a 	mov	r16,r4
10006d10:	00106d00 	call	100106d0 <__malloc_lock>
10006d14:	88800217 	ldw	r2,8(r17)
10006d18:	14800117 	ldw	r18,4(r2)
10006d1c:	00bfff04 	movi	r2,-4
10006d20:	90a4703a 	and	r18,r18,r2
10006d24:	9083fbc4 	addi	r2,r18,4079
10006d28:	14e7c83a 	sub	r19,r2,r19
10006d2c:	9826d33a 	srli	r19,r19,12
10006d30:	0083ffc4 	movi	r2,4095
10006d34:	9cffffc4 	addi	r19,r19,-1
10006d38:	9826933a 	slli	r19,r19,12
10006d3c:	14c0060e 	bge	r2,r19,10006d58 <_malloc_trim_r+0x70>
10006d40:	8009883a 	mov	r4,r16
10006d44:	000b883a 	mov	r5,zero
10006d48:	000a1640 	call	1000a164 <_sbrk_r>
10006d4c:	88c00217 	ldw	r3,8(r17)
10006d50:	1c87883a 	add	r3,r3,r18
10006d54:	10c00a26 	beq	r2,r3,10006d80 <_malloc_trim_r+0x98>
10006d58:	8009883a 	mov	r4,r16
10006d5c:	00106f00 	call	100106f0 <__malloc_unlock>
10006d60:	0005883a 	mov	r2,zero
10006d64:	dfc00417 	ldw	ra,16(sp)
10006d68:	dcc00317 	ldw	r19,12(sp)
10006d6c:	dc800217 	ldw	r18,8(sp)
10006d70:	dc400117 	ldw	r17,4(sp)
10006d74:	dc000017 	ldw	r16,0(sp)
10006d78:	dec00504 	addi	sp,sp,20
10006d7c:	f800283a 	ret
10006d80:	8009883a 	mov	r4,r16
10006d84:	04cbc83a 	sub	r5,zero,r19
10006d88:	000a1640 	call	1000a164 <_sbrk_r>
10006d8c:	00ffffc4 	movi	r3,-1
10006d90:	10c01326 	beq	r2,r3,10006de0 <_malloc_trim_r+0xf8>
10006d94:	00840074 	movhi	r2,4097
10006d98:	1099ea04 	addi	r2,r2,26536
10006d9c:	11000017 	ldw	r4,0(r2)
10006da0:	88c00217 	ldw	r3,8(r17)
10006da4:	94e5c83a 	sub	r18,r18,r19
10006da8:	94800054 	ori	r18,r18,1
10006dac:	24e7c83a 	sub	r19,r4,r19
10006db0:	1c800115 	stw	r18,4(r3)
10006db4:	8009883a 	mov	r4,r16
10006db8:	14c00015 	stw	r19,0(r2)
10006dbc:	00106f00 	call	100106f0 <__malloc_unlock>
10006dc0:	00800044 	movi	r2,1
10006dc4:	dfc00417 	ldw	ra,16(sp)
10006dc8:	dcc00317 	ldw	r19,12(sp)
10006dcc:	dc800217 	ldw	r18,8(sp)
10006dd0:	dc400117 	ldw	r17,4(sp)
10006dd4:	dc000017 	ldw	r16,0(sp)
10006dd8:	dec00504 	addi	sp,sp,20
10006ddc:	f800283a 	ret
10006de0:	8009883a 	mov	r4,r16
10006de4:	000b883a 	mov	r5,zero
10006de8:	000a1640 	call	1000a164 <_sbrk_r>
10006dec:	88c00217 	ldw	r3,8(r17)
10006df0:	014003c4 	movi	r5,15
10006df4:	10c9c83a 	sub	r4,r2,r3
10006df8:	293fd70e 	bge	r5,r4,10006d58 <__alt_data_end+0xf8006d58>
10006dfc:	01440074 	movhi	r5,4097
10006e00:	2952a604 	addi	r5,r5,19096
10006e04:	29400017 	ldw	r5,0(r5)
10006e08:	21000054 	ori	r4,r4,1
10006e0c:	19000115 	stw	r4,4(r3)
10006e10:	1145c83a 	sub	r2,r2,r5
10006e14:	01440074 	movhi	r5,4097
10006e18:	2959ea04 	addi	r5,r5,26536
10006e1c:	28800015 	stw	r2,0(r5)
10006e20:	003fcd06 	br	10006d58 <__alt_data_end+0xf8006d58>

10006e24 <_free_r>:
10006e24:	defffd04 	addi	sp,sp,-12
10006e28:	dc400115 	stw	r17,4(sp)
10006e2c:	dc000015 	stw	r16,0(sp)
10006e30:	dfc00215 	stw	ra,8(sp)
10006e34:	2821883a 	mov	r16,r5
10006e38:	2023883a 	mov	r17,r4
10006e3c:	28004b26 	beq	r5,zero,10006f6c <_free_r+0x148>
10006e40:	00106d00 	call	100106d0 <__malloc_lock>
10006e44:	823fff17 	ldw	r8,-4(r16)
10006e48:	00bfff84 	movi	r2,-2
10006e4c:	81bffe04 	addi	r6,r16,-8
10006e50:	4084703a 	and	r2,r8,r2
10006e54:	3087883a 	add	r3,r6,r2
10006e58:	01440074 	movhi	r5,4097
10006e5c:	294d1404 	addi	r5,r5,13392
10006e60:	1a400117 	ldw	r9,4(r3)
10006e64:	29000217 	ldw	r4,8(r5)
10006e68:	01ffff04 	movi	r7,-4
10006e6c:	49ce703a 	and	r7,r9,r7
10006e70:	20c06526 	beq	r4,r3,10007008 <_free_r+0x1e4>
10006e74:	19c00115 	stw	r7,4(r3)
10006e78:	4200004c 	andi	r8,r8,1
10006e7c:	40003026 	beq	r8,zero,10006f40 <_free_r+0x11c>
10006e80:	0009883a 	mov	r4,zero
10006e84:	19d1883a 	add	r8,r3,r7
10006e88:	42000117 	ldw	r8,4(r8)
10006e8c:	4200004c 	andi	r8,r8,1
10006e90:	4000061e 	bne	r8,zero,10006eac <_free_r+0x88>
10006e94:	11c5883a 	add	r2,r2,r7
10006e98:	19c00217 	ldw	r7,8(r3)
10006e9c:	20004e26 	beq	r4,zero,10006fd8 <_free_r+0x1b4>
10006ea0:	18c00317 	ldw	r3,12(r3)
10006ea4:	38c00315 	stw	r3,12(r7)
10006ea8:	19c00215 	stw	r7,8(r3)
10006eac:	11c00054 	ori	r7,r2,1
10006eb0:	3087883a 	add	r3,r6,r2
10006eb4:	31c00115 	stw	r7,4(r6)
10006eb8:	18800015 	stw	r2,0(r3)
10006ebc:	20001a1e 	bne	r4,zero,10006f28 <_free_r+0x104>
10006ec0:	00c07fc4 	movi	r3,511
10006ec4:	18802e2e 	bgeu	r3,r2,10006f80 <_free_r+0x15c>
10006ec8:	1006d27a 	srli	r3,r2,9
10006ecc:	01000104 	movi	r4,4
10006ed0:	20c06636 	bltu	r4,r3,1000706c <_free_r+0x248>
10006ed4:	1008d1ba 	srli	r4,r2,6
10006ed8:	21000e04 	addi	r4,r4,56
10006edc:	210f883a 	add	r7,r4,r4
10006ee0:	39cf883a 	add	r7,r7,r7
10006ee4:	39cf883a 	add	r7,r7,r7
10006ee8:	29cf883a 	add	r7,r5,r7
10006eec:	38c00217 	ldw	r3,8(r7)
10006ef0:	01440074 	movhi	r5,4097
10006ef4:	294d1404 	addi	r5,r5,13392
10006ef8:	19c06126 	beq	r3,r7,10007080 <_free_r+0x25c>
10006efc:	013fff04 	movi	r4,-4
10006f00:	19400117 	ldw	r5,4(r3)
10006f04:	290a703a 	and	r5,r5,r4
10006f08:	1140022e 	bgeu	r2,r5,10006f14 <_free_r+0xf0>
10006f0c:	18c00217 	ldw	r3,8(r3)
10006f10:	38fffb1e 	bne	r7,r3,10006f00 <__alt_data_end+0xf8006f00>
10006f14:	18800317 	ldw	r2,12(r3)
10006f18:	30800315 	stw	r2,12(r6)
10006f1c:	30c00215 	stw	r3,8(r6)
10006f20:	11800215 	stw	r6,8(r2)
10006f24:	19800315 	stw	r6,12(r3)
10006f28:	8809883a 	mov	r4,r17
10006f2c:	dfc00217 	ldw	ra,8(sp)
10006f30:	dc400117 	ldw	r17,4(sp)
10006f34:	dc000017 	ldw	r16,0(sp)
10006f38:	dec00304 	addi	sp,sp,12
10006f3c:	00106f01 	jmpi	100106f0 <__malloc_unlock>
10006f40:	813ffe17 	ldw	r4,-8(r16)
10006f44:	2a400204 	addi	r9,r5,8
10006f48:	310dc83a 	sub	r6,r6,r4
10006f4c:	32000217 	ldw	r8,8(r6)
10006f50:	1105883a 	add	r2,r2,r4
10006f54:	42404326 	beq	r8,r9,10007064 <_free_r+0x240>
10006f58:	32400317 	ldw	r9,12(r6)
10006f5c:	0009883a 	mov	r4,zero
10006f60:	42400315 	stw	r9,12(r8)
10006f64:	4a000215 	stw	r8,8(r9)
10006f68:	003fc606 	br	10006e84 <__alt_data_end+0xf8006e84>
10006f6c:	dfc00217 	ldw	ra,8(sp)
10006f70:	dc400117 	ldw	r17,4(sp)
10006f74:	dc000017 	ldw	r16,0(sp)
10006f78:	dec00304 	addi	sp,sp,12
10006f7c:	f800283a 	ret
10006f80:	1004d0fa 	srli	r2,r2,3
10006f84:	02000044 	movi	r8,1
10006f88:	29c00117 	ldw	r7,4(r5)
10006f8c:	1087883a 	add	r3,r2,r2
10006f90:	18c7883a 	add	r3,r3,r3
10006f94:	1005d0ba 	srai	r2,r2,2
10006f98:	18c7883a 	add	r3,r3,r3
10006f9c:	28c7883a 	add	r3,r5,r3
10006fa0:	19000217 	ldw	r4,8(r3)
10006fa4:	4084983a 	sll	r2,r8,r2
10006fa8:	30c00315 	stw	r3,12(r6)
10006fac:	31000215 	stw	r4,8(r6)
10006fb0:	11c4b03a 	or	r2,r2,r7
10006fb4:	21800315 	stw	r6,12(r4)
10006fb8:	8809883a 	mov	r4,r17
10006fbc:	28800115 	stw	r2,4(r5)
10006fc0:	19800215 	stw	r6,8(r3)
10006fc4:	dfc00217 	ldw	ra,8(sp)
10006fc8:	dc400117 	ldw	r17,4(sp)
10006fcc:	dc000017 	ldw	r16,0(sp)
10006fd0:	dec00304 	addi	sp,sp,12
10006fd4:	00106f01 	jmpi	100106f0 <__malloc_unlock>
10006fd8:	02040074 	movhi	r8,4097
10006fdc:	420d1604 	addi	r8,r8,13400
10006fe0:	3a3faf1e 	bne	r7,r8,10006ea0 <__alt_data_end+0xf8006ea0>
10006fe4:	29800515 	stw	r6,20(r5)
10006fe8:	29800415 	stw	r6,16(r5)
10006fec:	11000054 	ori	r4,r2,1
10006ff0:	3087883a 	add	r3,r6,r2
10006ff4:	31c00315 	stw	r7,12(r6)
10006ff8:	31c00215 	stw	r7,8(r6)
10006ffc:	31000115 	stw	r4,4(r6)
10007000:	18800015 	stw	r2,0(r3)
10007004:	003fc806 	br	10006f28 <__alt_data_end+0xf8006f28>
10007008:	4200004c 	andi	r8,r8,1
1000700c:	3885883a 	add	r2,r7,r2
10007010:	4000071e 	bne	r8,zero,10007030 <_free_r+0x20c>
10007014:	81fffe17 	ldw	r7,-8(r16)
10007018:	31cdc83a 	sub	r6,r6,r7
1000701c:	30c00317 	ldw	r3,12(r6)
10007020:	31000217 	ldw	r4,8(r6)
10007024:	11c5883a 	add	r2,r2,r7
10007028:	20c00315 	stw	r3,12(r4)
1000702c:	19000215 	stw	r4,8(r3)
10007030:	00c40074 	movhi	r3,4097
10007034:	18d2a704 	addi	r3,r3,19100
10007038:	18c00017 	ldw	r3,0(r3)
1000703c:	11000054 	ori	r4,r2,1
10007040:	31000115 	stw	r4,4(r6)
10007044:	29800215 	stw	r6,8(r5)
10007048:	10ffb736 	bltu	r2,r3,10006f28 <__alt_data_end+0xf8006f28>
1000704c:	00840074 	movhi	r2,4097
10007050:	1099e204 	addi	r2,r2,26504
10007054:	11400017 	ldw	r5,0(r2)
10007058:	8809883a 	mov	r4,r17
1000705c:	0006ce80 	call	10006ce8 <_malloc_trim_r>
10007060:	003fb106 	br	10006f28 <__alt_data_end+0xf8006f28>
10007064:	01000044 	movi	r4,1
10007068:	003f8606 	br	10006e84 <__alt_data_end+0xf8006e84>
1000706c:	01000504 	movi	r4,20
10007070:	20c00b36 	bltu	r4,r3,100070a0 <_free_r+0x27c>
10007074:	190016c4 	addi	r4,r3,91
10007078:	210f883a 	add	r7,r4,r4
1000707c:	003f9806 	br	10006ee0 <__alt_data_end+0xf8006ee0>
10007080:	2009d0ba 	srai	r4,r4,2
10007084:	00800044 	movi	r2,1
10007088:	29c00117 	ldw	r7,4(r5)
1000708c:	1108983a 	sll	r4,r2,r4
10007090:	1805883a 	mov	r2,r3
10007094:	21c8b03a 	or	r4,r4,r7
10007098:	29000115 	stw	r4,4(r5)
1000709c:	003f9e06 	br	10006f18 <__alt_data_end+0xf8006f18>
100070a0:	01001504 	movi	r4,84
100070a4:	20c00436 	bltu	r4,r3,100070b8 <_free_r+0x294>
100070a8:	1008d33a 	srli	r4,r2,12
100070ac:	21001b84 	addi	r4,r4,110
100070b0:	210f883a 	add	r7,r4,r4
100070b4:	003f8a06 	br	10006ee0 <__alt_data_end+0xf8006ee0>
100070b8:	01005504 	movi	r4,340
100070bc:	20c00436 	bltu	r4,r3,100070d0 <_free_r+0x2ac>
100070c0:	1008d3fa 	srli	r4,r2,15
100070c4:	21001dc4 	addi	r4,r4,119
100070c8:	210f883a 	add	r7,r4,r4
100070cc:	003f8406 	br	10006ee0 <__alt_data_end+0xf8006ee0>
100070d0:	01015504 	movi	r4,1364
100070d4:	20c00436 	bltu	r4,r3,100070e8 <_free_r+0x2c4>
100070d8:	1008d4ba 	srli	r4,r2,18
100070dc:	21001f04 	addi	r4,r4,124
100070e0:	210f883a 	add	r7,r4,r4
100070e4:	003f7e06 	br	10006ee0 <__alt_data_end+0xf8006ee0>
100070e8:	01c03f04 	movi	r7,252
100070ec:	01001f84 	movi	r4,126
100070f0:	003f7b06 	br	10006ee0 <__alt_data_end+0xf8006ee0>

100070f4 <__sfvwrite_r>:
100070f4:	30800217 	ldw	r2,8(r6)
100070f8:	defff504 	addi	sp,sp,-44
100070fc:	dd400615 	stw	r21,24(sp)
10007100:	dd000515 	stw	r20,20(sp)
10007104:	dc000115 	stw	r16,4(sp)
10007108:	dfc00a15 	stw	ra,40(sp)
1000710c:	df000915 	stw	fp,36(sp)
10007110:	ddc00815 	stw	r23,32(sp)
10007114:	dd800715 	stw	r22,28(sp)
10007118:	dcc00415 	stw	r19,16(sp)
1000711c:	dc800315 	stw	r18,12(sp)
10007120:	dc400215 	stw	r17,8(sp)
10007124:	3029883a 	mov	r20,r6
10007128:	202b883a 	mov	r21,r4
1000712c:	2821883a 	mov	r16,r5
10007130:	10002126 	beq	r2,zero,100071b8 <__sfvwrite_r+0xc4>
10007134:	2880030b 	ldhu	r2,12(r5)
10007138:	10c0020c 	andi	r3,r2,8
1000713c:	18ffffcc 	andi	r3,r3,65535
10007140:	18e0001c 	xori	r3,r3,32768
10007144:	18e00004 	addi	r3,r3,-32768
10007148:	18002826 	beq	r3,zero,100071ec <__sfvwrite_r+0xf8>
1000714c:	28c00417 	ldw	r3,16(r5)
10007150:	18002626 	beq	r3,zero,100071ec <__sfvwrite_r+0xf8>
10007154:	10c0008c 	andi	r3,r2,2
10007158:	18ffffcc 	andi	r3,r3,65535
1000715c:	18e0001c 	xori	r3,r3,32768
10007160:	18e00004 	addi	r3,r3,-32768
10007164:	a4400017 	ldw	r17,0(r20)
10007168:	18002b26 	beq	r3,zero,10007218 <__sfvwrite_r+0x124>
1000716c:	0027883a 	mov	r19,zero
10007170:	0025883a 	mov	r18,zero
10007174:	05810004 	movi	r22,1024
10007178:	980d883a 	mov	r6,r19
1000717c:	a809883a 	mov	r4,r21
10007180:	90004f26 	beq	r18,zero,100072c0 <__sfvwrite_r+0x1cc>
10007184:	900f883a 	mov	r7,r18
10007188:	81400717 	ldw	r5,28(r16)
1000718c:	b480012e 	bgeu	r22,r18,10007194 <__sfvwrite_r+0xa0>
10007190:	01c10004 	movi	r7,1024
10007194:	80800917 	ldw	r2,36(r16)
10007198:	103ee83a 	callr	r2
1000719c:	0080540e 	bge	zero,r2,100072f0 <__sfvwrite_r+0x1fc>
100071a0:	a0c00217 	ldw	r3,8(r20)
100071a4:	98a7883a 	add	r19,r19,r2
100071a8:	90a5c83a 	sub	r18,r18,r2
100071ac:	1885c83a 	sub	r2,r3,r2
100071b0:	a0800215 	stw	r2,8(r20)
100071b4:	103ff01e 	bne	r2,zero,10007178 <__alt_data_end+0xf8007178>
100071b8:	0005883a 	mov	r2,zero
100071bc:	dfc00a17 	ldw	ra,40(sp)
100071c0:	df000917 	ldw	fp,36(sp)
100071c4:	ddc00817 	ldw	r23,32(sp)
100071c8:	dd800717 	ldw	r22,28(sp)
100071cc:	dd400617 	ldw	r21,24(sp)
100071d0:	dd000517 	ldw	r20,20(sp)
100071d4:	dcc00417 	ldw	r19,16(sp)
100071d8:	dc800317 	ldw	r18,12(sp)
100071dc:	dc400217 	ldw	r17,8(sp)
100071e0:	dc000117 	ldw	r16,4(sp)
100071e4:	dec00b04 	addi	sp,sp,44
100071e8:	f800283a 	ret
100071ec:	a809883a 	mov	r4,r21
100071f0:	800b883a 	mov	r5,r16
100071f4:	0004b9c0 	call	10004b9c <__swsetup_r>
100071f8:	1000f01e 	bne	r2,zero,100075bc <__sfvwrite_r+0x4c8>
100071fc:	8080030b 	ldhu	r2,12(r16)
10007200:	a4400017 	ldw	r17,0(r20)
10007204:	10c0008c 	andi	r3,r2,2
10007208:	18ffffcc 	andi	r3,r3,65535
1000720c:	18e0001c 	xori	r3,r3,32768
10007210:	18e00004 	addi	r3,r3,-32768
10007214:	183fd51e 	bne	r3,zero,1000716c <__alt_data_end+0xf800716c>
10007218:	10c0004c 	andi	r3,r2,1
1000721c:	002d883a 	mov	r22,zero
10007220:	1800381e 	bne	r3,zero,10007304 <__sfvwrite_r+0x210>
10007224:	0025883a 	mov	r18,zero
10007228:	90002126 	beq	r18,zero,100072b0 <__sfvwrite_r+0x1bc>
1000722c:	10c0800c 	andi	r3,r2,512
10007230:	18ffffcc 	andi	r3,r3,65535
10007234:	18e0001c 	xori	r3,r3,32768
10007238:	18e00004 	addi	r3,r3,-32768
1000723c:	84c00217 	ldw	r19,8(r16)
10007240:	18006b26 	beq	r3,zero,100073f0 <__sfvwrite_r+0x2fc>
10007244:	980f883a 	mov	r7,r19
10007248:	94c08636 	bltu	r18,r19,10007464 <__sfvwrite_r+0x370>
1000724c:	10c1200c 	andi	r3,r2,1152
10007250:	18009f1e 	bne	r3,zero,100074d0 <__sfvwrite_r+0x3dc>
10007254:	81000017 	ldw	r4,0(r16)
10007258:	982f883a 	mov	r23,r19
1000725c:	9039883a 	mov	fp,r18
10007260:	9027883a 	mov	r19,r18
10007264:	380d883a 	mov	r6,r7
10007268:	b00b883a 	mov	r5,r22
1000726c:	d9c00015 	stw	r7,0(sp)
10007270:	00084980 	call	10008498 <memmove>
10007274:	d9c00017 	ldw	r7,0(sp)
10007278:	81000217 	ldw	r4,8(r16)
1000727c:	80800017 	ldw	r2,0(r16)
10007280:	25efc83a 	sub	r23,r4,r23
10007284:	11cf883a 	add	r7,r2,r7
10007288:	85c00215 	stw	r23,8(r16)
1000728c:	81c00015 	stw	r7,0(r16)
10007290:	a0800217 	ldw	r2,8(r20)
10007294:	b72d883a 	add	r22,r22,fp
10007298:	9725c83a 	sub	r18,r18,fp
1000729c:	14e7c83a 	sub	r19,r2,r19
100072a0:	a4c00215 	stw	r19,8(r20)
100072a4:	983fc426 	beq	r19,zero,100071b8 <__alt_data_end+0xf80071b8>
100072a8:	8080030b 	ldhu	r2,12(r16)
100072ac:	903fdf1e 	bne	r18,zero,1000722c <__alt_data_end+0xf800722c>
100072b0:	8d800017 	ldw	r22,0(r17)
100072b4:	8c800117 	ldw	r18,4(r17)
100072b8:	8c400204 	addi	r17,r17,8
100072bc:	003fda06 	br	10007228 <__alt_data_end+0xf8007228>
100072c0:	8cc00017 	ldw	r19,0(r17)
100072c4:	8c800117 	ldw	r18,4(r17)
100072c8:	8c400204 	addi	r17,r17,8
100072cc:	003faa06 	br	10007178 <__alt_data_end+0xf8007178>
100072d0:	00098fc0 	call	100098fc <_realloc_r>
100072d4:	102f883a 	mov	r23,r2
100072d8:	10009f1e 	bne	r2,zero,10007558 <__sfvwrite_r+0x464>
100072dc:	81400417 	ldw	r5,16(r16)
100072e0:	a809883a 	mov	r4,r21
100072e4:	0006e240 	call	10006e24 <_free_r>
100072e8:	00800304 	movi	r2,12
100072ec:	a8800015 	stw	r2,0(r21)
100072f0:	80c0030b 	ldhu	r3,12(r16)
100072f4:	00bfffc4 	movi	r2,-1
100072f8:	18c01014 	ori	r3,r3,64
100072fc:	80c0030d 	sth	r3,12(r16)
10007300:	003fae06 	br	100071bc <__alt_data_end+0xf80071bc>
10007304:	0007883a 	mov	r3,zero
10007308:	0039883a 	mov	fp,zero
1000730c:	0025883a 	mov	r18,zero
10007310:	90001e26 	beq	r18,zero,1000738c <__sfvwrite_r+0x298>
10007314:	18006526 	beq	r3,zero,100074ac <__sfvwrite_r+0x3b8>
10007318:	b02f883a 	mov	r23,r22
1000731c:	9580012e 	bgeu	r18,r22,10007324 <__sfvwrite_r+0x230>
10007320:	902f883a 	mov	r23,r18
10007324:	81000017 	ldw	r4,0(r16)
10007328:	80800417 	ldw	r2,16(r16)
1000732c:	84c00217 	ldw	r19,8(r16)
10007330:	81c00517 	ldw	r7,20(r16)
10007334:	1100022e 	bgeu	r2,r4,10007340 <__sfvwrite_r+0x24c>
10007338:	99e7883a 	add	r19,r19,r7
1000733c:	9dc01816 	blt	r19,r23,100073a0 <__sfvwrite_r+0x2ac>
10007340:	b9c03b16 	blt	r23,r7,10007430 <__sfvwrite_r+0x33c>
10007344:	80800917 	ldw	r2,36(r16)
10007348:	81400717 	ldw	r5,28(r16)
1000734c:	a809883a 	mov	r4,r21
10007350:	d8c00015 	stw	r3,0(sp)
10007354:	e00d883a 	mov	r6,fp
10007358:	103ee83a 	callr	r2
1000735c:	1027883a 	mov	r19,r2
10007360:	d8c00017 	ldw	r3,0(sp)
10007364:	00bfe20e 	bge	zero,r2,100072f0 <__alt_data_end+0xf80072f0>
10007368:	b4edc83a 	sub	r22,r22,r19
1000736c:	b0001a26 	beq	r22,zero,100073d8 <__sfvwrite_r+0x2e4>
10007370:	a0800217 	ldw	r2,8(r20)
10007374:	e4f9883a 	add	fp,fp,r19
10007378:	94e5c83a 	sub	r18,r18,r19
1000737c:	14e7c83a 	sub	r19,r2,r19
10007380:	a4c00215 	stw	r19,8(r20)
10007384:	983f8c26 	beq	r19,zero,100071b8 <__alt_data_end+0xf80071b8>
10007388:	903fe21e 	bne	r18,zero,10007314 <__alt_data_end+0xf8007314>
1000738c:	8f000017 	ldw	fp,0(r17)
10007390:	8c800117 	ldw	r18,4(r17)
10007394:	0007883a 	mov	r3,zero
10007398:	8c400204 	addi	r17,r17,8
1000739c:	003fdc06 	br	10007310 <__alt_data_end+0xf8007310>
100073a0:	e00b883a 	mov	r5,fp
100073a4:	980d883a 	mov	r6,r19
100073a8:	d8c00015 	stw	r3,0(sp)
100073ac:	00084980 	call	10008498 <memmove>
100073b0:	80800017 	ldw	r2,0(r16)
100073b4:	a809883a 	mov	r4,r21
100073b8:	800b883a 	mov	r5,r16
100073bc:	14c5883a 	add	r2,r2,r19
100073c0:	80800015 	stw	r2,0(r16)
100073c4:	00065680 	call	10006568 <_fflush_r>
100073c8:	d8c00017 	ldw	r3,0(sp)
100073cc:	103fc81e 	bne	r2,zero,100072f0 <__alt_data_end+0xf80072f0>
100073d0:	b4edc83a 	sub	r22,r22,r19
100073d4:	b03fe61e 	bne	r22,zero,10007370 <__alt_data_end+0xf8007370>
100073d8:	a809883a 	mov	r4,r21
100073dc:	800b883a 	mov	r5,r16
100073e0:	00065680 	call	10006568 <_fflush_r>
100073e4:	103fc21e 	bne	r2,zero,100072f0 <__alt_data_end+0xf80072f0>
100073e8:	0007883a 	mov	r3,zero
100073ec:	003fe006 	br	10007370 <__alt_data_end+0xf8007370>
100073f0:	81000017 	ldw	r4,0(r16)
100073f4:	80800417 	ldw	r2,16(r16)
100073f8:	1100022e 	bgeu	r2,r4,10007404 <__sfvwrite_r+0x310>
100073fc:	9839883a 	mov	fp,r19
10007400:	9c806036 	bltu	r19,r18,10007584 <__sfvwrite_r+0x490>
10007404:	81c00517 	ldw	r7,20(r16)
10007408:	91c01c36 	bltu	r18,r7,1000747c <__sfvwrite_r+0x388>
1000740c:	80800917 	ldw	r2,36(r16)
10007410:	81400717 	ldw	r5,28(r16)
10007414:	a809883a 	mov	r4,r21
10007418:	b00d883a 	mov	r6,r22
1000741c:	103ee83a 	callr	r2
10007420:	1027883a 	mov	r19,r2
10007424:	00bfb20e 	bge	zero,r2,100072f0 <__alt_data_end+0xf80072f0>
10007428:	1039883a 	mov	fp,r2
1000742c:	003f9806 	br	10007290 <__alt_data_end+0xf8007290>
10007430:	b80d883a 	mov	r6,r23
10007434:	e00b883a 	mov	r5,fp
10007438:	d8c00015 	stw	r3,0(sp)
1000743c:	00084980 	call	10008498 <memmove>
10007440:	80800217 	ldw	r2,8(r16)
10007444:	81000017 	ldw	r4,0(r16)
10007448:	b827883a 	mov	r19,r23
1000744c:	15c5c83a 	sub	r2,r2,r23
10007450:	25ef883a 	add	r23,r4,r23
10007454:	80800215 	stw	r2,8(r16)
10007458:	85c00015 	stw	r23,0(r16)
1000745c:	d8c00017 	ldw	r3,0(sp)
10007460:	003fc106 	br	10007368 <__alt_data_end+0xf8007368>
10007464:	81000017 	ldw	r4,0(r16)
10007468:	902f883a 	mov	r23,r18
1000746c:	9039883a 	mov	fp,r18
10007470:	9027883a 	mov	r19,r18
10007474:	900f883a 	mov	r7,r18
10007478:	003f7a06 	br	10007264 <__alt_data_end+0xf8007264>
1000747c:	b00b883a 	mov	r5,r22
10007480:	900d883a 	mov	r6,r18
10007484:	00084980 	call	10008498 <memmove>
10007488:	80c00217 	ldw	r3,8(r16)
1000748c:	80800017 	ldw	r2,0(r16)
10007490:	9027883a 	mov	r19,r18
10007494:	1c87c83a 	sub	r3,r3,r18
10007498:	1485883a 	add	r2,r2,r18
1000749c:	80c00215 	stw	r3,8(r16)
100074a0:	80800015 	stw	r2,0(r16)
100074a4:	9039883a 	mov	fp,r18
100074a8:	003f7906 	br	10007290 <__alt_data_end+0xf8007290>
100074ac:	e009883a 	mov	r4,fp
100074b0:	01400284 	movi	r5,10
100074b4:	900d883a 	mov	r6,r18
100074b8:	00082600 	call	10008260 <memchr>
100074bc:	10003c26 	beq	r2,zero,100075b0 <__sfvwrite_r+0x4bc>
100074c0:	15800044 	addi	r22,r2,1
100074c4:	b72dc83a 	sub	r22,r22,fp
100074c8:	00c00044 	movi	r3,1
100074cc:	003f9206 	br	10007318 <__alt_data_end+0xf8007318>
100074d0:	81000517 	ldw	r4,20(r16)
100074d4:	81400417 	ldw	r5,16(r16)
100074d8:	80c00017 	ldw	r3,0(r16)
100074dc:	210d883a 	add	r6,r4,r4
100074e0:	3109883a 	add	r4,r6,r4
100074e4:	2026d7fa 	srli	r19,r4,31
100074e8:	1979c83a 	sub	fp,r3,r5
100074ec:	e1800044 	addi	r6,fp,1
100074f0:	9909883a 	add	r4,r19,r4
100074f4:	2027d07a 	srai	r19,r4,1
100074f8:	3489883a 	add	r4,r6,r18
100074fc:	980d883a 	mov	r6,r19
10007500:	9900022e 	bgeu	r19,r4,1000750c <__sfvwrite_r+0x418>
10007504:	2027883a 	mov	r19,r4
10007508:	200d883a 	mov	r6,r4
1000750c:	1081000c 	andi	r2,r2,1024
10007510:	10bfffcc 	andi	r2,r2,65535
10007514:	10a0001c 	xori	r2,r2,32768
10007518:	10a00004 	addi	r2,r2,-32768
1000751c:	a809883a 	mov	r4,r21
10007520:	103f6b26 	beq	r2,zero,100072d0 <__alt_data_end+0xf80072d0>
10007524:	300b883a 	mov	r5,r6
10007528:	00079f40 	call	100079f4 <_malloc_r>
1000752c:	102f883a 	mov	r23,r2
10007530:	103f6d26 	beq	r2,zero,100072e8 <__alt_data_end+0xf80072e8>
10007534:	81400417 	ldw	r5,16(r16)
10007538:	1009883a 	mov	r4,r2
1000753c:	e00d883a 	mov	r6,fp
10007540:	00083580 	call	10008358 <memcpy>
10007544:	8080030b 	ldhu	r2,12(r16)
10007548:	00fedfc4 	movi	r3,-1153
1000754c:	10c4703a 	and	r2,r2,r3
10007550:	10802014 	ori	r2,r2,128
10007554:	8080030d 	sth	r2,12(r16)
10007558:	bf09883a 	add	r4,r23,fp
1000755c:	9f07c83a 	sub	r3,r19,fp
10007560:	85c00415 	stw	r23,16(r16)
10007564:	84c00515 	stw	r19,20(r16)
10007568:	81000015 	stw	r4,0(r16)
1000756c:	902f883a 	mov	r23,r18
10007570:	80c00215 	stw	r3,8(r16)
10007574:	9039883a 	mov	fp,r18
10007578:	9027883a 	mov	r19,r18
1000757c:	900f883a 	mov	r7,r18
10007580:	003f3806 	br	10007264 <__alt_data_end+0xf8007264>
10007584:	b00b883a 	mov	r5,r22
10007588:	980d883a 	mov	r6,r19
1000758c:	00084980 	call	10008498 <memmove>
10007590:	80800017 	ldw	r2,0(r16)
10007594:	a809883a 	mov	r4,r21
10007598:	800b883a 	mov	r5,r16
1000759c:	14c5883a 	add	r2,r2,r19
100075a0:	80800015 	stw	r2,0(r16)
100075a4:	00065680 	call	10006568 <_fflush_r>
100075a8:	103f3926 	beq	r2,zero,10007290 <__alt_data_end+0xf8007290>
100075ac:	003f5006 	br	100072f0 <__alt_data_end+0xf80072f0>
100075b0:	95800044 	addi	r22,r18,1
100075b4:	00c00044 	movi	r3,1
100075b8:	003f5706 	br	10007318 <__alt_data_end+0xf8007318>
100075bc:	80c0030b 	ldhu	r3,12(r16)
100075c0:	00bfffc4 	movi	r2,-1
100075c4:	18c01014 	ori	r3,r3,64
100075c8:	80c0030d 	sth	r3,12(r16)
100075cc:	00c00244 	movi	r3,9
100075d0:	a8c00015 	stw	r3,0(r21)
100075d4:	003ef906 	br	100071bc <__alt_data_end+0xf80071bc>

100075d8 <_fwalk>:
100075d8:	defff904 	addi	sp,sp,-28
100075dc:	dcc00315 	stw	r19,12(sp)
100075e0:	24c0b804 	addi	r19,r4,736
100075e4:	dd400515 	stw	r21,20(sp)
100075e8:	dd000415 	stw	r20,16(sp)
100075ec:	dfc00615 	stw	ra,24(sp)
100075f0:	dc800215 	stw	r18,8(sp)
100075f4:	dc400115 	stw	r17,4(sp)
100075f8:	dc000015 	stw	r16,0(sp)
100075fc:	282b883a 	mov	r21,r5
10007600:	0029883a 	mov	r20,zero
10007604:	0006a2c0 	call	10006a2c <__sfp_lock_acquire>
10007608:	98001226 	beq	r19,zero,10007654 <_fwalk+0x7c>
1000760c:	04bfffc4 	movi	r18,-1
10007610:	9c400117 	ldw	r17,4(r19)
10007614:	9c000217 	ldw	r16,8(r19)
10007618:	8c7fffc4 	addi	r17,r17,-1
1000761c:	88000b16 	blt	r17,zero,1000764c <_fwalk+0x74>
10007620:	84000304 	addi	r16,r16,12
10007624:	80c0000f 	ldh	r3,0(r16)
10007628:	8c7fffc4 	addi	r17,r17,-1
1000762c:	813ffd04 	addi	r4,r16,-12
10007630:	18000426 	beq	r3,zero,10007644 <_fwalk+0x6c>
10007634:	80c0008f 	ldh	r3,2(r16)
10007638:	1c800226 	beq	r3,r18,10007644 <_fwalk+0x6c>
1000763c:	a83ee83a 	callr	r21
10007640:	a0a8b03a 	or	r20,r20,r2
10007644:	84001704 	addi	r16,r16,92
10007648:	8cbff61e 	bne	r17,r18,10007624 <__alt_data_end+0xf8007624>
1000764c:	9cc00017 	ldw	r19,0(r19)
10007650:	983fef1e 	bne	r19,zero,10007610 <__alt_data_end+0xf8007610>
10007654:	0006a300 	call	10006a30 <__sfp_lock_release>
10007658:	a005883a 	mov	r2,r20
1000765c:	dfc00617 	ldw	ra,24(sp)
10007660:	dd400517 	ldw	r21,20(sp)
10007664:	dd000417 	ldw	r20,16(sp)
10007668:	dcc00317 	ldw	r19,12(sp)
1000766c:	dc800217 	ldw	r18,8(sp)
10007670:	dc400117 	ldw	r17,4(sp)
10007674:	dc000017 	ldw	r16,0(sp)
10007678:	dec00704 	addi	sp,sp,28
1000767c:	f800283a 	ret

10007680 <_fwalk_reent>:
10007680:	defff804 	addi	sp,sp,-32
10007684:	dcc00315 	stw	r19,12(sp)
10007688:	24c0b804 	addi	r19,r4,736
1000768c:	dd800615 	stw	r22,24(sp)
10007690:	dd400515 	stw	r21,20(sp)
10007694:	dd000415 	stw	r20,16(sp)
10007698:	dfc00715 	stw	ra,28(sp)
1000769c:	dc800215 	stw	r18,8(sp)
100076a0:	dc400115 	stw	r17,4(sp)
100076a4:	dc000015 	stw	r16,0(sp)
100076a8:	2029883a 	mov	r20,r4
100076ac:	282b883a 	mov	r21,r5
100076b0:	002d883a 	mov	r22,zero
100076b4:	0006a2c0 	call	10006a2c <__sfp_lock_acquire>
100076b8:	98001326 	beq	r19,zero,10007708 <_fwalk_reent+0x88>
100076bc:	04bfffc4 	movi	r18,-1
100076c0:	9c400117 	ldw	r17,4(r19)
100076c4:	9c000217 	ldw	r16,8(r19)
100076c8:	8c7fffc4 	addi	r17,r17,-1
100076cc:	88000c16 	blt	r17,zero,10007700 <_fwalk_reent+0x80>
100076d0:	84000304 	addi	r16,r16,12
100076d4:	80c0000f 	ldh	r3,0(r16)
100076d8:	8c7fffc4 	addi	r17,r17,-1
100076dc:	817ffd04 	addi	r5,r16,-12
100076e0:	18000526 	beq	r3,zero,100076f8 <_fwalk_reent+0x78>
100076e4:	80c0008f 	ldh	r3,2(r16)
100076e8:	a009883a 	mov	r4,r20
100076ec:	1c800226 	beq	r3,r18,100076f8 <_fwalk_reent+0x78>
100076f0:	a83ee83a 	callr	r21
100076f4:	b0acb03a 	or	r22,r22,r2
100076f8:	84001704 	addi	r16,r16,92
100076fc:	8cbff51e 	bne	r17,r18,100076d4 <__alt_data_end+0xf80076d4>
10007700:	9cc00017 	ldw	r19,0(r19)
10007704:	983fee1e 	bne	r19,zero,100076c0 <__alt_data_end+0xf80076c0>
10007708:	0006a300 	call	10006a30 <__sfp_lock_release>
1000770c:	b005883a 	mov	r2,r22
10007710:	dfc00717 	ldw	ra,28(sp)
10007714:	dd800617 	ldw	r22,24(sp)
10007718:	dd400517 	ldw	r21,20(sp)
1000771c:	dd000417 	ldw	r20,16(sp)
10007720:	dcc00317 	ldw	r19,12(sp)
10007724:	dc800217 	ldw	r18,8(sp)
10007728:	dc400117 	ldw	r17,4(sp)
1000772c:	dc000017 	ldw	r16,0(sp)
10007730:	dec00804 	addi	sp,sp,32
10007734:	f800283a 	ret

10007738 <iswspace>:
10007738:	00803fc4 	movi	r2,255
1000773c:	11000a36 	bltu	r2,r4,10007768 <iswspace+0x30>
10007740:	00840074 	movhi	r2,4097
10007744:	1092a204 	addi	r2,r2,19080
10007748:	10800017 	ldw	r2,0(r2)
1000774c:	1109883a 	add	r4,r2,r4
10007750:	20800003 	ldbu	r2,0(r4)
10007754:	1080020c 	andi	r2,r2,8
10007758:	10803fcc 	andi	r2,r2,255
1000775c:	1080201c 	xori	r2,r2,128
10007760:	10bfe004 	addi	r2,r2,-128
10007764:	f800283a 	ret
10007768:	0005883a 	mov	r2,zero
1000776c:	f800283a 	ret

10007770 <_setlocale_r>:
10007770:	defffc04 	addi	sp,sp,-16
10007774:	dc800215 	stw	r18,8(sp)
10007778:	dc400115 	stw	r17,4(sp)
1000777c:	dc000015 	stw	r16,0(sp)
10007780:	dfc00315 	stw	ra,12(sp)
10007784:	3021883a 	mov	r16,r6
10007788:	2023883a 	mov	r17,r4
1000778c:	2825883a 	mov	r18,r5
10007790:	30001626 	beq	r6,zero,100077ec <_setlocale_r+0x7c>
10007794:	3009883a 	mov	r4,r6
10007798:	01440074 	movhi	r5,4097
1000779c:	294ac604 	addi	r5,r5,11032
100077a0:	000a4980 	call	1000a498 <strcmp>
100077a4:	10000a1e 	bne	r2,zero,100077d0 <_setlocale_r+0x60>
100077a8:	8c800c15 	stw	r18,48(r17)
100077ac:	8c000d15 	stw	r16,52(r17)
100077b0:	00840074 	movhi	r2,4097
100077b4:	108ac604 	addi	r2,r2,11032
100077b8:	dfc00317 	ldw	ra,12(sp)
100077bc:	dc800217 	ldw	r18,8(sp)
100077c0:	dc400117 	ldw	r17,4(sp)
100077c4:	dc000017 	ldw	r16,0(sp)
100077c8:	dec00404 	addi	sp,sp,16
100077cc:	f800283a 	ret
100077d0:	8009883a 	mov	r4,r16
100077d4:	01440074 	movhi	r5,4097
100077d8:	294a0604 	addi	r5,r5,10264
100077dc:	000a4980 	call	1000a498 <strcmp>
100077e0:	103ff126 	beq	r2,zero,100077a8 <__alt_data_end+0xf80077a8>
100077e4:	0005883a 	mov	r2,zero
100077e8:	003ff306 	br	100077b8 <__alt_data_end+0xf80077b8>
100077ec:	00840074 	movhi	r2,4097
100077f0:	108ac604 	addi	r2,r2,11032
100077f4:	dfc00317 	ldw	ra,12(sp)
100077f8:	dc800217 	ldw	r18,8(sp)
100077fc:	dc400117 	ldw	r17,4(sp)
10007800:	dc000017 	ldw	r16,0(sp)
10007804:	dec00404 	addi	sp,sp,16
10007808:	f800283a 	ret

1000780c <__locale_charset>:
1000780c:	00840074 	movhi	r2,4097
10007810:	108ac704 	addi	r2,r2,11036
10007814:	f800283a 	ret

10007818 <_localeconv_r>:
10007818:	00840074 	movhi	r2,4097
1000781c:	108acb04 	addi	r2,r2,11052
10007820:	f800283a 	ret

10007824 <setlocale>:
10007824:	00c40074 	movhi	r3,4097
10007828:	18d2a404 	addi	r3,r3,19088
1000782c:	2005883a 	mov	r2,r4
10007830:	19000017 	ldw	r4,0(r3)
10007834:	280d883a 	mov	r6,r5
10007838:	100b883a 	mov	r5,r2
1000783c:	00077701 	jmpi	10007770 <_setlocale_r>

10007840 <localeconv>:
10007840:	00840074 	movhi	r2,4097
10007844:	108acb04 	addi	r2,r2,11052
10007848:	f800283a 	ret

1000784c <__smakebuf_r>:
1000784c:	2880030b 	ldhu	r2,12(r5)
10007850:	deffed04 	addi	sp,sp,-76
10007854:	dc401015 	stw	r17,64(sp)
10007858:	10c0008c 	andi	r3,r2,2
1000785c:	18ffffcc 	andi	r3,r3,65535
10007860:	18e0001c 	xori	r3,r3,32768
10007864:	dc000f15 	stw	r16,60(sp)
10007868:	dfc01215 	stw	ra,72(sp)
1000786c:	dc801115 	stw	r18,68(sp)
10007870:	18e00004 	addi	r3,r3,-32768
10007874:	2821883a 	mov	r16,r5
10007878:	2023883a 	mov	r17,r4
1000787c:	1800381e 	bne	r3,zero,10007960 <__smakebuf_r+0x114>
10007880:	2940038f 	ldh	r5,14(r5)
10007884:	28002d16 	blt	r5,zero,1000793c <__smakebuf_r+0xf0>
10007888:	d80d883a 	mov	r6,sp
1000788c:	000cec00 	call	1000cec0 <_fstat_r>
10007890:	10002916 	blt	r2,zero,10007938 <__smakebuf_r+0xec>
10007894:	d8800117 	ldw	r2,4(sp)
10007898:	00e00014 	movui	r3,32768
1000789c:	10bc000c 	andi	r2,r2,61440
100078a0:	10c03c26 	beq	r2,r3,10007994 <__smakebuf_r+0x148>
100078a4:	80c0030b 	ldhu	r3,12(r16)
100078a8:	18c20014 	ori	r3,r3,2048
100078ac:	80c0030d 	sth	r3,12(r16)
100078b0:	00c80004 	movi	r3,8192
100078b4:	10c00c1e 	bne	r2,r3,100078e8 <__smakebuf_r+0x9c>
100078b8:	8140038f 	ldh	r5,14(r16)
100078bc:	8809883a 	mov	r4,r17
100078c0:	000dacc0 	call	1000dacc <_isatty_r>
100078c4:	10000826 	beq	r2,zero,100078e8 <__smakebuf_r+0x9c>
100078c8:	80c0030b 	ldhu	r3,12(r16)
100078cc:	808010c4 	addi	r2,r16,67
100078d0:	80800015 	stw	r2,0(r16)
100078d4:	18c00054 	ori	r3,r3,1
100078d8:	80800415 	stw	r2,16(r16)
100078dc:	00800044 	movi	r2,1
100078e0:	80c0030d 	sth	r3,12(r16)
100078e4:	80800515 	stw	r2,20(r16)
100078e8:	04810004 	movi	r18,1024
100078ec:	8809883a 	mov	r4,r17
100078f0:	900b883a 	mov	r5,r18
100078f4:	00079f40 	call	100079f4 <_malloc_r>
100078f8:	10003026 	beq	r2,zero,100079bc <__smakebuf_r+0x170>
100078fc:	80c0030b 	ldhu	r3,12(r16)
10007900:	01040034 	movhi	r4,4096
10007904:	2119e404 	addi	r4,r4,26512
10007908:	89000f15 	stw	r4,60(r17)
1000790c:	18c02014 	ori	r3,r3,128
10007910:	80c0030d 	sth	r3,12(r16)
10007914:	80800015 	stw	r2,0(r16)
10007918:	80800415 	stw	r2,16(r16)
1000791c:	84800515 	stw	r18,20(r16)
10007920:	dfc01217 	ldw	ra,72(sp)
10007924:	dc801117 	ldw	r18,68(sp)
10007928:	dc401017 	ldw	r17,64(sp)
1000792c:	dc000f17 	ldw	r16,60(sp)
10007930:	dec01304 	addi	sp,sp,76
10007934:	f800283a 	ret
10007938:	8080030b 	ldhu	r2,12(r16)
1000793c:	10c0200c 	andi	r3,r2,128
10007940:	18ffffcc 	andi	r3,r3,65535
10007944:	18e0001c 	xori	r3,r3,32768
10007948:	18e00004 	addi	r3,r3,-32768
1000794c:	18000f1e 	bne	r3,zero,1000798c <__smakebuf_r+0x140>
10007950:	04810004 	movi	r18,1024
10007954:	10820014 	ori	r2,r2,2048
10007958:	8080030d 	sth	r2,12(r16)
1000795c:	003fe306 	br	100078ec <__alt_data_end+0xf80078ec>
10007960:	288010c4 	addi	r2,r5,67
10007964:	28800015 	stw	r2,0(r5)
10007968:	28800415 	stw	r2,16(r5)
1000796c:	00800044 	movi	r2,1
10007970:	28800515 	stw	r2,20(r5)
10007974:	dfc01217 	ldw	ra,72(sp)
10007978:	dc801117 	ldw	r18,68(sp)
1000797c:	dc401017 	ldw	r17,64(sp)
10007980:	dc000f17 	ldw	r16,60(sp)
10007984:	dec01304 	addi	sp,sp,76
10007988:	f800283a 	ret
1000798c:	04801004 	movi	r18,64
10007990:	003ff006 	br	10007954 <__alt_data_end+0xf8007954>
10007994:	81000a17 	ldw	r4,40(r16)
10007998:	00c40074 	movhi	r3,4097
1000799c:	18e90d04 	addi	r3,r3,-23500
100079a0:	20ffc01e 	bne	r4,r3,100078a4 <__alt_data_end+0xf80078a4>
100079a4:	8080030b 	ldhu	r2,12(r16)
100079a8:	00c10004 	movi	r3,1024
100079ac:	80c01315 	stw	r3,76(r16)
100079b0:	10c4b03a 	or	r2,r2,r3
100079b4:	8080030d 	sth	r2,12(r16)
100079b8:	003fcb06 	br	100078e8 <__alt_data_end+0xf80078e8>
100079bc:	8080030b 	ldhu	r2,12(r16)
100079c0:	10c0800c 	andi	r3,r2,512
100079c4:	18ffffcc 	andi	r3,r3,65535
100079c8:	18e0001c 	xori	r3,r3,32768
100079cc:	18e00004 	addi	r3,r3,-32768
100079d0:	183fd31e 	bne	r3,zero,10007920 <__alt_data_end+0xf8007920>
100079d4:	10800094 	ori	r2,r2,2
100079d8:	80c010c4 	addi	r3,r16,67
100079dc:	8080030d 	sth	r2,12(r16)
100079e0:	00800044 	movi	r2,1
100079e4:	80c00015 	stw	r3,0(r16)
100079e8:	80c00415 	stw	r3,16(r16)
100079ec:	80800515 	stw	r2,20(r16)
100079f0:	003fcb06 	br	10007920 <__alt_data_end+0xf8007920>

100079f4 <_malloc_r>:
100079f4:	defff604 	addi	sp,sp,-40
100079f8:	dc800215 	stw	r18,8(sp)
100079fc:	dfc00915 	stw	ra,36(sp)
10007a00:	df000815 	stw	fp,32(sp)
10007a04:	ddc00715 	stw	r23,28(sp)
10007a08:	dd800615 	stw	r22,24(sp)
10007a0c:	dd400515 	stw	r21,20(sp)
10007a10:	dd000415 	stw	r20,16(sp)
10007a14:	dcc00315 	stw	r19,12(sp)
10007a18:	dc400115 	stw	r17,4(sp)
10007a1c:	dc000015 	stw	r16,0(sp)
10007a20:	288002c4 	addi	r2,r5,11
10007a24:	00c00584 	movi	r3,22
10007a28:	2025883a 	mov	r18,r4
10007a2c:	18802b2e 	bgeu	r3,r2,10007adc <_malloc_r+0xe8>
10007a30:	047ffe04 	movi	r17,-8
10007a34:	1462703a 	and	r17,r2,r17
10007a38:	88002a16 	blt	r17,zero,10007ae4 <_malloc_r+0xf0>
10007a3c:	89402936 	bltu	r17,r5,10007ae4 <_malloc_r+0xf0>
10007a40:	9009883a 	mov	r4,r18
10007a44:	00106d00 	call	100106d0 <__malloc_lock>
10007a48:	00807dc4 	movi	r2,503
10007a4c:	14402936 	bltu	r2,r17,10007af4 <_malloc_r+0x100>
10007a50:	8808d0fa 	srli	r4,r17,3
10007a54:	04c40074 	movhi	r19,4097
10007a58:	9ccd1404 	addi	r19,r19,13392
10007a5c:	2105883a 	add	r2,r4,r4
10007a60:	1085883a 	add	r2,r2,r2
10007a64:	1085883a 	add	r2,r2,r2
10007a68:	9885883a 	add	r2,r19,r2
10007a6c:	14000317 	ldw	r16,12(r2)
10007a70:	80815526 	beq	r16,r2,10007fc8 <_malloc_r+0x5d4>
10007a74:	81000117 	ldw	r4,4(r16)
10007a78:	00bfff04 	movi	r2,-4
10007a7c:	80c00317 	ldw	r3,12(r16)
10007a80:	2084703a 	and	r2,r4,r2
10007a84:	8085883a 	add	r2,r16,r2
10007a88:	11800117 	ldw	r6,4(r2)
10007a8c:	81400217 	ldw	r5,8(r16)
10007a90:	9009883a 	mov	r4,r18
10007a94:	31800054 	ori	r6,r6,1
10007a98:	11800115 	stw	r6,4(r2)
10007a9c:	28c00315 	stw	r3,12(r5)
10007aa0:	19400215 	stw	r5,8(r3)
10007aa4:	00106f00 	call	100106f0 <__malloc_unlock>
10007aa8:	80800204 	addi	r2,r16,8
10007aac:	dfc00917 	ldw	ra,36(sp)
10007ab0:	df000817 	ldw	fp,32(sp)
10007ab4:	ddc00717 	ldw	r23,28(sp)
10007ab8:	dd800617 	ldw	r22,24(sp)
10007abc:	dd400517 	ldw	r21,20(sp)
10007ac0:	dd000417 	ldw	r20,16(sp)
10007ac4:	dcc00317 	ldw	r19,12(sp)
10007ac8:	dc800217 	ldw	r18,8(sp)
10007acc:	dc400117 	ldw	r17,4(sp)
10007ad0:	dc000017 	ldw	r16,0(sp)
10007ad4:	dec00a04 	addi	sp,sp,40
10007ad8:	f800283a 	ret
10007adc:	04400404 	movi	r17,16
10007ae0:	897fd72e 	bgeu	r17,r5,10007a40 <__alt_data_end+0xf8007a40>
10007ae4:	00800304 	movi	r2,12
10007ae8:	90800015 	stw	r2,0(r18)
10007aec:	0005883a 	mov	r2,zero
10007af0:	003fee06 	br	10007aac <__alt_data_end+0xf8007aac>
10007af4:	8808d27a 	srli	r4,r17,9
10007af8:	20007126 	beq	r4,zero,10007cc0 <_malloc_r+0x2cc>
10007afc:	00800104 	movi	r2,4
10007b00:	1100eb36 	bltu	r2,r4,10007eb0 <_malloc_r+0x4bc>
10007b04:	8808d1ba 	srli	r4,r17,6
10007b08:	21000e04 	addi	r4,r4,56
10007b0c:	210b883a 	add	r5,r4,r4
10007b10:	294b883a 	add	r5,r5,r5
10007b14:	294b883a 	add	r5,r5,r5
10007b18:	04c40074 	movhi	r19,4097
10007b1c:	9ccd1404 	addi	r19,r19,13392
10007b20:	994b883a 	add	r5,r19,r5
10007b24:	2c000317 	ldw	r16,12(r5)
10007b28:	2c000e26 	beq	r5,r16,10007b64 <_malloc_r+0x170>
10007b2c:	80c00117 	ldw	r3,4(r16)
10007b30:	01ffff04 	movi	r7,-4
10007b34:	018003c4 	movi	r6,15
10007b38:	19c6703a 	and	r3,r3,r7
10007b3c:	1c45c83a 	sub	r2,r3,r17
10007b40:	30800716 	blt	r6,r2,10007b60 <_malloc_r+0x16c>
10007b44:	1000610e 	bge	r2,zero,10007ccc <_malloc_r+0x2d8>
10007b48:	84000317 	ldw	r16,12(r16)
10007b4c:	2c000526 	beq	r5,r16,10007b64 <_malloc_r+0x170>
10007b50:	80c00117 	ldw	r3,4(r16)
10007b54:	19c6703a 	and	r3,r3,r7
10007b58:	1c45c83a 	sub	r2,r3,r17
10007b5c:	30bff90e 	bge	r6,r2,10007b44 <__alt_data_end+0xf8007b44>
10007b60:	213fffc4 	addi	r4,r4,-1
10007b64:	21000044 	addi	r4,r4,1
10007b68:	9c000417 	ldw	r16,16(r19)
10007b6c:	00c40074 	movhi	r3,4097
10007b70:	18cd1404 	addi	r3,r3,13392
10007b74:	1a400204 	addi	r9,r3,8
10007b78:	8240ff26 	beq	r16,r9,10007f78 <_malloc_r+0x584>
10007b7c:	81400117 	ldw	r5,4(r16)
10007b80:	00bfff04 	movi	r2,-4
10007b84:	018003c4 	movi	r6,15
10007b88:	2884703a 	and	r2,r5,r2
10007b8c:	144bc83a 	sub	r5,r2,r17
10007b90:	3140ea16 	blt	r6,r5,10007f3c <_malloc_r+0x548>
10007b94:	1a400515 	stw	r9,20(r3)
10007b98:	1a400415 	stw	r9,16(r3)
10007b9c:	2800570e 	bge	r5,zero,10007cfc <_malloc_r+0x308>
10007ba0:	01407fc4 	movi	r5,511
10007ba4:	2880ca36 	bltu	r5,r2,10007ed0 <_malloc_r+0x4dc>
10007ba8:	1004d0fa 	srli	r2,r2,3
10007bac:	02000044 	movi	r8,1
10007bb0:	19c00117 	ldw	r7,4(r3)
10007bb4:	108b883a 	add	r5,r2,r2
10007bb8:	294b883a 	add	r5,r5,r5
10007bbc:	1005d0ba 	srai	r2,r2,2
10007bc0:	294b883a 	add	r5,r5,r5
10007bc4:	28cb883a 	add	r5,r5,r3
10007bc8:	29800217 	ldw	r6,8(r5)
10007bcc:	4084983a 	sll	r2,r8,r2
10007bd0:	81400315 	stw	r5,12(r16)
10007bd4:	81800215 	stw	r6,8(r16)
10007bd8:	11c4b03a 	or	r2,r2,r7
10007bdc:	18800115 	stw	r2,4(r3)
10007be0:	2c000215 	stw	r16,8(r5)
10007be4:	34000315 	stw	r16,12(r6)
10007be8:	200bd0ba 	srai	r5,r4,2
10007bec:	00c00044 	movi	r3,1
10007bf0:	194a983a 	sll	r5,r3,r5
10007bf4:	11404936 	bltu	r2,r5,10007d1c <_malloc_r+0x328>
10007bf8:	1146703a 	and	r3,r2,r5
10007bfc:	18000a1e 	bne	r3,zero,10007c28 <_malloc_r+0x234>
10007c00:	00ffff04 	movi	r3,-4
10007c04:	294b883a 	add	r5,r5,r5
10007c08:	20c8703a 	and	r4,r4,r3
10007c0c:	1146703a 	and	r3,r2,r5
10007c10:	21000104 	addi	r4,r4,4
10007c14:	1800041e 	bne	r3,zero,10007c28 <_malloc_r+0x234>
10007c18:	294b883a 	add	r5,r5,r5
10007c1c:	1146703a 	and	r3,r2,r5
10007c20:	21000104 	addi	r4,r4,4
10007c24:	183ffc26 	beq	r3,zero,10007c18 <__alt_data_end+0xf8007c18>
10007c28:	023fff04 	movi	r8,-4
10007c2c:	01c003c4 	movi	r7,15
10007c30:	2105883a 	add	r2,r4,r4
10007c34:	1085883a 	add	r2,r2,r2
10007c38:	1085883a 	add	r2,r2,r2
10007c3c:	9899883a 	add	r12,r19,r2
10007c40:	62800304 	addi	r10,r12,12
10007c44:	2017883a 	mov	r11,r4
10007c48:	54000017 	ldw	r16,0(r10)
10007c4c:	51bffd04 	addi	r6,r10,-12
10007c50:	8180041e 	bne	r16,r6,10007c64 <_malloc_r+0x270>
10007c54:	0000ca06 	br	10007f80 <_malloc_r+0x58c>
10007c58:	10001c0e 	bge	r2,zero,10007ccc <_malloc_r+0x2d8>
10007c5c:	84000317 	ldw	r16,12(r16)
10007c60:	8180c726 	beq	r16,r6,10007f80 <_malloc_r+0x58c>
10007c64:	80c00117 	ldw	r3,4(r16)
10007c68:	1a06703a 	and	r3,r3,r8
10007c6c:	1c45c83a 	sub	r2,r3,r17
10007c70:	38bff90e 	bge	r7,r2,10007c58 <__alt_data_end+0xf8007c58>
10007c74:	81000317 	ldw	r4,12(r16)
10007c78:	81400217 	ldw	r5,8(r16)
10007c7c:	8447883a 	add	r3,r16,r17
10007c80:	8c400054 	ori	r17,r17,1
10007c84:	29000315 	stw	r4,12(r5)
10007c88:	21400215 	stw	r5,8(r4)
10007c8c:	84400115 	stw	r17,4(r16)
10007c90:	1889883a 	add	r4,r3,r2
10007c94:	11400054 	ori	r5,r2,1
10007c98:	98c00515 	stw	r3,20(r19)
10007c9c:	98c00415 	stw	r3,16(r19)
10007ca0:	20800015 	stw	r2,0(r4)
10007ca4:	1a400315 	stw	r9,12(r3)
10007ca8:	1a400215 	stw	r9,8(r3)
10007cac:	19400115 	stw	r5,4(r3)
10007cb0:	9009883a 	mov	r4,r18
10007cb4:	00106f00 	call	100106f0 <__malloc_unlock>
10007cb8:	80800204 	addi	r2,r16,8
10007cbc:	003f7b06 	br	10007aac <__alt_data_end+0xf8007aac>
10007cc0:	8808d0fa 	srli	r4,r17,3
10007cc4:	210b883a 	add	r5,r4,r4
10007cc8:	003f9106 	br	10007b10 <__alt_data_end+0xf8007b10>
10007ccc:	80c7883a 	add	r3,r16,r3
10007cd0:	19400117 	ldw	r5,4(r3)
10007cd4:	80800317 	ldw	r2,12(r16)
10007cd8:	81000217 	ldw	r4,8(r16)
10007cdc:	29400054 	ori	r5,r5,1
10007ce0:	19400115 	stw	r5,4(r3)
10007ce4:	20800315 	stw	r2,12(r4)
10007ce8:	11000215 	stw	r4,8(r2)
10007cec:	9009883a 	mov	r4,r18
10007cf0:	00106f00 	call	100106f0 <__malloc_unlock>
10007cf4:	80800204 	addi	r2,r16,8
10007cf8:	003f6c06 	br	10007aac <__alt_data_end+0xf8007aac>
10007cfc:	8085883a 	add	r2,r16,r2
10007d00:	10c00117 	ldw	r3,4(r2)
10007d04:	9009883a 	mov	r4,r18
10007d08:	18c00054 	ori	r3,r3,1
10007d0c:	10c00115 	stw	r3,4(r2)
10007d10:	00106f00 	call	100106f0 <__malloc_unlock>
10007d14:	80800204 	addi	r2,r16,8
10007d18:	003f6406 	br	10007aac <__alt_data_end+0xf8007aac>
10007d1c:	9c000217 	ldw	r16,8(r19)
10007d20:	00bfff04 	movi	r2,-4
10007d24:	85400117 	ldw	r21,4(r16)
10007d28:	a8aa703a 	and	r21,r21,r2
10007d2c:	ac400336 	bltu	r21,r17,10007d3c <_malloc_r+0x348>
10007d30:	ac45c83a 	sub	r2,r21,r17
10007d34:	00c003c4 	movi	r3,15
10007d38:	18805316 	blt	r3,r2,10007e88 <_malloc_r+0x494>
10007d3c:	d5e74017 	ldw	r23,-25344(gp)
10007d40:	d0e00417 	ldw	r3,-32752(gp)
10007d44:	00bfffc4 	movi	r2,-1
10007d48:	8579883a 	add	fp,r16,r21
10007d4c:	8def883a 	add	r23,r17,r23
10007d50:	1880d226 	beq	r3,r2,1000809c <_malloc_r+0x6a8>
10007d54:	bdc403c4 	addi	r23,r23,4111
10007d58:	00bc0004 	movi	r2,-4096
10007d5c:	b8ae703a 	and	r23,r23,r2
10007d60:	9009883a 	mov	r4,r18
10007d64:	b80b883a 	mov	r5,r23
10007d68:	000a1640 	call	1000a164 <_sbrk_r>
10007d6c:	1029883a 	mov	r20,r2
10007d70:	00bfffc4 	movi	r2,-1
10007d74:	a080d126 	beq	r20,r2,100080bc <_malloc_r+0x6c8>
10007d78:	a7009f36 	bltu	r20,fp,10007ff8 <_malloc_r+0x604>
10007d7c:	05840074 	movhi	r22,4097
10007d80:	b599ea04 	addi	r22,r22,26536
10007d84:	b0800017 	ldw	r2,0(r22)
10007d88:	b885883a 	add	r2,r23,r2
10007d8c:	b0800015 	stw	r2,0(r22)
10007d90:	e500cf26 	beq	fp,r20,100080d0 <_malloc_r+0x6dc>
10007d94:	d1200417 	ldw	r4,-32752(gp)
10007d98:	00ffffc4 	movi	r3,-1
10007d9c:	20c0e026 	beq	r4,r3,10008120 <_malloc_r+0x72c>
10007da0:	a739c83a 	sub	fp,r20,fp
10007da4:	1705883a 	add	r2,r2,fp
10007da8:	b0800015 	stw	r2,0(r22)
10007dac:	a08001cc 	andi	r2,r20,7
10007db0:	1000a526 	beq	r2,zero,10008048 <_malloc_r+0x654>
10007db4:	a0a9c83a 	sub	r20,r20,r2
10007db8:	00c40204 	movi	r3,4104
10007dbc:	a5000204 	addi	r20,r20,8
10007dc0:	1885c83a 	sub	r2,r3,r2
10007dc4:	a5c7883a 	add	r3,r20,r23
10007dc8:	18c3ffcc 	andi	r3,r3,4095
10007dcc:	10efc83a 	sub	r23,r2,r3
10007dd0:	9009883a 	mov	r4,r18
10007dd4:	b80b883a 	mov	r5,r23
10007dd8:	000a1640 	call	1000a164 <_sbrk_r>
10007ddc:	00ffffc4 	movi	r3,-1
10007de0:	10c0cc26 	beq	r2,r3,10008114 <_malloc_r+0x720>
10007de4:	1505c83a 	sub	r2,r2,r20
10007de8:	b887883a 	add	r3,r23,r2
10007dec:	18c00054 	ori	r3,r3,1
10007df0:	b0800017 	ldw	r2,0(r22)
10007df4:	9d000215 	stw	r20,8(r19)
10007df8:	a0c00115 	stw	r3,4(r20)
10007dfc:	b885883a 	add	r2,r23,r2
10007e00:	b0800015 	stw	r2,0(r22)
10007e04:	84c00e26 	beq	r16,r19,10007e40 <_malloc_r+0x44c>
10007e08:	00c003c4 	movi	r3,15
10007e0c:	1d40902e 	bgeu	r3,r21,10008050 <_malloc_r+0x65c>
10007e10:	ad7ffd04 	addi	r21,r21,-12
10007e14:	013ffe04 	movi	r4,-8
10007e18:	a908703a 	and	r4,r21,r4
10007e1c:	810b883a 	add	r5,r16,r4
10007e20:	01800144 	movi	r6,5
10007e24:	29800115 	stw	r6,4(r5)
10007e28:	29800215 	stw	r6,8(r5)
10007e2c:	81400117 	ldw	r5,4(r16)
10007e30:	2940004c 	andi	r5,r5,1
10007e34:	214ab03a 	or	r5,r4,r5
10007e38:	81400115 	stw	r5,4(r16)
10007e3c:	1900ae36 	bltu	r3,r4,100080f8 <_malloc_r+0x704>
10007e40:	d0e73f17 	ldw	r3,-25348(gp)
10007e44:	1880012e 	bgeu	r3,r2,10007e4c <_malloc_r+0x458>
10007e48:	d0a73f15 	stw	r2,-25348(gp)
10007e4c:	d0e73e17 	ldw	r3,-25352(gp)
10007e50:	9c000217 	ldw	r16,8(r19)
10007e54:	1880012e 	bgeu	r3,r2,10007e5c <_malloc_r+0x468>
10007e58:	d0a73e15 	stw	r2,-25352(gp)
10007e5c:	80c00117 	ldw	r3,4(r16)
10007e60:	00bfff04 	movi	r2,-4
10007e64:	1886703a 	and	r3,r3,r2
10007e68:	1c45c83a 	sub	r2,r3,r17
10007e6c:	1c400236 	bltu	r3,r17,10007e78 <_malloc_r+0x484>
10007e70:	00c003c4 	movi	r3,15
10007e74:	18800416 	blt	r3,r2,10007e88 <_malloc_r+0x494>
10007e78:	9009883a 	mov	r4,r18
10007e7c:	00106f00 	call	100106f0 <__malloc_unlock>
10007e80:	0005883a 	mov	r2,zero
10007e84:	003f0906 	br	10007aac <__alt_data_end+0xf8007aac>
10007e88:	88c00054 	ori	r3,r17,1
10007e8c:	10800054 	ori	r2,r2,1
10007e90:	80c00115 	stw	r3,4(r16)
10007e94:	8463883a 	add	r17,r16,r17
10007e98:	88800115 	stw	r2,4(r17)
10007e9c:	9009883a 	mov	r4,r18
10007ea0:	9c400215 	stw	r17,8(r19)
10007ea4:	00106f00 	call	100106f0 <__malloc_unlock>
10007ea8:	80800204 	addi	r2,r16,8
10007eac:	003eff06 	br	10007aac <__alt_data_end+0xf8007aac>
10007eb0:	00800504 	movi	r2,20
10007eb4:	1100492e 	bgeu	r2,r4,10007fdc <_malloc_r+0x5e8>
10007eb8:	00801504 	movi	r2,84
10007ebc:	11005c36 	bltu	r2,r4,10008030 <_malloc_r+0x63c>
10007ec0:	8808d33a 	srli	r4,r17,12
10007ec4:	21001b84 	addi	r4,r4,110
10007ec8:	210b883a 	add	r5,r4,r4
10007ecc:	003f1006 	br	10007b10 <__alt_data_end+0xf8007b10>
10007ed0:	1006d27a 	srli	r3,r2,9
10007ed4:	01400104 	movi	r5,4
10007ed8:	28c0432e 	bgeu	r5,r3,10007fe8 <_malloc_r+0x5f4>
10007edc:	01400504 	movi	r5,20
10007ee0:	28c07036 	bltu	r5,r3,100080a4 <_malloc_r+0x6b0>
10007ee4:	194016c4 	addi	r5,r3,91
10007ee8:	294d883a 	add	r6,r5,r5
10007eec:	318d883a 	add	r6,r6,r6
10007ef0:	318d883a 	add	r6,r6,r6
10007ef4:	998d883a 	add	r6,r19,r6
10007ef8:	30c00217 	ldw	r3,8(r6)
10007efc:	01c40074 	movhi	r7,4097
10007f00:	39cd1404 	addi	r7,r7,13392
10007f04:	19805726 	beq	r3,r6,10008064 <_malloc_r+0x670>
10007f08:	01ffff04 	movi	r7,-4
10007f0c:	19400117 	ldw	r5,4(r3)
10007f10:	29ca703a 	and	r5,r5,r7
10007f14:	1140022e 	bgeu	r2,r5,10007f20 <_malloc_r+0x52c>
10007f18:	18c00217 	ldw	r3,8(r3)
10007f1c:	30fffb1e 	bne	r6,r3,10007f0c <__alt_data_end+0xf8007f0c>
10007f20:	19400317 	ldw	r5,12(r3)
10007f24:	98800117 	ldw	r2,4(r19)
10007f28:	81400315 	stw	r5,12(r16)
10007f2c:	80c00215 	stw	r3,8(r16)
10007f30:	2c000215 	stw	r16,8(r5)
10007f34:	1c000315 	stw	r16,12(r3)
10007f38:	003f2b06 	br	10007be8 <__alt_data_end+0xf8007be8>
10007f3c:	8445883a 	add	r2,r16,r17
10007f40:	8c400054 	ori	r17,r17,1
10007f44:	18800515 	stw	r2,20(r3)
10007f48:	18800415 	stw	r2,16(r3)
10007f4c:	29000054 	ori	r4,r5,1
10007f50:	1147883a 	add	r3,r2,r5
10007f54:	84400115 	stw	r17,4(r16)
10007f58:	11000115 	stw	r4,4(r2)
10007f5c:	12400315 	stw	r9,12(r2)
10007f60:	12400215 	stw	r9,8(r2)
10007f64:	19400015 	stw	r5,0(r3)
10007f68:	9009883a 	mov	r4,r18
10007f6c:	00106f00 	call	100106f0 <__malloc_unlock>
10007f70:	80800204 	addi	r2,r16,8
10007f74:	003ecd06 	br	10007aac <__alt_data_end+0xf8007aac>
10007f78:	18800117 	ldw	r2,4(r3)
10007f7c:	003f1a06 	br	10007be8 <__alt_data_end+0xf8007be8>
10007f80:	5ac00044 	addi	r11,r11,1
10007f84:	588000cc 	andi	r2,r11,3
10007f88:	52800204 	addi	r10,r10,8
10007f8c:	103f2e1e 	bne	r2,zero,10007c48 <__alt_data_end+0xf8007c48>
10007f90:	20c000cc 	andi	r3,r4,3
10007f94:	60bffe04 	addi	r2,r12,-8
10007f98:	18006f26 	beq	r3,zero,10008158 <_malloc_r+0x764>
10007f9c:	63000017 	ldw	r12,0(r12)
10007fa0:	213fffc4 	addi	r4,r4,-1
10007fa4:	60bffa26 	beq	r12,r2,10007f90 <__alt_data_end+0xf8007f90>
10007fa8:	98800117 	ldw	r2,4(r19)
10007fac:	294b883a 	add	r5,r5,r5
10007fb0:	117f5a36 	bltu	r2,r5,10007d1c <__alt_data_end+0xf8007d1c>
10007fb4:	283f5926 	beq	r5,zero,10007d1c <__alt_data_end+0xf8007d1c>
10007fb8:	1146703a 	and	r3,r2,r5
10007fbc:	18001626 	beq	r3,zero,10008018 <_malloc_r+0x624>
10007fc0:	5809883a 	mov	r4,r11
10007fc4:	003f1a06 	br	10007c30 <__alt_data_end+0xf8007c30>
10007fc8:	80800204 	addi	r2,r16,8
10007fcc:	84000517 	ldw	r16,20(r16)
10007fd0:	143ea81e 	bne	r2,r16,10007a74 <__alt_data_end+0xf8007a74>
10007fd4:	21000084 	addi	r4,r4,2
10007fd8:	003ee306 	br	10007b68 <__alt_data_end+0xf8007b68>
10007fdc:	210016c4 	addi	r4,r4,91
10007fe0:	210b883a 	add	r5,r4,r4
10007fe4:	003eca06 	br	10007b10 <__alt_data_end+0xf8007b10>
10007fe8:	100ad1ba 	srli	r5,r2,6
10007fec:	29400e04 	addi	r5,r5,56
10007ff0:	294d883a 	add	r6,r5,r5
10007ff4:	003fbd06 	br	10007eec <__alt_data_end+0xf8007eec>
10007ff8:	84ff6026 	beq	r16,r19,10007d7c <__alt_data_end+0xf8007d7c>
10007ffc:	00840074 	movhi	r2,4097
10008000:	108d1404 	addi	r2,r2,13392
10008004:	14000217 	ldw	r16,8(r2)
10008008:	00bfff04 	movi	r2,-4
1000800c:	80c00117 	ldw	r3,4(r16)
10008010:	1886703a 	and	r3,r3,r2
10008014:	003f9406 	br	10007e68 <__alt_data_end+0xf8007e68>
10008018:	294b883a 	add	r5,r5,r5
1000801c:	1146703a 	and	r3,r2,r5
10008020:	5ac00104 	addi	r11,r11,4
10008024:	183ffc26 	beq	r3,zero,10008018 <__alt_data_end+0xf8008018>
10008028:	5809883a 	mov	r4,r11
1000802c:	003f0006 	br	10007c30 <__alt_data_end+0xf8007c30>
10008030:	00805504 	movi	r2,340
10008034:	11001336 	bltu	r2,r4,10008084 <_malloc_r+0x690>
10008038:	8808d3fa 	srli	r4,r17,15
1000803c:	21001dc4 	addi	r4,r4,119
10008040:	210b883a 	add	r5,r4,r4
10008044:	003eb206 	br	10007b10 <__alt_data_end+0xf8007b10>
10008048:	00840004 	movi	r2,4096
1000804c:	003f5d06 	br	10007dc4 <__alt_data_end+0xf8007dc4>
10008050:	00800044 	movi	r2,1
10008054:	a0800115 	stw	r2,4(r20)
10008058:	a021883a 	mov	r16,r20
1000805c:	0007883a 	mov	r3,zero
10008060:	003f8106 	br	10007e68 <__alt_data_end+0xf8007e68>
10008064:	280bd0ba 	srai	r5,r5,2
10008068:	01800044 	movi	r6,1
1000806c:	38800117 	ldw	r2,4(r7)
10008070:	314c983a 	sll	r6,r6,r5
10008074:	180b883a 	mov	r5,r3
10008078:	3084b03a 	or	r2,r6,r2
1000807c:	38800115 	stw	r2,4(r7)
10008080:	003fa906 	br	10007f28 <__alt_data_end+0xf8007f28>
10008084:	00815504 	movi	r2,1364
10008088:	11001836 	bltu	r2,r4,100080ec <_malloc_r+0x6f8>
1000808c:	8808d4ba 	srli	r4,r17,18
10008090:	21001f04 	addi	r4,r4,124
10008094:	210b883a 	add	r5,r4,r4
10008098:	003e9d06 	br	10007b10 <__alt_data_end+0xf8007b10>
1000809c:	bdc00404 	addi	r23,r23,16
100080a0:	003f2f06 	br	10007d60 <__alt_data_end+0xf8007d60>
100080a4:	01401504 	movi	r5,84
100080a8:	28c01f36 	bltu	r5,r3,10008128 <_malloc_r+0x734>
100080ac:	100ad33a 	srli	r5,r2,12
100080b0:	29401b84 	addi	r5,r5,110
100080b4:	294d883a 	add	r6,r5,r5
100080b8:	003f8c06 	br	10007eec <__alt_data_end+0xf8007eec>
100080bc:	9c000217 	ldw	r16,8(r19)
100080c0:	00bfff04 	movi	r2,-4
100080c4:	80c00117 	ldw	r3,4(r16)
100080c8:	1886703a 	and	r3,r3,r2
100080cc:	003f6606 	br	10007e68 <__alt_data_end+0xf8007e68>
100080d0:	e0c3ffcc 	andi	r3,fp,4095
100080d4:	183f2f1e 	bne	r3,zero,10007d94 <__alt_data_end+0xf8007d94>
100080d8:	98c00217 	ldw	r3,8(r19)
100080dc:	bd49883a 	add	r4,r23,r21
100080e0:	21000054 	ori	r4,r4,1
100080e4:	19000115 	stw	r4,4(r3)
100080e8:	003f5506 	br	10007e40 <__alt_data_end+0xf8007e40>
100080ec:	01403f04 	movi	r5,252
100080f0:	01001f84 	movi	r4,126
100080f4:	003e8606 	br	10007b10 <__alt_data_end+0xf8007b10>
100080f8:	9009883a 	mov	r4,r18
100080fc:	81400204 	addi	r5,r16,8
10008100:	0006e240 	call	10006e24 <_free_r>
10008104:	00840074 	movhi	r2,4097
10008108:	1099ea04 	addi	r2,r2,26536
1000810c:	10800017 	ldw	r2,0(r2)
10008110:	003f4b06 	br	10007e40 <__alt_data_end+0xf8007e40>
10008114:	00c00044 	movi	r3,1
10008118:	002f883a 	mov	r23,zero
1000811c:	003f3406 	br	10007df0 <__alt_data_end+0xf8007df0>
10008120:	d5200415 	stw	r20,-32752(gp)
10008124:	003f2106 	br	10007dac <__alt_data_end+0xf8007dac>
10008128:	01405504 	movi	r5,340
1000812c:	28c00436 	bltu	r5,r3,10008140 <_malloc_r+0x74c>
10008130:	100ad3fa 	srli	r5,r2,15
10008134:	29401dc4 	addi	r5,r5,119
10008138:	294d883a 	add	r6,r5,r5
1000813c:	003f6b06 	br	10007eec <__alt_data_end+0xf8007eec>
10008140:	01415504 	movi	r5,1364
10008144:	28c00936 	bltu	r5,r3,1000816c <_malloc_r+0x778>
10008148:	100ad4ba 	srli	r5,r2,18
1000814c:	29401f04 	addi	r5,r5,124
10008150:	294d883a 	add	r6,r5,r5
10008154:	003f6506 	br	10007eec <__alt_data_end+0xf8007eec>
10008158:	98800117 	ldw	r2,4(r19)
1000815c:	0146303a 	nor	r3,zero,r5
10008160:	1884703a 	and	r2,r3,r2
10008164:	98800115 	stw	r2,4(r19)
10008168:	003f9006 	br	10007fac <__alt_data_end+0xf8007fac>
1000816c:	01803f04 	movi	r6,252
10008170:	01401f84 	movi	r5,126
10008174:	003f5d06 	br	10007eec <__alt_data_end+0xf8007eec>

10008178 <_mbrtowc_r>:
10008178:	defffc04 	addi	sp,sp,-16
1000817c:	dc000115 	stw	r16,4(sp)
10008180:	dc000417 	ldw	r16,16(sp)
10008184:	dc400215 	stw	r17,8(sp)
10008188:	dfc00315 	stw	ra,12(sp)
1000818c:	dc000015 	stw	r16,0(sp)
10008190:	2023883a 	mov	r17,r4
10008194:	30000b26 	beq	r6,zero,100081c4 <_mbrtowc_r+0x4c>
10008198:	000821c0 	call	1000821c <_mbtowc_r>
1000819c:	00ffffc4 	movi	r3,-1
100081a0:	10c0031e 	bne	r2,r3,100081b0 <_mbrtowc_r+0x38>
100081a4:	80000015 	stw	zero,0(r16)
100081a8:	00c02284 	movi	r3,138
100081ac:	88c00015 	stw	r3,0(r17)
100081b0:	dfc00317 	ldw	ra,12(sp)
100081b4:	dc400217 	ldw	r17,8(sp)
100081b8:	dc000117 	ldw	r16,4(sp)
100081bc:	dec00404 	addi	sp,sp,16
100081c0:	f800283a 	ret
100081c4:	000b883a 	mov	r5,zero
100081c8:	01840074 	movhi	r6,4097
100081cc:	318a0604 	addi	r6,r6,10264
100081d0:	01c00044 	movi	r7,1
100081d4:	000821c0 	call	1000821c <_mbtowc_r>
100081d8:	003ff006 	br	1000819c <__alt_data_end+0xf800819c>

100081dc <mbrtowc>:
100081dc:	00840074 	movhi	r2,4097
100081e0:	1092a404 	addi	r2,r2,19088
100081e4:	2011883a 	mov	r8,r4
100081e8:	11000017 	ldw	r4,0(r2)
100081ec:	defffe04 	addi	sp,sp,-8
100081f0:	2807883a 	mov	r3,r5
100081f4:	3005883a 	mov	r2,r6
100081f8:	d9c00015 	stw	r7,0(sp)
100081fc:	400b883a 	mov	r5,r8
10008200:	180d883a 	mov	r6,r3
10008204:	100f883a 	mov	r7,r2
10008208:	dfc00115 	stw	ra,4(sp)
1000820c:	00081780 	call	10008178 <_mbrtowc_r>
10008210:	dfc00117 	ldw	ra,4(sp)
10008214:	dec00204 	addi	sp,sp,8
10008218:	f800283a 	ret

1000821c <_mbtowc_r>:
1000821c:	deffff04 	addi	sp,sp,-4
10008220:	28000826 	beq	r5,zero,10008244 <_mbtowc_r+0x28>
10008224:	30000926 	beq	r6,zero,1000824c <_mbtowc_r+0x30>
10008228:	38000b26 	beq	r7,zero,10008258 <_mbtowc_r+0x3c>
1000822c:	30800003 	ldbu	r2,0(r6)
10008230:	28800015 	stw	r2,0(r5)
10008234:	30800003 	ldbu	r2,0(r6)
10008238:	1004c03a 	cmpne	r2,r2,zero
1000823c:	dec00104 	addi	sp,sp,4
10008240:	f800283a 	ret
10008244:	d80b883a 	mov	r5,sp
10008248:	303ff71e 	bne	r6,zero,10008228 <__alt_data_end+0xf8008228>
1000824c:	0005883a 	mov	r2,zero
10008250:	dec00104 	addi	sp,sp,4
10008254:	f800283a 	ret
10008258:	00bfff84 	movi	r2,-2
1000825c:	003ff706 	br	1000823c <__alt_data_end+0xf800823c>

10008260 <memchr>:
10008260:	008000c4 	movi	r2,3
10008264:	29403fcc 	andi	r5,r5,255
10008268:	1180282e 	bgeu	r2,r6,1000830c <memchr+0xac>
1000826c:	2086703a 	and	r3,r4,r2
10008270:	1800351e 	bne	r3,zero,10008348 <memchr+0xe8>
10008274:	2816923a 	slli	r11,r5,8
10008278:	2093883a 	add	r9,r4,r2
1000827c:	22000084 	addi	r8,r4,2
10008280:	5957883a 	add	r11,r11,r5
10008284:	5816923a 	slli	r11,r11,8
10008288:	20c00044 	addi	r3,r4,1
1000828c:	037fbff4 	movhi	r13,65279
10008290:	6b7fbfc4 	addi	r13,r13,-257
10008294:	5957883a 	add	r11,r11,r5
10008298:	5816923a 	slli	r11,r11,8
1000829c:	03202074 	movhi	r12,32897
100082a0:	63202004 	addi	r12,r12,-32640
100082a4:	101d883a 	mov	r14,r2
100082a8:	5957883a 	add	r11,r11,r5
100082ac:	21c00017 	ldw	r7,0(r4)
100082b0:	31bfff04 	addi	r6,r6,-4
100082b4:	1805883a 	mov	r2,r3
100082b8:	3acef03a 	xor	r7,r7,r11
100082bc:	3b55883a 	add	r10,r7,r13
100082c0:	01ce303a 	nor	r7,zero,r7
100082c4:	51ce703a 	and	r7,r10,r7
100082c8:	3b0e703a 	and	r7,r7,r12
100082cc:	38000a26 	beq	r7,zero,100082f8 <memchr+0x98>
100082d0:	21c00003 	ldbu	r7,0(r4)
100082d4:	39401e26 	beq	r7,r5,10008350 <memchr+0xf0>
100082d8:	19c00003 	ldbu	r7,0(r3)
100082dc:	39401926 	beq	r7,r5,10008344 <memchr+0xe4>
100082e0:	41c00003 	ldbu	r7,0(r8)
100082e4:	4005883a 	mov	r2,r8
100082e8:	39401626 	beq	r7,r5,10008344 <memchr+0xe4>
100082ec:	49c00003 	ldbu	r7,0(r9)
100082f0:	4805883a 	mov	r2,r9
100082f4:	39401326 	beq	r7,r5,10008344 <memchr+0xe4>
100082f8:	21000104 	addi	r4,r4,4
100082fc:	4a400104 	addi	r9,r9,4
10008300:	42000104 	addi	r8,r8,4
10008304:	18c00104 	addi	r3,r3,4
10008308:	71bfe836 	bltu	r14,r6,100082ac <__alt_data_end+0xf80082ac>
1000830c:	2005883a 	mov	r2,r4
10008310:	30000a26 	beq	r6,zero,1000833c <memchr+0xdc>
10008314:	10c00003 	ldbu	r3,0(r2)
10008318:	19400a26 	beq	r3,r5,10008344 <memchr+0xe4>
1000831c:	10c00044 	addi	r3,r2,1
10008320:	118d883a 	add	r6,r2,r6
10008324:	00000306 	br	10008334 <memchr+0xd4>
10008328:	11000003 	ldbu	r4,0(r2)
1000832c:	18c00044 	addi	r3,r3,1
10008330:	21400426 	beq	r4,r5,10008344 <memchr+0xe4>
10008334:	1805883a 	mov	r2,r3
10008338:	19bffb1e 	bne	r3,r6,10008328 <__alt_data_end+0xf8008328>
1000833c:	0005883a 	mov	r2,zero
10008340:	f800283a 	ret
10008344:	f800283a 	ret
10008348:	2005883a 	mov	r2,r4
1000834c:	003ff106 	br	10008314 <__alt_data_end+0xf8008314>
10008350:	2005883a 	mov	r2,r4
10008354:	f800283a 	ret

10008358 <memcpy>:
10008358:	defffb04 	addi	sp,sp,-20
1000835c:	dc000015 	stw	r16,0(sp)
10008360:	dfc00415 	stw	ra,16(sp)
10008364:	dcc00315 	stw	r19,12(sp)
10008368:	dc800215 	stw	r18,8(sp)
1000836c:	dc400115 	stw	r17,4(sp)
10008370:	00c003c4 	movi	r3,15
10008374:	2021883a 	mov	r16,r4
10008378:	3005883a 	mov	r2,r6
1000837c:	1980032e 	bgeu	r3,r6,1000838c <memcpy+0x34>
10008380:	2906b03a 	or	r3,r5,r4
10008384:	18c000cc 	andi	r3,r3,3
10008388:	18001026 	beq	r3,zero,100083cc <memcpy+0x74>
1000838c:	8007883a 	mov	r3,r16
10008390:	288f883a 	add	r7,r5,r2
10008394:	10000526 	beq	r2,zero,100083ac <memcpy+0x54>
10008398:	29800003 	ldbu	r6,0(r5)
1000839c:	18c00044 	addi	r3,r3,1
100083a0:	29400044 	addi	r5,r5,1
100083a4:	19bfffc5 	stb	r6,-1(r3)
100083a8:	29fffb1e 	bne	r5,r7,10008398 <__alt_data_end+0xf8008398>
100083ac:	8005883a 	mov	r2,r16
100083b0:	dfc00417 	ldw	ra,16(sp)
100083b4:	dcc00317 	ldw	r19,12(sp)
100083b8:	dc800217 	ldw	r18,8(sp)
100083bc:	dc400117 	ldw	r17,4(sp)
100083c0:	dc000017 	ldw	r16,0(sp)
100083c4:	dec00504 	addi	sp,sp,20
100083c8:	f800283a 	ret
100083cc:	32bffc04 	addi	r10,r6,-16
100083d0:	5014d13a 	srli	r10,r10,4
100083d4:	20800404 	addi	r2,r4,16
100083d8:	2007883a 	mov	r3,r4
100083dc:	5008913a 	slli	r4,r10,4
100083e0:	280f883a 	mov	r7,r5
100083e4:	1105883a 	add	r2,r2,r4
100083e8:	3a000017 	ldw	r8,0(r7)
100083ec:	18c00404 	addi	r3,r3,16
100083f0:	39c00404 	addi	r7,r7,16
100083f4:	1a3ffc15 	stw	r8,-16(r3)
100083f8:	3a3ffd17 	ldw	r8,-12(r7)
100083fc:	1a3ffd15 	stw	r8,-12(r3)
10008400:	3a3ffe17 	ldw	r8,-8(r7)
10008404:	1a3ffe15 	stw	r8,-8(r3)
10008408:	3a3fff17 	ldw	r8,-4(r7)
1000840c:	1a3fff15 	stw	r8,-4(r3)
10008410:	18bff51e 	bne	r3,r2,100083e8 <__alt_data_end+0xf80083e8>
10008414:	52800044 	addi	r10,r10,1
10008418:	5014913a 	slli	r10,r10,4
1000841c:	308003cc 	andi	r2,r6,15
10008420:	010000c4 	movi	r4,3
10008424:	8287883a 	add	r3,r16,r10
10008428:	2a95883a 	add	r10,r5,r10
1000842c:	2080182e 	bgeu	r4,r2,10008490 <memcpy+0x138>
10008430:	147fff04 	addi	r17,r2,-4
10008434:	8808d0ba 	srli	r4,r17,2
10008438:	1a400104 	addi	r9,r3,4
1000843c:	180d883a 	mov	r6,r3
10008440:	2105883a 	add	r2,r4,r4
10008444:	1085883a 	add	r2,r2,r2
10008448:	4893883a 	add	r9,r9,r2
1000844c:	500f883a 	mov	r7,r10
10008450:	3a000017 	ldw	r8,0(r7)
10008454:	31800104 	addi	r6,r6,4
10008458:	39c00104 	addi	r7,r7,4
1000845c:	323fff15 	stw	r8,-4(r6)
10008460:	327ffb1e 	bne	r6,r9,10008450 <__alt_data_end+0xf8008450>
10008464:	20800044 	addi	r2,r4,1
10008468:	1085883a 	add	r2,r2,r2
1000846c:	1085883a 	add	r2,r2,r2
10008470:	017fff04 	movi	r5,-4
10008474:	18a5883a 	add	r18,r3,r2
10008478:	50a7883a 	add	r19,r10,r2
1000847c:	00012fc0 	call	100012fc <__mulsi3>
10008480:	1445883a 	add	r2,r2,r17
10008484:	980b883a 	mov	r5,r19
10008488:	9007883a 	mov	r3,r18
1000848c:	003fc006 	br	10008390 <__alt_data_end+0xf8008390>
10008490:	500b883a 	mov	r5,r10
10008494:	003fbe06 	br	10008390 <__alt_data_end+0xf8008390>

10008498 <memmove>:
10008498:	defffb04 	addi	sp,sp,-20
1000849c:	dc000015 	stw	r16,0(sp)
100084a0:	dfc00415 	stw	ra,16(sp)
100084a4:	dcc00315 	stw	r19,12(sp)
100084a8:	dc800215 	stw	r18,8(sp)
100084ac:	dc400115 	stw	r17,4(sp)
100084b0:	2021883a 	mov	r16,r4
100084b4:	300f883a 	mov	r7,r6
100084b8:	2900122e 	bgeu	r5,r4,10008504 <memmove+0x6c>
100084bc:	2987883a 	add	r3,r5,r6
100084c0:	20c0102e 	bgeu	r4,r3,10008504 <memmove+0x6c>
100084c4:	218b883a 	add	r5,r4,r6
100084c8:	1989c83a 	sub	r4,r3,r6
100084cc:	30000526 	beq	r6,zero,100084e4 <memmove+0x4c>
100084d0:	18ffffc4 	addi	r3,r3,-1
100084d4:	18800003 	ldbu	r2,0(r3)
100084d8:	297fffc4 	addi	r5,r5,-1
100084dc:	28800005 	stb	r2,0(r5)
100084e0:	193ffb1e 	bne	r3,r4,100084d0 <__alt_data_end+0xf80084d0>
100084e4:	8005883a 	mov	r2,r16
100084e8:	dfc00417 	ldw	ra,16(sp)
100084ec:	dcc00317 	ldw	r19,12(sp)
100084f0:	dc800217 	ldw	r18,8(sp)
100084f4:	dc400117 	ldw	r17,4(sp)
100084f8:	dc000017 	ldw	r16,0(sp)
100084fc:	dec00504 	addi	sp,sp,20
10008500:	f800283a 	ret
10008504:	008003c4 	movi	r2,15
10008508:	1180422e 	bgeu	r2,r6,10008614 <memmove+0x17c>
1000850c:	2c04b03a 	or	r2,r5,r16
10008510:	108000cc 	andi	r2,r2,3
10008514:	10003f1e 	bne	r2,zero,10008614 <memmove+0x17c>
10008518:	32bffc04 	addi	r10,r6,-16
1000851c:	5014d13a 	srli	r10,r10,4
10008520:	81000404 	addi	r4,r16,16
10008524:	8007883a 	mov	r3,r16
10008528:	5004913a 	slli	r2,r10,4
1000852c:	280f883a 	mov	r7,r5
10008530:	2089883a 	add	r4,r4,r2
10008534:	38800017 	ldw	r2,0(r7)
10008538:	18c00404 	addi	r3,r3,16
1000853c:	39c00404 	addi	r7,r7,16
10008540:	18bffc15 	stw	r2,-16(r3)
10008544:	38bffd17 	ldw	r2,-12(r7)
10008548:	18bffd15 	stw	r2,-12(r3)
1000854c:	38bffe17 	ldw	r2,-8(r7)
10008550:	18bffe15 	stw	r2,-8(r3)
10008554:	38bfff17 	ldw	r2,-4(r7)
10008558:	18bfff15 	stw	r2,-4(r3)
1000855c:	193ff51e 	bne	r3,r4,10008534 <__alt_data_end+0xf8008534>
10008560:	52800044 	addi	r10,r10,1
10008564:	5014913a 	slli	r10,r10,4
10008568:	31c003cc 	andi	r7,r6,15
1000856c:	008000c4 	movi	r2,3
10008570:	8287883a 	add	r3,r16,r10
10008574:	2a95883a 	add	r10,r5,r10
10008578:	11c0282e 	bgeu	r2,r7,1000861c <memmove+0x184>
1000857c:	3c7fff04 	addi	r17,r7,-4
10008580:	8808d0ba 	srli	r4,r17,2
10008584:	1a400104 	addi	r9,r3,4
10008588:	180d883a 	mov	r6,r3
1000858c:	2105883a 	add	r2,r4,r4
10008590:	1085883a 	add	r2,r2,r2
10008594:	4893883a 	add	r9,r9,r2
10008598:	5005883a 	mov	r2,r10
1000859c:	12000017 	ldw	r8,0(r2)
100085a0:	31800104 	addi	r6,r6,4
100085a4:	10800104 	addi	r2,r2,4
100085a8:	323fff15 	stw	r8,-4(r6)
100085ac:	327ffb1e 	bne	r6,r9,1000859c <__alt_data_end+0xf800859c>
100085b0:	20800044 	addi	r2,r4,1
100085b4:	1085883a 	add	r2,r2,r2
100085b8:	1085883a 	add	r2,r2,r2
100085bc:	017fff04 	movi	r5,-4
100085c0:	18a5883a 	add	r18,r3,r2
100085c4:	50a7883a 	add	r19,r10,r2
100085c8:	00012fc0 	call	100012fc <__mulsi3>
100085cc:	144f883a 	add	r7,r2,r17
100085d0:	980b883a 	mov	r5,r19
100085d4:	9007883a 	mov	r3,r18
100085d8:	383fc226 	beq	r7,zero,100084e4 <__alt_data_end+0xf80084e4>
100085dc:	19cf883a 	add	r7,r3,r7
100085e0:	29800003 	ldbu	r6,0(r5)
100085e4:	18c00044 	addi	r3,r3,1
100085e8:	29400044 	addi	r5,r5,1
100085ec:	19bfffc5 	stb	r6,-1(r3)
100085f0:	19fffb1e 	bne	r3,r7,100085e0 <__alt_data_end+0xf80085e0>
100085f4:	8005883a 	mov	r2,r16
100085f8:	dfc00417 	ldw	ra,16(sp)
100085fc:	dcc00317 	ldw	r19,12(sp)
10008600:	dc800217 	ldw	r18,8(sp)
10008604:	dc400117 	ldw	r17,4(sp)
10008608:	dc000017 	ldw	r16,0(sp)
1000860c:	dec00504 	addi	sp,sp,20
10008610:	f800283a 	ret
10008614:	8007883a 	mov	r3,r16
10008618:	003fef06 	br	100085d8 <__alt_data_end+0xf80085d8>
1000861c:	500b883a 	mov	r5,r10
10008620:	003fed06 	br	100085d8 <__alt_data_end+0xf80085d8>

10008624 <memset>:
10008624:	00c000c4 	movi	r3,3
10008628:	2005883a 	mov	r2,r4
1000862c:	29403fcc 	andi	r5,r5,255
10008630:	19802d2e 	bgeu	r3,r6,100086e8 <memset+0xc4>
10008634:	20c6703a 	and	r3,r4,r3
10008638:	18002e1e 	bne	r3,zero,100086f4 <memset+0xd0>
1000863c:	2806923a 	slli	r3,r5,8
10008640:	010003c4 	movi	r4,15
10008644:	3011883a 	mov	r8,r6
10008648:	1946b03a 	or	r3,r3,r5
1000864c:	180e943a 	slli	r7,r3,16
10008650:	38ceb03a 	or	r7,r7,r3
10008654:	1007883a 	mov	r3,r2
10008658:	21800f2e 	bgeu	r4,r6,10008698 <memset+0x74>
1000865c:	19c00015 	stw	r7,0(r3)
10008660:	19c00115 	stw	r7,4(r3)
10008664:	19c00215 	stw	r7,8(r3)
10008668:	19c00315 	stw	r7,12(r3)
1000866c:	423ffc04 	addi	r8,r8,-16
10008670:	18c00404 	addi	r3,r3,16
10008674:	223ff936 	bltu	r4,r8,1000865c <__alt_data_end+0xf800865c>
10008678:	30fffc04 	addi	r3,r6,-16
1000867c:	1806d13a 	srli	r3,r3,4
10008680:	318003cc 	andi	r6,r6,15
10008684:	010000c4 	movi	r4,3
10008688:	18c00044 	addi	r3,r3,1
1000868c:	1806913a 	slli	r3,r3,4
10008690:	10c7883a 	add	r3,r2,r3
10008694:	21800e2e 	bgeu	r4,r6,100086d0 <memset+0xac>
10008698:	1813883a 	mov	r9,r3
1000869c:	3011883a 	mov	r8,r6
100086a0:	010000c4 	movi	r4,3
100086a4:	49c00015 	stw	r7,0(r9)
100086a8:	423fff04 	addi	r8,r8,-4
100086ac:	4a400104 	addi	r9,r9,4
100086b0:	223ffc36 	bltu	r4,r8,100086a4 <__alt_data_end+0xf80086a4>
100086b4:	313fff04 	addi	r4,r6,-4
100086b8:	2008d0ba 	srli	r4,r4,2
100086bc:	318000cc 	andi	r6,r6,3
100086c0:	21000044 	addi	r4,r4,1
100086c4:	2109883a 	add	r4,r4,r4
100086c8:	2109883a 	add	r4,r4,r4
100086cc:	1907883a 	add	r3,r3,r4
100086d0:	30000a26 	beq	r6,zero,100086fc <memset+0xd8>
100086d4:	198d883a 	add	r6,r3,r6
100086d8:	19400005 	stb	r5,0(r3)
100086dc:	18c00044 	addi	r3,r3,1
100086e0:	19bffd1e 	bne	r3,r6,100086d8 <__alt_data_end+0xf80086d8>
100086e4:	f800283a 	ret
100086e8:	2007883a 	mov	r3,r4
100086ec:	303ff91e 	bne	r6,zero,100086d4 <__alt_data_end+0xf80086d4>
100086f0:	00000206 	br	100086fc <memset+0xd8>
100086f4:	2007883a 	mov	r3,r4
100086f8:	003ff606 	br	100086d4 <__alt_data_end+0xf80086d4>
100086fc:	f800283a 	ret

10008700 <_Balloc>:
10008700:	20801317 	ldw	r2,76(r4)
10008704:	defffc04 	addi	sp,sp,-16
10008708:	dc400115 	stw	r17,4(sp)
1000870c:	dc000015 	stw	r16,0(sp)
10008710:	dfc00315 	stw	ra,12(sp)
10008714:	dc800215 	stw	r18,8(sp)
10008718:	2023883a 	mov	r17,r4
1000871c:	2821883a 	mov	r16,r5
10008720:	10000f26 	beq	r2,zero,10008760 <_Balloc+0x60>
10008724:	8407883a 	add	r3,r16,r16
10008728:	18c7883a 	add	r3,r3,r3
1000872c:	10c7883a 	add	r3,r2,r3
10008730:	18800017 	ldw	r2,0(r3)
10008734:	10001126 	beq	r2,zero,1000877c <_Balloc+0x7c>
10008738:	11000017 	ldw	r4,0(r2)
1000873c:	19000015 	stw	r4,0(r3)
10008740:	10000415 	stw	zero,16(r2)
10008744:	10000315 	stw	zero,12(r2)
10008748:	dfc00317 	ldw	ra,12(sp)
1000874c:	dc800217 	ldw	r18,8(sp)
10008750:	dc400117 	ldw	r17,4(sp)
10008754:	dc000017 	ldw	r16,0(sp)
10008758:	dec00404 	addi	sp,sp,16
1000875c:	f800283a 	ret
10008760:	01400104 	movi	r5,4
10008764:	01800404 	movi	r6,16
10008768:	000cc400 	call	1000cc40 <_calloc_r>
1000876c:	88801315 	stw	r2,76(r17)
10008770:	103fec1e 	bne	r2,zero,10008724 <__alt_data_end+0xf8008724>
10008774:	0005883a 	mov	r2,zero
10008778:	003ff306 	br	10008748 <__alt_data_end+0xf8008748>
1000877c:	01400044 	movi	r5,1
10008780:	2c24983a 	sll	r18,r5,r16
10008784:	8809883a 	mov	r4,r17
10008788:	91800144 	addi	r6,r18,5
1000878c:	318d883a 	add	r6,r6,r6
10008790:	318d883a 	add	r6,r6,r6
10008794:	000cc400 	call	1000cc40 <_calloc_r>
10008798:	103ff626 	beq	r2,zero,10008774 <__alt_data_end+0xf8008774>
1000879c:	14000115 	stw	r16,4(r2)
100087a0:	14800215 	stw	r18,8(r2)
100087a4:	003fe606 	br	10008740 <__alt_data_end+0xf8008740>

100087a8 <_Bfree>:
100087a8:	28000826 	beq	r5,zero,100087cc <_Bfree+0x24>
100087ac:	28c00117 	ldw	r3,4(r5)
100087b0:	20801317 	ldw	r2,76(r4)
100087b4:	18c7883a 	add	r3,r3,r3
100087b8:	18c7883a 	add	r3,r3,r3
100087bc:	10c5883a 	add	r2,r2,r3
100087c0:	10c00017 	ldw	r3,0(r2)
100087c4:	28c00015 	stw	r3,0(r5)
100087c8:	11400015 	stw	r5,0(r2)
100087cc:	f800283a 	ret

100087d0 <__multadd>:
100087d0:	defff604 	addi	sp,sp,-40
100087d4:	dd400515 	stw	r21,20(sp)
100087d8:	2d400417 	ldw	r21,16(r5)
100087dc:	df000815 	stw	fp,32(sp)
100087e0:	ddc00715 	stw	r23,28(sp)
100087e4:	dd800615 	stw	r22,24(sp)
100087e8:	dd000415 	stw	r20,16(sp)
100087ec:	dc400115 	stw	r17,4(sp)
100087f0:	dc000015 	stw	r16,0(sp)
100087f4:	dfc00915 	stw	ra,36(sp)
100087f8:	dcc00315 	stw	r19,12(sp)
100087fc:	dc800215 	stw	r18,8(sp)
10008800:	282d883a 	mov	r22,r5
10008804:	202f883a 	mov	r23,r4
10008808:	3029883a 	mov	r20,r6
1000880c:	3839883a 	mov	fp,r7
10008810:	2c000504 	addi	r16,r5,20
10008814:	0023883a 	mov	r17,zero
10008818:	84c00017 	ldw	r19,0(r16)
1000881c:	a00b883a 	mov	r5,r20
10008820:	8c400044 	addi	r17,r17,1
10008824:	993fffcc 	andi	r4,r19,65535
10008828:	00012fc0 	call	100012fc <__mulsi3>
1000882c:	1725883a 	add	r18,r2,fp
10008830:	9808d43a 	srli	r4,r19,16
10008834:	9026d43a 	srli	r19,r18,16
10008838:	a00b883a 	mov	r5,r20
1000883c:	00012fc0 	call	100012fc <__mulsi3>
10008840:	988f883a 	add	r7,r19,r2
10008844:	3804943a 	slli	r2,r7,16
10008848:	94bfffcc 	andi	r18,r18,65535
1000884c:	3838d43a 	srli	fp,r7,16
10008850:	14a5883a 	add	r18,r2,r18
10008854:	84800015 	stw	r18,0(r16)
10008858:	84000104 	addi	r16,r16,4
1000885c:	8d7fee16 	blt	r17,r21,10008818 <__alt_data_end+0xf8008818>
10008860:	e0000926 	beq	fp,zero,10008888 <__multadd+0xb8>
10008864:	b0800217 	ldw	r2,8(r22)
10008868:	a880140e 	bge	r21,r2,100088bc <__multadd+0xec>
1000886c:	a8800144 	addi	r2,r21,5
10008870:	1085883a 	add	r2,r2,r2
10008874:	1085883a 	add	r2,r2,r2
10008878:	b085883a 	add	r2,r22,r2
1000887c:	ad400044 	addi	r21,r21,1
10008880:	17000015 	stw	fp,0(r2)
10008884:	b5400415 	stw	r21,16(r22)
10008888:	b005883a 	mov	r2,r22
1000888c:	dfc00917 	ldw	ra,36(sp)
10008890:	df000817 	ldw	fp,32(sp)
10008894:	ddc00717 	ldw	r23,28(sp)
10008898:	dd800617 	ldw	r22,24(sp)
1000889c:	dd400517 	ldw	r21,20(sp)
100088a0:	dd000417 	ldw	r20,16(sp)
100088a4:	dcc00317 	ldw	r19,12(sp)
100088a8:	dc800217 	ldw	r18,8(sp)
100088ac:	dc400117 	ldw	r17,4(sp)
100088b0:	dc000017 	ldw	r16,0(sp)
100088b4:	dec00a04 	addi	sp,sp,40
100088b8:	f800283a 	ret
100088bc:	b1400117 	ldw	r5,4(r22)
100088c0:	b809883a 	mov	r4,r23
100088c4:	29400044 	addi	r5,r5,1
100088c8:	00087000 	call	10008700 <_Balloc>
100088cc:	b1800417 	ldw	r6,16(r22)
100088d0:	b1400304 	addi	r5,r22,12
100088d4:	11000304 	addi	r4,r2,12
100088d8:	31800084 	addi	r6,r6,2
100088dc:	318d883a 	add	r6,r6,r6
100088e0:	318d883a 	add	r6,r6,r6
100088e4:	1021883a 	mov	r16,r2
100088e8:	00083580 	call	10008358 <memcpy>
100088ec:	b0c00117 	ldw	r3,4(r22)
100088f0:	b8801317 	ldw	r2,76(r23)
100088f4:	18c7883a 	add	r3,r3,r3
100088f8:	18c7883a 	add	r3,r3,r3
100088fc:	10c5883a 	add	r2,r2,r3
10008900:	10c00017 	ldw	r3,0(r2)
10008904:	b0c00015 	stw	r3,0(r22)
10008908:	15800015 	stw	r22,0(r2)
1000890c:	802d883a 	mov	r22,r16
10008910:	003fd606 	br	1000886c <__alt_data_end+0xf800886c>

10008914 <__s2b>:
10008914:	defff904 	addi	sp,sp,-28
10008918:	dd000415 	stw	r20,16(sp)
1000891c:	dc400115 	stw	r17,4(sp)
10008920:	2829883a 	mov	r20,r5
10008924:	2023883a 	mov	r17,r4
10008928:	01400244 	movi	r5,9
1000892c:	39000204 	addi	r4,r7,8
10008930:	dcc00315 	stw	r19,12(sp)
10008934:	dc800215 	stw	r18,8(sp)
10008938:	dfc00615 	stw	ra,24(sp)
1000893c:	dd400515 	stw	r21,20(sp)
10008940:	dc000015 	stw	r16,0(sp)
10008944:	3825883a 	mov	r18,r7
10008948:	3027883a 	mov	r19,r6
1000894c:	00012400 	call	10001240 <__divsi3>
10008950:	00c00044 	movi	r3,1
10008954:	000b883a 	mov	r5,zero
10008958:	1880030e 	bge	r3,r2,10008968 <__s2b+0x54>
1000895c:	18c7883a 	add	r3,r3,r3
10008960:	29400044 	addi	r5,r5,1
10008964:	18bffd16 	blt	r3,r2,1000895c <__alt_data_end+0xf800895c>
10008968:	8809883a 	mov	r4,r17
1000896c:	00087000 	call	10008700 <_Balloc>
10008970:	d8c00717 	ldw	r3,28(sp)
10008974:	10c00515 	stw	r3,20(r2)
10008978:	00c00044 	movi	r3,1
1000897c:	10c00415 	stw	r3,16(r2)
10008980:	00c00244 	movi	r3,9
10008984:	1cc0210e 	bge	r3,r19,10008a0c <__s2b+0xf8>
10008988:	a0eb883a 	add	r21,r20,r3
1000898c:	a821883a 	mov	r16,r21
10008990:	a4e9883a 	add	r20,r20,r19
10008994:	81c00007 	ldb	r7,0(r16)
10008998:	8809883a 	mov	r4,r17
1000899c:	84000044 	addi	r16,r16,1
100089a0:	100b883a 	mov	r5,r2
100089a4:	01800284 	movi	r6,10
100089a8:	39fff404 	addi	r7,r7,-48
100089ac:	00087d00 	call	100087d0 <__multadd>
100089b0:	853ff81e 	bne	r16,r20,10008994 <__alt_data_end+0xf8008994>
100089b4:	ace1883a 	add	r16,r21,r19
100089b8:	843ffe04 	addi	r16,r16,-8
100089bc:	9c800a0e 	bge	r19,r18,100089e8 <__s2b+0xd4>
100089c0:	94e5c83a 	sub	r18,r18,r19
100089c4:	84a5883a 	add	r18,r16,r18
100089c8:	81c00007 	ldb	r7,0(r16)
100089cc:	8809883a 	mov	r4,r17
100089d0:	84000044 	addi	r16,r16,1
100089d4:	100b883a 	mov	r5,r2
100089d8:	01800284 	movi	r6,10
100089dc:	39fff404 	addi	r7,r7,-48
100089e0:	00087d00 	call	100087d0 <__multadd>
100089e4:	84bff81e 	bne	r16,r18,100089c8 <__alt_data_end+0xf80089c8>
100089e8:	dfc00617 	ldw	ra,24(sp)
100089ec:	dd400517 	ldw	r21,20(sp)
100089f0:	dd000417 	ldw	r20,16(sp)
100089f4:	dcc00317 	ldw	r19,12(sp)
100089f8:	dc800217 	ldw	r18,8(sp)
100089fc:	dc400117 	ldw	r17,4(sp)
10008a00:	dc000017 	ldw	r16,0(sp)
10008a04:	dec00704 	addi	sp,sp,28
10008a08:	f800283a 	ret
10008a0c:	a4000284 	addi	r16,r20,10
10008a10:	1827883a 	mov	r19,r3
10008a14:	003fe906 	br	100089bc <__alt_data_end+0xf80089bc>

10008a18 <__hi0bits>:
10008a18:	20bfffec 	andhi	r2,r4,65535
10008a1c:	1000141e 	bne	r2,zero,10008a70 <__hi0bits+0x58>
10008a20:	2008943a 	slli	r4,r4,16
10008a24:	00800404 	movi	r2,16
10008a28:	20ffc02c 	andhi	r3,r4,65280
10008a2c:	1800021e 	bne	r3,zero,10008a38 <__hi0bits+0x20>
10008a30:	2008923a 	slli	r4,r4,8
10008a34:	10800204 	addi	r2,r2,8
10008a38:	20fc002c 	andhi	r3,r4,61440
10008a3c:	1800021e 	bne	r3,zero,10008a48 <__hi0bits+0x30>
10008a40:	2008913a 	slli	r4,r4,4
10008a44:	10800104 	addi	r2,r2,4
10008a48:	20f0002c 	andhi	r3,r4,49152
10008a4c:	1800031e 	bne	r3,zero,10008a5c <__hi0bits+0x44>
10008a50:	2109883a 	add	r4,r4,r4
10008a54:	10800084 	addi	r2,r2,2
10008a58:	2109883a 	add	r4,r4,r4
10008a5c:	20000316 	blt	r4,zero,10008a6c <__hi0bits+0x54>
10008a60:	2110002c 	andhi	r4,r4,16384
10008a64:	2000041e 	bne	r4,zero,10008a78 <__hi0bits+0x60>
10008a68:	00800804 	movi	r2,32
10008a6c:	f800283a 	ret
10008a70:	0005883a 	mov	r2,zero
10008a74:	003fec06 	br	10008a28 <__alt_data_end+0xf8008a28>
10008a78:	10800044 	addi	r2,r2,1
10008a7c:	f800283a 	ret

10008a80 <__lo0bits>:
10008a80:	20c00017 	ldw	r3,0(r4)
10008a84:	188001cc 	andi	r2,r3,7
10008a88:	10000826 	beq	r2,zero,10008aac <__lo0bits+0x2c>
10008a8c:	1880004c 	andi	r2,r3,1
10008a90:	1000211e 	bne	r2,zero,10008b18 <__lo0bits+0x98>
10008a94:	1880008c 	andi	r2,r3,2
10008a98:	1000211e 	bne	r2,zero,10008b20 <__lo0bits+0xa0>
10008a9c:	1806d0ba 	srli	r3,r3,2
10008aa0:	00800084 	movi	r2,2
10008aa4:	20c00015 	stw	r3,0(r4)
10008aa8:	f800283a 	ret
10008aac:	18bfffcc 	andi	r2,r3,65535
10008ab0:	10001326 	beq	r2,zero,10008b00 <__lo0bits+0x80>
10008ab4:	0005883a 	mov	r2,zero
10008ab8:	19403fcc 	andi	r5,r3,255
10008abc:	2800021e 	bne	r5,zero,10008ac8 <__lo0bits+0x48>
10008ac0:	1806d23a 	srli	r3,r3,8
10008ac4:	10800204 	addi	r2,r2,8
10008ac8:	194003cc 	andi	r5,r3,15
10008acc:	2800021e 	bne	r5,zero,10008ad8 <__lo0bits+0x58>
10008ad0:	1806d13a 	srli	r3,r3,4
10008ad4:	10800104 	addi	r2,r2,4
10008ad8:	194000cc 	andi	r5,r3,3
10008adc:	2800021e 	bne	r5,zero,10008ae8 <__lo0bits+0x68>
10008ae0:	1806d0ba 	srli	r3,r3,2
10008ae4:	10800084 	addi	r2,r2,2
10008ae8:	1940004c 	andi	r5,r3,1
10008aec:	2800081e 	bne	r5,zero,10008b10 <__lo0bits+0x90>
10008af0:	1806d07a 	srli	r3,r3,1
10008af4:	1800051e 	bne	r3,zero,10008b0c <__lo0bits+0x8c>
10008af8:	00800804 	movi	r2,32
10008afc:	f800283a 	ret
10008b00:	1806d43a 	srli	r3,r3,16
10008b04:	00800404 	movi	r2,16
10008b08:	003feb06 	br	10008ab8 <__alt_data_end+0xf8008ab8>
10008b0c:	10800044 	addi	r2,r2,1
10008b10:	20c00015 	stw	r3,0(r4)
10008b14:	f800283a 	ret
10008b18:	0005883a 	mov	r2,zero
10008b1c:	f800283a 	ret
10008b20:	1806d07a 	srli	r3,r3,1
10008b24:	00800044 	movi	r2,1
10008b28:	20c00015 	stw	r3,0(r4)
10008b2c:	f800283a 	ret

10008b30 <__i2b>:
10008b30:	defffd04 	addi	sp,sp,-12
10008b34:	dc000015 	stw	r16,0(sp)
10008b38:	04000044 	movi	r16,1
10008b3c:	dc400115 	stw	r17,4(sp)
10008b40:	2823883a 	mov	r17,r5
10008b44:	800b883a 	mov	r5,r16
10008b48:	dfc00215 	stw	ra,8(sp)
10008b4c:	00087000 	call	10008700 <_Balloc>
10008b50:	14400515 	stw	r17,20(r2)
10008b54:	14000415 	stw	r16,16(r2)
10008b58:	dfc00217 	ldw	ra,8(sp)
10008b5c:	dc400117 	ldw	r17,4(sp)
10008b60:	dc000017 	ldw	r16,0(sp)
10008b64:	dec00304 	addi	sp,sp,12
10008b68:	f800283a 	ret

10008b6c <__multiply>:
10008b6c:	defff004 	addi	sp,sp,-64
10008b70:	dc800815 	stw	r18,32(sp)
10008b74:	dc400715 	stw	r17,28(sp)
10008b78:	34800417 	ldw	r18,16(r6)
10008b7c:	2c400417 	ldw	r17,16(r5)
10008b80:	ddc00d15 	stw	r23,52(sp)
10008b84:	dc000615 	stw	r16,24(sp)
10008b88:	dfc00f15 	stw	ra,60(sp)
10008b8c:	df000e15 	stw	fp,56(sp)
10008b90:	dd800c15 	stw	r22,48(sp)
10008b94:	dd400b15 	stw	r21,44(sp)
10008b98:	dd000a15 	stw	r20,40(sp)
10008b9c:	dcc00915 	stw	r19,36(sp)
10008ba0:	2821883a 	mov	r16,r5
10008ba4:	302f883a 	mov	r23,r6
10008ba8:	8c80050e 	bge	r17,r18,10008bc0 <__multiply+0x54>
10008bac:	8807883a 	mov	r3,r17
10008bb0:	3021883a 	mov	r16,r6
10008bb4:	9023883a 	mov	r17,r18
10008bb8:	282f883a 	mov	r23,r5
10008bbc:	1825883a 	mov	r18,r3
10008bc0:	80800217 	ldw	r2,8(r16)
10008bc4:	8c87883a 	add	r3,r17,r18
10008bc8:	d8c00115 	stw	r3,4(sp)
10008bcc:	81400117 	ldw	r5,4(r16)
10008bd0:	10c0010e 	bge	r2,r3,10008bd8 <__multiply+0x6c>
10008bd4:	29400044 	addi	r5,r5,1
10008bd8:	00087000 	call	10008700 <_Balloc>
10008bdc:	d8c00117 	ldw	r3,4(sp)
10008be0:	d8800515 	stw	r2,20(sp)
10008be4:	14c00504 	addi	r19,r2,20
10008be8:	1d400144 	addi	r21,r3,5
10008bec:	ad6b883a 	add	r21,r21,r21
10008bf0:	ad6b883a 	add	r21,r21,r21
10008bf4:	156b883a 	add	r21,r2,r21
10008bf8:	dd400215 	stw	r21,8(sp)
10008bfc:	9805883a 	mov	r2,r19
10008c00:	9d40042e 	bgeu	r19,r21,10008c14 <__multiply+0xa8>
10008c04:	d8c00217 	ldw	r3,8(sp)
10008c08:	10000015 	stw	zero,0(r2)
10008c0c:	10800104 	addi	r2,r2,4
10008c10:	10fffc36 	bltu	r2,r3,10008c04 <__alt_data_end+0xf8008c04>
10008c14:	94800144 	addi	r18,r18,5
10008c18:	94a5883a 	add	r18,r18,r18
10008c1c:	94ad883a 	add	r22,r18,r18
10008c20:	8c400144 	addi	r17,r17,5
10008c24:	8c63883a 	add	r17,r17,r17
10008c28:	bdad883a 	add	r22,r23,r22
10008c2c:	80c00504 	addi	r3,r16,20
10008c30:	8c63883a 	add	r17,r17,r17
10008c34:	bc800504 	addi	r18,r23,20
10008c38:	dd800315 	stw	r22,12(sp)
10008c3c:	d8c00415 	stw	r3,16(sp)
10008c40:	dcc00015 	stw	r19,0(sp)
10008c44:	8463883a 	add	r17,r16,r17
10008c48:	9580412e 	bgeu	r18,r22,10008d50 <__multiply+0x1e4>
10008c4c:	90800017 	ldw	r2,0(r18)
10008c50:	173fffcc 	andi	fp,r2,65535
10008c54:	e0001a26 	beq	fp,zero,10008cc0 <__multiply+0x154>
10008c58:	dd000017 	ldw	r20,0(sp)
10008c5c:	dd800417 	ldw	r22,16(sp)
10008c60:	002b883a 	mov	r21,zero
10008c64:	b4c00017 	ldw	r19,0(r22)
10008c68:	a4000017 	ldw	r16,0(r20)
10008c6c:	e00b883a 	mov	r5,fp
10008c70:	993fffcc 	andi	r4,r19,65535
10008c74:	00012fc0 	call	100012fc <__mulsi3>
10008c78:	9808d43a 	srli	r4,r19,16
10008c7c:	817fffcc 	andi	r5,r16,65535
10008c80:	1145883a 	add	r2,r2,r5
10008c84:	e00b883a 	mov	r5,fp
10008c88:	1567883a 	add	r19,r2,r21
10008c8c:	8020d43a 	srli	r16,r16,16
10008c90:	00012fc0 	call	100012fc <__mulsi3>
10008c94:	9808d43a 	srli	r4,r19,16
10008c98:	1405883a 	add	r2,r2,r16
10008c9c:	a4c0000d 	sth	r19,0(r20)
10008ca0:	110f883a 	add	r7,r2,r4
10008ca4:	a1c0008d 	sth	r7,2(r20)
10008ca8:	b5800104 	addi	r22,r22,4
10008cac:	382ad43a 	srli	r21,r7,16
10008cb0:	a5000104 	addi	r20,r20,4
10008cb4:	b47feb36 	bltu	r22,r17,10008c64 <__alt_data_end+0xf8008c64>
10008cb8:	a5400015 	stw	r21,0(r20)
10008cbc:	90800017 	ldw	r2,0(r18)
10008cc0:	1038d43a 	srli	fp,r2,16
10008cc4:	e0001c26 	beq	fp,zero,10008d38 <__multiply+0x1cc>
10008cc8:	d8c00017 	ldw	r3,0(sp)
10008ccc:	dd000417 	ldw	r20,16(sp)
10008cd0:	002b883a 	mov	r21,zero
10008cd4:	1d800017 	ldw	r22,0(r3)
10008cd8:	182f883a 	mov	r23,r3
10008cdc:	b021883a 	mov	r16,r22
10008ce0:	a4c00017 	ldw	r19,0(r20)
10008ce4:	8020d43a 	srli	r16,r16,16
10008ce8:	e00b883a 	mov	r5,fp
10008cec:	993fffcc 	andi	r4,r19,65535
10008cf0:	00012fc0 	call	100012fc <__mulsi3>
10008cf4:	1405883a 	add	r2,r2,r16
10008cf8:	9808d43a 	srli	r4,r19,16
10008cfc:	156b883a 	add	r21,r2,r21
10008d00:	bdc00104 	addi	r23,r23,4
10008d04:	bdbfff0d 	sth	r22,-4(r23)
10008d08:	bd7fff8d 	sth	r21,-2(r23)
10008d0c:	bc000017 	ldw	r16,0(r23)
10008d10:	e00b883a 	mov	r5,fp
10008d14:	00012fc0 	call	100012fc <__mulsi3>
10008d18:	a80ed43a 	srli	r7,r21,16
10008d1c:	813fffcc 	andi	r4,r16,65535
10008d20:	2085883a 	add	r2,r4,r2
10008d24:	11ed883a 	add	r22,r2,r7
10008d28:	a5000104 	addi	r20,r20,4
10008d2c:	b02ad43a 	srli	r21,r22,16
10008d30:	a47feb36 	bltu	r20,r17,10008ce0 <__alt_data_end+0xf8008ce0>
10008d34:	bd800015 	stw	r22,0(r23)
10008d38:	d8c00017 	ldw	r3,0(sp)
10008d3c:	94800104 	addi	r18,r18,4
10008d40:	18c00104 	addi	r3,r3,4
10008d44:	d8c00015 	stw	r3,0(sp)
10008d48:	d8c00317 	ldw	r3,12(sp)
10008d4c:	90ffbf36 	bltu	r18,r3,10008c4c <__alt_data_end+0xf8008c4c>
10008d50:	d8c00117 	ldw	r3,4(sp)
10008d54:	00c00c0e 	bge	zero,r3,10008d88 <__multiply+0x21c>
10008d58:	d8c00217 	ldw	r3,8(sp)
10008d5c:	18bfff17 	ldw	r2,-4(r3)
10008d60:	1d7fff04 	addi	r21,r3,-4
10008d64:	10000326 	beq	r2,zero,10008d74 <__multiply+0x208>
10008d68:	00000706 	br	10008d88 <__multiply+0x21c>
10008d6c:	a8800017 	ldw	r2,0(r21)
10008d70:	1000051e 	bne	r2,zero,10008d88 <__multiply+0x21c>
10008d74:	d8c00117 	ldw	r3,4(sp)
10008d78:	ad7fff04 	addi	r21,r21,-4
10008d7c:	18ffffc4 	addi	r3,r3,-1
10008d80:	d8c00115 	stw	r3,4(sp)
10008d84:	183ff91e 	bne	r3,zero,10008d6c <__alt_data_end+0xf8008d6c>
10008d88:	d8800517 	ldw	r2,20(sp)
10008d8c:	d8c00117 	ldw	r3,4(sp)
10008d90:	10c00415 	stw	r3,16(r2)
10008d94:	dfc00f17 	ldw	ra,60(sp)
10008d98:	df000e17 	ldw	fp,56(sp)
10008d9c:	ddc00d17 	ldw	r23,52(sp)
10008da0:	dd800c17 	ldw	r22,48(sp)
10008da4:	dd400b17 	ldw	r21,44(sp)
10008da8:	dd000a17 	ldw	r20,40(sp)
10008dac:	dcc00917 	ldw	r19,36(sp)
10008db0:	dc800817 	ldw	r18,32(sp)
10008db4:	dc400717 	ldw	r17,28(sp)
10008db8:	dc000617 	ldw	r16,24(sp)
10008dbc:	dec01004 	addi	sp,sp,64
10008dc0:	f800283a 	ret

10008dc4 <__pow5mult>:
10008dc4:	defffb04 	addi	sp,sp,-20
10008dc8:	dcc00315 	stw	r19,12(sp)
10008dcc:	dc800215 	stw	r18,8(sp)
10008dd0:	dc000015 	stw	r16,0(sp)
10008dd4:	dfc00415 	stw	ra,16(sp)
10008dd8:	dc400115 	stw	r17,4(sp)
10008ddc:	308000cc 	andi	r2,r6,3
10008de0:	3021883a 	mov	r16,r6
10008de4:	2027883a 	mov	r19,r4
10008de8:	2825883a 	mov	r18,r5
10008dec:	10002e1e 	bne	r2,zero,10008ea8 <__pow5mult+0xe4>
10008df0:	8021d0ba 	srai	r16,r16,2
10008df4:	80001a26 	beq	r16,zero,10008e60 <__pow5mult+0x9c>
10008df8:	9c401217 	ldw	r17,72(r19)
10008dfc:	8800061e 	bne	r17,zero,10008e18 <__pow5mult+0x54>
10008e00:	00003406 	br	10008ed4 <__pow5mult+0x110>
10008e04:	8021d07a 	srai	r16,r16,1
10008e08:	80001526 	beq	r16,zero,10008e60 <__pow5mult+0x9c>
10008e0c:	88c00017 	ldw	r3,0(r17)
10008e10:	18001b26 	beq	r3,zero,10008e80 <__pow5mult+0xbc>
10008e14:	1823883a 	mov	r17,r3
10008e18:	80c0004c 	andi	r3,r16,1
10008e1c:	183ff926 	beq	r3,zero,10008e04 <__alt_data_end+0xf8008e04>
10008e20:	900b883a 	mov	r5,r18
10008e24:	880d883a 	mov	r6,r17
10008e28:	9809883a 	mov	r4,r19
10008e2c:	0008b6c0 	call	10008b6c <__multiply>
10008e30:	90001b26 	beq	r18,zero,10008ea0 <__pow5mult+0xdc>
10008e34:	91000117 	ldw	r4,4(r18)
10008e38:	98c01317 	ldw	r3,76(r19)
10008e3c:	8021d07a 	srai	r16,r16,1
10008e40:	2109883a 	add	r4,r4,r4
10008e44:	2109883a 	add	r4,r4,r4
10008e48:	1907883a 	add	r3,r3,r4
10008e4c:	19000017 	ldw	r4,0(r3)
10008e50:	91000015 	stw	r4,0(r18)
10008e54:	1c800015 	stw	r18,0(r3)
10008e58:	1025883a 	mov	r18,r2
10008e5c:	803feb1e 	bne	r16,zero,10008e0c <__alt_data_end+0xf8008e0c>
10008e60:	9005883a 	mov	r2,r18
10008e64:	dfc00417 	ldw	ra,16(sp)
10008e68:	dcc00317 	ldw	r19,12(sp)
10008e6c:	dc800217 	ldw	r18,8(sp)
10008e70:	dc400117 	ldw	r17,4(sp)
10008e74:	dc000017 	ldw	r16,0(sp)
10008e78:	dec00504 	addi	sp,sp,20
10008e7c:	f800283a 	ret
10008e80:	880b883a 	mov	r5,r17
10008e84:	880d883a 	mov	r6,r17
10008e88:	9809883a 	mov	r4,r19
10008e8c:	0008b6c0 	call	10008b6c <__multiply>
10008e90:	88800015 	stw	r2,0(r17)
10008e94:	10000015 	stw	zero,0(r2)
10008e98:	1023883a 	mov	r17,r2
10008e9c:	003fde06 	br	10008e18 <__alt_data_end+0xf8008e18>
10008ea0:	1025883a 	mov	r18,r2
10008ea4:	003fd706 	br	10008e04 <__alt_data_end+0xf8008e04>
10008ea8:	10bfffc4 	addi	r2,r2,-1
10008eac:	1085883a 	add	r2,r2,r2
10008eb0:	00c40074 	movhi	r3,4097
10008eb4:	18cb1d04 	addi	r3,r3,11380
10008eb8:	1085883a 	add	r2,r2,r2
10008ebc:	1885883a 	add	r2,r3,r2
10008ec0:	11800017 	ldw	r6,0(r2)
10008ec4:	000f883a 	mov	r7,zero
10008ec8:	00087d00 	call	100087d0 <__multadd>
10008ecc:	1025883a 	mov	r18,r2
10008ed0:	003fc706 	br	10008df0 <__alt_data_end+0xf8008df0>
10008ed4:	9809883a 	mov	r4,r19
10008ed8:	01409c44 	movi	r5,625
10008edc:	0008b300 	call	10008b30 <__i2b>
10008ee0:	98801215 	stw	r2,72(r19)
10008ee4:	1023883a 	mov	r17,r2
10008ee8:	10000015 	stw	zero,0(r2)
10008eec:	003fca06 	br	10008e18 <__alt_data_end+0xf8008e18>

10008ef0 <__lshift>:
10008ef0:	defff904 	addi	sp,sp,-28
10008ef4:	dd400515 	stw	r21,20(sp)
10008ef8:	dc400115 	stw	r17,4(sp)
10008efc:	2d400417 	ldw	r21,16(r5)
10008f00:	3023d17a 	srai	r17,r6,5
10008f04:	28800217 	ldw	r2,8(r5)
10008f08:	dd000415 	stw	r20,16(sp)
10008f0c:	8d6b883a 	add	r21,r17,r21
10008f10:	dcc00315 	stw	r19,12(sp)
10008f14:	dc800215 	stw	r18,8(sp)
10008f18:	dc000015 	stw	r16,0(sp)
10008f1c:	dfc00615 	stw	ra,24(sp)
10008f20:	ac000044 	addi	r16,r21,1
10008f24:	2825883a 	mov	r18,r5
10008f28:	3029883a 	mov	r20,r6
10008f2c:	2027883a 	mov	r19,r4
10008f30:	29400117 	ldw	r5,4(r5)
10008f34:	1400030e 	bge	r2,r16,10008f44 <__lshift+0x54>
10008f38:	1085883a 	add	r2,r2,r2
10008f3c:	29400044 	addi	r5,r5,1
10008f40:	143ffd16 	blt	r2,r16,10008f38 <__alt_data_end+0xf8008f38>
10008f44:	9809883a 	mov	r4,r19
10008f48:	00087000 	call	10008700 <_Balloc>
10008f4c:	10c00504 	addi	r3,r2,20
10008f50:	0440090e 	bge	zero,r17,10008f78 <__lshift+0x88>
10008f54:	000f883a 	mov	r7,zero
10008f58:	18000015 	stw	zero,0(r3)
10008f5c:	39c00044 	addi	r7,r7,1
10008f60:	18c00104 	addi	r3,r3,4
10008f64:	3c7ffc1e 	bne	r7,r17,10008f58 <__alt_data_end+0xf8008f58>
10008f68:	38c00144 	addi	r3,r7,5
10008f6c:	18c7883a 	add	r3,r3,r3
10008f70:	18c7883a 	add	r3,r3,r3
10008f74:	10c7883a 	add	r3,r2,r3
10008f78:	92000417 	ldw	r8,16(r18)
10008f7c:	a18007cc 	andi	r6,r20,31
10008f80:	91c00504 	addi	r7,r18,20
10008f84:	42000144 	addi	r8,r8,5
10008f88:	4211883a 	add	r8,r8,r8
10008f8c:	4211883a 	add	r8,r8,r8
10008f90:	9211883a 	add	r8,r18,r8
10008f94:	30002226 	beq	r6,zero,10009020 <__lshift+0x130>
10008f98:	02800804 	movi	r10,32
10008f9c:	5195c83a 	sub	r10,r10,r6
10008fa0:	000b883a 	mov	r5,zero
10008fa4:	3a400017 	ldw	r9,0(r7)
10008fa8:	18c00104 	addi	r3,r3,4
10008fac:	39c00104 	addi	r7,r7,4
10008fb0:	4992983a 	sll	r9,r9,r6
10008fb4:	2a4ab03a 	or	r5,r5,r9
10008fb8:	197fff15 	stw	r5,-4(r3)
10008fbc:	397fff17 	ldw	r5,-4(r7)
10008fc0:	2a8ad83a 	srl	r5,r5,r10
10008fc4:	3a3ff736 	bltu	r7,r8,10008fa4 <__alt_data_end+0xf8008fa4>
10008fc8:	19400015 	stw	r5,0(r3)
10008fcc:	28000126 	beq	r5,zero,10008fd4 <__lshift+0xe4>
10008fd0:	ac000084 	addi	r16,r21,2
10008fd4:	91000117 	ldw	r4,4(r18)
10008fd8:	98c01317 	ldw	r3,76(r19)
10008fdc:	843fffc4 	addi	r16,r16,-1
10008fe0:	2109883a 	add	r4,r4,r4
10008fe4:	2109883a 	add	r4,r4,r4
10008fe8:	1907883a 	add	r3,r3,r4
10008fec:	19000017 	ldw	r4,0(r3)
10008ff0:	14000415 	stw	r16,16(r2)
10008ff4:	91000015 	stw	r4,0(r18)
10008ff8:	1c800015 	stw	r18,0(r3)
10008ffc:	dfc00617 	ldw	ra,24(sp)
10009000:	dd400517 	ldw	r21,20(sp)
10009004:	dd000417 	ldw	r20,16(sp)
10009008:	dcc00317 	ldw	r19,12(sp)
1000900c:	dc800217 	ldw	r18,8(sp)
10009010:	dc400117 	ldw	r17,4(sp)
10009014:	dc000017 	ldw	r16,0(sp)
10009018:	dec00704 	addi	sp,sp,28
1000901c:	f800283a 	ret
10009020:	39400017 	ldw	r5,0(r7)
10009024:	18c00104 	addi	r3,r3,4
10009028:	39c00104 	addi	r7,r7,4
1000902c:	197fff15 	stw	r5,-4(r3)
10009030:	3a3fe82e 	bgeu	r7,r8,10008fd4 <__alt_data_end+0xf8008fd4>
10009034:	39400017 	ldw	r5,0(r7)
10009038:	18c00104 	addi	r3,r3,4
1000903c:	39c00104 	addi	r7,r7,4
10009040:	197fff15 	stw	r5,-4(r3)
10009044:	3a3ff636 	bltu	r7,r8,10009020 <__alt_data_end+0xf8009020>
10009048:	003fe206 	br	10008fd4 <__alt_data_end+0xf8008fd4>

1000904c <__mcmp>:
1000904c:	20800417 	ldw	r2,16(r4)
10009050:	28c00417 	ldw	r3,16(r5)
10009054:	10c5c83a 	sub	r2,r2,r3
10009058:	10000f1e 	bne	r2,zero,10009098 <__mcmp+0x4c>
1000905c:	18c00144 	addi	r3,r3,5
10009060:	18c7883a 	add	r3,r3,r3
10009064:	18c7883a 	add	r3,r3,r3
10009068:	21c00504 	addi	r7,r4,20
1000906c:	28cb883a 	add	r5,r5,r3
10009070:	20c9883a 	add	r4,r4,r3
10009074:	213fff04 	addi	r4,r4,-4
10009078:	297fff04 	addi	r5,r5,-4
1000907c:	21800017 	ldw	r6,0(r4)
10009080:	28c00017 	ldw	r3,0(r5)
10009084:	30c0021e 	bne	r6,r3,10009090 <__mcmp+0x44>
10009088:	393ffa36 	bltu	r7,r4,10009074 <__alt_data_end+0xf8009074>
1000908c:	f800283a 	ret
10009090:	30c00236 	bltu	r6,r3,1000909c <__mcmp+0x50>
10009094:	00800044 	movi	r2,1
10009098:	f800283a 	ret
1000909c:	00bfffc4 	movi	r2,-1
100090a0:	f800283a 	ret

100090a4 <__mdiff>:
100090a4:	defffb04 	addi	sp,sp,-20
100090a8:	dc000015 	stw	r16,0(sp)
100090ac:	2821883a 	mov	r16,r5
100090b0:	dc800215 	stw	r18,8(sp)
100090b4:	300b883a 	mov	r5,r6
100090b8:	2025883a 	mov	r18,r4
100090bc:	8009883a 	mov	r4,r16
100090c0:	dc400115 	stw	r17,4(sp)
100090c4:	dfc00415 	stw	ra,16(sp)
100090c8:	dcc00315 	stw	r19,12(sp)
100090cc:	3023883a 	mov	r17,r6
100090d0:	000904c0 	call	1000904c <__mcmp>
100090d4:	10005026 	beq	r2,zero,10009218 <__mdiff+0x174>
100090d8:	10004a16 	blt	r2,zero,10009204 <__mdiff+0x160>
100090dc:	0027883a 	mov	r19,zero
100090e0:	81400117 	ldw	r5,4(r16)
100090e4:	9009883a 	mov	r4,r18
100090e8:	00087000 	call	10008700 <_Balloc>
100090ec:	82400417 	ldw	r9,16(r16)
100090f0:	89800417 	ldw	r6,16(r17)
100090f4:	14c00315 	stw	r19,12(r2)
100090f8:	4b800144 	addi	r14,r9,5
100090fc:	31800144 	addi	r6,r6,5
10009100:	739d883a 	add	r14,r14,r14
10009104:	318d883a 	add	r6,r6,r6
10009108:	739d883a 	add	r14,r14,r14
1000910c:	318d883a 	add	r6,r6,r6
10009110:	81c00504 	addi	r7,r16,20
10009114:	839d883a 	add	r14,r16,r14
10009118:	8a000504 	addi	r8,r17,20
1000911c:	898d883a 	add	r6,r17,r6
10009120:	10c00504 	addi	r3,r2,20
10009124:	0009883a 	mov	r4,zero
10009128:	3b000017 	ldw	r12,0(r7)
1000912c:	42c00017 	ldw	r11,0(r8)
10009130:	42000104 	addi	r8,r8,4
10009134:	62bfffcc 	andi	r10,r12,65535
10009138:	5b7fffcc 	andi	r13,r11,65535
1000913c:	5109883a 	add	r4,r10,r4
10009140:	2355c83a 	sub	r10,r4,r13
10009144:	5816d43a 	srli	r11,r11,16
10009148:	6008d43a 	srli	r4,r12,16
1000914c:	501bd43a 	srai	r13,r10,16
10009150:	1a80000d 	sth	r10,0(r3)
10009154:	22c9c83a 	sub	r4,r4,r11
10009158:	2349883a 	add	r4,r4,r13
1000915c:	1900008d 	sth	r4,2(r3)
10009160:	39c00104 	addi	r7,r7,4
10009164:	2009d43a 	srai	r4,r4,16
10009168:	18c00104 	addi	r3,r3,4
1000916c:	41bfee36 	bltu	r8,r6,10009128 <__alt_data_end+0xf8009128>
10009170:	180b883a 	mov	r5,r3
10009174:	3815883a 	mov	r10,r7
10009178:	3b80132e 	bgeu	r7,r14,100091c8 <__mdiff+0x124>
1000917c:	3a000017 	ldw	r8,0(r7)
10009180:	18c00104 	addi	r3,r3,4
10009184:	39c00104 	addi	r7,r7,4
10009188:	41bfffcc 	andi	r6,r8,65535
1000918c:	310d883a 	add	r6,r6,r4
10009190:	3009d43a 	srai	r4,r6,16
10009194:	4010d43a 	srli	r8,r8,16
10009198:	19bfff0d 	sth	r6,-4(r3)
1000919c:	2209883a 	add	r4,r4,r8
100091a0:	193fff8d 	sth	r4,-2(r3)
100091a4:	2009d43a 	srai	r4,r4,16
100091a8:	3bbff436 	bltu	r7,r14,1000917c <__alt_data_end+0xf800917c>
100091ac:	0286303a 	nor	r3,zero,r10
100091b0:	1b87883a 	add	r3,r3,r14
100091b4:	1806d0ba 	srli	r3,r3,2
100091b8:	18c00044 	addi	r3,r3,1
100091bc:	18c7883a 	add	r3,r3,r3
100091c0:	18c7883a 	add	r3,r3,r3
100091c4:	28c7883a 	add	r3,r5,r3
100091c8:	193fff17 	ldw	r4,-4(r3)
100091cc:	18ffff04 	addi	r3,r3,-4
100091d0:	2000041e 	bne	r4,zero,100091e4 <__mdiff+0x140>
100091d4:	18ffff04 	addi	r3,r3,-4
100091d8:	19000017 	ldw	r4,0(r3)
100091dc:	4a7fffc4 	addi	r9,r9,-1
100091e0:	203ffc26 	beq	r4,zero,100091d4 <__alt_data_end+0xf80091d4>
100091e4:	12400415 	stw	r9,16(r2)
100091e8:	dfc00417 	ldw	ra,16(sp)
100091ec:	dcc00317 	ldw	r19,12(sp)
100091f0:	dc800217 	ldw	r18,8(sp)
100091f4:	dc400117 	ldw	r17,4(sp)
100091f8:	dc000017 	ldw	r16,0(sp)
100091fc:	dec00504 	addi	sp,sp,20
10009200:	f800283a 	ret
10009204:	8005883a 	mov	r2,r16
10009208:	04c00044 	movi	r19,1
1000920c:	8821883a 	mov	r16,r17
10009210:	1023883a 	mov	r17,r2
10009214:	003fb206 	br	100090e0 <__alt_data_end+0xf80090e0>
10009218:	9009883a 	mov	r4,r18
1000921c:	000b883a 	mov	r5,zero
10009220:	00087000 	call	10008700 <_Balloc>
10009224:	00c00044 	movi	r3,1
10009228:	10c00415 	stw	r3,16(r2)
1000922c:	10000515 	stw	zero,20(r2)
10009230:	dfc00417 	ldw	ra,16(sp)
10009234:	dcc00317 	ldw	r19,12(sp)
10009238:	dc800217 	ldw	r18,8(sp)
1000923c:	dc400117 	ldw	r17,4(sp)
10009240:	dc000017 	ldw	r16,0(sp)
10009244:	dec00504 	addi	sp,sp,20
10009248:	f800283a 	ret

1000924c <__ulp>:
1000924c:	295ffc2c 	andhi	r5,r5,32752
10009250:	00bf3034 	movhi	r2,64704
10009254:	2887883a 	add	r3,r5,r2
10009258:	00c0020e 	bge	zero,r3,10009264 <__ulp+0x18>
1000925c:	0005883a 	mov	r2,zero
10009260:	f800283a 	ret
10009264:	00c7c83a 	sub	r3,zero,r3
10009268:	1805d53a 	srai	r2,r3,20
1000926c:	00c004c4 	movi	r3,19
10009270:	18800a0e 	bge	r3,r2,1000929c <__ulp+0x50>
10009274:	01000c84 	movi	r4,50
10009278:	0007883a 	mov	r3,zero
1000927c:	20800516 	blt	r4,r2,10009294 <__ulp+0x48>
10009280:	01000cc4 	movi	r4,51
10009284:	2085c83a 	sub	r2,r4,r2
10009288:	01000044 	movi	r4,1
1000928c:	2084983a 	sll	r2,r4,r2
10009290:	f800283a 	ret
10009294:	00800044 	movi	r2,1
10009298:	f800283a 	ret
1000929c:	00c00234 	movhi	r3,8
100092a0:	1887d83a 	sra	r3,r3,r2
100092a4:	0005883a 	mov	r2,zero
100092a8:	f800283a 	ret

100092ac <__b2d>:
100092ac:	defffa04 	addi	sp,sp,-24
100092b0:	dc000015 	stw	r16,0(sp)
100092b4:	24000417 	ldw	r16,16(r4)
100092b8:	dc400115 	stw	r17,4(sp)
100092bc:	dcc00315 	stw	r19,12(sp)
100092c0:	84000144 	addi	r16,r16,5
100092c4:	8421883a 	add	r16,r16,r16
100092c8:	8421883a 	add	r16,r16,r16
100092cc:	2421883a 	add	r16,r4,r16
100092d0:	847fff17 	ldw	r17,-4(r16)
100092d4:	24c00504 	addi	r19,r4,20
100092d8:	dd000415 	stw	r20,16(sp)
100092dc:	8809883a 	mov	r4,r17
100092e0:	dc800215 	stw	r18,8(sp)
100092e4:	2829883a 	mov	r20,r5
100092e8:	dfc00515 	stw	ra,20(sp)
100092ec:	0008a180 	call	10008a18 <__hi0bits>
100092f0:	00c00804 	movi	r3,32
100092f4:	1887c83a 	sub	r3,r3,r2
100092f8:	a0c00015 	stw	r3,0(r20)
100092fc:	00c00284 	movi	r3,10
10009300:	84bfff04 	addi	r18,r16,-4
10009304:	18801216 	blt	r3,r2,10009350 <__b2d+0xa4>
10009308:	010002c4 	movi	r4,11
1000930c:	2089c83a 	sub	r4,r4,r2
10009310:	8906d83a 	srl	r3,r17,r4
10009314:	18cffc34 	orhi	r3,r3,16368
10009318:	9c80322e 	bgeu	r19,r18,100093e4 <__b2d+0x138>
1000931c:	817ffe17 	ldw	r5,-8(r16)
10009320:	2908d83a 	srl	r4,r5,r4
10009324:	10800544 	addi	r2,r2,21
10009328:	88a2983a 	sll	r17,r17,r2
1000932c:	2444b03a 	or	r2,r4,r17
10009330:	dfc00517 	ldw	ra,20(sp)
10009334:	dd000417 	ldw	r20,16(sp)
10009338:	dcc00317 	ldw	r19,12(sp)
1000933c:	dc800217 	ldw	r18,8(sp)
10009340:	dc400117 	ldw	r17,4(sp)
10009344:	dc000017 	ldw	r16,0(sp)
10009348:	dec00604 	addi	sp,sp,24
1000934c:	f800283a 	ret
10009350:	9c801636 	bltu	r19,r18,100093ac <__b2d+0x100>
10009354:	113ffd44 	addi	r4,r2,-11
10009358:	000b883a 	mov	r5,zero
1000935c:	20001726 	beq	r4,zero,100093bc <__b2d+0x110>
10009360:	00c00ac4 	movi	r3,43
10009364:	1885c83a 	sub	r2,r3,r2
10009368:	8906983a 	sll	r3,r17,r4
1000936c:	288cd83a 	srl	r6,r5,r2
10009370:	18cffc34 	orhi	r3,r3,16368
10009374:	1986b03a 	or	r3,r3,r6
10009378:	9c801c2e 	bgeu	r19,r18,100093ec <__b2d+0x140>
1000937c:	91bfff17 	ldw	r6,-4(r18)
10009380:	3084d83a 	srl	r2,r6,r2
10009384:	2908983a 	sll	r4,r5,r4
10009388:	1104b03a 	or	r2,r2,r4
1000938c:	dfc00517 	ldw	ra,20(sp)
10009390:	dd000417 	ldw	r20,16(sp)
10009394:	dcc00317 	ldw	r19,12(sp)
10009398:	dc800217 	ldw	r18,8(sp)
1000939c:	dc400117 	ldw	r17,4(sp)
100093a0:	dc000017 	ldw	r16,0(sp)
100093a4:	dec00604 	addi	sp,sp,24
100093a8:	f800283a 	ret
100093ac:	113ffd44 	addi	r4,r2,-11
100093b0:	84bffe04 	addi	r18,r16,-8
100093b4:	817ffe17 	ldw	r5,-8(r16)
100093b8:	203fe91e 	bne	r4,zero,10009360 <__alt_data_end+0xf8009360>
100093bc:	88cffc34 	orhi	r3,r17,16368
100093c0:	2805883a 	mov	r2,r5
100093c4:	dfc00517 	ldw	ra,20(sp)
100093c8:	dd000417 	ldw	r20,16(sp)
100093cc:	dcc00317 	ldw	r19,12(sp)
100093d0:	dc800217 	ldw	r18,8(sp)
100093d4:	dc400117 	ldw	r17,4(sp)
100093d8:	dc000017 	ldw	r16,0(sp)
100093dc:	dec00604 	addi	sp,sp,24
100093e0:	f800283a 	ret
100093e4:	0009883a 	mov	r4,zero
100093e8:	003fce06 	br	10009324 <__alt_data_end+0xf8009324>
100093ec:	0005883a 	mov	r2,zero
100093f0:	003fe406 	br	10009384 <__alt_data_end+0xf8009384>

100093f4 <__d2b>:
100093f4:	defff804 	addi	sp,sp,-32
100093f8:	dc400315 	stw	r17,12(sp)
100093fc:	3023883a 	mov	r17,r6
10009400:	dc800415 	stw	r18,16(sp)
10009404:	8824907a 	slli	r18,r17,1
10009408:	dcc00515 	stw	r19,20(sp)
1000940c:	2827883a 	mov	r19,r5
10009410:	9024d57a 	srli	r18,r18,21
10009414:	01400044 	movi	r5,1
10009418:	dd000615 	stw	r20,24(sp)
1000941c:	dc000215 	stw	r16,8(sp)
10009420:	dfc00715 	stw	ra,28(sp)
10009424:	3829883a 	mov	r20,r7
10009428:	00087000 	call	10008700 <_Balloc>
1000942c:	1021883a 	mov	r16,r2
10009430:	00800434 	movhi	r2,16
10009434:	10bfffc4 	addi	r2,r2,-1
10009438:	88a2703a 	and	r17,r17,r2
1000943c:	90000126 	beq	r18,zero,10009444 <__d2b+0x50>
10009440:	8c400434 	orhi	r17,r17,16
10009444:	dc400015 	stw	r17,0(sp)
10009448:	98002226 	beq	r19,zero,100094d4 <__d2b+0xe0>
1000944c:	d9000104 	addi	r4,sp,4
10009450:	dcc00115 	stw	r19,4(sp)
10009454:	0008a800 	call	10008a80 <__lo0bits>
10009458:	d8c00017 	ldw	r3,0(sp)
1000945c:	10002d1e 	bne	r2,zero,10009514 <__d2b+0x120>
10009460:	d9000117 	ldw	r4,4(sp)
10009464:	81000515 	stw	r4,20(r16)
10009468:	1823003a 	cmpeq	r17,r3,zero
1000946c:	01000084 	movi	r4,2
10009470:	2463c83a 	sub	r17,r4,r17
10009474:	80c00615 	stw	r3,24(r16)
10009478:	84400415 	stw	r17,16(r16)
1000947c:	90001d1e 	bne	r18,zero,100094f4 <__d2b+0x100>
10009480:	88c00104 	addi	r3,r17,4
10009484:	18c7883a 	add	r3,r3,r3
10009488:	18c7883a 	add	r3,r3,r3
1000948c:	80c7883a 	add	r3,r16,r3
10009490:	19000017 	ldw	r4,0(r3)
10009494:	10bef384 	addi	r2,r2,-1074
10009498:	a0800015 	stw	r2,0(r20)
1000949c:	0008a180 	call	10008a18 <__hi0bits>
100094a0:	8822917a 	slli	r17,r17,5
100094a4:	d8c00817 	ldw	r3,32(sp)
100094a8:	8885c83a 	sub	r2,r17,r2
100094ac:	18800015 	stw	r2,0(r3)
100094b0:	8005883a 	mov	r2,r16
100094b4:	dfc00717 	ldw	ra,28(sp)
100094b8:	dd000617 	ldw	r20,24(sp)
100094bc:	dcc00517 	ldw	r19,20(sp)
100094c0:	dc800417 	ldw	r18,16(sp)
100094c4:	dc400317 	ldw	r17,12(sp)
100094c8:	dc000217 	ldw	r16,8(sp)
100094cc:	dec00804 	addi	sp,sp,32
100094d0:	f800283a 	ret
100094d4:	d809883a 	mov	r4,sp
100094d8:	0008a800 	call	10008a80 <__lo0bits>
100094dc:	d8c00017 	ldw	r3,0(sp)
100094e0:	04400044 	movi	r17,1
100094e4:	84400415 	stw	r17,16(r16)
100094e8:	80c00515 	stw	r3,20(r16)
100094ec:	10800804 	addi	r2,r2,32
100094f0:	903fe326 	beq	r18,zero,10009480 <__alt_data_end+0xf8009480>
100094f4:	00c00d44 	movi	r3,53
100094f8:	94bef344 	addi	r18,r18,-1075
100094fc:	90a5883a 	add	r18,r18,r2
10009500:	1885c83a 	sub	r2,r3,r2
10009504:	d8c00817 	ldw	r3,32(sp)
10009508:	a4800015 	stw	r18,0(r20)
1000950c:	18800015 	stw	r2,0(r3)
10009510:	003fe706 	br	100094b0 <__alt_data_end+0xf80094b0>
10009514:	01000804 	movi	r4,32
10009518:	2089c83a 	sub	r4,r4,r2
1000951c:	1908983a 	sll	r4,r3,r4
10009520:	d9400117 	ldw	r5,4(sp)
10009524:	1886d83a 	srl	r3,r3,r2
10009528:	2148b03a 	or	r4,r4,r5
1000952c:	81000515 	stw	r4,20(r16)
10009530:	d8c00015 	stw	r3,0(sp)
10009534:	003fcc06 	br	10009468 <__alt_data_end+0xf8009468>

10009538 <__ratio>:
10009538:	defff904 	addi	sp,sp,-28
1000953c:	dc400315 	stw	r17,12(sp)
10009540:	2823883a 	mov	r17,r5
10009544:	d9400104 	addi	r5,sp,4
10009548:	dfc00615 	stw	ra,24(sp)
1000954c:	dcc00515 	stw	r19,20(sp)
10009550:	dc800415 	stw	r18,16(sp)
10009554:	2027883a 	mov	r19,r4
10009558:	dc000215 	stw	r16,8(sp)
1000955c:	00092ac0 	call	100092ac <__b2d>
10009560:	8809883a 	mov	r4,r17
10009564:	d80b883a 	mov	r5,sp
10009568:	1025883a 	mov	r18,r2
1000956c:	1821883a 	mov	r16,r3
10009570:	00092ac0 	call	100092ac <__b2d>
10009574:	99400417 	ldw	r5,16(r19)
10009578:	89000417 	ldw	r4,16(r17)
1000957c:	d9800117 	ldw	r6,4(sp)
10009580:	2909c83a 	sub	r4,r5,r4
10009584:	d9400017 	ldw	r5,0(sp)
10009588:	2008917a 	slli	r4,r4,5
1000958c:	314bc83a 	sub	r5,r6,r5
10009590:	290b883a 	add	r5,r5,r4
10009594:	01400e0e 	bge	zero,r5,100095d0 <__ratio+0x98>
10009598:	280a953a 	slli	r5,r5,20
1000959c:	2c21883a 	add	r16,r5,r16
100095a0:	9009883a 	mov	r4,r18
100095a4:	800b883a 	mov	r5,r16
100095a8:	100d883a 	mov	r6,r2
100095ac:	180f883a 	mov	r7,r3
100095b0:	000f2040 	call	1000f204 <__divdf3>
100095b4:	dfc00617 	ldw	ra,24(sp)
100095b8:	dcc00517 	ldw	r19,20(sp)
100095bc:	dc800417 	ldw	r18,16(sp)
100095c0:	dc400317 	ldw	r17,12(sp)
100095c4:	dc000217 	ldw	r16,8(sp)
100095c8:	dec00704 	addi	sp,sp,28
100095cc:	f800283a 	ret
100095d0:	280a953a 	slli	r5,r5,20
100095d4:	1947c83a 	sub	r3,r3,r5
100095d8:	003ff106 	br	100095a0 <__alt_data_end+0xf80095a0>

100095dc <_mprec_log10>:
100095dc:	defffe04 	addi	sp,sp,-8
100095e0:	dc000015 	stw	r16,0(sp)
100095e4:	dfc00115 	stw	ra,4(sp)
100095e8:	008005c4 	movi	r2,23
100095ec:	2021883a 	mov	r16,r4
100095f0:	11000d0e 	bge	r2,r4,10009628 <_mprec_log10+0x4c>
100095f4:	0005883a 	mov	r2,zero
100095f8:	00cffc34 	movhi	r3,16368
100095fc:	843fffc4 	addi	r16,r16,-1
10009600:	1009883a 	mov	r4,r2
10009604:	180b883a 	mov	r5,r3
10009608:	000d883a 	mov	r6,zero
1000960c:	01d00934 	movhi	r7,16420
10009610:	000ef200 	call	1000ef20 <__muldf3>
10009614:	803ff91e 	bne	r16,zero,100095fc <__alt_data_end+0xf80095fc>
10009618:	dfc00117 	ldw	ra,4(sp)
1000961c:	dc000017 	ldw	r16,0(sp)
10009620:	dec00204 	addi	sp,sp,8
10009624:	f800283a 	ret
10009628:	202090fa 	slli	r16,r4,3
1000962c:	00840074 	movhi	r2,4097
10009630:	108aeb04 	addi	r2,r2,11180
10009634:	1421883a 	add	r16,r2,r16
10009638:	80800017 	ldw	r2,0(r16)
1000963c:	80c00117 	ldw	r3,4(r16)
10009640:	dfc00117 	ldw	ra,4(sp)
10009644:	dc000017 	ldw	r16,0(sp)
10009648:	dec00204 	addi	sp,sp,8
1000964c:	f800283a 	ret

10009650 <__copybits>:
10009650:	297fffc4 	addi	r5,r5,-1
10009654:	31c00417 	ldw	r7,16(r6)
10009658:	2811d17a 	srai	r8,r5,5
1000965c:	30800504 	addi	r2,r6,20
10009660:	39c00144 	addi	r7,r7,5
10009664:	42000044 	addi	r8,r8,1
10009668:	39cf883a 	add	r7,r7,r7
1000966c:	4211883a 	add	r8,r8,r8
10009670:	39cf883a 	add	r7,r7,r7
10009674:	4211883a 	add	r8,r8,r8
10009678:	31cf883a 	add	r7,r6,r7
1000967c:	2211883a 	add	r8,r4,r8
10009680:	11c00d2e 	bgeu	r2,r7,100096b8 <__copybits+0x68>
10009684:	2007883a 	mov	r3,r4
10009688:	11400017 	ldw	r5,0(r2)
1000968c:	18c00104 	addi	r3,r3,4
10009690:	10800104 	addi	r2,r2,4
10009694:	197fff15 	stw	r5,-4(r3)
10009698:	11fffb36 	bltu	r2,r7,10009688 <__alt_data_end+0xf8009688>
1000969c:	3985c83a 	sub	r2,r7,r6
100096a0:	10bffac4 	addi	r2,r2,-21
100096a4:	1004d0ba 	srli	r2,r2,2
100096a8:	10800044 	addi	r2,r2,1
100096ac:	1085883a 	add	r2,r2,r2
100096b0:	1085883a 	add	r2,r2,r2
100096b4:	2089883a 	add	r4,r4,r2
100096b8:	2200032e 	bgeu	r4,r8,100096c8 <__copybits+0x78>
100096bc:	20000015 	stw	zero,0(r4)
100096c0:	21000104 	addi	r4,r4,4
100096c4:	223ffd36 	bltu	r4,r8,100096bc <__alt_data_end+0xf80096bc>
100096c8:	f800283a 	ret

100096cc <__any_on>:
100096cc:	21800417 	ldw	r6,16(r4)
100096d0:	2805d17a 	srai	r2,r5,5
100096d4:	20c00504 	addi	r3,r4,20
100096d8:	30800f0e 	bge	r6,r2,10009718 <__any_on+0x4c>
100096dc:	3005883a 	mov	r2,r6
100096e0:	10800144 	addi	r2,r2,5
100096e4:	1085883a 	add	r2,r2,r2
100096e8:	1085883a 	add	r2,r2,r2
100096ec:	2089883a 	add	r4,r4,r2
100096f0:	1900152e 	bgeu	r3,r4,10009748 <__any_on+0x7c>
100096f4:	20bfff17 	ldw	r2,-4(r4)
100096f8:	213fff04 	addi	r4,r4,-4
100096fc:	1000041e 	bne	r2,zero,10009710 <__any_on+0x44>
10009700:	1900112e 	bgeu	r3,r4,10009748 <__any_on+0x7c>
10009704:	213fff04 	addi	r4,r4,-4
10009708:	20800017 	ldw	r2,0(r4)
1000970c:	103ffc26 	beq	r2,zero,10009700 <__alt_data_end+0xf8009700>
10009710:	00800044 	movi	r2,1
10009714:	f800283a 	ret
10009718:	11bff10e 	bge	r2,r6,100096e0 <__alt_data_end+0xf80096e0>
1000971c:	294007cc 	andi	r5,r5,31
10009720:	283fef26 	beq	r5,zero,100096e0 <__alt_data_end+0xf80096e0>
10009724:	11800144 	addi	r6,r2,5
10009728:	318d883a 	add	r6,r6,r6
1000972c:	318d883a 	add	r6,r6,r6
10009730:	218d883a 	add	r6,r4,r6
10009734:	31800017 	ldw	r6,0(r6)
10009738:	314ed83a 	srl	r7,r6,r5
1000973c:	394a983a 	sll	r5,r7,r5
10009740:	29bff31e 	bne	r5,r6,10009710 <__alt_data_end+0xf8009710>
10009744:	003fe606 	br	100096e0 <__alt_data_end+0xf80096e0>
10009748:	0005883a 	mov	r2,zero
1000974c:	f800283a 	ret

10009750 <_putc_r>:
10009750:	defffc04 	addi	sp,sp,-16
10009754:	dc000215 	stw	r16,8(sp)
10009758:	dfc00315 	stw	ra,12(sp)
1000975c:	2021883a 	mov	r16,r4
10009760:	20000226 	beq	r4,zero,1000976c <_putc_r+0x1c>
10009764:	20800e17 	ldw	r2,56(r4)
10009768:	10001d26 	beq	r2,zero,100097e0 <_putc_r+0x90>
1000976c:	30800217 	ldw	r2,8(r6)
10009770:	10bfffc4 	addi	r2,r2,-1
10009774:	30800215 	stw	r2,8(r6)
10009778:	10000a16 	blt	r2,zero,100097a4 <_putc_r+0x54>
1000977c:	30800017 	ldw	r2,0(r6)
10009780:	11400005 	stb	r5,0(r2)
10009784:	30800017 	ldw	r2,0(r6)
10009788:	10c00044 	addi	r3,r2,1
1000978c:	10800003 	ldbu	r2,0(r2)
10009790:	30c00015 	stw	r3,0(r6)
10009794:	dfc00317 	ldw	ra,12(sp)
10009798:	dc000217 	ldw	r16,8(sp)
1000979c:	dec00404 	addi	sp,sp,16
100097a0:	f800283a 	ret
100097a4:	30c00617 	ldw	r3,24(r6)
100097a8:	10c01316 	blt	r2,r3,100097f8 <_putc_r+0xa8>
100097ac:	30800017 	ldw	r2,0(r6)
100097b0:	01000284 	movi	r4,10
100097b4:	11400005 	stb	r5,0(r2)
100097b8:	30c00017 	ldw	r3,0(r6)
100097bc:	19400003 	ldbu	r5,0(r3)
100097c0:	29000d26 	beq	r5,r4,100097f8 <_putc_r+0xa8>
100097c4:	18c00044 	addi	r3,r3,1
100097c8:	2805883a 	mov	r2,r5
100097cc:	30c00015 	stw	r3,0(r6)
100097d0:	dfc00317 	ldw	ra,12(sp)
100097d4:	dc000217 	ldw	r16,8(sp)
100097d8:	dec00404 	addi	sp,sp,16
100097dc:	f800283a 	ret
100097e0:	d9400015 	stw	r5,0(sp)
100097e4:	d9800115 	stw	r6,4(sp)
100097e8:	00068240 	call	10006824 <__sinit>
100097ec:	d9800117 	ldw	r6,4(sp)
100097f0:	d9400017 	ldw	r5,0(sp)
100097f4:	003fdd06 	br	1000976c <__alt_data_end+0xf800976c>
100097f8:	8009883a 	mov	r4,r16
100097fc:	dfc00317 	ldw	ra,12(sp)
10009800:	dc000217 	ldw	r16,8(sp)
10009804:	dec00404 	addi	sp,sp,16
10009808:	000ca7c1 	jmpi	1000ca7c <__swbuf_r>

1000980c <putc>:
1000980c:	defffc04 	addi	sp,sp,-16
10009810:	dc400115 	stw	r17,4(sp)
10009814:	04440074 	movhi	r17,4097
10009818:	8c52a404 	addi	r17,r17,19088
1000981c:	88800017 	ldw	r2,0(r17)
10009820:	dc800215 	stw	r18,8(sp)
10009824:	dc000015 	stw	r16,0(sp)
10009828:	dfc00315 	stw	ra,12(sp)
1000982c:	2025883a 	mov	r18,r4
10009830:	2821883a 	mov	r16,r5
10009834:	10000226 	beq	r2,zero,10009840 <putc+0x34>
10009838:	10c00e17 	ldw	r3,56(r2)
1000983c:	18002126 	beq	r3,zero,100098c4 <putc+0xb8>
10009840:	80800217 	ldw	r2,8(r16)
10009844:	10bfffc4 	addi	r2,r2,-1
10009848:	80800215 	stw	r2,8(r16)
1000984c:	10000c16 	blt	r2,zero,10009880 <putc+0x74>
10009850:	80800017 	ldw	r2,0(r16)
10009854:	14800005 	stb	r18,0(r2)
10009858:	80800017 	ldw	r2,0(r16)
1000985c:	10c00044 	addi	r3,r2,1
10009860:	10800003 	ldbu	r2,0(r2)
10009864:	80c00015 	stw	r3,0(r16)
10009868:	dfc00317 	ldw	ra,12(sp)
1000986c:	dc800217 	ldw	r18,8(sp)
10009870:	dc400117 	ldw	r17,4(sp)
10009874:	dc000017 	ldw	r16,0(sp)
10009878:	dec00404 	addi	sp,sp,16
1000987c:	f800283a 	ret
10009880:	80c00617 	ldw	r3,24(r16)
10009884:	10c01216 	blt	r2,r3,100098d0 <putc+0xc4>
10009888:	80800017 	ldw	r2,0(r16)
1000988c:	01000284 	movi	r4,10
10009890:	14800005 	stb	r18,0(r2)
10009894:	80c00017 	ldw	r3,0(r16)
10009898:	19400003 	ldbu	r5,0(r3)
1000989c:	29001526 	beq	r5,r4,100098f4 <putc+0xe8>
100098a0:	18c00044 	addi	r3,r3,1
100098a4:	2805883a 	mov	r2,r5
100098a8:	80c00015 	stw	r3,0(r16)
100098ac:	dfc00317 	ldw	ra,12(sp)
100098b0:	dc800217 	ldw	r18,8(sp)
100098b4:	dc400117 	ldw	r17,4(sp)
100098b8:	dc000017 	ldw	r16,0(sp)
100098bc:	dec00404 	addi	sp,sp,16
100098c0:	f800283a 	ret
100098c4:	1009883a 	mov	r4,r2
100098c8:	00068240 	call	10006824 <__sinit>
100098cc:	003fdc06 	br	10009840 <__alt_data_end+0xf8009840>
100098d0:	89000017 	ldw	r4,0(r17)
100098d4:	900b883a 	mov	r5,r18
100098d8:	800d883a 	mov	r6,r16
100098dc:	dfc00317 	ldw	ra,12(sp)
100098e0:	dc800217 	ldw	r18,8(sp)
100098e4:	dc400117 	ldw	r17,4(sp)
100098e8:	dc000017 	ldw	r16,0(sp)
100098ec:	dec00404 	addi	sp,sp,16
100098f0:	000ca7c1 	jmpi	1000ca7c <__swbuf_r>
100098f4:	89000017 	ldw	r4,0(r17)
100098f8:	003ff706 	br	100098d8 <__alt_data_end+0xf80098d8>

100098fc <_realloc_r>:
100098fc:	defff504 	addi	sp,sp,-44
10009900:	dd400615 	stw	r21,24(sp)
10009904:	dc800315 	stw	r18,12(sp)
10009908:	dc000115 	stw	r16,4(sp)
1000990c:	dfc00a15 	stw	ra,40(sp)
10009910:	df000915 	stw	fp,36(sp)
10009914:	ddc00815 	stw	r23,32(sp)
10009918:	dd800715 	stw	r22,28(sp)
1000991c:	dd000515 	stw	r20,20(sp)
10009920:	dcc00415 	stw	r19,16(sp)
10009924:	dc400215 	stw	r17,8(sp)
10009928:	2821883a 	mov	r16,r5
1000992c:	202b883a 	mov	r21,r4
10009930:	3025883a 	mov	r18,r6
10009934:	28009626 	beq	r5,zero,10009b90 <_realloc_r+0x294>
10009938:	00106d00 	call	100106d0 <__malloc_lock>
1000993c:	80bfff17 	ldw	r2,-4(r16)
10009940:	04ffff04 	movi	r19,-4
10009944:	90c002c4 	addi	r3,r18,11
10009948:	01000584 	movi	r4,22
1000994c:	85bffe04 	addi	r22,r16,-8
10009950:	14e6703a 	and	r19,r2,r19
10009954:	20c0372e 	bgeu	r4,r3,10009a34 <_realloc_r+0x138>
10009958:	047ffe04 	movi	r17,-8
1000995c:	1c62703a 	and	r17,r3,r17
10009960:	8807883a 	mov	r3,r17
10009964:	88005a16 	blt	r17,zero,10009ad0 <_realloc_r+0x1d4>
10009968:	8c805936 	bltu	r17,r18,10009ad0 <_realloc_r+0x1d4>
1000996c:	98c0340e 	bge	r19,r3,10009a40 <_realloc_r+0x144>
10009970:	07040074 	movhi	fp,4097
10009974:	e70d1404 	addi	fp,fp,13392
10009978:	e1400217 	ldw	r5,8(fp)
1000997c:	b4c9883a 	add	r4,r22,r19
10009980:	29009026 	beq	r5,r4,10009bc4 <_realloc_r+0x2c8>
10009984:	21800117 	ldw	r6,4(r4)
10009988:	01ffff84 	movi	r7,-2
1000998c:	31ce703a 	and	r7,r6,r7
10009990:	21cf883a 	add	r7,r4,r7
10009994:	39c00117 	ldw	r7,4(r7)
10009998:	39c0004c 	andi	r7,r7,1
1000999c:	38004326 	beq	r7,zero,10009aac <_realloc_r+0x1b0>
100099a0:	000d883a 	mov	r6,zero
100099a4:	0009883a 	mov	r4,zero
100099a8:	1080004c 	andi	r2,r2,1
100099ac:	10005a1e 	bne	r2,zero,10009b18 <_realloc_r+0x21c>
100099b0:	85fffe17 	ldw	r23,-8(r16)
100099b4:	00bfff04 	movi	r2,-4
100099b8:	b5efc83a 	sub	r23,r22,r23
100099bc:	b9c00117 	ldw	r7,4(r23)
100099c0:	388e703a 	and	r7,r7,r2
100099c4:	3ccf883a 	add	r7,r7,r19
100099c8:	20005226 	beq	r4,zero,10009b14 <_realloc_r+0x218>
100099cc:	31e9883a 	add	r20,r6,r7
100099d0:	2140c726 	beq	r4,r5,10009cf0 <_realloc_r+0x3f4>
100099d4:	a0c04f16 	blt	r20,r3,10009b14 <_realloc_r+0x218>
100099d8:	20800317 	ldw	r2,12(r4)
100099dc:	20c00217 	ldw	r3,8(r4)
100099e0:	99bfff04 	addi	r6,r19,-4
100099e4:	01000904 	movi	r4,36
100099e8:	18800315 	stw	r2,12(r3)
100099ec:	10c00215 	stw	r3,8(r2)
100099f0:	b8c00217 	ldw	r3,8(r23)
100099f4:	b8800317 	ldw	r2,12(r23)
100099f8:	bc800204 	addi	r18,r23,8
100099fc:	18800315 	stw	r2,12(r3)
10009a00:	10c00215 	stw	r3,8(r2)
10009a04:	2180ed36 	bltu	r4,r6,10009dbc <_realloc_r+0x4c0>
10009a08:	008004c4 	movi	r2,19
10009a0c:	11809b2e 	bgeu	r2,r6,10009c7c <_realloc_r+0x380>
10009a10:	80800017 	ldw	r2,0(r16)
10009a14:	b8800215 	stw	r2,8(r23)
10009a18:	80800117 	ldw	r2,4(r16)
10009a1c:	b8800315 	stw	r2,12(r23)
10009a20:	008006c4 	movi	r2,27
10009a24:	1180f936 	bltu	r2,r6,10009e0c <_realloc_r+0x510>
10009a28:	b8800404 	addi	r2,r23,16
10009a2c:	80c00204 	addi	r3,r16,8
10009a30:	00009406 	br	10009c84 <_realloc_r+0x388>
10009a34:	00c00404 	movi	r3,16
10009a38:	1823883a 	mov	r17,r3
10009a3c:	003fca06 	br	10009968 <__alt_data_end+0xf8009968>
10009a40:	9829883a 	mov	r20,r19
10009a44:	a447c83a 	sub	r3,r20,r17
10009a48:	010003c4 	movi	r4,15
10009a4c:	1080004c 	andi	r2,r2,1
10009a50:	20c02336 	bltu	r4,r3,10009ae0 <_realloc_r+0x1e4>
10009a54:	1504b03a 	or	r2,r2,r20
10009a58:	b0800115 	stw	r2,4(r22)
10009a5c:	b52d883a 	add	r22,r22,r20
10009a60:	b0800117 	ldw	r2,4(r22)
10009a64:	10800054 	ori	r2,r2,1
10009a68:	b0800115 	stw	r2,4(r22)
10009a6c:	a809883a 	mov	r4,r21
10009a70:	00106f00 	call	100106f0 <__malloc_unlock>
10009a74:	8025883a 	mov	r18,r16
10009a78:	9005883a 	mov	r2,r18
10009a7c:	dfc00a17 	ldw	ra,40(sp)
10009a80:	df000917 	ldw	fp,36(sp)
10009a84:	ddc00817 	ldw	r23,32(sp)
10009a88:	dd800717 	ldw	r22,28(sp)
10009a8c:	dd400617 	ldw	r21,24(sp)
10009a90:	dd000517 	ldw	r20,20(sp)
10009a94:	dcc00417 	ldw	r19,16(sp)
10009a98:	dc800317 	ldw	r18,12(sp)
10009a9c:	dc400217 	ldw	r17,8(sp)
10009aa0:	dc000117 	ldw	r16,4(sp)
10009aa4:	dec00b04 	addi	sp,sp,44
10009aa8:	f800283a 	ret
10009aac:	01ffff04 	movi	r7,-4
10009ab0:	31cc703a 	and	r6,r6,r7
10009ab4:	34e9883a 	add	r20,r6,r19
10009ab8:	a0ffbb16 	blt	r20,r3,100099a8 <__alt_data_end+0xf80099a8>
10009abc:	20c00317 	ldw	r3,12(r4)
10009ac0:	21000217 	ldw	r4,8(r4)
10009ac4:	20c00315 	stw	r3,12(r4)
10009ac8:	19000215 	stw	r4,8(r3)
10009acc:	003fdd06 	br	10009a44 <__alt_data_end+0xf8009a44>
10009ad0:	00800304 	movi	r2,12
10009ad4:	a8800015 	stw	r2,0(r21)
10009ad8:	0025883a 	mov	r18,zero
10009adc:	003fe606 	br	10009a78 <__alt_data_end+0xf8009a78>
10009ae0:	1444b03a 	or	r2,r2,r17
10009ae4:	b0800115 	stw	r2,4(r22)
10009ae8:	b44b883a 	add	r5,r22,r17
10009aec:	18800054 	ori	r2,r3,1
10009af0:	28800115 	stw	r2,4(r5)
10009af4:	28c7883a 	add	r3,r5,r3
10009af8:	18800117 	ldw	r2,4(r3)
10009afc:	a809883a 	mov	r4,r21
10009b00:	29400204 	addi	r5,r5,8
10009b04:	10800054 	ori	r2,r2,1
10009b08:	18800115 	stw	r2,4(r3)
10009b0c:	0006e240 	call	10006e24 <_free_r>
10009b10:	003fd606 	br	10009a6c <__alt_data_end+0xf8009a6c>
10009b14:	38c0330e 	bge	r7,r3,10009be4 <_realloc_r+0x2e8>
10009b18:	900b883a 	mov	r5,r18
10009b1c:	a809883a 	mov	r4,r21
10009b20:	00079f40 	call	100079f4 <_malloc_r>
10009b24:	1025883a 	mov	r18,r2
10009b28:	10001626 	beq	r2,zero,10009b84 <_realloc_r+0x288>
10009b2c:	80bfff17 	ldw	r2,-4(r16)
10009b30:	00ffff84 	movi	r3,-2
10009b34:	913ffe04 	addi	r4,r18,-8
10009b38:	10c6703a 	and	r3,r2,r3
10009b3c:	b0c7883a 	add	r3,r22,r3
10009b40:	20c09926 	beq	r4,r3,10009da8 <_realloc_r+0x4ac>
10009b44:	99bfff04 	addi	r6,r19,-4
10009b48:	00800904 	movi	r2,36
10009b4c:	11806436 	bltu	r2,r6,10009ce0 <_realloc_r+0x3e4>
10009b50:	00c004c4 	movi	r3,19
10009b54:	19804036 	bltu	r3,r6,10009c58 <_realloc_r+0x35c>
10009b58:	9005883a 	mov	r2,r18
10009b5c:	8007883a 	mov	r3,r16
10009b60:	19000017 	ldw	r4,0(r3)
10009b64:	11000015 	stw	r4,0(r2)
10009b68:	19000117 	ldw	r4,4(r3)
10009b6c:	11000115 	stw	r4,4(r2)
10009b70:	18c00217 	ldw	r3,8(r3)
10009b74:	10c00215 	stw	r3,8(r2)
10009b78:	a809883a 	mov	r4,r21
10009b7c:	800b883a 	mov	r5,r16
10009b80:	0006e240 	call	10006e24 <_free_r>
10009b84:	a809883a 	mov	r4,r21
10009b88:	00106f00 	call	100106f0 <__malloc_unlock>
10009b8c:	003fba06 	br	10009a78 <__alt_data_end+0xf8009a78>
10009b90:	300b883a 	mov	r5,r6
10009b94:	dfc00a17 	ldw	ra,40(sp)
10009b98:	df000917 	ldw	fp,36(sp)
10009b9c:	ddc00817 	ldw	r23,32(sp)
10009ba0:	dd800717 	ldw	r22,28(sp)
10009ba4:	dd400617 	ldw	r21,24(sp)
10009ba8:	dd000517 	ldw	r20,20(sp)
10009bac:	dcc00417 	ldw	r19,16(sp)
10009bb0:	dc800317 	ldw	r18,12(sp)
10009bb4:	dc400217 	ldw	r17,8(sp)
10009bb8:	dc000117 	ldw	r16,4(sp)
10009bbc:	dec00b04 	addi	sp,sp,44
10009bc0:	00079f41 	jmpi	100079f4 <_malloc_r>
10009bc4:	29800117 	ldw	r6,4(r5)
10009bc8:	013fff04 	movi	r4,-4
10009bcc:	89c00404 	addi	r7,r17,16
10009bd0:	310c703a 	and	r6,r6,r4
10009bd4:	34c9883a 	add	r4,r6,r19
10009bd8:	21c0340e 	bge	r4,r7,10009cac <_realloc_r+0x3b0>
10009bdc:	2809883a 	mov	r4,r5
10009be0:	003f7106 	br	100099a8 <__alt_data_end+0xf80099a8>
10009be4:	b8800317 	ldw	r2,12(r23)
10009be8:	b8c00217 	ldw	r3,8(r23)
10009bec:	99bfff04 	addi	r6,r19,-4
10009bf0:	01000904 	movi	r4,36
10009bf4:	18800315 	stw	r2,12(r3)
10009bf8:	10c00215 	stw	r3,8(r2)
10009bfc:	bc800204 	addi	r18,r23,8
10009c00:	21807836 	bltu	r4,r6,10009de4 <_realloc_r+0x4e8>
10009c04:	008004c4 	movi	r2,19
10009c08:	1180732e 	bgeu	r2,r6,10009dd8 <_realloc_r+0x4dc>
10009c0c:	80800017 	ldw	r2,0(r16)
10009c10:	b8800215 	stw	r2,8(r23)
10009c14:	80800117 	ldw	r2,4(r16)
10009c18:	b8800315 	stw	r2,12(r23)
10009c1c:	008006c4 	movi	r2,27
10009c20:	11808936 	bltu	r2,r6,10009e48 <_realloc_r+0x54c>
10009c24:	b8800404 	addi	r2,r23,16
10009c28:	80c00204 	addi	r3,r16,8
10009c2c:	19000017 	ldw	r4,0(r3)
10009c30:	9021883a 	mov	r16,r18
10009c34:	3829883a 	mov	r20,r7
10009c38:	11000015 	stw	r4,0(r2)
10009c3c:	19000117 	ldw	r4,4(r3)
10009c40:	b82d883a 	mov	r22,r23
10009c44:	11000115 	stw	r4,4(r2)
10009c48:	18c00217 	ldw	r3,8(r3)
10009c4c:	10c00215 	stw	r3,8(r2)
10009c50:	b8800117 	ldw	r2,4(r23)
10009c54:	003f7b06 	br	10009a44 <__alt_data_end+0xf8009a44>
10009c58:	80c00017 	ldw	r3,0(r16)
10009c5c:	90c00015 	stw	r3,0(r18)
10009c60:	80c00117 	ldw	r3,4(r16)
10009c64:	90c00115 	stw	r3,4(r18)
10009c68:	00c006c4 	movi	r3,27
10009c6c:	19804636 	bltu	r3,r6,10009d88 <_realloc_r+0x48c>
10009c70:	90800204 	addi	r2,r18,8
10009c74:	80c00204 	addi	r3,r16,8
10009c78:	003fb906 	br	10009b60 <__alt_data_end+0xf8009b60>
10009c7c:	9005883a 	mov	r2,r18
10009c80:	8007883a 	mov	r3,r16
10009c84:	19000017 	ldw	r4,0(r3)
10009c88:	9021883a 	mov	r16,r18
10009c8c:	b82d883a 	mov	r22,r23
10009c90:	11000015 	stw	r4,0(r2)
10009c94:	19000117 	ldw	r4,4(r3)
10009c98:	11000115 	stw	r4,4(r2)
10009c9c:	18c00217 	ldw	r3,8(r3)
10009ca0:	10c00215 	stw	r3,8(r2)
10009ca4:	b8800117 	ldw	r2,4(r23)
10009ca8:	003f6606 	br	10009a44 <__alt_data_end+0xf8009a44>
10009cac:	2445c83a 	sub	r2,r4,r17
10009cb0:	b46d883a 	add	r22,r22,r17
10009cb4:	10800054 	ori	r2,r2,1
10009cb8:	b0800115 	stw	r2,4(r22)
10009cbc:	80bfff17 	ldw	r2,-4(r16)
10009cc0:	a809883a 	mov	r4,r21
10009cc4:	e5800215 	stw	r22,8(fp)
10009cc8:	1080004c 	andi	r2,r2,1
10009ccc:	88a2b03a 	or	r17,r17,r2
10009cd0:	847fff15 	stw	r17,-4(r16)
10009cd4:	00106f00 	call	100106f0 <__malloc_unlock>
10009cd8:	8025883a 	mov	r18,r16
10009cdc:	003f6606 	br	10009a78 <__alt_data_end+0xf8009a78>
10009ce0:	9009883a 	mov	r4,r18
10009ce4:	800b883a 	mov	r5,r16
10009ce8:	00084980 	call	10008498 <memmove>
10009cec:	003fa206 	br	10009b78 <__alt_data_end+0xf8009b78>
10009cf0:	88800404 	addi	r2,r17,16
10009cf4:	a0bf8716 	blt	r20,r2,10009b14 <__alt_data_end+0xf8009b14>
10009cf8:	b8800317 	ldw	r2,12(r23)
10009cfc:	b8c00217 	ldw	r3,8(r23)
10009d00:	99bfff04 	addi	r6,r19,-4
10009d04:	01000904 	movi	r4,36
10009d08:	18800315 	stw	r2,12(r3)
10009d0c:	10c00215 	stw	r3,8(r2)
10009d10:	bc800204 	addi	r18,r23,8
10009d14:	21806536 	bltu	r4,r6,10009eac <_realloc_r+0x5b0>
10009d18:	008004c4 	movi	r2,19
10009d1c:	1180592e 	bgeu	r2,r6,10009e84 <_realloc_r+0x588>
10009d20:	80800017 	ldw	r2,0(r16)
10009d24:	b8800215 	stw	r2,8(r23)
10009d28:	80800117 	ldw	r2,4(r16)
10009d2c:	b8800315 	stw	r2,12(r23)
10009d30:	008006c4 	movi	r2,27
10009d34:	11806136 	bltu	r2,r6,10009ebc <_realloc_r+0x5c0>
10009d38:	b8800404 	addi	r2,r23,16
10009d3c:	80c00204 	addi	r3,r16,8
10009d40:	19000017 	ldw	r4,0(r3)
10009d44:	11000015 	stw	r4,0(r2)
10009d48:	19000117 	ldw	r4,4(r3)
10009d4c:	11000115 	stw	r4,4(r2)
10009d50:	18c00217 	ldw	r3,8(r3)
10009d54:	10c00215 	stw	r3,8(r2)
10009d58:	a447c83a 	sub	r3,r20,r17
10009d5c:	bc45883a 	add	r2,r23,r17
10009d60:	18c00054 	ori	r3,r3,1
10009d64:	10c00115 	stw	r3,4(r2)
10009d68:	b8c00117 	ldw	r3,4(r23)
10009d6c:	e0800215 	stw	r2,8(fp)
10009d70:	a809883a 	mov	r4,r21
10009d74:	1880004c 	andi	r2,r3,1
10009d78:	88a2b03a 	or	r17,r17,r2
10009d7c:	bc400115 	stw	r17,4(r23)
10009d80:	00106f00 	call	100106f0 <__malloc_unlock>
10009d84:	003f3c06 	br	10009a78 <__alt_data_end+0xf8009a78>
10009d88:	80c00217 	ldw	r3,8(r16)
10009d8c:	90c00215 	stw	r3,8(r18)
10009d90:	80c00317 	ldw	r3,12(r16)
10009d94:	90c00315 	stw	r3,12(r18)
10009d98:	30802426 	beq	r6,r2,10009e2c <_realloc_r+0x530>
10009d9c:	90800404 	addi	r2,r18,16
10009da0:	80c00404 	addi	r3,r16,16
10009da4:	003f6e06 	br	10009b60 <__alt_data_end+0xf8009b60>
10009da8:	953fff17 	ldw	r20,-4(r18)
10009dac:	00ffff04 	movi	r3,-4
10009db0:	a0e8703a 	and	r20,r20,r3
10009db4:	a4e9883a 	add	r20,r20,r19
10009db8:	003f2206 	br	10009a44 <__alt_data_end+0xf8009a44>
10009dbc:	800b883a 	mov	r5,r16
10009dc0:	9009883a 	mov	r4,r18
10009dc4:	00084980 	call	10008498 <memmove>
10009dc8:	9021883a 	mov	r16,r18
10009dcc:	b8800117 	ldw	r2,4(r23)
10009dd0:	b82d883a 	mov	r22,r23
10009dd4:	003f1b06 	br	10009a44 <__alt_data_end+0xf8009a44>
10009dd8:	9005883a 	mov	r2,r18
10009ddc:	8007883a 	mov	r3,r16
10009de0:	003f9206 	br	10009c2c <__alt_data_end+0xf8009c2c>
10009de4:	800b883a 	mov	r5,r16
10009de8:	9009883a 	mov	r4,r18
10009dec:	d9c00015 	stw	r7,0(sp)
10009df0:	00084980 	call	10008498 <memmove>
10009df4:	d9c00017 	ldw	r7,0(sp)
10009df8:	9021883a 	mov	r16,r18
10009dfc:	b8800117 	ldw	r2,4(r23)
10009e00:	3829883a 	mov	r20,r7
10009e04:	b82d883a 	mov	r22,r23
10009e08:	003f0e06 	br	10009a44 <__alt_data_end+0xf8009a44>
10009e0c:	80800217 	ldw	r2,8(r16)
10009e10:	b8800415 	stw	r2,16(r23)
10009e14:	80800317 	ldw	r2,12(r16)
10009e18:	b8800515 	stw	r2,20(r23)
10009e1c:	31001226 	beq	r6,r4,10009e68 <_realloc_r+0x56c>
10009e20:	b8800604 	addi	r2,r23,24
10009e24:	80c00404 	addi	r3,r16,16
10009e28:	003f9606 	br	10009c84 <__alt_data_end+0xf8009c84>
10009e2c:	81000417 	ldw	r4,16(r16)
10009e30:	90800604 	addi	r2,r18,24
10009e34:	80c00604 	addi	r3,r16,24
10009e38:	91000415 	stw	r4,16(r18)
10009e3c:	81000517 	ldw	r4,20(r16)
10009e40:	91000515 	stw	r4,20(r18)
10009e44:	003f4606 	br	10009b60 <__alt_data_end+0xf8009b60>
10009e48:	80800217 	ldw	r2,8(r16)
10009e4c:	b8800415 	stw	r2,16(r23)
10009e50:	80800317 	ldw	r2,12(r16)
10009e54:	b8800515 	stw	r2,20(r23)
10009e58:	31000d26 	beq	r6,r4,10009e90 <_realloc_r+0x594>
10009e5c:	b8800604 	addi	r2,r23,24
10009e60:	80c00404 	addi	r3,r16,16
10009e64:	003f7106 	br	10009c2c <__alt_data_end+0xf8009c2c>
10009e68:	81000417 	ldw	r4,16(r16)
10009e6c:	b8800804 	addi	r2,r23,32
10009e70:	80c00604 	addi	r3,r16,24
10009e74:	b9000615 	stw	r4,24(r23)
10009e78:	81000517 	ldw	r4,20(r16)
10009e7c:	b9000715 	stw	r4,28(r23)
10009e80:	003f8006 	br	10009c84 <__alt_data_end+0xf8009c84>
10009e84:	9005883a 	mov	r2,r18
10009e88:	8007883a 	mov	r3,r16
10009e8c:	003fac06 	br	10009d40 <__alt_data_end+0xf8009d40>
10009e90:	81000417 	ldw	r4,16(r16)
10009e94:	b8800804 	addi	r2,r23,32
10009e98:	80c00604 	addi	r3,r16,24
10009e9c:	b9000615 	stw	r4,24(r23)
10009ea0:	81000517 	ldw	r4,20(r16)
10009ea4:	b9000715 	stw	r4,28(r23)
10009ea8:	003f6006 	br	10009c2c <__alt_data_end+0xf8009c2c>
10009eac:	9009883a 	mov	r4,r18
10009eb0:	800b883a 	mov	r5,r16
10009eb4:	00084980 	call	10008498 <memmove>
10009eb8:	003fa706 	br	10009d58 <__alt_data_end+0xf8009d58>
10009ebc:	80800217 	ldw	r2,8(r16)
10009ec0:	b8800415 	stw	r2,16(r23)
10009ec4:	80800317 	ldw	r2,12(r16)
10009ec8:	b8800515 	stw	r2,20(r23)
10009ecc:	31000326 	beq	r6,r4,10009edc <_realloc_r+0x5e0>
10009ed0:	b8800604 	addi	r2,r23,24
10009ed4:	80c00404 	addi	r3,r16,16
10009ed8:	003f9906 	br	10009d40 <__alt_data_end+0xf8009d40>
10009edc:	81000417 	ldw	r4,16(r16)
10009ee0:	b8800804 	addi	r2,r23,32
10009ee4:	80c00604 	addi	r3,r16,24
10009ee8:	b9000615 	stw	r4,24(r23)
10009eec:	81000517 	ldw	r4,20(r16)
10009ef0:	b9000715 	stw	r4,28(r23)
10009ef4:	003f9206 	br	10009d40 <__alt_data_end+0xf8009d40>

10009ef8 <lflush>:
10009ef8:	20c0030b 	ldhu	r3,12(r4)
10009efc:	00800244 	movi	r2,9
10009f00:	18c0024c 	andi	r3,r3,9
10009f04:	18800226 	beq	r3,r2,10009f10 <lflush+0x18>
10009f08:	0005883a 	mov	r2,zero
10009f0c:	f800283a 	ret
10009f10:	00067501 	jmpi	10006750 <fflush>

10009f14 <__srefill_r>:
10009f14:	defffd04 	addi	sp,sp,-12
10009f18:	dc400115 	stw	r17,4(sp)
10009f1c:	dc000015 	stw	r16,0(sp)
10009f20:	dfc00215 	stw	ra,8(sp)
10009f24:	2023883a 	mov	r17,r4
10009f28:	2821883a 	mov	r16,r5
10009f2c:	20000226 	beq	r4,zero,10009f38 <__srefill_r+0x24>
10009f30:	20800e17 	ldw	r2,56(r4)
10009f34:	10004426 	beq	r2,zero,1000a048 <__srefill_r+0x134>
10009f38:	8080030b 	ldhu	r2,12(r16)
10009f3c:	80000115 	stw	zero,4(r16)
10009f40:	10c0080c 	andi	r3,r2,32
10009f44:	18ffffcc 	andi	r3,r3,65535
10009f48:	18e0001c 	xori	r3,r3,32768
10009f4c:	18e00004 	addi	r3,r3,-32768
10009f50:	1800371e 	bne	r3,zero,1000a030 <__srefill_r+0x11c>
10009f54:	10c0010c 	andi	r3,r2,4
10009f58:	18ffffcc 	andi	r3,r3,65535
10009f5c:	18e0001c 	xori	r3,r3,32768
10009f60:	18e00004 	addi	r3,r3,-32768
10009f64:	18002226 	beq	r3,zero,10009ff0 <__srefill_r+0xdc>
10009f68:	81400c17 	ldw	r5,48(r16)
10009f6c:	28000826 	beq	r5,zero,10009f90 <__srefill_r+0x7c>
10009f70:	80801004 	addi	r2,r16,64
10009f74:	28800226 	beq	r5,r2,10009f80 <__srefill_r+0x6c>
10009f78:	8809883a 	mov	r4,r17
10009f7c:	0006e240 	call	10006e24 <_free_r>
10009f80:	80800f17 	ldw	r2,60(r16)
10009f84:	80000c15 	stw	zero,48(r16)
10009f88:	80800115 	stw	r2,4(r16)
10009f8c:	1000401e 	bne	r2,zero,1000a090 <__srefill_r+0x17c>
10009f90:	80800417 	ldw	r2,16(r16)
10009f94:	10005026 	beq	r2,zero,1000a0d8 <__srefill_r+0x1c4>
10009f98:	8080030b 	ldhu	r2,12(r16)
10009f9c:	108000cc 	andi	r2,r2,3
10009fa0:	10002b1e 	bne	r2,zero,1000a050 <__srefill_r+0x13c>
10009fa4:	81800417 	ldw	r6,16(r16)
10009fa8:	80800817 	ldw	r2,32(r16)
10009fac:	81400717 	ldw	r5,28(r16)
10009fb0:	81c00517 	ldw	r7,20(r16)
10009fb4:	8809883a 	mov	r4,r17
10009fb8:	81800015 	stw	r6,0(r16)
10009fbc:	103ee83a 	callr	r2
10009fc0:	8100030b 	ldhu	r4,12(r16)
10009fc4:	00f7ffc4 	movi	r3,-8193
10009fc8:	80800115 	stw	r2,4(r16)
10009fcc:	20c6703a 	and	r3,r4,r3
10009fd0:	80c0030d 	sth	r3,12(r16)
10009fd4:	0080130e 	bge	zero,r2,1000a024 <__srefill_r+0x110>
10009fd8:	0005883a 	mov	r2,zero
10009fdc:	dfc00217 	ldw	ra,8(sp)
10009fe0:	dc400117 	ldw	r17,4(sp)
10009fe4:	dc000017 	ldw	r16,0(sp)
10009fe8:	dec00304 	addi	sp,sp,12
10009fec:	f800283a 	ret
10009ff0:	10c0040c 	andi	r3,r2,16
10009ff4:	18ffffcc 	andi	r3,r3,65535
10009ff8:	18e0001c 	xori	r3,r3,32768
10009ffc:	18e00004 	addi	r3,r3,-32768
1000a000:	18003926 	beq	r3,zero,1000a0e8 <__srefill_r+0x1d4>
1000a004:	10c0020c 	andi	r3,r2,8
1000a008:	18ffffcc 	andi	r3,r3,65535
1000a00c:	18e0001c 	xori	r3,r3,32768
1000a010:	18e00004 	addi	r3,r3,-32768
1000a014:	1800261e 	bne	r3,zero,1000a0b0 <__srefill_r+0x19c>
1000a018:	10800114 	ori	r2,r2,4
1000a01c:	8080030d 	sth	r2,12(r16)
1000a020:	003fdb06 	br	10009f90 <__alt_data_end+0xf8009f90>
1000a024:	1000111e 	bne	r2,zero,1000a06c <__srefill_r+0x158>
1000a028:	18c00814 	ori	r3,r3,32
1000a02c:	80c0030d 	sth	r3,12(r16)
1000a030:	00bfffc4 	movi	r2,-1
1000a034:	dfc00217 	ldw	ra,8(sp)
1000a038:	dc400117 	ldw	r17,4(sp)
1000a03c:	dc000017 	ldw	r16,0(sp)
1000a040:	dec00304 	addi	sp,sp,12
1000a044:	f800283a 	ret
1000a048:	00068240 	call	10006824 <__sinit>
1000a04c:	003fba06 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a050:	00840074 	movhi	r2,4097
1000a054:	1092a304 	addi	r2,r2,19084
1000a058:	11000017 	ldw	r4,0(r2)
1000a05c:	01440074 	movhi	r5,4097
1000a060:	2967be04 	addi	r5,r5,-24840
1000a064:	00075d80 	call	100075d8 <_fwalk>
1000a068:	003fce06 	br	10009fa4 <__alt_data_end+0xf8009fa4>
1000a06c:	18c01014 	ori	r3,r3,64
1000a070:	00bfffc4 	movi	r2,-1
1000a074:	80000115 	stw	zero,4(r16)
1000a078:	80c0030d 	sth	r3,12(r16)
1000a07c:	dfc00217 	ldw	ra,8(sp)
1000a080:	dc400117 	ldw	r17,4(sp)
1000a084:	dc000017 	ldw	r16,0(sp)
1000a088:	dec00304 	addi	sp,sp,12
1000a08c:	f800283a 	ret
1000a090:	80c00e17 	ldw	r3,56(r16)
1000a094:	0005883a 	mov	r2,zero
1000a098:	80c00015 	stw	r3,0(r16)
1000a09c:	dfc00217 	ldw	ra,8(sp)
1000a0a0:	dc400117 	ldw	r17,4(sp)
1000a0a4:	dc000017 	ldw	r16,0(sp)
1000a0a8:	dec00304 	addi	sp,sp,12
1000a0ac:	f800283a 	ret
1000a0b0:	8809883a 	mov	r4,r17
1000a0b4:	800b883a 	mov	r5,r16
1000a0b8:	00065680 	call	10006568 <_fflush_r>
1000a0bc:	103fdc1e 	bne	r2,zero,1000a030 <__alt_data_end+0xf800a030>
1000a0c0:	8080030b 	ldhu	r2,12(r16)
1000a0c4:	00fffdc4 	movi	r3,-9
1000a0c8:	80000215 	stw	zero,8(r16)
1000a0cc:	1884703a 	and	r2,r3,r2
1000a0d0:	80000615 	stw	zero,24(r16)
1000a0d4:	003fd006 	br	1000a018 <__alt_data_end+0xf800a018>
1000a0d8:	8809883a 	mov	r4,r17
1000a0dc:	800b883a 	mov	r5,r16
1000a0e0:	000784c0 	call	1000784c <__smakebuf_r>
1000a0e4:	003fac06 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a0e8:	00c00244 	movi	r3,9
1000a0ec:	10801014 	ori	r2,r2,64
1000a0f0:	88c00015 	stw	r3,0(r17)
1000a0f4:	8080030d 	sth	r2,12(r16)
1000a0f8:	00bfffc4 	movi	r2,-1
1000a0fc:	003fb706 	br	10009fdc <__alt_data_end+0xf8009fdc>

1000a100 <__isinfd>:
1000a100:	0105c83a 	sub	r2,zero,r4
1000a104:	1108b03a 	or	r4,r2,r4
1000a108:	2004d7fa 	srli	r2,r4,31
1000a10c:	00e00034 	movhi	r3,32768
1000a110:	18ffffc4 	addi	r3,r3,-1
1000a114:	28ca703a 	and	r5,r5,r3
1000a118:	1144b03a 	or	r2,r2,r5
1000a11c:	00dffc34 	movhi	r3,32752
1000a120:	1885c83a 	sub	r2,r3,r2
1000a124:	0087c83a 	sub	r3,zero,r2
1000a128:	1884b03a 	or	r2,r3,r2
1000a12c:	1005d7fa 	srai	r2,r2,31
1000a130:	10800044 	addi	r2,r2,1
1000a134:	f800283a 	ret

1000a138 <__isnand>:
1000a138:	0105c83a 	sub	r2,zero,r4
1000a13c:	1108b03a 	or	r4,r2,r4
1000a140:	2004d7fa 	srli	r2,r4,31
1000a144:	00e00034 	movhi	r3,32768
1000a148:	18ffffc4 	addi	r3,r3,-1
1000a14c:	28ca703a 	and	r5,r5,r3
1000a150:	1144b03a 	or	r2,r2,r5
1000a154:	00dffc34 	movhi	r3,32752
1000a158:	1885c83a 	sub	r2,r3,r2
1000a15c:	1004d7fa 	srli	r2,r2,31
1000a160:	f800283a 	ret

1000a164 <_sbrk_r>:
1000a164:	defffd04 	addi	sp,sp,-12
1000a168:	dc400115 	stw	r17,4(sp)
1000a16c:	dc000015 	stw	r16,0(sp)
1000a170:	2023883a 	mov	r17,r4
1000a174:	04040074 	movhi	r16,4097
1000a178:	8419e304 	addi	r16,r16,26508
1000a17c:	2809883a 	mov	r4,r5
1000a180:	dfc00215 	stw	ra,8(sp)
1000a184:	80000015 	stw	zero,0(r16)
1000a188:	00108d40 	call	100108d4 <sbrk>
1000a18c:	00ffffc4 	movi	r3,-1
1000a190:	10c00526 	beq	r2,r3,1000a1a8 <_sbrk_r+0x44>
1000a194:	dfc00217 	ldw	ra,8(sp)
1000a198:	dc400117 	ldw	r17,4(sp)
1000a19c:	dc000017 	ldw	r16,0(sp)
1000a1a0:	dec00304 	addi	sp,sp,12
1000a1a4:	f800283a 	ret
1000a1a8:	80c00017 	ldw	r3,0(r16)
1000a1ac:	183ff926 	beq	r3,zero,1000a194 <__alt_data_end+0xf800a194>
1000a1b0:	88c00015 	stw	r3,0(r17)
1000a1b4:	dfc00217 	ldw	ra,8(sp)
1000a1b8:	dc400117 	ldw	r17,4(sp)
1000a1bc:	dc000017 	ldw	r16,0(sp)
1000a1c0:	dec00304 	addi	sp,sp,12
1000a1c4:	f800283a 	ret

1000a1c8 <__sccl>:
1000a1c8:	2a400003 	ldbu	r9,0(r5)
1000a1cc:	00801784 	movi	r2,94
1000a1d0:	48802626 	beq	r9,r2,1000a26c <__sccl+0xa4>
1000a1d4:	28800044 	addi	r2,r5,1
1000a1d8:	0011883a 	mov	r8,zero
1000a1dc:	000b883a 	mov	r5,zero
1000a1e0:	0007883a 	mov	r3,zero
1000a1e4:	01c04004 	movi	r7,256
1000a1e8:	20cd883a 	add	r6,r4,r3
1000a1ec:	32000005 	stb	r8,0(r6)
1000a1f0:	18c00044 	addi	r3,r3,1
1000a1f4:	19fffc1e 	bne	r3,r7,1000a1e8 <__alt_data_end+0xf800a1e8>
1000a1f8:	48000f26 	beq	r9,zero,1000a238 <__sccl+0x70>
1000a1fc:	01800044 	movi	r6,1
1000a200:	314dc83a 	sub	r6,r6,r5
1000a204:	02001744 	movi	r8,93
1000a208:	01400b44 	movi	r5,45
1000a20c:	2247883a 	add	r3,r4,r9
1000a210:	19800005 	stb	r6,0(r3)
1000a214:	10c00003 	ldbu	r3,0(r2)
1000a218:	11c00044 	addi	r7,r2,1
1000a21c:	19400a26 	beq	r3,r5,1000a248 <__sccl+0x80>
1000a220:	1a000726 	beq	r3,r8,1000a240 <__sccl+0x78>
1000a224:	1800011e 	bne	r3,zero,1000a22c <__sccl+0x64>
1000a228:	f800283a 	ret
1000a22c:	1813883a 	mov	r9,r3
1000a230:	3805883a 	mov	r2,r7
1000a234:	003ff506 	br	1000a20c <__alt_data_end+0xf800a20c>
1000a238:	10bfffc4 	addi	r2,r2,-1
1000a23c:	f800283a 	ret
1000a240:	3805883a 	mov	r2,r7
1000a244:	f800283a 	ret
1000a248:	10c00043 	ldbu	r3,1(r2)
1000a24c:	1a000c26 	beq	r3,r8,1000a280 <__sccl+0xb8>
1000a250:	1a400b16 	blt	r3,r9,1000a280 <__sccl+0xb8>
1000a254:	10800084 	addi	r2,r2,2
1000a258:	4a400044 	addi	r9,r9,1
1000a25c:	224f883a 	add	r7,r4,r9
1000a260:	39800005 	stb	r6,0(r7)
1000a264:	48fffc16 	blt	r9,r3,1000a258 <__alt_data_end+0xf800a258>
1000a268:	003fea06 	br	1000a214 <__alt_data_end+0xf800a214>
1000a26c:	2a400043 	ldbu	r9,1(r5)
1000a270:	28800084 	addi	r2,r5,2
1000a274:	02000044 	movi	r8,1
1000a278:	01400044 	movi	r5,1
1000a27c:	003fd806 	br	1000a1e0 <__alt_data_end+0xf800a1e0>
1000a280:	2813883a 	mov	r9,r5
1000a284:	3805883a 	mov	r2,r7
1000a288:	003fe006 	br	1000a20c <__alt_data_end+0xf800a20c>

1000a28c <nanf>:
1000a28c:	009ff034 	movhi	r2,32704
1000a290:	f800283a 	ret

1000a294 <_sprintf_r>:
1000a294:	deffe704 	addi	sp,sp,-100
1000a298:	2807883a 	mov	r3,r5
1000a29c:	dfc01715 	stw	ra,92(sp)
1000a2a0:	d9c01815 	stw	r7,96(sp)
1000a2a4:	00a00034 	movhi	r2,32768
1000a2a8:	10bfffc4 	addi	r2,r2,-1
1000a2ac:	02008204 	movi	r8,520
1000a2b0:	d8800215 	stw	r2,8(sp)
1000a2b4:	d8800515 	stw	r2,20(sp)
1000a2b8:	d80b883a 	mov	r5,sp
1000a2bc:	d9c01804 	addi	r7,sp,96
1000a2c0:	00bfffc4 	movi	r2,-1
1000a2c4:	d8c00015 	stw	r3,0(sp)
1000a2c8:	d8c00415 	stw	r3,16(sp)
1000a2cc:	da00030d 	sth	r8,12(sp)
1000a2d0:	d880038d 	sth	r2,14(sp)
1000a2d4:	00015740 	call	10001574 <___vfprintf_internal_r>
1000a2d8:	d8c00017 	ldw	r3,0(sp)
1000a2dc:	18000005 	stb	zero,0(r3)
1000a2e0:	dfc01717 	ldw	ra,92(sp)
1000a2e4:	dec01904 	addi	sp,sp,100
1000a2e8:	f800283a 	ret

1000a2ec <sprintf>:
1000a2ec:	deffe604 	addi	sp,sp,-104
1000a2f0:	2007883a 	mov	r3,r4
1000a2f4:	dfc01715 	stw	ra,92(sp)
1000a2f8:	d9801815 	stw	r6,96(sp)
1000a2fc:	d9c01915 	stw	r7,100(sp)
1000a300:	00840074 	movhi	r2,4097
1000a304:	1092a404 	addi	r2,r2,19088
1000a308:	11000017 	ldw	r4,0(r2)
1000a30c:	00a00034 	movhi	r2,32768
1000a310:	10bfffc4 	addi	r2,r2,-1
1000a314:	280d883a 	mov	r6,r5
1000a318:	02008204 	movi	r8,520
1000a31c:	d8800215 	stw	r2,8(sp)
1000a320:	d8800515 	stw	r2,20(sp)
1000a324:	d80b883a 	mov	r5,sp
1000a328:	d9c01804 	addi	r7,sp,96
1000a32c:	00bfffc4 	movi	r2,-1
1000a330:	d8c00015 	stw	r3,0(sp)
1000a334:	d8c00415 	stw	r3,16(sp)
1000a338:	da00030d 	sth	r8,12(sp)
1000a33c:	d880038d 	sth	r2,14(sp)
1000a340:	00015740 	call	10001574 <___vfprintf_internal_r>
1000a344:	d8c00017 	ldw	r3,0(sp)
1000a348:	18000005 	stb	zero,0(r3)
1000a34c:	dfc01717 	ldw	ra,92(sp)
1000a350:	dec01a04 	addi	sp,sp,104
1000a354:	f800283a 	ret

1000a358 <__sread>:
1000a358:	defffe04 	addi	sp,sp,-8
1000a35c:	dc000015 	stw	r16,0(sp)
1000a360:	2821883a 	mov	r16,r5
1000a364:	2940038f 	ldh	r5,14(r5)
1000a368:	dfc00115 	stw	ra,4(sp)
1000a36c:	000db9c0 	call	1000db9c <_read_r>
1000a370:	10000716 	blt	r2,zero,1000a390 <__sread+0x38>
1000a374:	80c01417 	ldw	r3,80(r16)
1000a378:	1887883a 	add	r3,r3,r2
1000a37c:	80c01415 	stw	r3,80(r16)
1000a380:	dfc00117 	ldw	ra,4(sp)
1000a384:	dc000017 	ldw	r16,0(sp)
1000a388:	dec00204 	addi	sp,sp,8
1000a38c:	f800283a 	ret
1000a390:	80c0030b 	ldhu	r3,12(r16)
1000a394:	18fbffcc 	andi	r3,r3,61439
1000a398:	80c0030d 	sth	r3,12(r16)
1000a39c:	dfc00117 	ldw	ra,4(sp)
1000a3a0:	dc000017 	ldw	r16,0(sp)
1000a3a4:	dec00204 	addi	sp,sp,8
1000a3a8:	f800283a 	ret

1000a3ac <__swrite>:
1000a3ac:	2880030b 	ldhu	r2,12(r5)
1000a3b0:	defffb04 	addi	sp,sp,-20
1000a3b4:	dcc00315 	stw	r19,12(sp)
1000a3b8:	10c0400c 	andi	r3,r2,256
1000a3bc:	18ffffcc 	andi	r3,r3,65535
1000a3c0:	18e0001c 	xori	r3,r3,32768
1000a3c4:	dc800215 	stw	r18,8(sp)
1000a3c8:	dc400115 	stw	r17,4(sp)
1000a3cc:	dc000015 	stw	r16,0(sp)
1000a3d0:	dfc00415 	stw	ra,16(sp)
1000a3d4:	18e00004 	addi	r3,r3,-32768
1000a3d8:	2821883a 	mov	r16,r5
1000a3dc:	2027883a 	mov	r19,r4
1000a3e0:	3025883a 	mov	r18,r6
1000a3e4:	3823883a 	mov	r17,r7
1000a3e8:	18000526 	beq	r3,zero,1000a400 <__swrite+0x54>
1000a3ec:	2940038f 	ldh	r5,14(r5)
1000a3f0:	000d883a 	mov	r6,zero
1000a3f4:	01c00084 	movi	r7,2
1000a3f8:	000db300 	call	1000db30 <_lseek_r>
1000a3fc:	8080030b 	ldhu	r2,12(r16)
1000a400:	8140038f 	ldh	r5,14(r16)
1000a404:	10bbffcc 	andi	r2,r2,61439
1000a408:	9809883a 	mov	r4,r19
1000a40c:	900d883a 	mov	r6,r18
1000a410:	880f883a 	mov	r7,r17
1000a414:	8080030d 	sth	r2,12(r16)
1000a418:	dfc00417 	ldw	ra,16(sp)
1000a41c:	dcc00317 	ldw	r19,12(sp)
1000a420:	dc800217 	ldw	r18,8(sp)
1000a424:	dc400117 	ldw	r17,4(sp)
1000a428:	dc000017 	ldw	r16,0(sp)
1000a42c:	dec00504 	addi	sp,sp,20
1000a430:	000cbd41 	jmpi	1000cbd4 <_write_r>

1000a434 <__sseek>:
1000a434:	defffe04 	addi	sp,sp,-8
1000a438:	dc000015 	stw	r16,0(sp)
1000a43c:	2821883a 	mov	r16,r5
1000a440:	2940038f 	ldh	r5,14(r5)
1000a444:	dfc00115 	stw	ra,4(sp)
1000a448:	000db300 	call	1000db30 <_lseek_r>
1000a44c:	00ffffc4 	movi	r3,-1
1000a450:	10c00826 	beq	r2,r3,1000a474 <__sseek+0x40>
1000a454:	80c0030b 	ldhu	r3,12(r16)
1000a458:	80801415 	stw	r2,80(r16)
1000a45c:	18c40014 	ori	r3,r3,4096
1000a460:	80c0030d 	sth	r3,12(r16)
1000a464:	dfc00117 	ldw	ra,4(sp)
1000a468:	dc000017 	ldw	r16,0(sp)
1000a46c:	dec00204 	addi	sp,sp,8
1000a470:	f800283a 	ret
1000a474:	80c0030b 	ldhu	r3,12(r16)
1000a478:	18fbffcc 	andi	r3,r3,61439
1000a47c:	80c0030d 	sth	r3,12(r16)
1000a480:	dfc00117 	ldw	ra,4(sp)
1000a484:	dc000017 	ldw	r16,0(sp)
1000a488:	dec00204 	addi	sp,sp,8
1000a48c:	f800283a 	ret

1000a490 <__sclose>:
1000a490:	2940038f 	ldh	r5,14(r5)
1000a494:	000cd0c1 	jmpi	1000cd0c <_close_r>

1000a498 <strcmp>:
1000a498:	2904b03a 	or	r2,r5,r4
1000a49c:	108000cc 	andi	r2,r2,3
1000a4a0:	1000171e 	bne	r2,zero,1000a500 <strcmp+0x68>
1000a4a4:	20800017 	ldw	r2,0(r4)
1000a4a8:	28c00017 	ldw	r3,0(r5)
1000a4ac:	10c0141e 	bne	r2,r3,1000a500 <strcmp+0x68>
1000a4b0:	027fbff4 	movhi	r9,65279
1000a4b4:	4a7fbfc4 	addi	r9,r9,-257
1000a4b8:	1247883a 	add	r3,r2,r9
1000a4bc:	0084303a 	nor	r2,zero,r2
1000a4c0:	1884703a 	and	r2,r3,r2
1000a4c4:	02202074 	movhi	r8,32897
1000a4c8:	42202004 	addi	r8,r8,-32640
1000a4cc:	1204703a 	and	r2,r2,r8
1000a4d0:	10000226 	beq	r2,zero,1000a4dc <strcmp+0x44>
1000a4d4:	00001706 	br	1000a534 <strcmp+0x9c>
1000a4d8:	3000161e 	bne	r6,zero,1000a534 <strcmp+0x9c>
1000a4dc:	21000104 	addi	r4,r4,4
1000a4e0:	20800017 	ldw	r2,0(r4)
1000a4e4:	29400104 	addi	r5,r5,4
1000a4e8:	28c00017 	ldw	r3,0(r5)
1000a4ec:	124f883a 	add	r7,r2,r9
1000a4f0:	008c303a 	nor	r6,zero,r2
1000a4f4:	398c703a 	and	r6,r7,r6
1000a4f8:	320c703a 	and	r6,r6,r8
1000a4fc:	10fff626 	beq	r2,r3,1000a4d8 <__alt_data_end+0xf800a4d8>
1000a500:	20800007 	ldb	r2,0(r4)
1000a504:	1000051e 	bne	r2,zero,1000a51c <strcmp+0x84>
1000a508:	00000606 	br	1000a524 <strcmp+0x8c>
1000a50c:	21000044 	addi	r4,r4,1
1000a510:	20800007 	ldb	r2,0(r4)
1000a514:	29400044 	addi	r5,r5,1
1000a518:	10000226 	beq	r2,zero,1000a524 <strcmp+0x8c>
1000a51c:	28c00007 	ldb	r3,0(r5)
1000a520:	10fffa26 	beq	r2,r3,1000a50c <__alt_data_end+0xf800a50c>
1000a524:	20c00003 	ldbu	r3,0(r4)
1000a528:	28800003 	ldbu	r2,0(r5)
1000a52c:	1885c83a 	sub	r2,r3,r2
1000a530:	f800283a 	ret
1000a534:	0005883a 	mov	r2,zero
1000a538:	f800283a 	ret

1000a53c <_strtod_r>:
1000a53c:	deffdc04 	addi	sp,sp,-144
1000a540:	dc001a15 	stw	r16,104(sp)
1000a544:	d9400e15 	stw	r5,56(sp)
1000a548:	d9801115 	stw	r6,68(sp)
1000a54c:	d9400c15 	stw	r5,48(sp)
1000a550:	2805883a 	mov	r2,r5
1000a554:	dfc02315 	stw	ra,140(sp)
1000a558:	df002215 	stw	fp,136(sp)
1000a55c:	ddc02115 	stw	r23,132(sp)
1000a560:	dd802015 	stw	r22,128(sp)
1000a564:	dd401f15 	stw	r21,124(sp)
1000a568:	dd001e15 	stw	r20,120(sp)
1000a56c:	dcc01d15 	stw	r19,116(sp)
1000a570:	dc801c15 	stw	r18,112(sp)
1000a574:	dc401b15 	stw	r17,108(sp)
1000a578:	2021883a 	mov	r16,r4
1000a57c:	d8000615 	stw	zero,24(sp)
1000a580:	d8000715 	stw	zero,28(sp)
1000a584:	01400b44 	movi	r5,45
1000a588:	01840074 	movhi	r6,4097
1000a58c:	31a9b804 	addi	r6,r6,-22816
1000a590:	10c00003 	ldbu	r3,0(r2)
1000a594:	19003fcc 	andi	r4,r3,255
1000a598:	29004c2e 	bgeu	r5,r4,1000a6cc <_strtod_r+0x190>
1000a59c:	1c803fcc 	andi	r18,r3,255
1000a5a0:	9480201c 	xori	r18,r18,128
1000a5a4:	102d883a 	mov	r22,r2
1000a5a8:	d8001215 	stw	zero,72(sp)
1000a5ac:	94bfe004 	addi	r18,r18,-128
1000a5b0:	00800c04 	movi	r2,48
1000a5b4:	9080f526 	beq	r18,r2,1000a98c <_strtod_r+0x450>
1000a5b8:	d8001315 	stw	zero,76(sp)
1000a5bc:	04c00bc4 	movi	r19,47
1000a5c0:	900f883a 	mov	r7,r18
1000a5c4:	9c84770e 	bge	r19,r18,1000b7a4 <_strtod_r+0x1268>
1000a5c8:	05c00e44 	movi	r23,57
1000a5cc:	bc847a16 	blt	r23,r18,1000b7b8 <_strtod_r+0x127c>
1000a5d0:	0039883a 	mov	fp,zero
1000a5d4:	b4400044 	addi	r17,r22,1
1000a5d8:	dd801015 	stw	r22,64(sp)
1000a5dc:	d8000f15 	stw	zero,60(sp)
1000a5e0:	e02d883a 	mov	r22,fp
1000a5e4:	002b883a 	mov	r21,zero
1000a5e8:	8039883a 	mov	fp,r16
1000a5ec:	05000204 	movi	r20,8
1000a5f0:	0021883a 	mov	r16,zero
1000a5f4:	a5408c16 	blt	r20,r21,1000a828 <_strtod_r+0x2ec>
1000a5f8:	b009883a 	mov	r4,r22
1000a5fc:	01400284 	movi	r5,10
1000a600:	00012fc0 	call	100012fc <__mulsi3>
1000a604:	1485883a 	add	r2,r2,r18
1000a608:	15bff404 	addi	r22,r2,-48
1000a60c:	dc400c15 	stw	r17,48(sp)
1000a610:	8c800007 	ldb	r18,0(r17)
1000a614:	ad400044 	addi	r21,r21,1
1000a618:	880b883a 	mov	r5,r17
1000a61c:	900f883a 	mov	r7,r18
1000a620:	9c808e0e 	bge	r19,r18,1000a85c <_strtod_r+0x320>
1000a624:	8c400044 	addi	r17,r17,1
1000a628:	bcbff20e 	bge	r23,r18,1000a5f4 <__alt_data_end+0xf800a5f4>
1000a62c:	dc000f15 	stw	r16,60(sp)
1000a630:	e021883a 	mov	r16,fp
1000a634:	b039883a 	mov	fp,r22
1000a638:	dd801017 	ldw	r22,64(sp)
1000a63c:	a827883a 	mov	r19,r21
1000a640:	dd801415 	stw	r22,80(sp)
1000a644:	000d883a 	mov	r6,zero
1000a648:	0029883a 	mov	r20,zero
1000a64c:	d8001015 	stw	zero,64(sp)
1000a650:	00801944 	movi	r2,101
1000a654:	3880dd26 	beq	r7,r2,1000a9cc <_strtod_r+0x490>
1000a658:	00801144 	movi	r2,69
1000a65c:	3880db26 	beq	r7,r2,1000a9cc <_strtod_r+0x490>
1000a660:	0009883a 	mov	r4,zero
1000a664:	a8011d1e 	bne	r21,zero,1000aadc <_strtod_r+0x5a0>
1000a668:	3001591e 	bne	r6,zero,1000abd0 <_strtod_r+0x694>
1000a66c:	d8c01317 	ldw	r3,76(sp)
1000a670:	1801571e 	bne	r3,zero,1000abd0 <_strtod_r+0x694>
1000a674:	d8c01017 	ldw	r3,64(sp)
1000a678:	1803081e 	bne	r3,zero,1000b29c <_strtod_r+0xd60>
1000a67c:	00801384 	movi	r2,78
1000a680:	38847e26 	beq	r7,r2,1000b87c <_strtod_r+0x1340>
1000a684:	11c47916 	blt	r2,r7,1000b86c <_strtod_r+0x1330>
1000a688:	00801244 	movi	r2,73
1000a68c:	3883031e 	bne	r7,r2,1000b29c <_strtod_r+0xd60>
1000a690:	d8800c17 	ldw	r2,48(sp)
1000a694:	01040074 	movhi	r4,4097
1000a698:	210b2004 	addi	r4,r4,11392
1000a69c:	01801004 	movi	r6,64
1000a6a0:	01c01684 	movi	r7,90
1000a6a4:	21400007 	ldb	r5,0(r4)
1000a6a8:	21000044 	addi	r4,r4,1
1000a6ac:	2804b426 	beq	r5,zero,1000b980 <_strtod_r+0x1444>
1000a6b0:	10800044 	addi	r2,r2,1
1000a6b4:	10c00007 	ldb	r3,0(r2)
1000a6b8:	30c0020e 	bge	r6,r3,1000a6c4 <_strtod_r+0x188>
1000a6bc:	38c00116 	blt	r7,r3,1000a6c4 <_strtod_r+0x188>
1000a6c0:	18c00804 	addi	r3,r3,32
1000a6c4:	197ff726 	beq	r3,r5,1000a6a4 <__alt_data_end+0xf800a6a4>
1000a6c8:	0002f406 	br	1000b29c <_strtod_r+0xd60>
1000a6cc:	2109883a 	add	r4,r4,r4
1000a6d0:	2109883a 	add	r4,r4,r4
1000a6d4:	2189883a 	add	r4,r4,r6
1000a6d8:	21000017 	ldw	r4,0(r4)
1000a6dc:	2000683a 	jmp	r4
1000a6e0:	1000a7ac 	andhi	zero,r2,670
1000a6e4:	1000a59c 	xori	zero,r2,662
1000a6e8:	1000a59c 	xori	zero,r2,662
1000a6ec:	1000a59c 	xori	zero,r2,662
1000a6f0:	1000a59c 	xori	zero,r2,662
1000a6f4:	1000a59c 	xori	zero,r2,662
1000a6f8:	1000a59c 	xori	zero,r2,662
1000a6fc:	1000a59c 	xori	zero,r2,662
1000a700:	1000a59c 	xori	zero,r2,662
1000a704:	1000a810 	cmplti	zero,r2,672
1000a708:	1000a810 	cmplti	zero,r2,672
1000a70c:	1000a810 	cmplti	zero,r2,672
1000a710:	1000a810 	cmplti	zero,r2,672
1000a714:	1000a810 	cmplti	zero,r2,672
1000a718:	1000a59c 	xori	zero,r2,662
1000a71c:	1000a59c 	xori	zero,r2,662
1000a720:	1000a59c 	xori	zero,r2,662
1000a724:	1000a59c 	xori	zero,r2,662
1000a728:	1000a59c 	xori	zero,r2,662
1000a72c:	1000a59c 	xori	zero,r2,662
1000a730:	1000a59c 	xori	zero,r2,662
1000a734:	1000a59c 	xori	zero,r2,662
1000a738:	1000a59c 	xori	zero,r2,662
1000a73c:	1000a59c 	xori	zero,r2,662
1000a740:	1000a59c 	xori	zero,r2,662
1000a744:	1000a59c 	xori	zero,r2,662
1000a748:	1000a59c 	xori	zero,r2,662
1000a74c:	1000a59c 	xori	zero,r2,662
1000a750:	1000a59c 	xori	zero,r2,662
1000a754:	1000a59c 	xori	zero,r2,662
1000a758:	1000a59c 	xori	zero,r2,662
1000a75c:	1000a59c 	xori	zero,r2,662
1000a760:	1000a810 	cmplti	zero,r2,672
1000a764:	1000a59c 	xori	zero,r2,662
1000a768:	1000a59c 	xori	zero,r2,662
1000a76c:	1000a59c 	xori	zero,r2,662
1000a770:	1000a59c 	xori	zero,r2,662
1000a774:	1000a59c 	xori	zero,r2,662
1000a778:	1000a59c 	xori	zero,r2,662
1000a77c:	1000a59c 	xori	zero,r2,662
1000a780:	1000a59c 	xori	zero,r2,662
1000a784:	1000a59c 	xori	zero,r2,662
1000a788:	1000a59c 	xori	zero,r2,662
1000a78c:	1000a798 	cmpnei	zero,r2,670
1000a790:	1000a59c 	xori	zero,r2,662
1000a794:	1000a81c 	xori	zero,r2,672
1000a798:	d8001215 	stw	zero,72(sp)
1000a79c:	15800044 	addi	r22,r2,1
1000a7a0:	dd800c15 	stw	r22,48(sp)
1000a7a4:	14800047 	ldb	r18,1(r2)
1000a7a8:	903f811e 	bne	r18,zero,1000a5b0 <__alt_data_end+0xf800a5b0>
1000a7ac:	0005883a 	mov	r2,zero
1000a7b0:	0007883a 	mov	r3,zero
1000a7b4:	d9400e17 	ldw	r5,56(sp)
1000a7b8:	d8001215 	stw	zero,72(sp)
1000a7bc:	d9400c15 	stw	r5,48(sp)
1000a7c0:	d9001117 	ldw	r4,68(sp)
1000a7c4:	20000326 	beq	r4,zero,1000a7d4 <_strtod_r+0x298>
1000a7c8:	d9000c17 	ldw	r4,48(sp)
1000a7cc:	d9401117 	ldw	r5,68(sp)
1000a7d0:	29000015 	stw	r4,0(r5)
1000a7d4:	d9001217 	ldw	r4,72(sp)
1000a7d8:	20000126 	beq	r4,zero,1000a7e0 <_strtod_r+0x2a4>
1000a7dc:	18e0003c 	xorhi	r3,r3,32768
1000a7e0:	dfc02317 	ldw	ra,140(sp)
1000a7e4:	df002217 	ldw	fp,136(sp)
1000a7e8:	ddc02117 	ldw	r23,132(sp)
1000a7ec:	dd802017 	ldw	r22,128(sp)
1000a7f0:	dd401f17 	ldw	r21,124(sp)
1000a7f4:	dd001e17 	ldw	r20,120(sp)
1000a7f8:	dcc01d17 	ldw	r19,116(sp)
1000a7fc:	dc801c17 	ldw	r18,112(sp)
1000a800:	dc401b17 	ldw	r17,108(sp)
1000a804:	dc001a17 	ldw	r16,104(sp)
1000a808:	dec02404 	addi	sp,sp,144
1000a80c:	f800283a 	ret
1000a810:	10800044 	addi	r2,r2,1
1000a814:	d8800c15 	stw	r2,48(sp)
1000a818:	003f5d06 	br	1000a590 <__alt_data_end+0xf800a590>
1000a81c:	00c00044 	movi	r3,1
1000a820:	d8c01215 	stw	r3,72(sp)
1000a824:	003fdd06 	br	1000a79c <__alt_data_end+0xf800a79c>
1000a828:	010003c4 	movi	r4,15
1000a82c:	257f7716 	blt	r4,r21,1000a60c <__alt_data_end+0xf800a60c>
1000a830:	8009883a 	mov	r4,r16
1000a834:	01400284 	movi	r5,10
1000a838:	00012fc0 	call	100012fc <__mulsi3>
1000a83c:	dc400c15 	stw	r17,48(sp)
1000a840:	1485883a 	add	r2,r2,r18
1000a844:	8c800007 	ldb	r18,0(r17)
1000a848:	143ff404 	addi	r16,r2,-48
1000a84c:	ad400044 	addi	r21,r21,1
1000a850:	880b883a 	mov	r5,r17
1000a854:	900f883a 	mov	r7,r18
1000a858:	9cbf7216 	blt	r19,r18,1000a624 <__alt_data_end+0xf800a624>
1000a85c:	dc000f15 	stw	r16,60(sp)
1000a860:	e021883a 	mov	r16,fp
1000a864:	b039883a 	mov	fp,r22
1000a868:	dd801017 	ldw	r22,64(sp)
1000a86c:	00800b84 	movi	r2,46
1000a870:	9082561e 	bne	r18,r2,1000b1cc <_strtod_r+0xc90>
1000a874:	28800044 	addi	r2,r5,1
1000a878:	d8800c15 	stw	r2,48(sp)
1000a87c:	29c00047 	ldb	r7,1(r5)
1000a880:	a802611e 	bne	r21,zero,1000b208 <_strtod_r+0xccc>
1000a884:	00800c04 	movi	r2,48
1000a888:	3884161e 	bne	r7,r2,1000b8e4 <_strtod_r+0x13a8>
1000a88c:	00800044 	movi	r2,1
1000a890:	3809883a 	mov	r4,r7
1000a894:	100d883a 	mov	r6,r2
1000a898:	10800044 	addi	r2,r2,1
1000a89c:	2887883a 	add	r3,r5,r2
1000a8a0:	d8c00c15 	stw	r3,48(sp)
1000a8a4:	2987883a 	add	r3,r5,r6
1000a8a8:	19c00047 	ldb	r7,1(r3)
1000a8ac:	393ff926 	beq	r7,r4,1000a894 <__alt_data_end+0xf800a894>
1000a8b0:	38bff3c4 	addi	r2,r7,-49
1000a8b4:	00c00204 	movi	r3,8
1000a8b8:	1882ad36 	bltu	r3,r2,1000b370 <_strtod_r+0xe34>
1000a8bc:	d9400c17 	ldw	r5,48(sp)
1000a8c0:	3029883a 	mov	r20,r6
1000a8c4:	002f883a 	mov	r23,zero
1000a8c8:	d9401415 	stw	r5,80(sp)
1000a8cc:	2823883a 	mov	r17,r5
1000a8d0:	01800044 	movi	r6,1
1000a8d4:	3dbff404 	addi	r22,r7,-48
1000a8d8:	b0002826 	beq	r22,zero,1000a97c <_strtod_r+0x440>
1000a8dc:	00800044 	movi	r2,1
1000a8e0:	a1a9883a 	add	r20,r20,r6
1000a8e4:	30844826 	beq	r6,r2,1000ba08 <_strtod_r+0x14cc>
1000a8e8:	b9a7883a 	add	r19,r23,r6
1000a8ec:	dc401015 	stw	r17,64(sp)
1000a8f0:	e023883a 	mov	r17,fp
1000a8f4:	b039883a 	mov	fp,r22
1000a8f8:	802d883a 	mov	r22,r16
1000a8fc:	dc000f17 	ldw	r16,60(sp)
1000a900:	98ffffc4 	addi	r3,r19,-1
1000a904:	dd001615 	stw	r20,88(sp)
1000a908:	04800204 	movi	r18,8
1000a90c:	d9801515 	stw	r6,84(sp)
1000a910:	b829883a 	mov	r20,r23
1000a914:	1827883a 	mov	r19,r3
1000a918:	a5000044 	addi	r20,r20,1
1000a91c:	a17fffc4 	addi	r5,r20,-1
1000a920:	9142b916 	blt	r18,r5,1000b408 <_strtod_r+0xecc>
1000a924:	8809883a 	mov	r4,r17
1000a928:	01400284 	movi	r5,10
1000a92c:	00012fc0 	call	100012fc <__mulsi3>
1000a930:	1023883a 	mov	r17,r2
1000a934:	a4fff81e 	bne	r20,r19,1000a918 <__alt_data_end+0xf800a918>
1000a938:	d9801517 	ldw	r6,84(sp)
1000a93c:	dc000f15 	stw	r16,60(sp)
1000a940:	dd001617 	ldw	r20,88(sp)
1000a944:	b021883a 	mov	r16,r22
1000a948:	e02d883a 	mov	r22,fp
1000a94c:	8839883a 	mov	fp,r17
1000a950:	dc401017 	ldw	r17,64(sp)
1000a954:	b985883a 	add	r2,r23,r6
1000a958:	10bfffc4 	addi	r2,r2,-1
1000a95c:	00c00204 	movi	r3,8
1000a960:	15c00044 	addi	r23,r2,1
1000a964:	1883d616 	blt	r3,r2,1000b8c0 <_strtod_r+0x1384>
1000a968:	e009883a 	mov	r4,fp
1000a96c:	01400284 	movi	r5,10
1000a970:	00012fc0 	call	100012fc <__mulsi3>
1000a974:	15b9883a 	add	fp,r2,r22
1000a978:	000d883a 	mov	r6,zero
1000a97c:	88800044 	addi	r2,r17,1
1000a980:	d8800c15 	stw	r2,48(sp)
1000a984:	89c00047 	ldb	r7,1(r17)
1000a988:	00022306 	br	1000b218 <_strtod_r+0xcdc>
1000a98c:	b0800047 	ldb	r2,1(r22)
1000a990:	01001604 	movi	r4,88
1000a994:	1102a326 	beq	r2,r4,1000b424 <_strtod_r+0xee8>
1000a998:	01001e04 	movi	r4,120
1000a99c:	1102a126 	beq	r2,r4,1000b424 <_strtod_r+0xee8>
1000a9a0:	b0800044 	addi	r2,r22,1
1000a9a4:	9009883a 	mov	r4,r18
1000a9a8:	d8800c15 	stw	r2,48(sp)
1000a9ac:	14800007 	ldb	r18,0(r2)
1000a9b0:	102d883a 	mov	r22,r2
1000a9b4:	10800044 	addi	r2,r2,1
1000a9b8:	913ffb26 	beq	r18,r4,1000a9a8 <__alt_data_end+0xf800a9a8>
1000a9bc:	90022526 	beq	r18,zero,1000b254 <_strtod_r+0xd18>
1000a9c0:	00c00044 	movi	r3,1
1000a9c4:	d8c01315 	stw	r3,76(sp)
1000a9c8:	003efc06 	br	1000a5bc <__alt_data_end+0xf800a5bc>
1000a9cc:	a800011e 	bne	r21,zero,1000a9d4 <_strtod_r+0x498>
1000a9d0:	30023026 	beq	r6,zero,1000b294 <_strtod_r+0xd58>
1000a9d4:	d9400c17 	ldw	r5,48(sp)
1000a9d8:	28800044 	addi	r2,r5,1
1000a9dc:	d8800c15 	stw	r2,48(sp)
1000a9e0:	29c00047 	ldb	r7,1(r5)
1000a9e4:	d9400e15 	stw	r5,56(sp)
1000a9e8:	00800ac4 	movi	r2,43
1000a9ec:	38821026 	beq	r7,r2,1000b230 <_strtod_r+0xcf4>
1000a9f0:	00800b44 	movi	r2,45
1000a9f4:	38821426 	beq	r7,r2,1000b248 <_strtod_r+0xd0c>
1000a9f8:	d8001515 	stw	zero,84(sp)
1000a9fc:	38bff404 	addi	r2,r7,-48
1000aa00:	00c00244 	movi	r3,9
1000aa04:	1881fc36 	bltu	r3,r2,1000b1f8 <_strtod_r+0xcbc>
1000aa08:	00800c04 	movi	r2,48
1000aa0c:	3880071e 	bne	r7,r2,1000aa2c <_strtod_r+0x4f0>
1000aa10:	d8800c17 	ldw	r2,48(sp)
1000aa14:	3807883a 	mov	r3,r7
1000aa18:	10800044 	addi	r2,r2,1
1000aa1c:	d8800c15 	stw	r2,48(sp)
1000aa20:	11c00007 	ldb	r7,0(r2)
1000aa24:	10800044 	addi	r2,r2,1
1000aa28:	38fffc26 	beq	r7,r3,1000aa1c <__alt_data_end+0xf800aa1c>
1000aa2c:	38bff3c4 	addi	r2,r7,-49
1000aa30:	00c00204 	movi	r3,8
1000aa34:	18bf0a36 	bltu	r3,r2,1000a660 <__alt_data_end+0xf800a660>
1000aa38:	d8c00c17 	ldw	r3,48(sp)
1000aa3c:	393ff404 	addi	r4,r7,-48
1000aa40:	05c00bc4 	movi	r23,47
1000aa44:	18800044 	addi	r2,r3,1
1000aa48:	d8800c15 	stw	r2,48(sp)
1000aa4c:	19c00047 	ldb	r7,1(r3)
1000aa50:	d8c01615 	stw	r3,88(sp)
1000aa54:	b9c0160e 	bge	r23,r7,1000aab0 <_strtod_r+0x574>
1000aa58:	00c00e44 	movi	r3,57
1000aa5c:	19c01416 	blt	r3,r7,1000aab0 <_strtod_r+0x574>
1000aa60:	d9401617 	ldw	r5,88(sp)
1000aa64:	dc001715 	stw	r16,92(sp)
1000aa68:	1823883a 	mov	r17,r3
1000aa6c:	2d800084 	addi	r22,r5,2
1000aa70:	3025883a 	mov	r18,r6
1000aa74:	3821883a 	mov	r16,r7
1000aa78:	00000206 	br	1000aa84 <_strtod_r+0x548>
1000aa7c:	b5800044 	addi	r22,r22,1
1000aa80:	8c000816 	blt	r17,r16,1000aaa4 <_strtod_r+0x568>
1000aa84:	01400284 	movi	r5,10
1000aa88:	00012fc0 	call	100012fc <__mulsi3>
1000aa8c:	dd800c15 	stw	r22,48(sp)
1000aa90:	1405883a 	add	r2,r2,r16
1000aa94:	b4000007 	ldb	r16,0(r22)
1000aa98:	113ff404 	addi	r4,r2,-48
1000aa9c:	b005883a 	mov	r2,r22
1000aaa0:	bc3ff616 	blt	r23,r16,1000aa7c <__alt_data_end+0xf800aa7c>
1000aaa4:	800f883a 	mov	r7,r16
1000aaa8:	dc001717 	ldw	r16,92(sp)
1000aaac:	900d883a 	mov	r6,r18
1000aab0:	d8c01617 	ldw	r3,88(sp)
1000aab4:	10c5c83a 	sub	r2,r2,r3
1000aab8:	00c00204 	movi	r3,8
1000aabc:	18833716 	blt	r3,r2,1000b79c <_strtod_r+0x1260>
1000aac0:	009387c4 	movi	r2,19999
1000aac4:	1100010e 	bge	r2,r4,1000aacc <_strtod_r+0x590>
1000aac8:	1009883a 	mov	r4,r2
1000aacc:	d8c01517 	ldw	r3,84(sp)
1000aad0:	183ee426 	beq	r3,zero,1000a664 <__alt_data_end+0xf800a664>
1000aad4:	0109c83a 	sub	r4,zero,r4
1000aad8:	a83ee326 	beq	r21,zero,1000a668 <__alt_data_end+0xf800a668>
1000aadc:	2529c83a 	sub	r20,r4,r20
1000aae0:	dd001015 	stw	r20,64(sp)
1000aae4:	9800011e 	bne	r19,zero,1000aaec <_strtod_r+0x5b0>
1000aae8:	a827883a 	mov	r19,r21
1000aaec:	00800404 	movi	r2,16
1000aaf0:	a823883a 	mov	r17,r21
1000aaf4:	1540010e 	bge	r2,r21,1000aafc <_strtod_r+0x5c0>
1000aaf8:	1023883a 	mov	r17,r2
1000aafc:	e009883a 	mov	r4,fp
1000ab00:	000f7e80 	call	1000f7e8 <__floatunsidf>
1000ab04:	d8800615 	stw	r2,24(sp)
1000ab08:	d8c00715 	stw	r3,28(sp)
1000ab0c:	01000244 	movi	r4,9
1000ab10:	2440150e 	bge	r4,r17,1000ab68 <_strtod_r+0x62c>
1000ab14:	893ffdc4 	addi	r4,r17,-9
1000ab18:	200890fa 	slli	r4,r4,3
1000ab1c:	180b883a 	mov	r5,r3
1000ab20:	00c40074 	movhi	r3,4097
1000ab24:	18caeb04 	addi	r3,r3,11180
1000ab28:	1907883a 	add	r3,r3,r4
1000ab2c:	19800017 	ldw	r6,0(r3)
1000ab30:	19c00117 	ldw	r7,4(r3)
1000ab34:	1009883a 	mov	r4,r2
1000ab38:	000ef200 	call	1000ef20 <__muldf3>
1000ab3c:	d9000f17 	ldw	r4,60(sp)
1000ab40:	1025883a 	mov	r18,r2
1000ab44:	1829883a 	mov	r20,r3
1000ab48:	000f7e80 	call	1000f7e8 <__floatunsidf>
1000ab4c:	9009883a 	mov	r4,r18
1000ab50:	a00b883a 	mov	r5,r20
1000ab54:	100d883a 	mov	r6,r2
1000ab58:	180f883a 	mov	r7,r3
1000ab5c:	000ee6c0 	call	1000ee6c <__adddf3>
1000ab60:	d8800615 	stw	r2,24(sp)
1000ab64:	d8c00715 	stw	r3,28(sp)
1000ab68:	008003c4 	movi	r2,15
1000ab6c:	15401b16 	blt	r2,r21,1000abdc <_strtod_r+0x6a0>
1000ab70:	d8c01017 	ldw	r3,64(sp)
1000ab74:	18001626 	beq	r3,zero,1000abd0 <_strtod_r+0x694>
1000ab78:	d9001017 	ldw	r4,64(sp)
1000ab7c:	01032e0e 	bge	zero,r4,1000b838 <_strtod_r+0x12fc>
1000ab80:	00c00584 	movi	r3,22
1000ab84:	19031016 	blt	r3,r4,1000b7c8 <_strtod_r+0x128c>
1000ab88:	200490fa 	slli	r2,r4,3
1000ab8c:	00c40074 	movhi	r3,4097
1000ab90:	18caeb04 	addi	r3,r3,11180
1000ab94:	d9000617 	ldw	r4,24(sp)
1000ab98:	1885883a 	add	r2,r3,r2
1000ab9c:	d9400717 	ldw	r5,28(sp)
1000aba0:	11800017 	ldw	r6,0(r2)
1000aba4:	11c00117 	ldw	r7,4(r2)
1000aba8:	000ef200 	call	1000ef20 <__muldf3>
1000abac:	003f0406 	br	1000a7c0 <__alt_data_end+0xf800a7c0>
1000abb0:	00dffc34 	movhi	r3,32752
1000abb4:	d8c00715 	stw	r3,28(sp)
1000abb8:	d8000615 	stw	zero,24(sp)
1000abbc:	1080020c 	andi	r2,r2,8
1000abc0:	10000326 	beq	r2,zero,1000abd0 <_strtod_r+0x694>
1000abc4:	d8800717 	ldw	r2,28(sp)
1000abc8:	10a00034 	orhi	r2,r2,32768
1000abcc:	d8800715 	stw	r2,28(sp)
1000abd0:	d8800617 	ldw	r2,24(sp)
1000abd4:	d8c00717 	ldw	r3,28(sp)
1000abd8:	003ef906 	br	1000a7c0 <__alt_data_end+0xf800a7c0>
1000abdc:	d8801017 	ldw	r2,64(sp)
1000abe0:	ac63c83a 	sub	r17,r21,r17
1000abe4:	1463883a 	add	r17,r2,r17
1000abe8:	0442a70e 	bge	zero,r17,1000b688 <_strtod_r+0x114c>
1000abec:	888003cc 	andi	r2,r17,15
1000abf0:	10000b26 	beq	r2,zero,1000ac20 <_strtod_r+0x6e4>
1000abf4:	100490fa 	slli	r2,r2,3
1000abf8:	00c40074 	movhi	r3,4097
1000abfc:	18caeb04 	addi	r3,r3,11180
1000ac00:	d9000617 	ldw	r4,24(sp)
1000ac04:	1885883a 	add	r2,r3,r2
1000ac08:	d9400717 	ldw	r5,28(sp)
1000ac0c:	11800017 	ldw	r6,0(r2)
1000ac10:	11c00117 	ldw	r7,4(r2)
1000ac14:	000ef200 	call	1000ef20 <__muldf3>
1000ac18:	d8800615 	stw	r2,24(sp)
1000ac1c:	d8c00715 	stw	r3,28(sp)
1000ac20:	00bffc04 	movi	r2,-16
1000ac24:	88a2703a 	and	r17,r17,r2
1000ac28:	8801a41e 	bne	r17,zero,1000b2bc <_strtod_r+0xd80>
1000ac2c:	0029883a 	mov	r20,zero
1000ac30:	d9401417 	ldw	r5,80(sp)
1000ac34:	df000015 	stw	fp,0(sp)
1000ac38:	8009883a 	mov	r4,r16
1000ac3c:	980d883a 	mov	r6,r19
1000ac40:	a80f883a 	mov	r7,r21
1000ac44:	00089140 	call	10008914 <__s2b>
1000ac48:	d8c01017 	ldw	r3,64(sp)
1000ac4c:	102d883a 	mov	r22,r2
1000ac50:	b1000304 	addi	r4,r22,12
1000ac54:	1805d7fa 	srai	r2,r3,31
1000ac58:	00f9c83a 	sub	fp,zero,r3
1000ac5c:	d9001315 	stw	r4,76(sp)
1000ac60:	e0b8703a 	and	fp,fp,r2
1000ac64:	df000e15 	stw	fp,56(sp)
1000ac68:	b1400117 	ldw	r5,4(r22)
1000ac6c:	8009883a 	mov	r4,r16
1000ac70:	0027883a 	mov	r19,zero
1000ac74:	00087000 	call	10008700 <_Balloc>
1000ac78:	b1800417 	ldw	r6,16(r22)
1000ac7c:	d9401317 	ldw	r5,76(sp)
1000ac80:	11000304 	addi	r4,r2,12
1000ac84:	31800084 	addi	r6,r6,2
1000ac88:	318d883a 	add	r6,r6,r6
1000ac8c:	318d883a 	add	r6,r6,r6
1000ac90:	1025883a 	mov	r18,r2
1000ac94:	00083580 	call	10008358 <memcpy>
1000ac98:	d9400617 	ldw	r5,24(sp)
1000ac9c:	d9800717 	ldw	r6,28(sp)
1000aca0:	d8800a04 	addi	r2,sp,40
1000aca4:	8009883a 	mov	r4,r16
1000aca8:	d9c00d04 	addi	r7,sp,52
1000acac:	d8800015 	stw	r2,0(sp)
1000acb0:	00093f40 	call	100093f4 <__d2b>
1000acb4:	8009883a 	mov	r4,r16
1000acb8:	01400044 	movi	r5,1
1000acbc:	d8800b15 	stw	r2,44(sp)
1000acc0:	0008b300 	call	10008b30 <__i2b>
1000acc4:	d8c01017 	ldw	r3,64(sp)
1000acc8:	1023883a 	mov	r17,r2
1000accc:	00c0010e 	bge	zero,r3,1000acd4 <_strtod_r+0x798>
1000acd0:	1827883a 	mov	r19,r3
1000acd4:	d8800d17 	ldw	r2,52(sp)
1000acd8:	1000de16 	blt	r2,zero,1000b054 <_strtod_r+0xb18>
1000acdc:	d9000e17 	ldw	r4,56(sp)
1000ace0:	9807883a 	mov	r3,r19
1000ace4:	20af883a 	add	r23,r4,r2
1000ace8:	d9000a17 	ldw	r4,40(sp)
1000acec:	1505c83a 	sub	r2,r2,r20
1000acf0:	017f00c4 	movi	r5,-1021
1000acf4:	110d883a 	add	r6,r2,r4
1000acf8:	31409a0e 	bge	r6,r5,1000af64 <_strtod_r+0xa28>
1000acfc:	10810cc4 	addi	r2,r2,1075
1000ad00:	b8b9883a 	add	fp,r23,r2
1000ad04:	1885883a 	add	r2,r3,r2
1000ad08:	152b883a 	add	r21,r2,r20
1000ad0c:	e005883a 	mov	r2,fp
1000ad10:	bf00010e 	bge	r23,fp,1000ad18 <_strtod_r+0x7dc>
1000ad14:	b805883a 	mov	r2,r23
1000ad18:	a880010e 	bge	r21,r2,1000ad20 <_strtod_r+0x7e4>
1000ad1c:	a805883a 	mov	r2,r21
1000ad20:	0080030e 	bge	zero,r2,1000ad30 <_strtod_r+0x7f4>
1000ad24:	e0b9c83a 	sub	fp,fp,r2
1000ad28:	a8abc83a 	sub	r21,r21,r2
1000ad2c:	b8afc83a 	sub	r23,r23,r2
1000ad30:	d9400e17 	ldw	r5,56(sp)
1000ad34:	28000f26 	beq	r5,zero,1000ad74 <_strtod_r+0x838>
1000ad38:	280d883a 	mov	r6,r5
1000ad3c:	8009883a 	mov	r4,r16
1000ad40:	880b883a 	mov	r5,r17
1000ad44:	0008dc40 	call	10008dc4 <__pow5mult>
1000ad48:	d9800b17 	ldw	r6,44(sp)
1000ad4c:	8009883a 	mov	r4,r16
1000ad50:	100b883a 	mov	r5,r2
1000ad54:	1023883a 	mov	r17,r2
1000ad58:	0008b6c0 	call	10008b6c <__multiply>
1000ad5c:	d9400b17 	ldw	r5,44(sp)
1000ad60:	8009883a 	mov	r4,r16
1000ad64:	d8801815 	stw	r2,96(sp)
1000ad68:	00087a80 	call	100087a8 <_Bfree>
1000ad6c:	d8801817 	ldw	r2,96(sp)
1000ad70:	d8800b15 	stw	r2,44(sp)
1000ad74:	0700050e 	bge	zero,fp,1000ad8c <_strtod_r+0x850>
1000ad78:	d9400b17 	ldw	r5,44(sp)
1000ad7c:	8009883a 	mov	r4,r16
1000ad80:	e00d883a 	mov	r6,fp
1000ad84:	0008ef00 	call	10008ef0 <__lshift>
1000ad88:	d8800b15 	stw	r2,44(sp)
1000ad8c:	98000526 	beq	r19,zero,1000ada4 <_strtod_r+0x868>
1000ad90:	900b883a 	mov	r5,r18
1000ad94:	8009883a 	mov	r4,r16
1000ad98:	980d883a 	mov	r6,r19
1000ad9c:	0008dc40 	call	10008dc4 <__pow5mult>
1000ada0:	1025883a 	mov	r18,r2
1000ada4:	0540050e 	bge	zero,r21,1000adbc <_strtod_r+0x880>
1000ada8:	900b883a 	mov	r5,r18
1000adac:	8009883a 	mov	r4,r16
1000adb0:	a80d883a 	mov	r6,r21
1000adb4:	0008ef00 	call	10008ef0 <__lshift>
1000adb8:	1025883a 	mov	r18,r2
1000adbc:	05c0050e 	bge	zero,r23,1000add4 <_strtod_r+0x898>
1000adc0:	880b883a 	mov	r5,r17
1000adc4:	8009883a 	mov	r4,r16
1000adc8:	b80d883a 	mov	r6,r23
1000adcc:	0008ef00 	call	10008ef0 <__lshift>
1000add0:	1023883a 	mov	r17,r2
1000add4:	d9400b17 	ldw	r5,44(sp)
1000add8:	8009883a 	mov	r4,r16
1000addc:	900d883a 	mov	r6,r18
1000ade0:	00090a40 	call	100090a4 <__mdiff>
1000ade4:	1027883a 	mov	r19,r2
1000ade8:	10800317 	ldw	r2,12(r2)
1000adec:	9809883a 	mov	r4,r19
1000adf0:	98000315 	stw	zero,12(r19)
1000adf4:	880b883a 	mov	r5,r17
1000adf8:	d8800f15 	stw	r2,60(sp)
1000adfc:	000904c0 	call	1000904c <__mcmp>
1000ae00:	1001cb16 	blt	r2,zero,1000b530 <_strtod_r+0xff4>
1000ae04:	1001fa26 	beq	r2,zero,1000b5f0 <_strtod_r+0x10b4>
1000ae08:	9809883a 	mov	r4,r19
1000ae0c:	880b883a 	mov	r5,r17
1000ae10:	00095380 	call	10009538 <__ratio>
1000ae14:	1009883a 	mov	r4,r2
1000ae18:	180b883a 	mov	r5,r3
1000ae1c:	000d883a 	mov	r6,zero
1000ae20:	01d00034 	movhi	r7,16384
1000ae24:	102f883a 	mov	r23,r2
1000ae28:	1839883a 	mov	fp,r3
1000ae2c:	000f5940 	call	1000f594 <__ledf2>
1000ae30:	00804f16 	blt	zero,r2,1000af70 <_strtod_r+0xa34>
1000ae34:	d9400f17 	ldw	r5,60(sp)
1000ae38:	28008926 	beq	r5,zero,1000b060 <_strtod_r+0xb24>
1000ae3c:	da400717 	ldw	r9,28(sp)
1000ae40:	05cffc34 	movhi	r23,16368
1000ae44:	d8000815 	stw	zero,32(sp)
1000ae48:	ddc00915 	stw	r23,36(sp)
1000ae4c:	002b883a 	mov	r21,zero
1000ae50:	4f1ffc2c 	andhi	fp,r9,32752
1000ae54:	009ff834 	movhi	r2,32736
1000ae58:	e0805526 	beq	fp,r2,1000afb0 <_strtod_r+0xa74>
1000ae5c:	a0001b26 	beq	r20,zero,1000aecc <_strtod_r+0x990>
1000ae60:	0081a834 	movhi	r2,1696
1000ae64:	17001936 	bltu	r2,fp,1000aecc <_strtod_r+0x990>
1000ae68:	a809883a 	mov	r4,r21
1000ae6c:	b80b883a 	mov	r5,r23
1000ae70:	01bff034 	movhi	r6,65472
1000ae74:	01d07834 	movhi	r7,16864
1000ae78:	39ffffc4 	addi	r7,r7,-1
1000ae7c:	000f5940 	call	1000f594 <__ledf2>
1000ae80:	00800d16 	blt	zero,r2,1000aeb8 <_strtod_r+0x97c>
1000ae84:	a809883a 	mov	r4,r21
1000ae88:	b80b883a 	mov	r5,r23
1000ae8c:	000dd180 	call	1000dd18 <__fixunsdfsi>
1000ae90:	1000d626 	beq	r2,zero,1000b1ec <_strtod_r+0xcb0>
1000ae94:	1009883a 	mov	r4,r2
1000ae98:	000f7e80 	call	1000f7e8 <__floatunsidf>
1000ae9c:	102b883a 	mov	r21,r2
1000aea0:	182f883a 	mov	r23,r3
1000aea4:	d9400f17 	ldw	r5,60(sp)
1000aea8:	2800ce1e 	bne	r5,zero,1000b1e4 <_strtod_r+0xca8>
1000aeac:	b8a0003c 	xorhi	r2,r23,32768
1000aeb0:	dd400815 	stw	r21,32(sp)
1000aeb4:	d8800915 	stw	r2,36(sp)
1000aeb8:	d8c00917 	ldw	r3,36(sp)
1000aebc:	0081ac34 	movhi	r2,1712
1000aec0:	1885883a 	add	r2,r3,r2
1000aec4:	1705c83a 	sub	r2,r2,fp
1000aec8:	d8800915 	stw	r2,36(sp)
1000aecc:	d9000617 	ldw	r4,24(sp)
1000aed0:	d9400717 	ldw	r5,28(sp)
1000aed4:	000924c0 	call	1000924c <__ulp>
1000aed8:	da800617 	ldw	r10,24(sp)
1000aedc:	da400717 	ldw	r9,28(sp)
1000aee0:	d9800817 	ldw	r6,32(sp)
1000aee4:	d9c00917 	ldw	r7,36(sp)
1000aee8:	1009883a 	mov	r4,r2
1000aeec:	180b883a 	mov	r5,r3
1000aef0:	da401915 	stw	r9,100(sp)
1000aef4:	da801815 	stw	r10,96(sp)
1000aef8:	000ef200 	call	1000ef20 <__muldf3>
1000aefc:	da401917 	ldw	r9,100(sp)
1000af00:	da801817 	ldw	r10,96(sp)
1000af04:	100d883a 	mov	r6,r2
1000af08:	480b883a 	mov	r5,r9
1000af0c:	5009883a 	mov	r4,r10
1000af10:	180f883a 	mov	r7,r3
1000af14:	000ee6c0 	call	1000ee6c <__adddf3>
1000af18:	d8800615 	stw	r2,24(sp)
1000af1c:	d8c00715 	stw	r3,28(sp)
1000af20:	1813883a 	mov	r9,r3
1000af24:	a000021e 	bne	r20,zero,1000af30 <_strtod_r+0x9f4>
1000af28:	489ffc2c 	andhi	r2,r9,32752
1000af2c:	e0807226 	beq	fp,r2,1000b0f8 <_strtod_r+0xbbc>
1000af30:	d9400b17 	ldw	r5,44(sp)
1000af34:	8009883a 	mov	r4,r16
1000af38:	00087a80 	call	100087a8 <_Bfree>
1000af3c:	8009883a 	mov	r4,r16
1000af40:	900b883a 	mov	r5,r18
1000af44:	00087a80 	call	100087a8 <_Bfree>
1000af48:	8009883a 	mov	r4,r16
1000af4c:	880b883a 	mov	r5,r17
1000af50:	00087a80 	call	100087a8 <_Bfree>
1000af54:	8009883a 	mov	r4,r16
1000af58:	980b883a 	mov	r5,r19
1000af5c:	00087a80 	call	100087a8 <_Bfree>
1000af60:	003f4106 	br	1000ac68 <__alt_data_end+0xf800ac68>
1000af64:	00800d84 	movi	r2,54
1000af68:	1105c83a 	sub	r2,r2,r4
1000af6c:	003f6406 	br	1000ad00 <__alt_data_end+0xf800ad00>
1000af70:	b809883a 	mov	r4,r23
1000af74:	e00b883a 	mov	r5,fp
1000af78:	000d883a 	mov	r6,zero
1000af7c:	01cff834 	movhi	r7,16352
1000af80:	000ef200 	call	1000ef20 <__muldf3>
1000af84:	d9000f17 	ldw	r4,60(sp)
1000af88:	102b883a 	mov	r21,r2
1000af8c:	182f883a 	mov	r23,r3
1000af90:	2000011e 	bne	r4,zero,1000af98 <_strtod_r+0xa5c>
1000af94:	18e0003c 	xorhi	r3,r3,32768
1000af98:	da400717 	ldw	r9,28(sp)
1000af9c:	d8800815 	stw	r2,32(sp)
1000afa0:	d8c00915 	stw	r3,36(sp)
1000afa4:	4f1ffc2c 	andhi	fp,r9,32752
1000afa8:	009ff834 	movhi	r2,32736
1000afac:	e0bfab1e 	bne	fp,r2,1000ae5c <__alt_data_end+0xf800ae5c>
1000afb0:	d8800617 	ldw	r2,24(sp)
1000afb4:	00ff2c34 	movhi	r3,64688
1000afb8:	48d3883a 	add	r9,r9,r3
1000afbc:	1009883a 	mov	r4,r2
1000afc0:	d8800415 	stw	r2,16(sp)
1000afc4:	d8800717 	ldw	r2,28(sp)
1000afc8:	480b883a 	mov	r5,r9
1000afcc:	da400715 	stw	r9,28(sp)
1000afd0:	d8800515 	stw	r2,20(sp)
1000afd4:	000924c0 	call	1000924c <__ulp>
1000afd8:	da800617 	ldw	r10,24(sp)
1000afdc:	da400717 	ldw	r9,28(sp)
1000afe0:	d9800817 	ldw	r6,32(sp)
1000afe4:	d9c00917 	ldw	r7,36(sp)
1000afe8:	1009883a 	mov	r4,r2
1000afec:	180b883a 	mov	r5,r3
1000aff0:	da401915 	stw	r9,100(sp)
1000aff4:	da801815 	stw	r10,96(sp)
1000aff8:	000ef200 	call	1000ef20 <__muldf3>
1000affc:	da801817 	ldw	r10,96(sp)
1000b000:	da401917 	ldw	r9,100(sp)
1000b004:	100d883a 	mov	r6,r2
1000b008:	5009883a 	mov	r4,r10
1000b00c:	480b883a 	mov	r5,r9
1000b010:	180f883a 	mov	r7,r3
1000b014:	000ee6c0 	call	1000ee6c <__adddf3>
1000b018:	d8800615 	stw	r2,24(sp)
1000b01c:	015f2834 	movhi	r5,31904
1000b020:	297fffc4 	addi	r5,r5,-1
1000b024:	189ffc2c 	andhi	r2,r3,32752
1000b028:	2880642e 	bgeu	r5,r2,1000b1bc <_strtod_r+0xc80>
1000b02c:	d8800517 	ldw	r2,20(sp)
1000b030:	00dffc34 	movhi	r3,32752
1000b034:	18ffffc4 	addi	r3,r3,-1
1000b038:	10c18526 	beq	r2,r3,1000b650 <_strtod_r+0x1114>
1000b03c:	011ffc34 	movhi	r4,32752
1000b040:	213fffc4 	addi	r4,r4,-1
1000b044:	00bfffc4 	movi	r2,-1
1000b048:	d9000715 	stw	r4,28(sp)
1000b04c:	d8800615 	stw	r2,24(sp)
1000b050:	003fb706 	br	1000af30 <__alt_data_end+0xf800af30>
1000b054:	9887c83a 	sub	r3,r19,r2
1000b058:	ddc00e17 	ldw	r23,56(sp)
1000b05c:	003f2206 	br	1000ace8 <__alt_data_end+0xf800ace8>
1000b060:	d8800617 	ldw	r2,24(sp)
1000b064:	10001a1e 	bne	r2,zero,1000b0d0 <_strtod_r+0xb94>
1000b068:	da400717 	ldw	r9,28(sp)
1000b06c:	00c00434 	movhi	r3,16
1000b070:	18ffffc4 	addi	r3,r3,-1
1000b074:	48c4703a 	and	r2,r9,r3
1000b078:	1000191e 	bne	r2,zero,1000b0e0 <_strtod_r+0xba4>
1000b07c:	b809883a 	mov	r4,r23
1000b080:	e00b883a 	mov	r5,fp
1000b084:	000d883a 	mov	r6,zero
1000b088:	01cffc34 	movhi	r7,16368
1000b08c:	da401915 	stw	r9,100(sp)
1000b090:	000f5380 	call	1000f538 <__ltdf2>
1000b094:	da401917 	ldw	r9,100(sp)
1000b098:	1001bb16 	blt	r2,zero,1000b788 <_strtod_r+0x124c>
1000b09c:	b809883a 	mov	r4,r23
1000b0a0:	e00b883a 	mov	r5,fp
1000b0a4:	000d883a 	mov	r6,zero
1000b0a8:	01cff834 	movhi	r7,16352
1000b0ac:	000ef200 	call	1000ef20 <__muldf3>
1000b0b0:	da401917 	ldw	r9,100(sp)
1000b0b4:	182f883a 	mov	r23,r3
1000b0b8:	102b883a 	mov	r21,r2
1000b0bc:	1007883a 	mov	r3,r2
1000b0c0:	b8a0003c 	xorhi	r2,r23,32768
1000b0c4:	d8c00815 	stw	r3,32(sp)
1000b0c8:	d8800915 	stw	r2,36(sp)
1000b0cc:	003f6006 	br	1000ae50 <__alt_data_end+0xf800ae50>
1000b0d0:	00c00044 	movi	r3,1
1000b0d4:	da400717 	ldw	r9,28(sp)
1000b0d8:	10c0011e 	bne	r2,r3,1000b0e0 <_strtod_r+0xba4>
1000b0dc:	4800c526 	beq	r9,zero,1000b3f4 <_strtod_r+0xeb8>
1000b0e0:	00affc34 	movhi	r2,49136
1000b0e4:	d8000815 	stw	zero,32(sp)
1000b0e8:	d8800915 	stw	r2,36(sp)
1000b0ec:	002b883a 	mov	r21,zero
1000b0f0:	05cffc34 	movhi	r23,16368
1000b0f4:	003f5606 	br	1000ae50 <__alt_data_end+0xf800ae50>
1000b0f8:	b80b883a 	mov	r5,r23
1000b0fc:	a809883a 	mov	r4,r21
1000b100:	da401915 	stw	r9,100(sp)
1000b104:	000f6c40 	call	1000f6c4 <__fixdfsi>
1000b108:	1009883a 	mov	r4,r2
1000b10c:	000f5f00 	call	1000f5f0 <__floatsidf>
1000b110:	b80b883a 	mov	r5,r23
1000b114:	a809883a 	mov	r4,r21
1000b118:	100d883a 	mov	r6,r2
1000b11c:	180f883a 	mov	r7,r3
1000b120:	000eec00 	call	1000eec0 <__subdf3>
1000b124:	102f883a 	mov	r23,r2
1000b128:	d8800f17 	ldw	r2,60(sp)
1000b12c:	1839883a 	mov	fp,r3
1000b130:	da401917 	ldw	r9,100(sp)
1000b134:	1000021e 	bne	r2,zero,1000b140 <_strtod_r+0xc04>
1000b138:	d8800617 	ldw	r2,24(sp)
1000b13c:	10004826 	beq	r2,zero,1000b260 <_strtod_r+0xd24>
1000b140:	b809883a 	mov	r4,r23
1000b144:	e00b883a 	mov	r5,fp
1000b148:	01a52834 	movhi	r6,38048
1000b14c:	318d6544 	addi	r6,r6,13717
1000b150:	01cff834 	movhi	r7,16352
1000b154:	39ffffc4 	addi	r7,r7,-1
1000b158:	000f5380 	call	1000f538 <__ltdf2>
1000b15c:	10000716 	blt	r2,zero,1000b17c <_strtod_r+0xc40>
1000b160:	b809883a 	mov	r4,r23
1000b164:	e00b883a 	mov	r5,fp
1000b168:	018d6c34 	movhi	r6,13744
1000b16c:	31b94d44 	addi	r6,r6,-6859
1000b170:	01cff834 	movhi	r7,16352
1000b174:	000f4700 	call	1000f470 <__gtdf2>
1000b178:	00bf6d0e 	bge	zero,r2,1000af30 <__alt_data_end+0xf800af30>
1000b17c:	d9400b17 	ldw	r5,44(sp)
1000b180:	8009883a 	mov	r4,r16
1000b184:	00087a80 	call	100087a8 <_Bfree>
1000b188:	8009883a 	mov	r4,r16
1000b18c:	900b883a 	mov	r5,r18
1000b190:	00087a80 	call	100087a8 <_Bfree>
1000b194:	8009883a 	mov	r4,r16
1000b198:	880b883a 	mov	r5,r17
1000b19c:	00087a80 	call	100087a8 <_Bfree>
1000b1a0:	8009883a 	mov	r4,r16
1000b1a4:	b00b883a 	mov	r5,r22
1000b1a8:	00087a80 	call	100087a8 <_Bfree>
1000b1ac:	8009883a 	mov	r4,r16
1000b1b0:	980b883a 	mov	r5,r19
1000b1b4:	00087a80 	call	100087a8 <_Bfree>
1000b1b8:	003e8506 	br	1000abd0 <__alt_data_end+0xf800abd0>
1000b1bc:	0240d434 	movhi	r9,848
1000b1c0:	1a53883a 	add	r9,r3,r9
1000b1c4:	da400715 	stw	r9,28(sp)
1000b1c8:	003f5606 	br	1000af24 <__alt_data_end+0xf800af24>
1000b1cc:	a827883a 	mov	r19,r21
1000b1d0:	dd801415 	stw	r22,80(sp)
1000b1d4:	000d883a 	mov	r6,zero
1000b1d8:	0029883a 	mov	r20,zero
1000b1dc:	d8001015 	stw	zero,64(sp)
1000b1e0:	003d1d06 	br	1000a658 <__alt_data_end+0xf800a658>
1000b1e4:	b805883a 	mov	r2,r23
1000b1e8:	003f3106 	br	1000aeb0 <__alt_data_end+0xf800aeb0>
1000b1ec:	002b883a 	mov	r21,zero
1000b1f0:	05cffc34 	movhi	r23,16368
1000b1f4:	003f2b06 	br	1000aea4 <__alt_data_end+0xf800aea4>
1000b1f8:	d9400e17 	ldw	r5,56(sp)
1000b1fc:	0009883a 	mov	r4,zero
1000b200:	d9400c15 	stw	r5,48(sp)
1000b204:	003d1706 	br	1000a664 <__alt_data_end+0xf800a664>
1000b208:	dd801415 	stw	r22,80(sp)
1000b20c:	a82f883a 	mov	r23,r21
1000b210:	000d883a 	mov	r6,zero
1000b214:	0029883a 	mov	r20,zero
1000b218:	3dbff404 	addi	r22,r7,-48
1000b21c:	00800244 	movi	r2,9
1000b220:	15802136 	bltu	r2,r22,1000b2a8 <_strtod_r+0xd6c>
1000b224:	31800044 	addi	r6,r6,1
1000b228:	dc400c17 	ldw	r17,48(sp)
1000b22c:	003daa06 	br	1000a8d8 <__alt_data_end+0xf800a8d8>
1000b230:	d8001515 	stw	zero,84(sp)
1000b234:	d9400e17 	ldw	r5,56(sp)
1000b238:	28800084 	addi	r2,r5,2
1000b23c:	d8800c15 	stw	r2,48(sp)
1000b240:	29c00087 	ldb	r7,2(r5)
1000b244:	003ded06 	br	1000a9fc <__alt_data_end+0xf800a9fc>
1000b248:	00c00044 	movi	r3,1
1000b24c:	d8c01515 	stw	r3,84(sp)
1000b250:	003ff806 	br	1000b234 <__alt_data_end+0xf800b234>
1000b254:	0005883a 	mov	r2,zero
1000b258:	0007883a 	mov	r3,zero
1000b25c:	003d5806 	br	1000a7c0 <__alt_data_end+0xf800a7c0>
1000b260:	00c00434 	movhi	r3,16
1000b264:	18ffffc4 	addi	r3,r3,-1
1000b268:	48d2703a 	and	r9,r9,r3
1000b26c:	483fb41e 	bne	r9,zero,1000b140 <__alt_data_end+0xf800b140>
1000b270:	b809883a 	mov	r4,r23
1000b274:	e00b883a 	mov	r5,fp
1000b278:	01a52834 	movhi	r6,38048
1000b27c:	318d6544 	addi	r6,r6,13717
1000b280:	01cff434 	movhi	r7,16336
1000b284:	39ffffc4 	addi	r7,r7,-1
1000b288:	000f5380 	call	1000f538 <__ltdf2>
1000b28c:	103f280e 	bge	r2,zero,1000af30 <__alt_data_end+0xf800af30>
1000b290:	003fba06 	br	1000b17c <__alt_data_end+0xf800b17c>
1000b294:	d8c01317 	ldw	r3,76(sp)
1000b298:	183dce1e 	bne	r3,zero,1000a9d4 <__alt_data_end+0xf800a9d4>
1000b29c:	d8800617 	ldw	r2,24(sp)
1000b2a0:	d8c00717 	ldw	r3,28(sp)
1000b2a4:	003d4306 	br	1000a7b4 <__alt_data_end+0xf800a7b4>
1000b2a8:	00c00044 	movi	r3,1
1000b2ac:	a827883a 	mov	r19,r21
1000b2b0:	d8c01015 	stw	r3,64(sp)
1000b2b4:	b82b883a 	mov	r21,r23
1000b2b8:	003ce506 	br	1000a650 <__alt_data_end+0xf800a650>
1000b2bc:	00804d04 	movi	r2,308
1000b2c0:	1440ec16 	blt	r2,r17,1000b674 <_strtod_r+0x1138>
1000b2c4:	8825d13a 	srai	r18,r17,4
1000b2c8:	05c00044 	movi	r23,1
1000b2cc:	bc81ca0e 	bge	r23,r18,1000b9f8 <_strtod_r+0x14bc>
1000b2d0:	d8800617 	ldw	r2,24(sp)
1000b2d4:	d8c00717 	ldw	r3,28(sp)
1000b2d8:	05840074 	movhi	r22,4097
1000b2dc:	b58ae104 	addi	r22,r22,11140
1000b2e0:	b029883a 	mov	r20,r22
1000b2e4:	0023883a 	mov	r17,zero
1000b2e8:	9180004c 	andi	r6,r18,1
1000b2ec:	30000526 	beq	r6,zero,1000b304 <_strtod_r+0xdc8>
1000b2f0:	a1800017 	ldw	r6,0(r20)
1000b2f4:	a1c00117 	ldw	r7,4(r20)
1000b2f8:	1009883a 	mov	r4,r2
1000b2fc:	180b883a 	mov	r5,r3
1000b300:	000ef200 	call	1000ef20 <__muldf3>
1000b304:	9025d07a 	srai	r18,r18,1
1000b308:	8c400044 	addi	r17,r17,1
1000b30c:	a5000204 	addi	r20,r20,8
1000b310:	bcbff516 	blt	r23,r18,1000b2e8 <__alt_data_end+0xf800b2e8>
1000b314:	d8800615 	stw	r2,24(sp)
1000b318:	d8c00715 	stw	r3,28(sp)
1000b31c:	880490fa 	slli	r2,r17,3
1000b320:	d9400717 	ldw	r5,28(sp)
1000b324:	d9000617 	ldw	r4,24(sp)
1000b328:	b0a3883a 	add	r17,r22,r2
1000b32c:	89800017 	ldw	r6,0(r17)
1000b330:	89c00117 	ldw	r7,4(r17)
1000b334:	00bf2c34 	movhi	r2,64688
1000b338:	288b883a 	add	r5,r5,r2
1000b33c:	000ef200 	call	1000ef20 <__muldf3>
1000b340:	d8800615 	stw	r2,24(sp)
1000b344:	011f2834 	movhi	r4,31904
1000b348:	189ffc2c 	andhi	r2,r3,32752
1000b34c:	2080c936 	bltu	r4,r2,1000b674 <_strtod_r+0x1138>
1000b350:	011f2434 	movhi	r4,31888
1000b354:	2081652e 	bgeu	r4,r2,1000b8ec <_strtod_r+0x13b0>
1000b358:	009ffc34 	movhi	r2,32752
1000b35c:	10bfffc4 	addi	r2,r2,-1
1000b360:	d8800715 	stw	r2,28(sp)
1000b364:	00bfffc4 	movi	r2,-1
1000b368:	d8800615 	stw	r2,24(sp)
1000b36c:	003e2f06 	br	1000ac2c <__alt_data_end+0xf800ac2c>
1000b370:	00c00044 	movi	r3,1
1000b374:	0027883a 	mov	r19,zero
1000b378:	dd801415 	stw	r22,80(sp)
1000b37c:	0029883a 	mov	r20,zero
1000b380:	d8c01015 	stw	r3,64(sp)
1000b384:	003cb206 	br	1000a650 <__alt_data_end+0xf800a650>
1000b388:	d8800717 	ldw	r2,28(sp)
1000b38c:	00c00434 	movhi	r3,16
1000b390:	18ffffc4 	addi	r3,r3,-1
1000b394:	10c6703a 	and	r3,r2,r3
1000b398:	1801471e 	bne	r3,zero,1000b8b8 <_strtod_r+0x137c>
1000b39c:	d8c00617 	ldw	r3,24(sp)
1000b3a0:	18007e26 	beq	r3,zero,1000b59c <_strtod_r+0x1060>
1000b3a4:	18c0004c 	andi	r3,r3,1
1000b3a8:	1800a726 	beq	r3,zero,1000b648 <_strtod_r+0x110c>
1000b3ac:	ddc00617 	ldw	r23,24(sp)
1000b3b0:	dd400717 	ldw	r21,28(sp)
1000b3b4:	b809883a 	mov	r4,r23
1000b3b8:	a80b883a 	mov	r5,r21
1000b3bc:	000924c0 	call	1000924c <__ulp>
1000b3c0:	b809883a 	mov	r4,r23
1000b3c4:	a80b883a 	mov	r5,r21
1000b3c8:	100d883a 	mov	r6,r2
1000b3cc:	180f883a 	mov	r7,r3
1000b3d0:	000eec00 	call	1000eec0 <__subdf3>
1000b3d4:	1009883a 	mov	r4,r2
1000b3d8:	180b883a 	mov	r5,r3
1000b3dc:	000d883a 	mov	r6,zero
1000b3e0:	000f883a 	mov	r7,zero
1000b3e4:	d8800615 	stw	r2,24(sp)
1000b3e8:	d8c00715 	stw	r3,28(sp)
1000b3ec:	000f3b80 	call	1000f3b8 <__eqdf2>
1000b3f0:	1000951e 	bne	r2,zero,1000b648 <_strtod_r+0x110c>
1000b3f4:	d8000615 	stw	zero,24(sp)
1000b3f8:	d8000715 	stw	zero,28(sp)
1000b3fc:	00800884 	movi	r2,34
1000b400:	80800015 	stw	r2,0(r16)
1000b404:	003f5d06 	br	1000b17c <__alt_data_end+0xf800b17c>
1000b408:	00800404 	movi	r2,16
1000b40c:	153d4916 	blt	r2,r20,1000a934 <__alt_data_end+0xf800a934>
1000b410:	8009883a 	mov	r4,r16
1000b414:	01400284 	movi	r5,10
1000b418:	00012fc0 	call	100012fc <__mulsi3>
1000b41c:	1021883a 	mov	r16,r2
1000b420:	003d4406 	br	1000a934 <__alt_data_end+0xf800a934>
1000b424:	d9001217 	ldw	r4,72(sp)
1000b428:	d8800b04 	addi	r2,sp,44
1000b42c:	04c40074 	movhi	r19,4097
1000b430:	9cce1604 	addi	r19,r19,14424
1000b434:	d9000115 	stw	r4,4(sp)
1000b438:	d8800015 	stw	r2,0(sp)
1000b43c:	8009883a 	mov	r4,r16
1000b440:	d9400c04 	addi	r5,sp,48
1000b444:	980d883a 	mov	r6,r19
1000b448:	d9c00a04 	addi	r7,sp,40
1000b44c:	000d0c80 	call	1000d0c8 <__gethex>
1000b450:	148001cc 	andi	r18,r2,7
1000b454:	903dde26 	beq	r18,zero,1000abd0 <__alt_data_end+0xf800abd0>
1000b458:	00c00184 	movi	r3,6
1000b45c:	90c0f226 	beq	r18,r3,1000b828 <_strtod_r+0x12ec>
1000b460:	d9800b17 	ldw	r6,44(sp)
1000b464:	30000826 	beq	r6,zero,1000b488 <_strtod_r+0xf4c>
1000b468:	99400017 	ldw	r5,0(r19)
1000b46c:	d9000204 	addi	r4,sp,8
1000b470:	d8801815 	stw	r2,96(sp)
1000b474:	00096500 	call	10009650 <__copybits>
1000b478:	d9400b17 	ldw	r5,44(sp)
1000b47c:	8009883a 	mov	r4,r16
1000b480:	00087a80 	call	100087a8 <_Bfree>
1000b484:	d8801817 	ldw	r2,96(sp)
1000b488:	00c00184 	movi	r3,6
1000b48c:	d9000a17 	ldw	r4,40(sp)
1000b490:	1cbdca36 	bltu	r3,r18,1000abbc <__alt_data_end+0xf800abbc>
1000b494:	94a5883a 	add	r18,r18,r18
1000b498:	94a5883a 	add	r18,r18,r18
1000b49c:	00c40074 	movhi	r3,4097
1000b4a0:	18ed2c04 	addi	r3,r3,-19280
1000b4a4:	90c7883a 	add	r3,r18,r3
1000b4a8:	18c00017 	ldw	r3,0(r3)
1000b4ac:	1800683a 	jmp	r3
1000b4b0:	1000b524 	muli	zero,r2,724
1000b4b4:	1000b4e0 	cmpeqi	zero,r2,723
1000b4b8:	1000b4cc 	andi	zero,r2,723
1000b4bc:	1000abb0 	cmpltui	zero,r2,686
1000b4c0:	1000b50c 	andi	zero,r2,724
1000b4c4:	1000b4e0 	cmpeqi	zero,r2,723
1000b4c8:	1000b524 	muli	zero,r2,724
1000b4cc:	d8c00217 	ldw	r3,8(sp)
1000b4d0:	d8c00615 	stw	r3,24(sp)
1000b4d4:	d8c00317 	ldw	r3,12(sp)
1000b4d8:	d8c00715 	stw	r3,28(sp)
1000b4dc:	003db706 	br	1000abbc <__alt_data_end+0xf800abbc>
1000b4e0:	21010cc4 	addi	r4,r4,1075
1000b4e4:	d9400317 	ldw	r5,12(sp)
1000b4e8:	2008953a 	slli	r4,r4,20
1000b4ec:	00fffc34 	movhi	r3,65520
1000b4f0:	18ffffc4 	addi	r3,r3,-1
1000b4f4:	28c6703a 	and	r3,r5,r3
1000b4f8:	20c6b03a 	or	r3,r4,r3
1000b4fc:	d9000217 	ldw	r4,8(sp)
1000b500:	d8c00715 	stw	r3,28(sp)
1000b504:	d9000615 	stw	r4,24(sp)
1000b508:	003dac06 	br	1000abbc <__alt_data_end+0xf800abbc>
1000b50c:	00e00034 	movhi	r3,32768
1000b510:	18ffffc4 	addi	r3,r3,-1
1000b514:	d8c00715 	stw	r3,28(sp)
1000b518:	00ffffc4 	movi	r3,-1
1000b51c:	d8c00615 	stw	r3,24(sp)
1000b520:	003da606 	br	1000abbc <__alt_data_end+0xf800abbc>
1000b524:	d8000715 	stw	zero,28(sp)
1000b528:	d8000615 	stw	zero,24(sp)
1000b52c:	003da306 	br	1000abbc <__alt_data_end+0xf800abbc>
1000b530:	d8c00f17 	ldw	r3,60(sp)
1000b534:	1800441e 	bne	r3,zero,1000b648 <_strtod_r+0x110c>
1000b538:	d8800617 	ldw	r2,24(sp)
1000b53c:	1000421e 	bne	r2,zero,1000b648 <_strtod_r+0x110c>
1000b540:	d8800717 	ldw	r2,28(sp)
1000b544:	00c00434 	movhi	r3,16
1000b548:	18ffffc4 	addi	r3,r3,-1
1000b54c:	10c6703a 	and	r3,r2,r3
1000b550:	18003d1e 	bne	r3,zero,1000b648 <_strtod_r+0x110c>
1000b554:	109ffc2c 	andhi	r2,r2,32752
1000b558:	00c1ac34 	movhi	r3,1712
1000b55c:	18803a2e 	bgeu	r3,r2,1000b648 <_strtod_r+0x110c>
1000b560:	98800517 	ldw	r2,20(r19)
1000b564:	1000031e 	bne	r2,zero,1000b574 <_strtod_r+0x1038>
1000b568:	98800417 	ldw	r2,16(r19)
1000b56c:	00c00044 	movi	r3,1
1000b570:	1880350e 	bge	r3,r2,1000b648 <_strtod_r+0x110c>
1000b574:	980b883a 	mov	r5,r19
1000b578:	8009883a 	mov	r4,r16
1000b57c:	01800044 	movi	r6,1
1000b580:	0008ef00 	call	10008ef0 <__lshift>
1000b584:	1009883a 	mov	r4,r2
1000b588:	880b883a 	mov	r5,r17
1000b58c:	1027883a 	mov	r19,r2
1000b590:	000904c0 	call	1000904c <__mcmp>
1000b594:	00802c0e 	bge	zero,r2,1000b648 <_strtod_r+0x110c>
1000b598:	d8800717 	ldw	r2,28(sp)
1000b59c:	109ffc2c 	andhi	r2,r2,32752
1000b5a0:	a000ed26 	beq	r20,zero,1000b958 <_strtod_r+0x141c>
1000b5a4:	00c1ac34 	movhi	r3,1712
1000b5a8:	1880eb36 	bltu	r3,r2,1000b958 <_strtod_r+0x141c>
1000b5ac:	00c0dc34 	movhi	r3,880
1000b5b0:	18bf902e 	bgeu	r3,r2,1000b3f4 <__alt_data_end+0xf800b3f4>
1000b5b4:	d9000617 	ldw	r4,24(sp)
1000b5b8:	d9400717 	ldw	r5,28(sp)
1000b5bc:	008e5434 	movhi	r2,14672
1000b5c0:	000d883a 	mov	r6,zero
1000b5c4:	100f883a 	mov	r7,r2
1000b5c8:	d8800515 	stw	r2,20(sp)
1000b5cc:	d8000415 	stw	zero,16(sp)
1000b5d0:	000ef200 	call	1000ef20 <__muldf3>
1000b5d4:	d8800615 	stw	r2,24(sp)
1000b5d8:	d8c00715 	stw	r3,28(sp)
1000b5dc:	183ee71e 	bne	r3,zero,1000b17c <__alt_data_end+0xf800b17c>
1000b5e0:	103ee61e 	bne	r2,zero,1000b17c <__alt_data_end+0xf800b17c>
1000b5e4:	00800884 	movi	r2,34
1000b5e8:	80800015 	stw	r2,0(r16)
1000b5ec:	003ee306 	br	1000b17c <__alt_data_end+0xf800b17c>
1000b5f0:	d9000f17 	ldw	r4,60(sp)
1000b5f4:	203f6426 	beq	r4,zero,1000b388 <__alt_data_end+0xf800b388>
1000b5f8:	d8c00717 	ldw	r3,28(sp)
1000b5fc:	00800434 	movhi	r2,16
1000b600:	10bfffc4 	addi	r2,r2,-1
1000b604:	1888703a 	and	r4,r3,r2
1000b608:	2080bd26 	beq	r4,r2,1000b900 <_strtod_r+0x13c4>
1000b60c:	d8800617 	ldw	r2,24(sp)
1000b610:	1080004c 	andi	r2,r2,1
1000b614:	10000c26 	beq	r2,zero,1000b648 <_strtod_r+0x110c>
1000b618:	ddc00617 	ldw	r23,24(sp)
1000b61c:	dd400717 	ldw	r21,28(sp)
1000b620:	b809883a 	mov	r4,r23
1000b624:	a80b883a 	mov	r5,r21
1000b628:	000924c0 	call	1000924c <__ulp>
1000b62c:	b809883a 	mov	r4,r23
1000b630:	a80b883a 	mov	r5,r21
1000b634:	100d883a 	mov	r6,r2
1000b638:	180f883a 	mov	r7,r3
1000b63c:	000ee6c0 	call	1000ee6c <__adddf3>
1000b640:	d8800615 	stw	r2,24(sp)
1000b644:	d8c00715 	stw	r3,28(sp)
1000b648:	a03fda1e 	bne	r20,zero,1000b5b4 <__alt_data_end+0xf800b5b4>
1000b64c:	003ecb06 	br	1000b17c <__alt_data_end+0xf800b17c>
1000b650:	d8c00417 	ldw	r3,16(sp)
1000b654:	00bfffc4 	movi	r2,-1
1000b658:	18be781e 	bne	r3,r2,1000b03c <__alt_data_end+0xf800b03c>
1000b65c:	00800884 	movi	r2,34
1000b660:	80800015 	stw	r2,0(r16)
1000b664:	009ffc34 	movhi	r2,32752
1000b668:	d8800715 	stw	r2,28(sp)
1000b66c:	d8000615 	stw	zero,24(sp)
1000b670:	003ec206 	br	1000b17c <__alt_data_end+0xf800b17c>
1000b674:	00800884 	movi	r2,34
1000b678:	80800015 	stw	r2,0(r16)
1000b67c:	00dffc34 	movhi	r3,32752
1000b680:	0005883a 	mov	r2,zero
1000b684:	003c4e06 	br	1000a7c0 <__alt_data_end+0xf800a7c0>
1000b688:	883d6826 	beq	r17,zero,1000ac2c <__alt_data_end+0xf800ac2c>
1000b68c:	0463c83a 	sub	r17,zero,r17
1000b690:	888003cc 	andi	r2,r17,15
1000b694:	10000b26 	beq	r2,zero,1000b6c4 <_strtod_r+0x1188>
1000b698:	100490fa 	slli	r2,r2,3
1000b69c:	00c40074 	movhi	r3,4097
1000b6a0:	18caeb04 	addi	r3,r3,11180
1000b6a4:	d9000617 	ldw	r4,24(sp)
1000b6a8:	1885883a 	add	r2,r3,r2
1000b6ac:	d9400717 	ldw	r5,28(sp)
1000b6b0:	11800017 	ldw	r6,0(r2)
1000b6b4:	11c00117 	ldw	r7,4(r2)
1000b6b8:	000f2040 	call	1000f204 <__divdf3>
1000b6bc:	d8800615 	stw	r2,24(sp)
1000b6c0:	d8c00715 	stw	r3,28(sp)
1000b6c4:	8823d13a 	srai	r17,r17,4
1000b6c8:	883d5826 	beq	r17,zero,1000ac2c <__alt_data_end+0xf800ac2c>
1000b6cc:	008007c4 	movi	r2,31
1000b6d0:	14402816 	blt	r2,r17,1000b774 <_strtod_r+0x1238>
1000b6d4:	8880040c 	andi	r2,r17,16
1000b6d8:	1000cf1e 	bne	r2,zero,1000ba18 <_strtod_r+0x14dc>
1000b6dc:	0029883a 	mov	r20,zero
1000b6e0:	0440100e 	bge	zero,r17,1000b724 <_strtod_r+0x11e8>
1000b6e4:	d8800617 	ldw	r2,24(sp)
1000b6e8:	d8c00717 	ldw	r3,28(sp)
1000b6ec:	04840074 	movhi	r18,4097
1000b6f0:	948b2404 	addi	r18,r18,11408
1000b6f4:	8980004c 	andi	r6,r17,1
1000b6f8:	30000526 	beq	r6,zero,1000b710 <_strtod_r+0x11d4>
1000b6fc:	91800017 	ldw	r6,0(r18)
1000b700:	91c00117 	ldw	r7,4(r18)
1000b704:	1009883a 	mov	r4,r2
1000b708:	180b883a 	mov	r5,r3
1000b70c:	000ef200 	call	1000ef20 <__muldf3>
1000b710:	8823d07a 	srai	r17,r17,1
1000b714:	94800204 	addi	r18,r18,8
1000b718:	883ff61e 	bne	r17,zero,1000b6f4 <__alt_data_end+0xf800b6f4>
1000b71c:	d8800615 	stw	r2,24(sp)
1000b720:	d8c00715 	stw	r3,28(sp)
1000b724:	a0000d26 	beq	r20,zero,1000b75c <_strtod_r+0x1220>
1000b728:	d8c00717 	ldw	r3,28(sp)
1000b72c:	01001ac4 	movi	r4,107
1000b730:	189ffc2c 	andhi	r2,r3,32752
1000b734:	1004d53a 	srli	r2,r2,20
1000b738:	2085c83a 	sub	r2,r4,r2
1000b73c:	0080070e 	bge	zero,r2,1000b75c <_strtod_r+0x1220>
1000b740:	010007c4 	movi	r4,31
1000b744:	2080c30e 	bge	r4,r2,1000ba54 <_strtod_r+0x1518>
1000b748:	d8000615 	stw	zero,24(sp)
1000b74c:	01000d04 	movi	r4,52
1000b750:	2080c60e 	bge	r4,r2,1000ba6c <_strtod_r+0x1530>
1000b754:	0080dc34 	movhi	r2,880
1000b758:	d8800715 	stw	r2,28(sp)
1000b75c:	d9000617 	ldw	r4,24(sp)
1000b760:	d9400717 	ldw	r5,28(sp)
1000b764:	000d883a 	mov	r6,zero
1000b768:	000f883a 	mov	r7,zero
1000b76c:	000f3b80 	call	1000f3b8 <__eqdf2>
1000b770:	103d2f1e 	bne	r2,zero,1000ac30 <__alt_data_end+0xf800ac30>
1000b774:	00800884 	movi	r2,34
1000b778:	80800015 	stw	r2,0(r16)
1000b77c:	0007883a 	mov	r3,zero
1000b780:	0005883a 	mov	r2,zero
1000b784:	003c0e06 	br	1000a7c0 <__alt_data_end+0xf800a7c0>
1000b788:	0007883a 	mov	r3,zero
1000b78c:	00aff834 	movhi	r2,49120
1000b790:	002b883a 	mov	r21,zero
1000b794:	05cff834 	movhi	r23,16352
1000b798:	003e4a06 	br	1000b0c4 <__alt_data_end+0xf800b0c4>
1000b79c:	011387c4 	movi	r4,19999
1000b7a0:	003cca06 	br	1000aacc <__alt_data_end+0xf800aacc>
1000b7a4:	b00b883a 	mov	r5,r22
1000b7a8:	d8000f15 	stw	zero,60(sp)
1000b7ac:	0039883a 	mov	fp,zero
1000b7b0:	002b883a 	mov	r21,zero
1000b7b4:	003c2d06 	br	1000a86c <__alt_data_end+0xf800a86c>
1000b7b8:	d8000f15 	stw	zero,60(sp)
1000b7bc:	0039883a 	mov	fp,zero
1000b7c0:	002b883a 	mov	r21,zero
1000b7c4:	003b9d06 	br	1000a63c <__alt_data_end+0xf800a63c>
1000b7c8:	d9401017 	ldw	r5,64(sp)
1000b7cc:	00c00944 	movi	r3,37
1000b7d0:	1d47c83a 	sub	r3,r3,r21
1000b7d4:	197d0116 	blt	r3,r5,1000abdc <__alt_data_end+0xf800abdc>
1000b7d8:	1563c83a 	sub	r17,r2,r21
1000b7dc:	880490fa 	slli	r2,r17,3
1000b7e0:	04040074 	movhi	r16,4097
1000b7e4:	840aeb04 	addi	r16,r16,11180
1000b7e8:	d9000617 	ldw	r4,24(sp)
1000b7ec:	8085883a 	add	r2,r16,r2
1000b7f0:	d9400717 	ldw	r5,28(sp)
1000b7f4:	11800017 	ldw	r6,0(r2)
1000b7f8:	11c00117 	ldw	r7,4(r2)
1000b7fc:	000ef200 	call	1000ef20 <__muldf3>
1000b800:	d9001017 	ldw	r4,64(sp)
1000b804:	180b883a 	mov	r5,r3
1000b808:	244dc83a 	sub	r6,r4,r17
1000b80c:	300c90fa 	slli	r6,r6,3
1000b810:	1009883a 	mov	r4,r2
1000b814:	81a1883a 	add	r16,r16,r6
1000b818:	81800017 	ldw	r6,0(r16)
1000b81c:	81c00117 	ldw	r7,4(r16)
1000b820:	000ef200 	call	1000ef20 <__muldf3>
1000b824:	003be606 	br	1000a7c0 <__alt_data_end+0xf800a7c0>
1000b828:	d9400e17 	ldw	r5,56(sp)
1000b82c:	d8001215 	stw	zero,72(sp)
1000b830:	d9400c15 	stw	r5,48(sp)
1000b834:	003ce606 	br	1000abd0 <__alt_data_end+0xf800abd0>
1000b838:	d9401017 	ldw	r5,64(sp)
1000b83c:	00bffa84 	movi	r2,-22
1000b840:	28bce616 	blt	r5,r2,1000abdc <__alt_data_end+0xf800abdc>
1000b844:	280490fa 	slli	r2,r5,3
1000b848:	00c40074 	movhi	r3,4097
1000b84c:	18caeb04 	addi	r3,r3,11180
1000b850:	d9000617 	ldw	r4,24(sp)
1000b854:	1885c83a 	sub	r2,r3,r2
1000b858:	d9400717 	ldw	r5,28(sp)
1000b85c:	11800017 	ldw	r6,0(r2)
1000b860:	11c00117 	ldw	r7,4(r2)
1000b864:	000f2040 	call	1000f204 <__divdf3>
1000b868:	003bd506 	br	1000a7c0 <__alt_data_end+0xf800a7c0>
1000b86c:	00801a44 	movi	r2,105
1000b870:	38bb8726 	beq	r7,r2,1000a690 <__alt_data_end+0xf800a690>
1000b874:	00801b84 	movi	r2,110
1000b878:	38be881e 	bne	r7,r2,1000b29c <__alt_data_end+0xf800b29c>
1000b87c:	d8c00c17 	ldw	r3,48(sp)
1000b880:	01040074 	movhi	r4,4097
1000b884:	210b2304 	addi	r4,r4,11404
1000b888:	01801004 	movi	r6,64
1000b88c:	01c01684 	movi	r7,90
1000b890:	21400007 	ldb	r5,0(r4)
1000b894:	21000044 	addi	r4,r4,1
1000b898:	28004e26 	beq	r5,zero,1000b9d4 <_strtod_r+0x1498>
1000b89c:	18c00044 	addi	r3,r3,1
1000b8a0:	18800007 	ldb	r2,0(r3)
1000b8a4:	3080020e 	bge	r6,r2,1000b8b0 <_strtod_r+0x1374>
1000b8a8:	38800116 	blt	r7,r2,1000b8b0 <_strtod_r+0x1374>
1000b8ac:	10800804 	addi	r2,r2,32
1000b8b0:	117ff726 	beq	r2,r5,1000b890 <__alt_data_end+0xf800b890>
1000b8b4:	003e7906 	br	1000b29c <__alt_data_end+0xf800b29c>
1000b8b8:	d8c00617 	ldw	r3,24(sp)
1000b8bc:	003eb906 	br	1000b3a4 <__alt_data_end+0xf800b3a4>
1000b8c0:	00800404 	movi	r2,16
1000b8c4:	15c02216 	blt	r2,r23,1000b950 <_strtod_r+0x1414>
1000b8c8:	d9000f17 	ldw	r4,60(sp)
1000b8cc:	01400284 	movi	r5,10
1000b8d0:	00012fc0 	call	100012fc <__mulsi3>
1000b8d4:	15ad883a 	add	r22,r2,r22
1000b8d8:	dd800f15 	stw	r22,60(sp)
1000b8dc:	000d883a 	mov	r6,zero
1000b8e0:	003c2606 	br	1000a97c <__alt_data_end+0xf800a97c>
1000b8e4:	000d883a 	mov	r6,zero
1000b8e8:	003bf106 	br	1000a8b0 <__alt_data_end+0xf800a8b0>
1000b8ec:	0080d434 	movhi	r2,848
1000b8f0:	1887883a 	add	r3,r3,r2
1000b8f4:	d8c00715 	stw	r3,28(sp)
1000b8f8:	0029883a 	mov	r20,zero
1000b8fc:	003ccc06 	br	1000ac30 <__alt_data_end+0xf800ac30>
1000b900:	d8800617 	ldw	r2,24(sp)
1000b904:	a0001026 	beq	r20,zero,1000b948 <_strtod_r+0x140c>
1000b908:	191ffc2c 	andhi	r4,r3,32752
1000b90c:	0141a834 	movhi	r5,1696
1000b910:	29000d36 	bltu	r5,r4,1000b948 <_strtod_r+0x140c>
1000b914:	2008d53a 	srli	r4,r4,20
1000b918:	01401ac4 	movi	r5,107
1000b91c:	2909c83a 	sub	r4,r5,r4
1000b920:	017fffc4 	movi	r5,-1
1000b924:	2908983a 	sll	r4,r5,r4
1000b928:	113f391e 	bne	r2,r4,1000b610 <__alt_data_end+0xf800b610>
1000b92c:	18dffc2c 	andhi	r3,r3,32752
1000b930:	00800434 	movhi	r2,16
1000b934:	1885883a 	add	r2,r3,r2
1000b938:	d8800715 	stw	r2,28(sp)
1000b93c:	d8000615 	stw	zero,24(sp)
1000b940:	a03f1c1e 	bne	r20,zero,1000b5b4 <__alt_data_end+0xf800b5b4>
1000b944:	003e0d06 	br	1000b17c <__alt_data_end+0xf800b17c>
1000b948:	013fffc4 	movi	r4,-1
1000b94c:	003ff606 	br	1000b928 <__alt_data_end+0xf800b928>
1000b950:	000d883a 	mov	r6,zero
1000b954:	003c0906 	br	1000a97c <__alt_data_end+0xf800a97c>
1000b958:	00fffc34 	movhi	r3,65520
1000b95c:	10c5883a 	add	r2,r2,r3
1000b960:	00c00434 	movhi	r3,16
1000b964:	18ffffc4 	addi	r3,r3,-1
1000b968:	10c4b03a 	or	r2,r2,r3
1000b96c:	d8800715 	stw	r2,28(sp)
1000b970:	00bfffc4 	movi	r2,-1
1000b974:	d8800615 	stw	r2,24(sp)
1000b978:	a03f0e1e 	bne	r20,zero,1000b5b4 <__alt_data_end+0xf800b5b4>
1000b97c:	003dff06 	br	1000b17c <__alt_data_end+0xf800b17c>
1000b980:	1011883a 	mov	r8,r2
1000b984:	d8800c15 	stw	r2,48(sp)
1000b988:	01040074 	movhi	r4,4097
1000b98c:	210b2104 	addi	r4,r4,11396
1000b990:	01801004 	movi	r6,64
1000b994:	01c01684 	movi	r7,90
1000b998:	21400007 	ldb	r5,0(r4)
1000b99c:	10800044 	addi	r2,r2,1
1000b9a0:	21000044 	addi	r4,r4,1
1000b9a4:	28001a26 	beq	r5,zero,1000ba10 <_strtod_r+0x14d4>
1000b9a8:	10c00007 	ldb	r3,0(r2)
1000b9ac:	30c0020e 	bge	r6,r3,1000b9b8 <_strtod_r+0x147c>
1000b9b0:	38c00116 	blt	r7,r3,1000b9b8 <_strtod_r+0x147c>
1000b9b4:	18c00804 	addi	r3,r3,32
1000b9b8:	197ff726 	beq	r3,r5,1000b998 <__alt_data_end+0xf800b998>
1000b9bc:	40800044 	addi	r2,r8,1
1000b9c0:	d8800c15 	stw	r2,48(sp)
1000b9c4:	009ffc34 	movhi	r2,32752
1000b9c8:	d8800715 	stw	r2,28(sp)
1000b9cc:	d8000615 	stw	zero,24(sp)
1000b9d0:	003c7f06 	br	1000abd0 <__alt_data_end+0xf800abd0>
1000b9d4:	18800044 	addi	r2,r3,1
1000b9d8:	d8800c15 	stw	r2,48(sp)
1000b9dc:	18c00047 	ldb	r3,1(r3)
1000b9e0:	00800a04 	movi	r2,40
1000b9e4:	18800e26 	beq	r3,r2,1000ba20 <_strtod_r+0x14e4>
1000b9e8:	00bffe34 	movhi	r2,65528
1000b9ec:	d8800715 	stw	r2,28(sp)
1000b9f0:	d8000615 	stw	zero,24(sp)
1000b9f4:	003c7606 	br	1000abd0 <__alt_data_end+0xf800abd0>
1000b9f8:	0023883a 	mov	r17,zero
1000b9fc:	05840074 	movhi	r22,4097
1000ba00:	b58ae104 	addi	r22,r22,11140
1000ba04:	003e4506 	br	1000b31c <__alt_data_end+0xf800b31c>
1000ba08:	b805883a 	mov	r2,r23
1000ba0c:	003bd306 	br	1000a95c <__alt_data_end+0xf800a95c>
1000ba10:	d8800c15 	stw	r2,48(sp)
1000ba14:	003feb06 	br	1000b9c4 <__alt_data_end+0xf800b9c4>
1000ba18:	05001a84 	movi	r20,106
1000ba1c:	003f3006 	br	1000b6e0 <__alt_data_end+0xf800b6e0>
1000ba20:	d9000c04 	addi	r4,sp,48
1000ba24:	01440074 	movhi	r5,4097
1000ba28:	294e1b04 	addi	r5,r5,14444
1000ba2c:	d9800204 	addi	r6,sp,8
1000ba30:	000d8400 	call	1000d840 <__hexnan>
1000ba34:	00c00144 	movi	r3,5
1000ba38:	10ffeb1e 	bne	r2,r3,1000b9e8 <__alt_data_end+0xf800b9e8>
1000ba3c:	d8800317 	ldw	r2,12(sp)
1000ba40:	109ffc34 	orhi	r2,r2,32752
1000ba44:	d8800715 	stw	r2,28(sp)
1000ba48:	d8800217 	ldw	r2,8(sp)
1000ba4c:	d8800615 	stw	r2,24(sp)
1000ba50:	003c5f06 	br	1000abd0 <__alt_data_end+0xf800abd0>
1000ba54:	00ffffc4 	movi	r3,-1
1000ba58:	1884983a 	sll	r2,r3,r2
1000ba5c:	d8c00617 	ldw	r3,24(sp)
1000ba60:	1884703a 	and	r2,r3,r2
1000ba64:	d8800615 	stw	r2,24(sp)
1000ba68:	003f3c06 	br	1000b75c <__alt_data_end+0xf800b75c>
1000ba6c:	10bff804 	addi	r2,r2,-32
1000ba70:	013fffc4 	movi	r4,-1
1000ba74:	2084983a 	sll	r2,r4,r2
1000ba78:	10c6703a 	and	r3,r2,r3
1000ba7c:	d8c00715 	stw	r3,28(sp)
1000ba80:	003f3606 	br	1000b75c <__alt_data_end+0xf800b75c>

1000ba84 <strtod>:
1000ba84:	00c40074 	movhi	r3,4097
1000ba88:	18d2a404 	addi	r3,r3,19088
1000ba8c:	2005883a 	mov	r2,r4
1000ba90:	19000017 	ldw	r4,0(r3)
1000ba94:	280d883a 	mov	r6,r5
1000ba98:	100b883a 	mov	r5,r2
1000ba9c:	000a53c1 	jmpi	1000a53c <_strtod_r>

1000baa0 <strtof>:
1000baa0:	defffb04 	addi	sp,sp,-20
1000baa4:	dcc00315 	stw	r19,12(sp)
1000baa8:	04c40074 	movhi	r19,4097
1000baac:	9cd2a404 	addi	r19,r19,19088
1000bab0:	2005883a 	mov	r2,r4
1000bab4:	99000017 	ldw	r4,0(r19)
1000bab8:	280d883a 	mov	r6,r5
1000babc:	100b883a 	mov	r5,r2
1000bac0:	dfc00415 	stw	ra,16(sp)
1000bac4:	dc800215 	stw	r18,8(sp)
1000bac8:	dc400115 	stw	r17,4(sp)
1000bacc:	dc000015 	stw	r16,0(sp)
1000bad0:	000a53c0 	call	1000a53c <_strtod_r>
1000bad4:	1009883a 	mov	r4,r2
1000bad8:	180b883a 	mov	r5,r3
1000badc:	1025883a 	mov	r18,r2
1000bae0:	1823883a 	mov	r17,r3
1000bae4:	000f7880 	call	1000f788 <__truncdfsf2>
1000bae8:	1009883a 	mov	r4,r2
1000baec:	000b883a 	mov	r5,zero
1000baf0:	1021883a 	mov	r16,r2
1000baf4:	000ea140 	call	1000ea14 <__nesf2>
1000baf8:	1000111e 	bne	r2,zero,1000bb40 <strtof+0xa0>
1000bafc:	9009883a 	mov	r4,r18
1000bb00:	880b883a 	mov	r5,r17
1000bb04:	000d883a 	mov	r6,zero
1000bb08:	000f883a 	mov	r7,zero
1000bb0c:	000f4140 	call	1000f414 <__nedf2>
1000bb10:	10000b26 	beq	r2,zero,1000bb40 <strtof+0xa0>
1000bb14:	98800017 	ldw	r2,0(r19)
1000bb18:	00c00884 	movi	r3,34
1000bb1c:	10c00015 	stw	r3,0(r2)
1000bb20:	8005883a 	mov	r2,r16
1000bb24:	dfc00417 	ldw	ra,16(sp)
1000bb28:	dcc00317 	ldw	r19,12(sp)
1000bb2c:	dc800217 	ldw	r18,8(sp)
1000bb30:	dc400117 	ldw	r17,4(sp)
1000bb34:	dc000017 	ldw	r16,0(sp)
1000bb38:	dec00504 	addi	sp,sp,20
1000bb3c:	f800283a 	ret
1000bb40:	8009883a 	mov	r4,r16
1000bb44:	015fe034 	movhi	r5,32640
1000bb48:	297fffc4 	addi	r5,r5,-1
1000bb4c:	000ea680 	call	1000ea68 <__gtsf2>
1000bb50:	0080070e 	bge	zero,r2,1000bb70 <strtof+0xd0>
1000bb54:	9009883a 	mov	r4,r18
1000bb58:	880b883a 	mov	r5,r17
1000bb5c:	01bfffc4 	movi	r6,-1
1000bb60:	01dffc34 	movhi	r7,32752
1000bb64:	39ffffc4 	addi	r7,r7,-1
1000bb68:	000f4700 	call	1000f470 <__gtdf2>
1000bb6c:	00bfe90e 	bge	zero,r2,1000bb14 <__alt_data_end+0xf800bb14>
1000bb70:	8009883a 	mov	r4,r16
1000bb74:	017fe034 	movhi	r5,65408
1000bb78:	297fffc4 	addi	r5,r5,-1
1000bb7c:	000eac40 	call	1000eac4 <__ltsf2>
1000bb80:	103fe70e 	bge	r2,zero,1000bb20 <__alt_data_end+0xf800bb20>
1000bb84:	9009883a 	mov	r4,r18
1000bb88:	880b883a 	mov	r5,r17
1000bb8c:	01bfffc4 	movi	r6,-1
1000bb90:	01fffc34 	movhi	r7,65520
1000bb94:	39ffffc4 	addi	r7,r7,-1
1000bb98:	000f5380 	call	1000f538 <__ltdf2>
1000bb9c:	103fdd0e 	bge	r2,zero,1000bb14 <__alt_data_end+0xf800bb14>
1000bba0:	8005883a 	mov	r2,r16
1000bba4:	dfc00417 	ldw	ra,16(sp)
1000bba8:	dcc00317 	ldw	r19,12(sp)
1000bbac:	dc800217 	ldw	r18,8(sp)
1000bbb0:	dc400117 	ldw	r17,4(sp)
1000bbb4:	dc000017 	ldw	r16,0(sp)
1000bbb8:	dec00504 	addi	sp,sp,20
1000bbbc:	f800283a 	ret

1000bbc0 <_strtol_r>:
1000bbc0:	defff304 	addi	sp,sp,-52
1000bbc4:	00840074 	movhi	r2,4097
1000bbc8:	1092a204 	addi	r2,r2,19080
1000bbcc:	df000b15 	stw	fp,44(sp)
1000bbd0:	17000017 	ldw	fp,0(r2)
1000bbd4:	ddc00a15 	stw	r23,40(sp)
1000bbd8:	dd000715 	stw	r20,28(sp)
1000bbdc:	dcc00615 	stw	r19,24(sp)
1000bbe0:	dc000315 	stw	r16,12(sp)
1000bbe4:	dfc00c15 	stw	ra,48(sp)
1000bbe8:	dd800915 	stw	r22,36(sp)
1000bbec:	dd400815 	stw	r21,32(sp)
1000bbf0:	dc800515 	stw	r18,20(sp)
1000bbf4:	dc400415 	stw	r17,16(sp)
1000bbf8:	2827883a 	mov	r19,r5
1000bbfc:	d9000215 	stw	r4,8(sp)
1000bc00:	3029883a 	mov	r20,r6
1000bc04:	382f883a 	mov	r23,r7
1000bc08:	2821883a 	mov	r16,r5
1000bc0c:	84400007 	ldb	r17,0(r16)
1000bc10:	84000044 	addi	r16,r16,1
1000bc14:	e445883a 	add	r2,fp,r17
1000bc18:	10800003 	ldbu	r2,0(r2)
1000bc1c:	1080020c 	andi	r2,r2,8
1000bc20:	10803fcc 	andi	r2,r2,255
1000bc24:	1080201c 	xori	r2,r2,128
1000bc28:	10bfe004 	addi	r2,r2,-128
1000bc2c:	103ff71e 	bne	r2,zero,1000bc0c <__alt_data_end+0xf800bc0c>
1000bc30:	00800b44 	movi	r2,45
1000bc34:	88806a26 	beq	r17,r2,1000bde0 <_strtol_r+0x220>
1000bc38:	00800ac4 	movi	r2,43
1000bc3c:	88806d26 	beq	r17,r2,1000bdf4 <_strtol_r+0x234>
1000bc40:	d8000015 	stw	zero,0(sp)
1000bc44:	b800481e 	bne	r23,zero,1000bd68 <_strtol_r+0x1a8>
1000bc48:	00800c04 	movi	r2,48
1000bc4c:	88804a26 	beq	r17,r2,1000bd78 <_strtol_r+0x1b8>
1000bc50:	05c00284 	movi	r23,10
1000bc54:	b825883a 	mov	r18,r23
1000bc58:	d8c00017 	ldw	r3,0(sp)
1000bc5c:	00a00034 	movhi	r2,32768
1000bc60:	900b883a 	mov	r5,r18
1000bc64:	182b003a 	cmpeq	r21,r3,zero
1000bc68:	156bc83a 	sub	r21,r2,r21
1000bc6c:	a809883a 	mov	r4,r21
1000bc70:	00012f40 	call	100012f4 <__umodsi3>
1000bc74:	a809883a 	mov	r4,r21
1000bc78:	900b883a 	mov	r5,r18
1000bc7c:	d8800115 	stw	r2,4(sp)
1000bc80:	00012ec0 	call	100012ec <__udivsi3>
1000bc84:	e447883a 	add	r3,fp,r17
1000bc88:	18c00003 	ldbu	r3,0(r3)
1000bc8c:	102b883a 	mov	r21,r2
1000bc90:	000d883a 	mov	r6,zero
1000bc94:	1940010c 	andi	r5,r3,4
1000bc98:	29403fcc 	andi	r5,r5,255
1000bc9c:	2940201c 	xori	r5,r5,128
1000bca0:	297fe004 	addi	r5,r5,-128
1000bca4:	0009883a 	mov	r4,zero
1000bca8:	05bfffc4 	movi	r22,-1
1000bcac:	28001226 	beq	r5,zero,1000bcf8 <_strtol_r+0x138>
1000bcb0:	8c7ff404 	addi	r17,r17,-48
1000bcb4:	8dc0170e 	bge	r17,r23,1000bd14 <_strtol_r+0x154>
1000bcb8:	35800626 	beq	r6,r22,1000bcd4 <_strtol_r+0x114>
1000bcbc:	a9003a36 	bltu	r21,r4,1000bda8 <_strtol_r+0x1e8>
1000bcc0:	25403726 	beq	r4,r21,1000bda0 <_strtol_r+0x1e0>
1000bcc4:	900b883a 	mov	r5,r18
1000bcc8:	00012fc0 	call	100012fc <__mulsi3>
1000bccc:	8889883a 	add	r4,r17,r2
1000bcd0:	01800044 	movi	r6,1
1000bcd4:	84400007 	ldb	r17,0(r16)
1000bcd8:	84000044 	addi	r16,r16,1
1000bcdc:	e447883a 	add	r3,fp,r17
1000bce0:	18c00003 	ldbu	r3,0(r3)
1000bce4:	1940010c 	andi	r5,r3,4
1000bce8:	29403fcc 	andi	r5,r5,255
1000bcec:	2940201c 	xori	r5,r5,128
1000bcf0:	297fe004 	addi	r5,r5,-128
1000bcf4:	283fee1e 	bne	r5,zero,1000bcb0 <__alt_data_end+0xf800bcb0>
1000bcf8:	188000cc 	andi	r2,r3,3
1000bcfc:	10000526 	beq	r2,zero,1000bd14 <_strtol_r+0x154>
1000bd00:	18c0004c 	andi	r3,r3,1
1000bd04:	18002a26 	beq	r3,zero,1000bdb0 <_strtol_r+0x1f0>
1000bd08:	00800dc4 	movi	r2,55
1000bd0c:	88a3c83a 	sub	r17,r17,r2
1000bd10:	8dffe916 	blt	r17,r23,1000bcb8 <__alt_data_end+0xf800bcb8>
1000bd14:	00bfffc4 	movi	r2,-1
1000bd18:	d8c00017 	ldw	r3,0(sp)
1000bd1c:	30802726 	beq	r6,r2,1000bdbc <_strtol_r+0x1fc>
1000bd20:	18000126 	beq	r3,zero,1000bd28 <_strtol_r+0x168>
1000bd24:	0109c83a 	sub	r4,zero,r4
1000bd28:	2005883a 	mov	r2,r4
1000bd2c:	a0000226 	beq	r20,zero,1000bd38 <_strtol_r+0x178>
1000bd30:	3000291e 	bne	r6,zero,1000bdd8 <_strtol_r+0x218>
1000bd34:	a4c00015 	stw	r19,0(r20)
1000bd38:	dfc00c17 	ldw	ra,48(sp)
1000bd3c:	df000b17 	ldw	fp,44(sp)
1000bd40:	ddc00a17 	ldw	r23,40(sp)
1000bd44:	dd800917 	ldw	r22,36(sp)
1000bd48:	dd400817 	ldw	r21,32(sp)
1000bd4c:	dd000717 	ldw	r20,28(sp)
1000bd50:	dcc00617 	ldw	r19,24(sp)
1000bd54:	dc800517 	ldw	r18,20(sp)
1000bd58:	dc400417 	ldw	r17,16(sp)
1000bd5c:	dc000317 	ldw	r16,12(sp)
1000bd60:	dec00d04 	addi	sp,sp,52
1000bd64:	f800283a 	ret
1000bd68:	00800404 	movi	r2,16
1000bd6c:	b8bfb91e 	bne	r23,r2,1000bc54 <__alt_data_end+0xf800bc54>
1000bd70:	00800c04 	movi	r2,48
1000bd74:	88bfb71e 	bne	r17,r2,1000bc54 <__alt_data_end+0xf800bc54>
1000bd78:	80800007 	ldb	r2,0(r16)
1000bd7c:	00c01e04 	movi	r3,120
1000bd80:	10c02026 	beq	r2,r3,1000be04 <_strtol_r+0x244>
1000bd84:	00c01604 	movi	r3,88
1000bd88:	10c01e26 	beq	r2,r3,1000be04 <_strtol_r+0x244>
1000bd8c:	b800221e 	bne	r23,zero,1000be18 <_strtol_r+0x258>
1000bd90:	04800204 	movi	r18,8
1000bd94:	04400c04 	movi	r17,48
1000bd98:	902f883a 	mov	r23,r18
1000bd9c:	003fae06 	br	1000bc58 <__alt_data_end+0xf800bc58>
1000bda0:	d8800117 	ldw	r2,4(sp)
1000bda4:	147fc70e 	bge	r2,r17,1000bcc4 <__alt_data_end+0xf800bcc4>
1000bda8:	01bfffc4 	movi	r6,-1
1000bdac:	003fc906 	br	1000bcd4 <__alt_data_end+0xf800bcd4>
1000bdb0:	008015c4 	movi	r2,87
1000bdb4:	88a3c83a 	sub	r17,r17,r2
1000bdb8:	003fd506 	br	1000bd10 <__alt_data_end+0xf800bd10>
1000bdbc:	d9000217 	ldw	r4,8(sp)
1000bdc0:	1805003a 	cmpeq	r2,r3,zero
1000bdc4:	00c00884 	movi	r3,34
1000bdc8:	20c00015 	stw	r3,0(r4)
1000bdcc:	00e00034 	movhi	r3,32768
1000bdd0:	1885c83a 	sub	r2,r3,r2
1000bdd4:	a03fd826 	beq	r20,zero,1000bd38 <__alt_data_end+0xf800bd38>
1000bdd8:	84ffffc4 	addi	r19,r16,-1
1000bddc:	003fd506 	br	1000bd34 <__alt_data_end+0xf800bd34>
1000bde0:	00c00044 	movi	r3,1
1000bde4:	84400007 	ldb	r17,0(r16)
1000bde8:	d8c00015 	stw	r3,0(sp)
1000bdec:	80e1883a 	add	r16,r16,r3
1000bdf0:	003f9406 	br	1000bc44 <__alt_data_end+0xf800bc44>
1000bdf4:	84400007 	ldb	r17,0(r16)
1000bdf8:	d8000015 	stw	zero,0(sp)
1000bdfc:	84000044 	addi	r16,r16,1
1000be00:	003f9006 	br	1000bc44 <__alt_data_end+0xf800bc44>
1000be04:	04800404 	movi	r18,16
1000be08:	84400047 	ldb	r17,1(r16)
1000be0c:	902f883a 	mov	r23,r18
1000be10:	84000084 	addi	r16,r16,2
1000be14:	003f9006 	br	1000bc58 <__alt_data_end+0xf800bc58>
1000be18:	b825883a 	mov	r18,r23
1000be1c:	04400c04 	movi	r17,48
1000be20:	003f8d06 	br	1000bc58 <__alt_data_end+0xf800bc58>

1000be24 <strtol>:
1000be24:	00840074 	movhi	r2,4097
1000be28:	1092a404 	addi	r2,r2,19088
1000be2c:	2007883a 	mov	r3,r4
1000be30:	11000017 	ldw	r4,0(r2)
1000be34:	2805883a 	mov	r2,r5
1000be38:	300f883a 	mov	r7,r6
1000be3c:	180b883a 	mov	r5,r3
1000be40:	100d883a 	mov	r6,r2
1000be44:	000bbc01 	jmpi	1000bbc0 <_strtol_r>

1000be48 <_strtoll_r>:
1000be48:	defff004 	addi	sp,sp,-64
1000be4c:	00840074 	movhi	r2,4097
1000be50:	1092a204 	addi	r2,r2,19080
1000be54:	ddc00d15 	stw	r23,52(sp)
1000be58:	15c00017 	ldw	r23,0(r2)
1000be5c:	df000e15 	stw	fp,56(sp)
1000be60:	dc000615 	stw	r16,24(sp)
1000be64:	dfc00f15 	stw	ra,60(sp)
1000be68:	dd800c15 	stw	r22,48(sp)
1000be6c:	dd400b15 	stw	r21,44(sp)
1000be70:	dd000a15 	stw	r20,40(sp)
1000be74:	dcc00915 	stw	r19,36(sp)
1000be78:	dc800815 	stw	r18,32(sp)
1000be7c:	dc400715 	stw	r17,28(sp)
1000be80:	d9400015 	stw	r5,0(sp)
1000be84:	d9000415 	stw	r4,16(sp)
1000be88:	d9800115 	stw	r6,4(sp)
1000be8c:	3839883a 	mov	fp,r7
1000be90:	2821883a 	mov	r16,r5
1000be94:	82000007 	ldb	r8,0(r16)
1000be98:	84000044 	addi	r16,r16,1
1000be9c:	ba05883a 	add	r2,r23,r8
1000bea0:	10800003 	ldbu	r2,0(r2)
1000bea4:	1080020c 	andi	r2,r2,8
1000bea8:	10803fcc 	andi	r2,r2,255
1000beac:	1080201c 	xori	r2,r2,128
1000beb0:	10bfe004 	addi	r2,r2,-128
1000beb4:	103ff71e 	bne	r2,zero,1000be94 <__alt_data_end+0xf800be94>
1000beb8:	00800b44 	movi	r2,45
1000bebc:	40807a26 	beq	r8,r2,1000c0a8 <_strtoll_r+0x260>
1000bec0:	00800ac4 	movi	r2,43
1000bec4:	40808826 	beq	r8,r2,1000c0e8 <_strtoll_r+0x2a0>
1000bec8:	d8000215 	stw	zero,8(sp)
1000becc:	e000061e 	bne	fp,zero,1000bee8 <_strtoll_r+0xa0>
1000bed0:	00800c04 	movi	r2,48
1000bed4:	40808b26 	beq	r8,r2,1000c104 <_strtoll_r+0x2bc>
1000bed8:	04800284 	movi	r18,10
1000bedc:	0027883a 	mov	r19,zero
1000bee0:	9039883a 	mov	fp,r18
1000bee4:	00000406 	br	1000bef8 <_strtoll_r+0xb0>
1000bee8:	00800404 	movi	r2,16
1000beec:	e0809926 	beq	fp,r2,1000c154 <_strtoll_r+0x30c>
1000bef0:	e027d7fa 	srai	r19,fp,31
1000bef4:	e025883a 	mov	r18,fp
1000bef8:	d9000217 	ldw	r4,8(sp)
1000befc:	20006226 	beq	r4,zero,1000c088 <_strtoll_r+0x240>
1000bf00:	002b883a 	mov	r21,zero
1000bf04:	04600034 	movhi	r17,32768
1000bf08:	a809883a 	mov	r4,r21
1000bf0c:	880b883a 	mov	r5,r17
1000bf10:	900d883a 	mov	r6,r18
1000bf14:	980f883a 	mov	r7,r19
1000bf18:	da000515 	stw	r8,20(sp)
1000bf1c:	000e3ec0 	call	1000e3ec <__umoddi3>
1000bf20:	a809883a 	mov	r4,r21
1000bf24:	880b883a 	mov	r5,r17
1000bf28:	900d883a 	mov	r6,r18
1000bf2c:	980f883a 	mov	r7,r19
1000bf30:	d8800315 	stw	r2,12(sp)
1000bf34:	000dd9c0 	call	1000dd9c <__udivdi3>
1000bf38:	da000517 	ldw	r8,20(sp)
1000bf3c:	182b883a 	mov	r21,r3
1000bf40:	1023883a 	mov	r17,r2
1000bf44:	ba0d883a 	add	r6,r23,r8
1000bf48:	31800003 	ldbu	r6,0(r6)
1000bf4c:	0007883a 	mov	r3,zero
1000bf50:	0009883a 	mov	r4,zero
1000bf54:	3240010c 	andi	r9,r6,4
1000bf58:	4a403fcc 	andi	r9,r9,255
1000bf5c:	4a40201c 	xori	r9,r9,128
1000bf60:	4a7fe004 	addi	r9,r9,-128
1000bf64:	000b883a 	mov	r5,zero
1000bf68:	05bfffc4 	movi	r22,-1
1000bf6c:	48001026 	beq	r9,zero,1000bfb0 <_strtoll_r+0x168>
1000bf70:	453ff404 	addi	r20,r8,-48
1000bf74:	a700150e 	bge	r20,fp,1000bfcc <_strtoll_r+0x184>
1000bf78:	1d800426 	beq	r3,r22,1000bf8c <_strtoll_r+0x144>
1000bf7c:	a9400236 	bltu	r21,r5,1000bf88 <_strtoll_r+0x140>
1000bf80:	2d402e1e 	bne	r5,r21,1000c03c <_strtoll_r+0x1f4>
1000bf84:	89002d2e 	bgeu	r17,r4,1000c03c <_strtoll_r+0x1f4>
1000bf88:	00ffffc4 	movi	r3,-1
1000bf8c:	82000007 	ldb	r8,0(r16)
1000bf90:	84000044 	addi	r16,r16,1
1000bf94:	ba0d883a 	add	r6,r23,r8
1000bf98:	31800003 	ldbu	r6,0(r6)
1000bf9c:	3240010c 	andi	r9,r6,4
1000bfa0:	4a403fcc 	andi	r9,r9,255
1000bfa4:	4a40201c 	xori	r9,r9,128
1000bfa8:	4a7fe004 	addi	r9,r9,-128
1000bfac:	483ff01e 	bne	r9,zero,1000bf70 <__alt_data_end+0xf800bf70>
1000bfb0:	308000cc 	andi	r2,r6,3
1000bfb4:	10000526 	beq	r2,zero,1000bfcc <_strtoll_r+0x184>
1000bfb8:	3180004c 	andi	r6,r6,1
1000bfbc:	30002b26 	beq	r6,zero,1000c06c <_strtoll_r+0x224>
1000bfc0:	00800dc4 	movi	r2,55
1000bfc4:	40a9c83a 	sub	r20,r8,r2
1000bfc8:	a73feb16 	blt	r20,fp,1000bf78 <__alt_data_end+0xf800bf78>
1000bfcc:	00bfffc4 	movi	r2,-1
1000bfd0:	18803a26 	beq	r3,r2,1000c0bc <_strtoll_r+0x274>
1000bfd4:	d8800217 	ldw	r2,8(sp)
1000bfd8:	10000426 	beq	r2,zero,1000bfec <_strtoll_r+0x1a4>
1000bfdc:	0109c83a 	sub	r4,zero,r4
1000bfe0:	2004c03a 	cmpne	r2,r4,zero
1000bfe4:	014bc83a 	sub	r5,zero,r5
1000bfe8:	288bc83a 	sub	r5,r5,r2
1000bfec:	d8800117 	ldw	r2,4(sp)
1000bff0:	10004f26 	beq	r2,zero,1000c130 <_strtoll_r+0x2e8>
1000bff4:	2005883a 	mov	r2,r4
1000bff8:	1800271e 	bne	r3,zero,1000c098 <_strtoll_r+0x250>
1000bffc:	2807883a 	mov	r3,r5
1000c000:	d9400017 	ldw	r5,0(sp)
1000c004:	d9000117 	ldw	r4,4(sp)
1000c008:	21400015 	stw	r5,0(r4)
1000c00c:	dfc00f17 	ldw	ra,60(sp)
1000c010:	df000e17 	ldw	fp,56(sp)
1000c014:	ddc00d17 	ldw	r23,52(sp)
1000c018:	dd800c17 	ldw	r22,48(sp)
1000c01c:	dd400b17 	ldw	r21,44(sp)
1000c020:	dd000a17 	ldw	r20,40(sp)
1000c024:	dcc00917 	ldw	r19,36(sp)
1000c028:	dc800817 	ldw	r18,32(sp)
1000c02c:	dc400717 	ldw	r17,28(sp)
1000c030:	dc000617 	ldw	r16,24(sp)
1000c034:	dec01004 	addi	sp,sp,64
1000c038:	f800283a 	ret
1000c03c:	24400e26 	beq	r4,r17,1000c078 <_strtoll_r+0x230>
1000c040:	900d883a 	mov	r6,r18
1000c044:	980f883a 	mov	r7,r19
1000c048:	000dc080 	call	1000dc08 <__muldi3>
1000c04c:	a00dd7fa 	srai	r6,r20,31
1000c050:	a085883a 	add	r2,r20,r2
1000c054:	1511803a 	cmpltu	r8,r2,r20
1000c058:	30c7883a 	add	r3,r6,r3
1000c05c:	40cb883a 	add	r5,r8,r3
1000c060:	1009883a 	mov	r4,r2
1000c064:	00c00044 	movi	r3,1
1000c068:	003fc806 	br	1000bf8c <__alt_data_end+0xf800bf8c>
1000c06c:	008015c4 	movi	r2,87
1000c070:	40a9c83a 	sub	r20,r8,r2
1000c074:	003fd406 	br	1000bfc8 <__alt_data_end+0xf800bfc8>
1000c078:	2d7ff11e 	bne	r5,r21,1000c040 <__alt_data_end+0xf800c040>
1000c07c:	d8800317 	ldw	r2,12(sp)
1000c080:	153fc116 	blt	r2,r20,1000bf88 <__alt_data_end+0xf800bf88>
1000c084:	003fee06 	br	1000c040 <__alt_data_end+0xf800c040>
1000c088:	057fffc4 	movi	r21,-1
1000c08c:	04600034 	movhi	r17,32768
1000c090:	8c7fffc4 	addi	r17,r17,-1
1000c094:	003f9c06 	br	1000bf08 <__alt_data_end+0xf800bf08>
1000c098:	2807883a 	mov	r3,r5
1000c09c:	843fffc4 	addi	r16,r16,-1
1000c0a0:	dc000015 	stw	r16,0(sp)
1000c0a4:	003fd606 	br	1000c000 <__alt_data_end+0xf800c000>
1000c0a8:	00800044 	movi	r2,1
1000c0ac:	82000007 	ldb	r8,0(r16)
1000c0b0:	d8800215 	stw	r2,8(sp)
1000c0b4:	80a1883a 	add	r16,r16,r2
1000c0b8:	003f8406 	br	1000becc <__alt_data_end+0xf800becc>
1000c0bc:	d9000217 	ldw	r4,8(sp)
1000c0c0:	20000d1e 	bne	r4,zero,1000c0f8 <_strtoll_r+0x2b0>
1000c0c4:	1805883a 	mov	r2,r3
1000c0c8:	00e00034 	movhi	r3,32768
1000c0cc:	18ffffc4 	addi	r3,r3,-1
1000c0d0:	d9400417 	ldw	r5,16(sp)
1000c0d4:	01000884 	movi	r4,34
1000c0d8:	29000015 	stw	r4,0(r5)
1000c0dc:	d9000117 	ldw	r4,4(sp)
1000c0e0:	203fee1e 	bne	r4,zero,1000c09c <__alt_data_end+0xf800c09c>
1000c0e4:	003fc906 	br	1000c00c <__alt_data_end+0xf800c00c>
1000c0e8:	82000007 	ldb	r8,0(r16)
1000c0ec:	d8000215 	stw	zero,8(sp)
1000c0f0:	84000044 	addi	r16,r16,1
1000c0f4:	003f7506 	br	1000becc <__alt_data_end+0xf800becc>
1000c0f8:	0005883a 	mov	r2,zero
1000c0fc:	00e00034 	movhi	r3,32768
1000c100:	003ff306 	br	1000c0d0 <__alt_data_end+0xf800c0d0>
1000c104:	80800007 	ldb	r2,0(r16)
1000c108:	00c01e04 	movi	r3,120
1000c10c:	10c00b26 	beq	r2,r3,1000c13c <_strtoll_r+0x2f4>
1000c110:	00c01604 	movi	r3,88
1000c114:	10c00926 	beq	r2,r3,1000c13c <_strtoll_r+0x2f4>
1000c118:	e000131e 	bne	fp,zero,1000c168 <_strtoll_r+0x320>
1000c11c:	04800204 	movi	r18,8
1000c120:	0027883a 	mov	r19,zero
1000c124:	02000c04 	movi	r8,48
1000c128:	9039883a 	mov	fp,r18
1000c12c:	003f7206 	br	1000bef8 <__alt_data_end+0xf800bef8>
1000c130:	2005883a 	mov	r2,r4
1000c134:	2807883a 	mov	r3,r5
1000c138:	003fb406 	br	1000c00c <__alt_data_end+0xf800c00c>
1000c13c:	04800404 	movi	r18,16
1000c140:	82000047 	ldb	r8,1(r16)
1000c144:	0027883a 	mov	r19,zero
1000c148:	84000084 	addi	r16,r16,2
1000c14c:	9039883a 	mov	fp,r18
1000c150:	003f6906 	br	1000bef8 <__alt_data_end+0xf800bef8>
1000c154:	00800c04 	movi	r2,48
1000c158:	40bfea26 	beq	r8,r2,1000c104 <__alt_data_end+0xf800c104>
1000c15c:	e025883a 	mov	r18,fp
1000c160:	0027883a 	mov	r19,zero
1000c164:	003f6406 	br	1000bef8 <__alt_data_end+0xf800bef8>
1000c168:	e025883a 	mov	r18,fp
1000c16c:	e027d7fa 	srai	r19,fp,31
1000c170:	02000c04 	movi	r8,48
1000c174:	003f6006 	br	1000bef8 <__alt_data_end+0xf800bef8>

1000c178 <_strtoul_r>:
1000c178:	defff304 	addi	sp,sp,-52
1000c17c:	00840074 	movhi	r2,4097
1000c180:	1092a204 	addi	r2,r2,19080
1000c184:	df000b15 	stw	fp,44(sp)
1000c188:	17000017 	ldw	fp,0(r2)
1000c18c:	ddc00a15 	stw	r23,40(sp)
1000c190:	dd000715 	stw	r20,28(sp)
1000c194:	dcc00615 	stw	r19,24(sp)
1000c198:	dc000315 	stw	r16,12(sp)
1000c19c:	dfc00c15 	stw	ra,48(sp)
1000c1a0:	dd800915 	stw	r22,36(sp)
1000c1a4:	dd400815 	stw	r21,32(sp)
1000c1a8:	dc800515 	stw	r18,20(sp)
1000c1ac:	dc400415 	stw	r17,16(sp)
1000c1b0:	2827883a 	mov	r19,r5
1000c1b4:	d9000215 	stw	r4,8(sp)
1000c1b8:	3029883a 	mov	r20,r6
1000c1bc:	382f883a 	mov	r23,r7
1000c1c0:	2821883a 	mov	r16,r5
1000c1c4:	84400007 	ldb	r17,0(r16)
1000c1c8:	84000044 	addi	r16,r16,1
1000c1cc:	e445883a 	add	r2,fp,r17
1000c1d0:	10800003 	ldbu	r2,0(r2)
1000c1d4:	1080020c 	andi	r2,r2,8
1000c1d8:	10803fcc 	andi	r2,r2,255
1000c1dc:	1080201c 	xori	r2,r2,128
1000c1e0:	10bfe004 	addi	r2,r2,-128
1000c1e4:	103ff71e 	bne	r2,zero,1000c1c4 <__alt_data_end+0xf800c1c4>
1000c1e8:	00800b44 	movi	r2,45
1000c1ec:	88805e26 	beq	r17,r2,1000c368 <_strtoul_r+0x1f0>
1000c1f0:	00800ac4 	movi	r2,43
1000c1f4:	88806126 	beq	r17,r2,1000c37c <_strtoul_r+0x204>
1000c1f8:	d8000115 	stw	zero,4(sp)
1000c1fc:	b800091e 	bne	r23,zero,1000c224 <_strtoul_r+0xac>
1000c200:	00800c04 	movi	r2,48
1000c204:	88806326 	beq	r17,r2,1000c394 <_strtoul_r+0x21c>
1000c208:	05c00284 	movi	r23,10
1000c20c:	00800144 	movi	r2,5
1000c210:	d8800015 	stw	r2,0(sp)
1000c214:	058666b4 	movhi	r22,6554
1000c218:	b5a66644 	addi	r22,r22,-26215
1000c21c:	b825883a 	mov	r18,r23
1000c220:	00000b06 	br	1000c250 <_strtoul_r+0xd8>
1000c224:	00800404 	movi	r2,16
1000c228:	b8805826 	beq	r23,r2,1000c38c <_strtoul_r+0x214>
1000c22c:	013fffc4 	movi	r4,-1
1000c230:	b80b883a 	mov	r5,r23
1000c234:	00012ec0 	call	100012ec <__udivsi3>
1000c238:	013fffc4 	movi	r4,-1
1000c23c:	b80b883a 	mov	r5,r23
1000c240:	102d883a 	mov	r22,r2
1000c244:	00012f40 	call	100012f4 <__umodsi3>
1000c248:	d8800015 	stw	r2,0(sp)
1000c24c:	b825883a 	mov	r18,r23
1000c250:	e447883a 	add	r3,fp,r17
1000c254:	18c00003 	ldbu	r3,0(r3)
1000c258:	0011883a 	mov	r8,zero
1000c25c:	0009883a 	mov	r4,zero
1000c260:	1980010c 	andi	r6,r3,4
1000c264:	31803fcc 	andi	r6,r6,255
1000c268:	3180201c 	xori	r6,r6,128
1000c26c:	31bfe004 	addi	r6,r6,-128
1000c270:	057fffc4 	movi	r21,-1
1000c274:	30001226 	beq	r6,zero,1000c2c0 <_strtoul_r+0x148>
1000c278:	8c7ff404 	addi	r17,r17,-48
1000c27c:	8dc0170e 	bge	r17,r23,1000c2dc <_strtoul_r+0x164>
1000c280:	45400626 	beq	r8,r21,1000c29c <_strtoul_r+0x124>
1000c284:	b1002c36 	bltu	r22,r4,1000c338 <_strtoul_r+0x1c0>
1000c288:	25802926 	beq	r4,r22,1000c330 <_strtoul_r+0x1b8>
1000c28c:	900b883a 	mov	r5,r18
1000c290:	00012fc0 	call	100012fc <__mulsi3>
1000c294:	8889883a 	add	r4,r17,r2
1000c298:	02000044 	movi	r8,1
1000c29c:	84400007 	ldb	r17,0(r16)
1000c2a0:	84000044 	addi	r16,r16,1
1000c2a4:	e447883a 	add	r3,fp,r17
1000c2a8:	18c00003 	ldbu	r3,0(r3)
1000c2ac:	1980010c 	andi	r6,r3,4
1000c2b0:	31803fcc 	andi	r6,r6,255
1000c2b4:	3180201c 	xori	r6,r6,128
1000c2b8:	31bfe004 	addi	r6,r6,-128
1000c2bc:	303fee1e 	bne	r6,zero,1000c278 <__alt_data_end+0xf800c278>
1000c2c0:	188000cc 	andi	r2,r3,3
1000c2c4:	10000526 	beq	r2,zero,1000c2dc <_strtoul_r+0x164>
1000c2c8:	18c0004c 	andi	r3,r3,1
1000c2cc:	18001c26 	beq	r3,zero,1000c340 <_strtoul_r+0x1c8>
1000c2d0:	00800dc4 	movi	r2,55
1000c2d4:	88a3c83a 	sub	r17,r17,r2
1000c2d8:	8dffe916 	blt	r17,r23,1000c280 <__alt_data_end+0xf800c280>
1000c2dc:	00bfffc4 	movi	r2,-1
1000c2e0:	40801a26 	beq	r8,r2,1000c34c <_strtoul_r+0x1d4>
1000c2e4:	d8c00117 	ldw	r3,4(sp)
1000c2e8:	18000126 	beq	r3,zero,1000c2f0 <_strtoul_r+0x178>
1000c2ec:	0109c83a 	sub	r4,zero,r4
1000c2f0:	a0000226 	beq	r20,zero,1000c2fc <_strtoul_r+0x184>
1000c2f4:	40001a1e 	bne	r8,zero,1000c360 <_strtoul_r+0x1e8>
1000c2f8:	a4c00015 	stw	r19,0(r20)
1000c2fc:	2005883a 	mov	r2,r4
1000c300:	dfc00c17 	ldw	ra,48(sp)
1000c304:	df000b17 	ldw	fp,44(sp)
1000c308:	ddc00a17 	ldw	r23,40(sp)
1000c30c:	dd800917 	ldw	r22,36(sp)
1000c310:	dd400817 	ldw	r21,32(sp)
1000c314:	dd000717 	ldw	r20,28(sp)
1000c318:	dcc00617 	ldw	r19,24(sp)
1000c31c:	dc800517 	ldw	r18,20(sp)
1000c320:	dc400417 	ldw	r17,16(sp)
1000c324:	dc000317 	ldw	r16,12(sp)
1000c328:	dec00d04 	addi	sp,sp,52
1000c32c:	f800283a 	ret
1000c330:	d8800017 	ldw	r2,0(sp)
1000c334:	147fd50e 	bge	r2,r17,1000c28c <__alt_data_end+0xf800c28c>
1000c338:	023fffc4 	movi	r8,-1
1000c33c:	003fd706 	br	1000c29c <__alt_data_end+0xf800c29c>
1000c340:	008015c4 	movi	r2,87
1000c344:	88a3c83a 	sub	r17,r17,r2
1000c348:	003fe306 	br	1000c2d8 <__alt_data_end+0xf800c2d8>
1000c34c:	d8c00217 	ldw	r3,8(sp)
1000c350:	00800884 	movi	r2,34
1000c354:	4009883a 	mov	r4,r8
1000c358:	18800015 	stw	r2,0(r3)
1000c35c:	a03fe726 	beq	r20,zero,1000c2fc <__alt_data_end+0xf800c2fc>
1000c360:	84ffffc4 	addi	r19,r16,-1
1000c364:	003fe406 	br	1000c2f8 <__alt_data_end+0xf800c2f8>
1000c368:	00c00044 	movi	r3,1
1000c36c:	84400007 	ldb	r17,0(r16)
1000c370:	d8c00115 	stw	r3,4(sp)
1000c374:	80e1883a 	add	r16,r16,r3
1000c378:	003fa006 	br	1000c1fc <__alt_data_end+0xf800c1fc>
1000c37c:	84400007 	ldb	r17,0(r16)
1000c380:	d8000115 	stw	zero,4(sp)
1000c384:	84000044 	addi	r16,r16,1
1000c388:	003f9c06 	br	1000c1fc <__alt_data_end+0xf800c1fc>
1000c38c:	00800c04 	movi	r2,48
1000c390:	88bfa61e 	bne	r17,r2,1000c22c <__alt_data_end+0xf800c22c>
1000c394:	80800007 	ldb	r2,0(r16)
1000c398:	00c01e04 	movi	r3,120
1000c39c:	10c00b26 	beq	r2,r3,1000c3cc <_strtoul_r+0x254>
1000c3a0:	00c01604 	movi	r3,88
1000c3a4:	10c00926 	beq	r2,r3,1000c3cc <_strtoul_r+0x254>
1000c3a8:	b800111e 	bne	r23,zero,1000c3f0 <_strtoul_r+0x278>
1000c3ac:	04800204 	movi	r18,8
1000c3b0:	008001c4 	movi	r2,7
1000c3b4:	d8800015 	stw	r2,0(sp)
1000c3b8:	05880034 	movhi	r22,8192
1000c3bc:	b5bfffc4 	addi	r22,r22,-1
1000c3c0:	04400c04 	movi	r17,48
1000c3c4:	902f883a 	mov	r23,r18
1000c3c8:	003fa106 	br	1000c250 <__alt_data_end+0xf800c250>
1000c3cc:	04800404 	movi	r18,16
1000c3d0:	008003c4 	movi	r2,15
1000c3d4:	84400047 	ldb	r17,1(r16)
1000c3d8:	d8800015 	stw	r2,0(sp)
1000c3dc:	84000084 	addi	r16,r16,2
1000c3e0:	05840034 	movhi	r22,4096
1000c3e4:	b5bfffc4 	addi	r22,r22,-1
1000c3e8:	902f883a 	mov	r23,r18
1000c3ec:	003f9806 	br	1000c250 <__alt_data_end+0xf800c250>
1000c3f0:	013fffc4 	movi	r4,-1
1000c3f4:	b80b883a 	mov	r5,r23
1000c3f8:	00012ec0 	call	100012ec <__udivsi3>
1000c3fc:	013fffc4 	movi	r4,-1
1000c400:	b80b883a 	mov	r5,r23
1000c404:	102d883a 	mov	r22,r2
1000c408:	00012f40 	call	100012f4 <__umodsi3>
1000c40c:	d8800015 	stw	r2,0(sp)
1000c410:	b825883a 	mov	r18,r23
1000c414:	04400c04 	movi	r17,48
1000c418:	003f8d06 	br	1000c250 <__alt_data_end+0xf800c250>

1000c41c <strtoul>:
1000c41c:	00840074 	movhi	r2,4097
1000c420:	1092a404 	addi	r2,r2,19088
1000c424:	2007883a 	mov	r3,r4
1000c428:	11000017 	ldw	r4,0(r2)
1000c42c:	2805883a 	mov	r2,r5
1000c430:	300f883a 	mov	r7,r6
1000c434:	180b883a 	mov	r5,r3
1000c438:	100d883a 	mov	r6,r2
1000c43c:	000c1781 	jmpi	1000c178 <_strtoul_r>

1000c440 <_strtoull_r>:
1000c440:	defff004 	addi	sp,sp,-64
1000c444:	00840074 	movhi	r2,4097
1000c448:	1092a204 	addi	r2,r2,19080
1000c44c:	dd800c15 	stw	r22,48(sp)
1000c450:	15800017 	ldw	r22,0(r2)
1000c454:	df000e15 	stw	fp,56(sp)
1000c458:	dc000615 	stw	r16,24(sp)
1000c45c:	dfc00f15 	stw	ra,60(sp)
1000c460:	ddc00d15 	stw	r23,52(sp)
1000c464:	dd400b15 	stw	r21,44(sp)
1000c468:	dd000a15 	stw	r20,40(sp)
1000c46c:	dcc00915 	stw	r19,36(sp)
1000c470:	dc800815 	stw	r18,32(sp)
1000c474:	dc400715 	stw	r17,28(sp)
1000c478:	d9400015 	stw	r5,0(sp)
1000c47c:	d9000415 	stw	r4,16(sp)
1000c480:	d9800115 	stw	r6,4(sp)
1000c484:	3839883a 	mov	fp,r7
1000c488:	2821883a 	mov	r16,r5
1000c48c:	82000007 	ldb	r8,0(r16)
1000c490:	84000044 	addi	r16,r16,1
1000c494:	b205883a 	add	r2,r22,r8
1000c498:	10800003 	ldbu	r2,0(r2)
1000c49c:	1080020c 	andi	r2,r2,8
1000c4a0:	10803fcc 	andi	r2,r2,255
1000c4a4:	1080201c 	xori	r2,r2,128
1000c4a8:	10bfe004 	addi	r2,r2,-128
1000c4ac:	103ff71e 	bne	r2,zero,1000c48c <__alt_data_end+0xf800c48c>
1000c4b0:	00800b44 	movi	r2,45
1000c4b4:	40807e26 	beq	r8,r2,1000c6b0 <_strtoull_r+0x270>
1000c4b8:	00800ac4 	movi	r2,43
1000c4bc:	40808126 	beq	r8,r2,1000c6c4 <_strtoull_r+0x284>
1000c4c0:	d8000315 	stw	zero,12(sp)
1000c4c4:	e0000c1e 	bne	fp,zero,1000c4f8 <_strtoull_r+0xb8>
1000c4c8:	00800c04 	movi	r2,48
1000c4cc:	40808126 	beq	r8,r2,1000c6d4 <_strtoull_r+0x294>
1000c4d0:	04c00284 	movi	r19,10
1000c4d4:	00800144 	movi	r2,5
1000c4d8:	d8800215 	stw	r2,8(sp)
1000c4dc:	046666b4 	movhi	r17,39322
1000c4e0:	8c666644 	addi	r17,r17,-26215
1000c4e4:	05c666b4 	movhi	r23,6554
1000c4e8:	bde66644 	addi	r23,r23,-26215
1000c4ec:	0025883a 	mov	r18,zero
1000c4f0:	9839883a 	mov	fp,r19
1000c4f4:	00001306 	br	1000c544 <_strtoull_r+0x104>
1000c4f8:	00800404 	movi	r2,16
1000c4fc:	e0809026 	beq	fp,r2,1000c740 <_strtoull_r+0x300>
1000c500:	e025d7fa 	srai	r18,fp,31
1000c504:	013fffc4 	movi	r4,-1
1000c508:	200b883a 	mov	r5,r4
1000c50c:	e00d883a 	mov	r6,fp
1000c510:	900f883a 	mov	r7,r18
1000c514:	da000515 	stw	r8,20(sp)
1000c518:	000dd9c0 	call	1000dd9c <__udivdi3>
1000c51c:	013fffc4 	movi	r4,-1
1000c520:	200b883a 	mov	r5,r4
1000c524:	e00d883a 	mov	r6,fp
1000c528:	900f883a 	mov	r7,r18
1000c52c:	1023883a 	mov	r17,r2
1000c530:	182f883a 	mov	r23,r3
1000c534:	000e3ec0 	call	1000e3ec <__umoddi3>
1000c538:	da000517 	ldw	r8,20(sp)
1000c53c:	d8800215 	stw	r2,8(sp)
1000c540:	e027883a 	mov	r19,fp
1000c544:	b20d883a 	add	r6,r22,r8
1000c548:	32400003 	ldbu	r9,0(r6)
1000c54c:	0007883a 	mov	r3,zero
1000c550:	0009883a 	mov	r4,zero
1000c554:	4a80010c 	andi	r10,r9,4
1000c558:	52803fcc 	andi	r10,r10,255
1000c55c:	5280201c 	xori	r10,r10,128
1000c560:	52bfe004 	addi	r10,r10,-128
1000c564:	000b883a 	mov	r5,zero
1000c568:	057fffc4 	movi	r21,-1
1000c56c:	50001026 	beq	r10,zero,1000c5b0 <_strtoull_r+0x170>
1000c570:	453ff404 	addi	r20,r8,-48
1000c574:	a700150e 	bge	r20,fp,1000c5cc <_strtoull_r+0x18c>
1000c578:	1d400426 	beq	r3,r21,1000c58c <_strtoull_r+0x14c>
1000c57c:	b9400236 	bltu	r23,r5,1000c588 <_strtoull_r+0x148>
1000c580:	2dc0301e 	bne	r5,r23,1000c644 <_strtoull_r+0x204>
1000c584:	89002f2e 	bgeu	r17,r4,1000c644 <_strtoull_r+0x204>
1000c588:	00ffffc4 	movi	r3,-1
1000c58c:	82000007 	ldb	r8,0(r16)
1000c590:	84000044 	addi	r16,r16,1
1000c594:	b20d883a 	add	r6,r22,r8
1000c598:	32400003 	ldbu	r9,0(r6)
1000c59c:	4a80010c 	andi	r10,r9,4
1000c5a0:	52803fcc 	andi	r10,r10,255
1000c5a4:	5280201c 	xori	r10,r10,128
1000c5a8:	52bfe004 	addi	r10,r10,-128
1000c5ac:	503ff01e 	bne	r10,zero,1000c570 <__alt_data_end+0xf800c570>
1000c5b0:	488000cc 	andi	r2,r9,3
1000c5b4:	10000526 	beq	r2,zero,1000c5cc <_strtoull_r+0x18c>
1000c5b8:	4a40004c 	andi	r9,r9,1
1000c5bc:	48002d26 	beq	r9,zero,1000c674 <_strtoull_r+0x234>
1000c5c0:	00800dc4 	movi	r2,55
1000c5c4:	40a9c83a 	sub	r20,r8,r2
1000c5c8:	a73feb16 	blt	r20,fp,1000c578 <__alt_data_end+0xf800c578>
1000c5cc:	00bfffc4 	movi	r2,-1
1000c5d0:	18802f26 	beq	r3,r2,1000c690 <_strtoull_r+0x250>
1000c5d4:	d8800317 	ldw	r2,12(sp)
1000c5d8:	10000426 	beq	r2,zero,1000c5ec <_strtoull_r+0x1ac>
1000c5dc:	0109c83a 	sub	r4,zero,r4
1000c5e0:	2004c03a 	cmpne	r2,r4,zero
1000c5e4:	014bc83a 	sub	r5,zero,r5
1000c5e8:	288bc83a 	sub	r5,r5,r2
1000c5ec:	d8800117 	ldw	r2,4(sp)
1000c5f0:	10000626 	beq	r2,zero,1000c60c <_strtoull_r+0x1cc>
1000c5f4:	18000226 	beq	r3,zero,1000c600 <_strtoull_r+0x1c0>
1000c5f8:	843fffc4 	addi	r16,r16,-1
1000c5fc:	dc000015 	stw	r16,0(sp)
1000c600:	d8800017 	ldw	r2,0(sp)
1000c604:	d8c00117 	ldw	r3,4(sp)
1000c608:	18800015 	stw	r2,0(r3)
1000c60c:	2005883a 	mov	r2,r4
1000c610:	2807883a 	mov	r3,r5
1000c614:	dfc00f17 	ldw	ra,60(sp)
1000c618:	df000e17 	ldw	fp,56(sp)
1000c61c:	ddc00d17 	ldw	r23,52(sp)
1000c620:	dd800c17 	ldw	r22,48(sp)
1000c624:	dd400b17 	ldw	r21,44(sp)
1000c628:	dd000a17 	ldw	r20,40(sp)
1000c62c:	dcc00917 	ldw	r19,36(sp)
1000c630:	dc800817 	ldw	r18,32(sp)
1000c634:	dc400717 	ldw	r17,28(sp)
1000c638:	dc000617 	ldw	r16,24(sp)
1000c63c:	dec01004 	addi	sp,sp,64
1000c640:	f800283a 	ret
1000c644:	24400e26 	beq	r4,r17,1000c680 <_strtoull_r+0x240>
1000c648:	980d883a 	mov	r6,r19
1000c64c:	900f883a 	mov	r7,r18
1000c650:	000dc080 	call	1000dc08 <__muldi3>
1000c654:	a00dd7fa 	srai	r6,r20,31
1000c658:	a085883a 	add	r2,r20,r2
1000c65c:	1511803a 	cmpltu	r8,r2,r20
1000c660:	30c7883a 	add	r3,r6,r3
1000c664:	40cb883a 	add	r5,r8,r3
1000c668:	1009883a 	mov	r4,r2
1000c66c:	00c00044 	movi	r3,1
1000c670:	003fc606 	br	1000c58c <__alt_data_end+0xf800c58c>
1000c674:	008015c4 	movi	r2,87
1000c678:	40a9c83a 	sub	r20,r8,r2
1000c67c:	003fd206 	br	1000c5c8 <__alt_data_end+0xf800c5c8>
1000c680:	2dfff11e 	bne	r5,r23,1000c648 <__alt_data_end+0xf800c648>
1000c684:	d8800217 	ldw	r2,8(sp)
1000c688:	153fbf16 	blt	r2,r20,1000c588 <__alt_data_end+0xf800c588>
1000c68c:	003fee06 	br	1000c648 <__alt_data_end+0xf800c648>
1000c690:	d9000417 	ldw	r4,16(sp)
1000c694:	00800884 	movi	r2,34
1000c698:	180b883a 	mov	r5,r3
1000c69c:	20800015 	stw	r2,0(r4)
1000c6a0:	d8800117 	ldw	r2,4(sp)
1000c6a4:	1809883a 	mov	r4,r3
1000c6a8:	103fd31e 	bne	r2,zero,1000c5f8 <__alt_data_end+0xf800c5f8>
1000c6ac:	003fd706 	br	1000c60c <__alt_data_end+0xf800c60c>
1000c6b0:	00800044 	movi	r2,1
1000c6b4:	82000007 	ldb	r8,0(r16)
1000c6b8:	d8800315 	stw	r2,12(sp)
1000c6bc:	80a1883a 	add	r16,r16,r2
1000c6c0:	003f8006 	br	1000c4c4 <__alt_data_end+0xf800c4c4>
1000c6c4:	82000007 	ldb	r8,0(r16)
1000c6c8:	d8000315 	stw	zero,12(sp)
1000c6cc:	84000044 	addi	r16,r16,1
1000c6d0:	003f7c06 	br	1000c4c4 <__alt_data_end+0xf800c4c4>
1000c6d4:	80800007 	ldb	r2,0(r16)
1000c6d8:	00c01e04 	movi	r3,120
1000c6dc:	10c00d26 	beq	r2,r3,1000c714 <_strtoull_r+0x2d4>
1000c6e0:	00c01604 	movi	r3,88
1000c6e4:	10c00b26 	beq	r2,r3,1000c714 <_strtoull_r+0x2d4>
1000c6e8:	e000291e 	bne	fp,zero,1000c790 <_strtoull_r+0x350>
1000c6ec:	04c00204 	movi	r19,8
1000c6f0:	008001c4 	movi	r2,7
1000c6f4:	d8800215 	stw	r2,8(sp)
1000c6f8:	047fffc4 	movi	r17,-1
1000c6fc:	05c80034 	movhi	r23,8192
1000c700:	bdffffc4 	addi	r23,r23,-1
1000c704:	0025883a 	mov	r18,zero
1000c708:	02000c04 	movi	r8,48
1000c70c:	9839883a 	mov	fp,r19
1000c710:	003f8c06 	br	1000c544 <__alt_data_end+0xf800c544>
1000c714:	04c00404 	movi	r19,16
1000c718:	008003c4 	movi	r2,15
1000c71c:	82000047 	ldb	r8,1(r16)
1000c720:	d8800215 	stw	r2,8(sp)
1000c724:	84000084 	addi	r16,r16,2
1000c728:	047fffc4 	movi	r17,-1
1000c72c:	05c40034 	movhi	r23,4096
1000c730:	bdffffc4 	addi	r23,r23,-1
1000c734:	0025883a 	mov	r18,zero
1000c738:	9839883a 	mov	fp,r19
1000c73c:	003f8106 	br	1000c544 <__alt_data_end+0xf800c544>
1000c740:	00800c04 	movi	r2,48
1000c744:	40bfe326 	beq	r8,r2,1000c6d4 <__alt_data_end+0xf800c6d4>
1000c748:	013fffc4 	movi	r4,-1
1000c74c:	200b883a 	mov	r5,r4
1000c750:	e00d883a 	mov	r6,fp
1000c754:	000f883a 	mov	r7,zero
1000c758:	da000515 	stw	r8,20(sp)
1000c75c:	000dd9c0 	call	1000dd9c <__udivdi3>
1000c760:	013fffc4 	movi	r4,-1
1000c764:	200b883a 	mov	r5,r4
1000c768:	e00d883a 	mov	r6,fp
1000c76c:	000f883a 	mov	r7,zero
1000c770:	1023883a 	mov	r17,r2
1000c774:	182f883a 	mov	r23,r3
1000c778:	000e3ec0 	call	1000e3ec <__umoddi3>
1000c77c:	d8800215 	stw	r2,8(sp)
1000c780:	e027883a 	mov	r19,fp
1000c784:	0025883a 	mov	r18,zero
1000c788:	da000517 	ldw	r8,20(sp)
1000c78c:	003f6d06 	br	1000c544 <__alt_data_end+0xf800c544>
1000c790:	e025d7fa 	srai	r18,fp,31
1000c794:	013fffc4 	movi	r4,-1
1000c798:	200b883a 	mov	r5,r4
1000c79c:	e00d883a 	mov	r6,fp
1000c7a0:	900f883a 	mov	r7,r18
1000c7a4:	000dd9c0 	call	1000dd9c <__udivdi3>
1000c7a8:	013fffc4 	movi	r4,-1
1000c7ac:	200b883a 	mov	r5,r4
1000c7b0:	e00d883a 	mov	r6,fp
1000c7b4:	900f883a 	mov	r7,r18
1000c7b8:	1023883a 	mov	r17,r2
1000c7bc:	182f883a 	mov	r23,r3
1000c7c0:	000e3ec0 	call	1000e3ec <__umoddi3>
1000c7c4:	d8800215 	stw	r2,8(sp)
1000c7c8:	e027883a 	mov	r19,fp
1000c7cc:	02000c04 	movi	r8,48
1000c7d0:	003f5c06 	br	1000c544 <__alt_data_end+0xf800c544>

1000c7d4 <__submore>:
1000c7d4:	defffa04 	addi	sp,sp,-24
1000c7d8:	dc000015 	stw	r16,0(sp)
1000c7dc:	2821883a 	mov	r16,r5
1000c7e0:	29400c17 	ldw	r5,48(r5)
1000c7e4:	dfc00515 	stw	ra,20(sp)
1000c7e8:	dd000415 	stw	r20,16(sp)
1000c7ec:	dcc00315 	stw	r19,12(sp)
1000c7f0:	dc800215 	stw	r18,8(sp)
1000c7f4:	dc400115 	stw	r17,4(sp)
1000c7f8:	80801004 	addi	r2,r16,64
1000c7fc:	28801726 	beq	r5,r2,1000c85c <__submore+0x88>
1000c800:	84400d17 	ldw	r17,52(r16)
1000c804:	8c67883a 	add	r19,r17,r17
1000c808:	980d883a 	mov	r6,r19
1000c80c:	00098fc0 	call	100098fc <_realloc_r>
1000c810:	1025883a 	mov	r18,r2
1000c814:	10002926 	beq	r2,zero,1000c8bc <__submore+0xe8>
1000c818:	1469883a 	add	r20,r2,r17
1000c81c:	a009883a 	mov	r4,r20
1000c820:	100b883a 	mov	r5,r2
1000c824:	880d883a 	mov	r6,r17
1000c828:	00083580 	call	10008358 <memcpy>
1000c82c:	0005883a 	mov	r2,zero
1000c830:	85000015 	stw	r20,0(r16)
1000c834:	84800c15 	stw	r18,48(r16)
1000c838:	84c00d15 	stw	r19,52(r16)
1000c83c:	dfc00517 	ldw	ra,20(sp)
1000c840:	dd000417 	ldw	r20,16(sp)
1000c844:	dcc00317 	ldw	r19,12(sp)
1000c848:	dc800217 	ldw	r18,8(sp)
1000c84c:	dc400117 	ldw	r17,4(sp)
1000c850:	dc000017 	ldw	r16,0(sp)
1000c854:	dec00604 	addi	sp,sp,24
1000c858:	f800283a 	ret
1000c85c:	04410004 	movi	r17,1024
1000c860:	880b883a 	mov	r5,r17
1000c864:	00079f40 	call	100079f4 <_malloc_r>
1000c868:	1007883a 	mov	r3,r2
1000c86c:	10001326 	beq	r2,zero,1000c8bc <__submore+0xe8>
1000c870:	80801083 	ldbu	r2,66(r16)
1000c874:	80c00c15 	stw	r3,48(r16)
1000c878:	84400d15 	stw	r17,52(r16)
1000c87c:	1880ffc5 	stb	r2,1023(r3)
1000c880:	81401043 	ldbu	r5,65(r16)
1000c884:	1900ff44 	addi	r4,r3,1021
1000c888:	0005883a 	mov	r2,zero
1000c88c:	1940ff85 	stb	r5,1022(r3)
1000c890:	81401003 	ldbu	r5,64(r16)
1000c894:	1940ff45 	stb	r5,1021(r3)
1000c898:	81000015 	stw	r4,0(r16)
1000c89c:	dfc00517 	ldw	ra,20(sp)
1000c8a0:	dd000417 	ldw	r20,16(sp)
1000c8a4:	dcc00317 	ldw	r19,12(sp)
1000c8a8:	dc800217 	ldw	r18,8(sp)
1000c8ac:	dc400117 	ldw	r17,4(sp)
1000c8b0:	dc000017 	ldw	r16,0(sp)
1000c8b4:	dec00604 	addi	sp,sp,24
1000c8b8:	f800283a 	ret
1000c8bc:	00bfffc4 	movi	r2,-1
1000c8c0:	003fde06 	br	1000c83c <__alt_data_end+0xf800c83c>

1000c8c4 <_ungetc_r>:
1000c8c4:	defffc04 	addi	sp,sp,-16
1000c8c8:	dc800215 	stw	r18,8(sp)
1000c8cc:	dc400115 	stw	r17,4(sp)
1000c8d0:	dc000015 	stw	r16,0(sp)
1000c8d4:	dfc00315 	stw	ra,12(sp)
1000c8d8:	00bfffc4 	movi	r2,-1
1000c8dc:	2825883a 	mov	r18,r5
1000c8e0:	2023883a 	mov	r17,r4
1000c8e4:	3021883a 	mov	r16,r6
1000c8e8:	28803026 	beq	r5,r2,1000c9ac <_ungetc_r+0xe8>
1000c8ec:	20000226 	beq	r4,zero,1000c8f8 <_ungetc_r+0x34>
1000c8f0:	20800e17 	ldw	r2,56(r4)
1000c8f4:	10002f26 	beq	r2,zero,1000c9b4 <_ungetc_r+0xf0>
1000c8f8:	80c0030b 	ldhu	r3,12(r16)
1000c8fc:	00bff7c4 	movi	r2,-33
1000c900:	1900010c 	andi	r4,r3,4
1000c904:	213fffcc 	andi	r4,r4,65535
1000c908:	1884703a 	and	r2,r3,r2
1000c90c:	2120001c 	xori	r4,r4,32768
1000c910:	8080030d 	sth	r2,12(r16)
1000c914:	21200004 	addi	r4,r4,-32768
1000c918:	20000c1e 	bne	r4,zero,1000c94c <_ungetc_r+0x88>
1000c91c:	1900040c 	andi	r4,r3,16
1000c920:	213fffcc 	andi	r4,r4,65535
1000c924:	2120001c 	xori	r4,r4,32768
1000c928:	21200004 	addi	r4,r4,-32768
1000c92c:	20001f26 	beq	r4,zero,1000c9ac <_ungetc_r+0xe8>
1000c930:	18c0020c 	andi	r3,r3,8
1000c934:	18ffffcc 	andi	r3,r3,65535
1000c938:	18e0001c 	xori	r3,r3,32768
1000c93c:	18e00004 	addi	r3,r3,-32768
1000c940:	1800371e 	bne	r3,zero,1000ca20 <_ungetc_r+0x15c>
1000c944:	10800114 	ori	r2,r2,4
1000c948:	8080030d 	sth	r2,12(r16)
1000c94c:	80800c17 	ldw	r2,48(r16)
1000c950:	94803fcc 	andi	r18,r18,255
1000c954:	10001926 	beq	r2,zero,1000c9bc <_ungetc_r+0xf8>
1000c958:	80c00117 	ldw	r3,4(r16)
1000c95c:	80800d17 	ldw	r2,52(r16)
1000c960:	18800e0e 	bge	r3,r2,1000c99c <_ungetc_r+0xd8>
1000c964:	80800017 	ldw	r2,0(r16)
1000c968:	10ffffc4 	addi	r3,r2,-1
1000c96c:	80c00015 	stw	r3,0(r16)
1000c970:	14bfffc5 	stb	r18,-1(r2)
1000c974:	80800117 	ldw	r2,4(r16)
1000c978:	10800044 	addi	r2,r2,1
1000c97c:	80800115 	stw	r2,4(r16)
1000c980:	9005883a 	mov	r2,r18
1000c984:	dfc00317 	ldw	ra,12(sp)
1000c988:	dc800217 	ldw	r18,8(sp)
1000c98c:	dc400117 	ldw	r17,4(sp)
1000c990:	dc000017 	ldw	r16,0(sp)
1000c994:	dec00404 	addi	sp,sp,16
1000c998:	f800283a 	ret
1000c99c:	8809883a 	mov	r4,r17
1000c9a0:	800b883a 	mov	r5,r16
1000c9a4:	000c7d40 	call	1000c7d4 <__submore>
1000c9a8:	103fee26 	beq	r2,zero,1000c964 <__alt_data_end+0xf800c964>
1000c9ac:	04bfffc4 	movi	r18,-1
1000c9b0:	003ff306 	br	1000c980 <__alt_data_end+0xf800c980>
1000c9b4:	00068240 	call	10006824 <__sinit>
1000c9b8:	003fcf06 	br	1000c8f8 <__alt_data_end+0xf800c8f8>
1000c9bc:	80c00417 	ldw	r3,16(r16)
1000c9c0:	80800017 	ldw	r2,0(r16)
1000c9c4:	18000326 	beq	r3,zero,1000c9d4 <_ungetc_r+0x110>
1000c9c8:	1880022e 	bgeu	r3,r2,1000c9d4 <_ungetc_r+0x110>
1000c9cc:	10ffffc3 	ldbu	r3,-1(r2)
1000c9d0:	1c801d26 	beq	r3,r18,1000ca48 <_ungetc_r+0x184>
1000c9d4:	81400117 	ldw	r5,4(r16)
1000c9d8:	80800e15 	stw	r2,56(r16)
1000c9dc:	008000c4 	movi	r2,3
1000c9e0:	80800d15 	stw	r2,52(r16)
1000c9e4:	00800044 	movi	r2,1
1000c9e8:	81001004 	addi	r4,r16,64
1000c9ec:	80c01084 	addi	r3,r16,66
1000c9f0:	80800115 	stw	r2,4(r16)
1000c9f4:	9005883a 	mov	r2,r18
1000c9f8:	81400f15 	stw	r5,60(r16)
1000c9fc:	81000c15 	stw	r4,48(r16)
1000ca00:	84801085 	stb	r18,66(r16)
1000ca04:	80c00015 	stw	r3,0(r16)
1000ca08:	dfc00317 	ldw	ra,12(sp)
1000ca0c:	dc800217 	ldw	r18,8(sp)
1000ca10:	dc400117 	ldw	r17,4(sp)
1000ca14:	dc000017 	ldw	r16,0(sp)
1000ca18:	dec00404 	addi	sp,sp,16
1000ca1c:	f800283a 	ret
1000ca20:	8809883a 	mov	r4,r17
1000ca24:	800b883a 	mov	r5,r16
1000ca28:	00065680 	call	10006568 <_fflush_r>
1000ca2c:	103fdf1e 	bne	r2,zero,1000c9ac <__alt_data_end+0xf800c9ac>
1000ca30:	8080030b 	ldhu	r2,12(r16)
1000ca34:	00fffdc4 	movi	r3,-9
1000ca38:	80000215 	stw	zero,8(r16)
1000ca3c:	1884703a 	and	r2,r3,r2
1000ca40:	80000615 	stw	zero,24(r16)
1000ca44:	003fbf06 	br	1000c944 <__alt_data_end+0xf800c944>
1000ca48:	80c00117 	ldw	r3,4(r16)
1000ca4c:	10bfffc4 	addi	r2,r2,-1
1000ca50:	80800015 	stw	r2,0(r16)
1000ca54:	18800044 	addi	r2,r3,1
1000ca58:	80800115 	stw	r2,4(r16)
1000ca5c:	003fc806 	br	1000c980 <__alt_data_end+0xf800c980>

1000ca60 <ungetc>:
1000ca60:	00c40074 	movhi	r3,4097
1000ca64:	18d2a404 	addi	r3,r3,19088
1000ca68:	2005883a 	mov	r2,r4
1000ca6c:	19000017 	ldw	r4,0(r3)
1000ca70:	280d883a 	mov	r6,r5
1000ca74:	100b883a 	mov	r5,r2
1000ca78:	000c8c41 	jmpi	1000c8c4 <_ungetc_r>

1000ca7c <__swbuf_r>:
1000ca7c:	defffc04 	addi	sp,sp,-16
1000ca80:	dc800215 	stw	r18,8(sp)
1000ca84:	dc400115 	stw	r17,4(sp)
1000ca88:	dc000015 	stw	r16,0(sp)
1000ca8c:	dfc00315 	stw	ra,12(sp)
1000ca90:	2023883a 	mov	r17,r4
1000ca94:	2825883a 	mov	r18,r5
1000ca98:	3021883a 	mov	r16,r6
1000ca9c:	20000226 	beq	r4,zero,1000caa8 <__swbuf_r+0x2c>
1000caa0:	20800e17 	ldw	r2,56(r4)
1000caa4:	10003b26 	beq	r2,zero,1000cb94 <__swbuf_r+0x118>
1000caa8:	8080030b 	ldhu	r2,12(r16)
1000caac:	80c00617 	ldw	r3,24(r16)
1000cab0:	1080020c 	andi	r2,r2,8
1000cab4:	10bfffcc 	andi	r2,r2,65535
1000cab8:	10a0001c 	xori	r2,r2,32768
1000cabc:	80c00215 	stw	r3,8(r16)
1000cac0:	10a00004 	addi	r2,r2,-32768
1000cac4:	10002226 	beq	r2,zero,1000cb50 <__swbuf_r+0xd4>
1000cac8:	80800417 	ldw	r2,16(r16)
1000cacc:	10002026 	beq	r2,zero,1000cb50 <__swbuf_r+0xd4>
1000cad0:	80c00017 	ldw	r3,0(r16)
1000cad4:	81000517 	ldw	r4,20(r16)
1000cad8:	94803fcc 	andi	r18,r18,255
1000cadc:	1885c83a 	sub	r2,r3,r2
1000cae0:	1100250e 	bge	r2,r4,1000cb78 <__swbuf_r+0xfc>
1000cae4:	10800044 	addi	r2,r2,1
1000cae8:	81400217 	ldw	r5,8(r16)
1000caec:	19000044 	addi	r4,r3,1
1000caf0:	297fffc4 	addi	r5,r5,-1
1000caf4:	81400215 	stw	r5,8(r16)
1000caf8:	1c800005 	stb	r18,0(r3)
1000cafc:	80c00517 	ldw	r3,20(r16)
1000cb00:	81000015 	stw	r4,0(r16)
1000cb04:	18800c26 	beq	r3,r2,1000cb38 <__swbuf_r+0xbc>
1000cb08:	8080030b 	ldhu	r2,12(r16)
1000cb0c:	1080004c 	andi	r2,r2,1
1000cb10:	10000226 	beq	r2,zero,1000cb1c <__swbuf_r+0xa0>
1000cb14:	00800284 	movi	r2,10
1000cb18:	90800726 	beq	r18,r2,1000cb38 <__swbuf_r+0xbc>
1000cb1c:	9005883a 	mov	r2,r18
1000cb20:	dfc00317 	ldw	ra,12(sp)
1000cb24:	dc800217 	ldw	r18,8(sp)
1000cb28:	dc400117 	ldw	r17,4(sp)
1000cb2c:	dc000017 	ldw	r16,0(sp)
1000cb30:	dec00404 	addi	sp,sp,16
1000cb34:	f800283a 	ret
1000cb38:	8809883a 	mov	r4,r17
1000cb3c:	800b883a 	mov	r5,r16
1000cb40:	00065680 	call	10006568 <_fflush_r>
1000cb44:	103ff526 	beq	r2,zero,1000cb1c <__alt_data_end+0xf800cb1c>
1000cb48:	04bfffc4 	movi	r18,-1
1000cb4c:	003ff306 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000cb50:	8809883a 	mov	r4,r17
1000cb54:	800b883a 	mov	r5,r16
1000cb58:	0004b9c0 	call	10004b9c <__swsetup_r>
1000cb5c:	10000f1e 	bne	r2,zero,1000cb9c <__swbuf_r+0x120>
1000cb60:	80800417 	ldw	r2,16(r16)
1000cb64:	80c00017 	ldw	r3,0(r16)
1000cb68:	81000517 	ldw	r4,20(r16)
1000cb6c:	94803fcc 	andi	r18,r18,255
1000cb70:	1885c83a 	sub	r2,r3,r2
1000cb74:	113fdb16 	blt	r2,r4,1000cae4 <__alt_data_end+0xf800cae4>
1000cb78:	8809883a 	mov	r4,r17
1000cb7c:	800b883a 	mov	r5,r16
1000cb80:	00065680 	call	10006568 <_fflush_r>
1000cb84:	103ff01e 	bne	r2,zero,1000cb48 <__alt_data_end+0xf800cb48>
1000cb88:	80c00017 	ldw	r3,0(r16)
1000cb8c:	00800044 	movi	r2,1
1000cb90:	003fd506 	br	1000cae8 <__alt_data_end+0xf800cae8>
1000cb94:	00068240 	call	10006824 <__sinit>
1000cb98:	003fc306 	br	1000caa8 <__alt_data_end+0xf800caa8>
1000cb9c:	8080030b 	ldhu	r2,12(r16)
1000cba0:	04bfffc4 	movi	r18,-1
1000cba4:	10801014 	ori	r2,r2,64
1000cba8:	8080030d 	sth	r2,12(r16)
1000cbac:	00800244 	movi	r2,9
1000cbb0:	88800015 	stw	r2,0(r17)
1000cbb4:	003fd906 	br	1000cb1c <__alt_data_end+0xf800cb1c>

1000cbb8 <__swbuf>:
1000cbb8:	00c40074 	movhi	r3,4097
1000cbbc:	18d2a404 	addi	r3,r3,19088
1000cbc0:	2005883a 	mov	r2,r4
1000cbc4:	19000017 	ldw	r4,0(r3)
1000cbc8:	280d883a 	mov	r6,r5
1000cbcc:	100b883a 	mov	r5,r2
1000cbd0:	000ca7c1 	jmpi	1000ca7c <__swbuf_r>

1000cbd4 <_write_r>:
1000cbd4:	defffd04 	addi	sp,sp,-12
1000cbd8:	dc400115 	stw	r17,4(sp)
1000cbdc:	dc000015 	stw	r16,0(sp)
1000cbe0:	2023883a 	mov	r17,r4
1000cbe4:	04040074 	movhi	r16,4097
1000cbe8:	8419e304 	addi	r16,r16,26508
1000cbec:	2809883a 	mov	r4,r5
1000cbf0:	300b883a 	mov	r5,r6
1000cbf4:	380d883a 	mov	r6,r7
1000cbf8:	dfc00215 	stw	ra,8(sp)
1000cbfc:	80000015 	stw	zero,0(r16)
1000cc00:	00109d40 	call	100109d4 <write>
1000cc04:	00ffffc4 	movi	r3,-1
1000cc08:	10c00526 	beq	r2,r3,1000cc20 <_write_r+0x4c>
1000cc0c:	dfc00217 	ldw	ra,8(sp)
1000cc10:	dc400117 	ldw	r17,4(sp)
1000cc14:	dc000017 	ldw	r16,0(sp)
1000cc18:	dec00304 	addi	sp,sp,12
1000cc1c:	f800283a 	ret
1000cc20:	80c00017 	ldw	r3,0(r16)
1000cc24:	183ff926 	beq	r3,zero,1000cc0c <__alt_data_end+0xf800cc0c>
1000cc28:	88c00015 	stw	r3,0(r17)
1000cc2c:	dfc00217 	ldw	ra,8(sp)
1000cc30:	dc400117 	ldw	r17,4(sp)
1000cc34:	dc000017 	ldw	r16,0(sp)
1000cc38:	dec00304 	addi	sp,sp,12
1000cc3c:	f800283a 	ret

1000cc40 <_calloc_r>:
1000cc40:	defffe04 	addi	sp,sp,-8
1000cc44:	dc000015 	stw	r16,0(sp)
1000cc48:	2021883a 	mov	r16,r4
1000cc4c:	3009883a 	mov	r4,r6
1000cc50:	dfc00115 	stw	ra,4(sp)
1000cc54:	00012fc0 	call	100012fc <__mulsi3>
1000cc58:	8009883a 	mov	r4,r16
1000cc5c:	100b883a 	mov	r5,r2
1000cc60:	00079f40 	call	100079f4 <_malloc_r>
1000cc64:	1021883a 	mov	r16,r2
1000cc68:	10000c26 	beq	r2,zero,1000cc9c <_calloc_r+0x5c>
1000cc6c:	11bfff17 	ldw	r6,-4(r2)
1000cc70:	00ffff04 	movi	r3,-4
1000cc74:	00800904 	movi	r2,36
1000cc78:	30cc703a 	and	r6,r6,r3
1000cc7c:	30cd883a 	add	r6,r6,r3
1000cc80:	11801436 	bltu	r2,r6,1000ccd4 <_calloc_r+0x94>
1000cc84:	00c004c4 	movi	r3,19
1000cc88:	19800936 	bltu	r3,r6,1000ccb0 <_calloc_r+0x70>
1000cc8c:	8005883a 	mov	r2,r16
1000cc90:	10000015 	stw	zero,0(r2)
1000cc94:	10000115 	stw	zero,4(r2)
1000cc98:	10000215 	stw	zero,8(r2)
1000cc9c:	8005883a 	mov	r2,r16
1000cca0:	dfc00117 	ldw	ra,4(sp)
1000cca4:	dc000017 	ldw	r16,0(sp)
1000cca8:	dec00204 	addi	sp,sp,8
1000ccac:	f800283a 	ret
1000ccb0:	80000015 	stw	zero,0(r16)
1000ccb4:	80000115 	stw	zero,4(r16)
1000ccb8:	00c006c4 	movi	r3,27
1000ccbc:	19800d2e 	bgeu	r3,r6,1000ccf4 <_calloc_r+0xb4>
1000ccc0:	80000215 	stw	zero,8(r16)
1000ccc4:	80000315 	stw	zero,12(r16)
1000ccc8:	30800c26 	beq	r6,r2,1000ccfc <_calloc_r+0xbc>
1000cccc:	80800404 	addi	r2,r16,16
1000ccd0:	003fef06 	br	1000cc90 <__alt_data_end+0xf800cc90>
1000ccd4:	8009883a 	mov	r4,r16
1000ccd8:	000b883a 	mov	r5,zero
1000ccdc:	00086240 	call	10008624 <memset>
1000cce0:	8005883a 	mov	r2,r16
1000cce4:	dfc00117 	ldw	ra,4(sp)
1000cce8:	dc000017 	ldw	r16,0(sp)
1000ccec:	dec00204 	addi	sp,sp,8
1000ccf0:	f800283a 	ret
1000ccf4:	80800204 	addi	r2,r16,8
1000ccf8:	003fe506 	br	1000cc90 <__alt_data_end+0xf800cc90>
1000ccfc:	80000415 	stw	zero,16(r16)
1000cd00:	80000515 	stw	zero,20(r16)
1000cd04:	80800604 	addi	r2,r16,24
1000cd08:	003fe106 	br	1000cc90 <__alt_data_end+0xf800cc90>

1000cd0c <_close_r>:
1000cd0c:	defffd04 	addi	sp,sp,-12
1000cd10:	dc400115 	stw	r17,4(sp)
1000cd14:	dc000015 	stw	r16,0(sp)
1000cd18:	2023883a 	mov	r17,r4
1000cd1c:	04040074 	movhi	r16,4097
1000cd20:	8419e304 	addi	r16,r16,26508
1000cd24:	2809883a 	mov	r4,r5
1000cd28:	dfc00215 	stw	ra,8(sp)
1000cd2c:	80000015 	stw	zero,0(r16)
1000cd30:	001015c0 	call	1001015c <close>
1000cd34:	00ffffc4 	movi	r3,-1
1000cd38:	10c00526 	beq	r2,r3,1000cd50 <_close_r+0x44>
1000cd3c:	dfc00217 	ldw	ra,8(sp)
1000cd40:	dc400117 	ldw	r17,4(sp)
1000cd44:	dc000017 	ldw	r16,0(sp)
1000cd48:	dec00304 	addi	sp,sp,12
1000cd4c:	f800283a 	ret
1000cd50:	80c00017 	ldw	r3,0(r16)
1000cd54:	183ff926 	beq	r3,zero,1000cd3c <__alt_data_end+0xf800cd3c>
1000cd58:	88c00015 	stw	r3,0(r17)
1000cd5c:	dfc00217 	ldw	ra,8(sp)
1000cd60:	dc400117 	ldw	r17,4(sp)
1000cd64:	dc000017 	ldw	r16,0(sp)
1000cd68:	dec00304 	addi	sp,sp,12
1000cd6c:	f800283a 	ret

1000cd70 <_fclose_r>:
1000cd70:	defffc04 	addi	sp,sp,-16
1000cd74:	dc400115 	stw	r17,4(sp)
1000cd78:	dc000015 	stw	r16,0(sp)
1000cd7c:	dfc00315 	stw	ra,12(sp)
1000cd80:	dc800215 	stw	r18,8(sp)
1000cd84:	2821883a 	mov	r16,r5
1000cd88:	2023883a 	mov	r17,r4
1000cd8c:	28003426 	beq	r5,zero,1000ce60 <_fclose_r+0xf0>
1000cd90:	0006a2c0 	call	10006a2c <__sfp_lock_acquire>
1000cd94:	88000226 	beq	r17,zero,1000cda0 <_fclose_r+0x30>
1000cd98:	88800e17 	ldw	r2,56(r17)
1000cd9c:	10003826 	beq	r2,zero,1000ce80 <_fclose_r+0x110>
1000cda0:	8080030f 	ldh	r2,12(r16)
1000cda4:	10002526 	beq	r2,zero,1000ce3c <_fclose_r+0xcc>
1000cda8:	8809883a 	mov	r4,r17
1000cdac:	800b883a 	mov	r5,r16
1000cdb0:	00065680 	call	10006568 <_fflush_r>
1000cdb4:	1025883a 	mov	r18,r2
1000cdb8:	80800b17 	ldw	r2,44(r16)
1000cdbc:	10000426 	beq	r2,zero,1000cdd0 <_fclose_r+0x60>
1000cdc0:	81400717 	ldw	r5,28(r16)
1000cdc4:	8809883a 	mov	r4,r17
1000cdc8:	103ee83a 	callr	r2
1000cdcc:	10003516 	blt	r2,zero,1000cea4 <_fclose_r+0x134>
1000cdd0:	8080030b 	ldhu	r2,12(r16)
1000cdd4:	1080200c 	andi	r2,r2,128
1000cdd8:	10bfffcc 	andi	r2,r2,65535
1000cddc:	10a0001c 	xori	r2,r2,32768
1000cde0:	10a00004 	addi	r2,r2,-32768
1000cde4:	10002b1e 	bne	r2,zero,1000ce94 <_fclose_r+0x124>
1000cde8:	81400c17 	ldw	r5,48(r16)
1000cdec:	28000526 	beq	r5,zero,1000ce04 <_fclose_r+0x94>
1000cdf0:	80801004 	addi	r2,r16,64
1000cdf4:	28800226 	beq	r5,r2,1000ce00 <_fclose_r+0x90>
1000cdf8:	8809883a 	mov	r4,r17
1000cdfc:	0006e240 	call	10006e24 <_free_r>
1000ce00:	80000c15 	stw	zero,48(r16)
1000ce04:	81401117 	ldw	r5,68(r16)
1000ce08:	28000326 	beq	r5,zero,1000ce18 <_fclose_r+0xa8>
1000ce0c:	8809883a 	mov	r4,r17
1000ce10:	0006e240 	call	10006e24 <_free_r>
1000ce14:	80001115 	stw	zero,68(r16)
1000ce18:	8000030d 	sth	zero,12(r16)
1000ce1c:	0006a300 	call	10006a30 <__sfp_lock_release>
1000ce20:	9005883a 	mov	r2,r18
1000ce24:	dfc00317 	ldw	ra,12(sp)
1000ce28:	dc800217 	ldw	r18,8(sp)
1000ce2c:	dc400117 	ldw	r17,4(sp)
1000ce30:	dc000017 	ldw	r16,0(sp)
1000ce34:	dec00404 	addi	sp,sp,16
1000ce38:	f800283a 	ret
1000ce3c:	0006a300 	call	10006a30 <__sfp_lock_release>
1000ce40:	0025883a 	mov	r18,zero
1000ce44:	9005883a 	mov	r2,r18
1000ce48:	dfc00317 	ldw	ra,12(sp)
1000ce4c:	dc800217 	ldw	r18,8(sp)
1000ce50:	dc400117 	ldw	r17,4(sp)
1000ce54:	dc000017 	ldw	r16,0(sp)
1000ce58:	dec00404 	addi	sp,sp,16
1000ce5c:	f800283a 	ret
1000ce60:	0025883a 	mov	r18,zero
1000ce64:	9005883a 	mov	r2,r18
1000ce68:	dfc00317 	ldw	ra,12(sp)
1000ce6c:	dc800217 	ldw	r18,8(sp)
1000ce70:	dc400117 	ldw	r17,4(sp)
1000ce74:	dc000017 	ldw	r16,0(sp)
1000ce78:	dec00404 	addi	sp,sp,16
1000ce7c:	f800283a 	ret
1000ce80:	8809883a 	mov	r4,r17
1000ce84:	00068240 	call	10006824 <__sinit>
1000ce88:	8080030f 	ldh	r2,12(r16)
1000ce8c:	103fc61e 	bne	r2,zero,1000cda8 <__alt_data_end+0xf800cda8>
1000ce90:	003fea06 	br	1000ce3c <__alt_data_end+0xf800ce3c>
1000ce94:	81400417 	ldw	r5,16(r16)
1000ce98:	8809883a 	mov	r4,r17
1000ce9c:	0006e240 	call	10006e24 <_free_r>
1000cea0:	003fd106 	br	1000cde8 <__alt_data_end+0xf800cde8>
1000cea4:	04bfffc4 	movi	r18,-1
1000cea8:	003fc906 	br	1000cdd0 <__alt_data_end+0xf800cdd0>

1000ceac <fclose>:
1000ceac:	00840074 	movhi	r2,4097
1000ceb0:	1092a404 	addi	r2,r2,19088
1000ceb4:	200b883a 	mov	r5,r4
1000ceb8:	11000017 	ldw	r4,0(r2)
1000cebc:	000cd701 	jmpi	1000cd70 <_fclose_r>

1000cec0 <_fstat_r>:
1000cec0:	defffd04 	addi	sp,sp,-12
1000cec4:	dc400115 	stw	r17,4(sp)
1000cec8:	dc000015 	stw	r16,0(sp)
1000cecc:	2023883a 	mov	r17,r4
1000ced0:	04040074 	movhi	r16,4097
1000ced4:	8419e304 	addi	r16,r16,26508
1000ced8:	2809883a 	mov	r4,r5
1000cedc:	300b883a 	mov	r5,r6
1000cee0:	dfc00215 	stw	ra,8(sp)
1000cee4:	80000015 	stw	zero,0(r16)
1000cee8:	00102a40 	call	100102a4 <fstat>
1000ceec:	00ffffc4 	movi	r3,-1
1000cef0:	10c00526 	beq	r2,r3,1000cf08 <_fstat_r+0x48>
1000cef4:	dfc00217 	ldw	ra,8(sp)
1000cef8:	dc400117 	ldw	r17,4(sp)
1000cefc:	dc000017 	ldw	r16,0(sp)
1000cf00:	dec00304 	addi	sp,sp,12
1000cf04:	f800283a 	ret
1000cf08:	80c00017 	ldw	r3,0(r16)
1000cf0c:	183ff926 	beq	r3,zero,1000cef4 <__alt_data_end+0xf800cef4>
1000cf10:	88c00015 	stw	r3,0(r17)
1000cf14:	dfc00217 	ldw	ra,8(sp)
1000cf18:	dc400117 	ldw	r17,4(sp)
1000cf1c:	dc000017 	ldw	r16,0(sp)
1000cf20:	dec00304 	addi	sp,sp,12
1000cf24:	f800283a 	ret

1000cf28 <rshift>:
1000cf28:	2805d17a 	srai	r2,r5,5
1000cf2c:	20c00417 	ldw	r3,16(r4)
1000cf30:	22800504 	addi	r10,r4,20
1000cf34:	10c0270e 	bge	r2,r3,1000cfd4 <rshift+0xac>
1000cf38:	19800144 	addi	r6,r3,5
1000cf3c:	12c00144 	addi	r11,r2,5
1000cf40:	318d883a 	add	r6,r6,r6
1000cf44:	5ad7883a 	add	r11,r11,r11
1000cf48:	318d883a 	add	r6,r6,r6
1000cf4c:	5ad7883a 	add	r11,r11,r11
1000cf50:	294007cc 	andi	r5,r5,31
1000cf54:	218d883a 	add	r6,r4,r6
1000cf58:	22d7883a 	add	r11,r4,r11
1000cf5c:	28002026 	beq	r5,zero,1000cfe0 <rshift+0xb8>
1000cf60:	59c00017 	ldw	r7,0(r11)
1000cf64:	02400804 	movi	r9,32
1000cf68:	58800104 	addi	r2,r11,4
1000cf6c:	4953c83a 	sub	r9,r9,r5
1000cf70:	394ed83a 	srl	r7,r7,r5
1000cf74:	11802e2e 	bgeu	r2,r6,1000d030 <rshift+0x108>
1000cf78:	5007883a 	mov	r3,r10
1000cf7c:	12000017 	ldw	r8,0(r2)
1000cf80:	18c00104 	addi	r3,r3,4
1000cf84:	10800104 	addi	r2,r2,4
1000cf88:	4250983a 	sll	r8,r8,r9
1000cf8c:	3a0eb03a 	or	r7,r7,r8
1000cf90:	19ffff15 	stw	r7,-4(r3)
1000cf94:	11ffff17 	ldw	r7,-4(r2)
1000cf98:	394ed83a 	srl	r7,r7,r5
1000cf9c:	11bff736 	bltu	r2,r6,1000cf7c <__alt_data_end+0xf800cf7c>
1000cfa0:	32c5c83a 	sub	r2,r6,r11
1000cfa4:	10bffec4 	addi	r2,r2,-5
1000cfa8:	1004d0ba 	srli	r2,r2,2
1000cfac:	10800184 	addi	r2,r2,6
1000cfb0:	1085883a 	add	r2,r2,r2
1000cfb4:	1085883a 	add	r2,r2,r2
1000cfb8:	2085883a 	add	r2,r4,r2
1000cfbc:	11c00015 	stw	r7,0(r2)
1000cfc0:	38001626 	beq	r7,zero,1000d01c <rshift+0xf4>
1000cfc4:	10800104 	addi	r2,r2,4
1000cfc8:	1295c83a 	sub	r10,r2,r10
1000cfcc:	5015d0ba 	srai	r10,r10,2
1000cfd0:	00001406 	br	1000d024 <rshift+0xfc>
1000cfd4:	20000415 	stw	zero,16(r4)
1000cfd8:	20000515 	stw	zero,20(r4)
1000cfdc:	f800283a 	ret
1000cfe0:	59bffc2e 	bgeu	r11,r6,1000cfd4 <__alt_data_end+0xf800cfd4>
1000cfe4:	5007883a 	mov	r3,r10
1000cfe8:	5805883a 	mov	r2,r11
1000cfec:	11400017 	ldw	r5,0(r2)
1000cff0:	18c00104 	addi	r3,r3,4
1000cff4:	10800104 	addi	r2,r2,4
1000cff8:	197fff15 	stw	r5,-4(r3)
1000cffc:	11bffb36 	bltu	r2,r6,1000cfec <__alt_data_end+0xf800cfec>
1000d000:	02c4303a 	nor	r2,zero,r11
1000d004:	1185883a 	add	r2,r2,r6
1000d008:	1004d0ba 	srli	r2,r2,2
1000d00c:	10800184 	addi	r2,r2,6
1000d010:	1085883a 	add	r2,r2,r2
1000d014:	1085883a 	add	r2,r2,r2
1000d018:	2085883a 	add	r2,r4,r2
1000d01c:	1295c83a 	sub	r10,r2,r10
1000d020:	5015d0ba 	srai	r10,r10,2
1000d024:	22800415 	stw	r10,16(r4)
1000d028:	503feb26 	beq	r10,zero,1000cfd8 <__alt_data_end+0xf800cfd8>
1000d02c:	f800283a 	ret
1000d030:	5005883a 	mov	r2,r10
1000d034:	003fe106 	br	1000cfbc <__alt_data_end+0xf800cfbc>

1000d038 <__hexdig_init>:
1000d038:	01440074 	movhi	r5,4097
1000d03c:	294b3244 	addi	r5,r5,11465
1000d040:	01000404 	movi	r4,16
1000d044:	00c00c04 	movi	r3,48
1000d048:	00840074 	movhi	r2,4097
1000d04c:	1099f404 	addi	r2,r2,26576
1000d050:	29800003 	ldbu	r6,0(r5)
1000d054:	10c7883a 	add	r3,r2,r3
1000d058:	19000005 	stb	r4,0(r3)
1000d05c:	29400044 	addi	r5,r5,1
1000d060:	3007883a 	mov	r3,r6
1000d064:	21000044 	addi	r4,r4,1
1000d068:	303ff91e 	bne	r6,zero,1000d050 <__alt_data_end+0xf800d050>
1000d06c:	01440074 	movhi	r5,4097
1000d070:	294b3044 	addi	r5,r5,11457
1000d074:	01000684 	movi	r4,26
1000d078:	00c01844 	movi	r3,97
1000d07c:	29800003 	ldbu	r6,0(r5)
1000d080:	10c7883a 	add	r3,r2,r3
1000d084:	19000005 	stb	r4,0(r3)
1000d088:	29400044 	addi	r5,r5,1
1000d08c:	3007883a 	mov	r3,r6
1000d090:	21000044 	addi	r4,r4,1
1000d094:	303ff91e 	bne	r6,zero,1000d07c <__alt_data_end+0xf800d07c>
1000d098:	01440074 	movhi	r5,4097
1000d09c:	294b2e44 	addi	r5,r5,11449
1000d0a0:	01000684 	movi	r4,26
1000d0a4:	00c01044 	movi	r3,65
1000d0a8:	29800003 	ldbu	r6,0(r5)
1000d0ac:	10c7883a 	add	r3,r2,r3
1000d0b0:	19000005 	stb	r4,0(r3)
1000d0b4:	29400044 	addi	r5,r5,1
1000d0b8:	3007883a 	mov	r3,r6
1000d0bc:	21000044 	addi	r4,r4,1
1000d0c0:	303ff91e 	bne	r6,zero,1000d0a8 <__alt_data_end+0xf800d0a8>
1000d0c4:	f800283a 	ret

1000d0c8 <__gethex>:
1000d0c8:	defff204 	addi	sp,sp,-56
1000d0cc:	dc800615 	stw	r18,24(sp)
1000d0d0:	04840074 	movhi	r18,4097
1000d0d4:	9499f404 	addi	r18,r18,26576
1000d0d8:	90800c03 	ldbu	r2,48(r18)
1000d0dc:	dd400915 	stw	r21,36(sp)
1000d0e0:	dc400515 	stw	r17,20(sp)
1000d0e4:	dfc00d15 	stw	ra,52(sp)
1000d0e8:	df000c15 	stw	fp,48(sp)
1000d0ec:	ddc00b15 	stw	r23,44(sp)
1000d0f0:	dd800a15 	stw	r22,40(sp)
1000d0f4:	dd000815 	stw	r20,32(sp)
1000d0f8:	dcc00715 	stw	r19,28(sp)
1000d0fc:	dc000415 	stw	r16,16(sp)
1000d100:	d9000115 	stw	r4,4(sp)
1000d104:	d9c00215 	stw	r7,8(sp)
1000d108:	282b883a 	mov	r21,r5
1000d10c:	3023883a 	mov	r17,r6
1000d110:	1000b926 	beq	r2,zero,1000d3f8 <__gethex+0x330>
1000d114:	a9000017 	ldw	r4,0(r21)
1000d118:	00800c04 	movi	r2,48
1000d11c:	20c00083 	ldbu	r3,2(r4)
1000d120:	24c00084 	addi	r19,r4,2
1000d124:	1881601e 	bne	r3,r2,1000d6a8 <__gethex+0x5e0>
1000d128:	017fff84 	movi	r5,-2
1000d12c:	208000c4 	addi	r2,r4,3
1000d130:	290bc83a 	sub	r5,r5,r4
1000d134:	1809883a 	mov	r4,r3
1000d138:	28b9883a 	add	fp,r5,r2
1000d13c:	1027883a 	mov	r19,r2
1000d140:	10800044 	addi	r2,r2,1
1000d144:	10ffffc3 	ldbu	r3,-1(r2)
1000d148:	193ffb26 	beq	r3,r4,1000d138 <__alt_data_end+0xf800d138>
1000d14c:	90c5883a 	add	r2,r18,r3
1000d150:	10800003 	ldbu	r2,0(r2)
1000d154:	01440074 	movhi	r5,4097
1000d158:	2959f404 	addi	r5,r5,26576
1000d15c:	10002b26 	beq	r2,zero,1000d20c <__gethex+0x144>
1000d160:	98800003 	ldbu	r2,0(r19)
1000d164:	0009883a 	mov	r4,zero
1000d168:	288b883a 	add	r5,r5,r2
1000d16c:	28c00003 	ldbu	r3,0(r5)
1000d170:	18016826 	beq	r3,zero,1000d714 <__gethex+0x64c>
1000d174:	9821883a 	mov	r16,r19
1000d178:	84000044 	addi	r16,r16,1
1000d17c:	80800003 	ldbu	r2,0(r16)
1000d180:	9087883a 	add	r3,r18,r2
1000d184:	18c00003 	ldbu	r3,0(r3)
1000d188:	183ffb1e 	bne	r3,zero,1000d178 <__alt_data_end+0xf800d178>
1000d18c:	d8000015 	stw	zero,0(sp)
1000d190:	00c00b84 	movi	r3,46
1000d194:	10c0f226 	beq	r2,r3,1000d560 <__gethex+0x498>
1000d198:	80800003 	ldbu	r2,0(r16)
1000d19c:	20014426 	beq	r4,zero,1000d6b0 <__gethex+0x5e8>
1000d1a0:	8109c83a 	sub	r4,r16,r4
1000d1a4:	2109883a 	add	r4,r4,r4
1000d1a8:	2109883a 	add	r4,r4,r4
1000d1ac:	0129c83a 	sub	r20,zero,r4
1000d1b0:	00c01404 	movi	r3,80
1000d1b4:	10c01e26 	beq	r2,r3,1000d230 <__gethex+0x168>
1000d1b8:	00c01c04 	movi	r3,112
1000d1bc:	10c01c26 	beq	r2,r3,1000d230 <__gethex+0x168>
1000d1c0:	d8c00017 	ldw	r3,0(sp)
1000d1c4:	802d883a 	mov	r22,r16
1000d1c8:	ad800015 	stw	r22,0(r21)
1000d1cc:	18004026 	beq	r3,zero,1000d2d0 <__gethex+0x208>
1000d1d0:	e001061e 	bne	fp,zero,1000d5ec <__gethex+0x524>
1000d1d4:	04000184 	movi	r16,6
1000d1d8:	8005883a 	mov	r2,r16
1000d1dc:	dfc00d17 	ldw	ra,52(sp)
1000d1e0:	df000c17 	ldw	fp,48(sp)
1000d1e4:	ddc00b17 	ldw	r23,44(sp)
1000d1e8:	dd800a17 	ldw	r22,40(sp)
1000d1ec:	dd400917 	ldw	r21,36(sp)
1000d1f0:	dd000817 	ldw	r20,32(sp)
1000d1f4:	dcc00717 	ldw	r19,28(sp)
1000d1f8:	dc800617 	ldw	r18,24(sp)
1000d1fc:	dc400517 	ldw	r17,20(sp)
1000d200:	dc000417 	ldw	r16,16(sp)
1000d204:	dec00e04 	addi	sp,sp,56
1000d208:	f800283a 	ret
1000d20c:	00800b84 	movi	r2,46
1000d210:	1880d626 	beq	r3,r2,1000d56c <__gethex+0x4a4>
1000d214:	98800003 	ldbu	r2,0(r19)
1000d218:	00c00044 	movi	r3,1
1000d21c:	d8c00015 	stw	r3,0(sp)
1000d220:	00c01404 	movi	r3,80
1000d224:	9821883a 	mov	r16,r19
1000d228:	0029883a 	mov	r20,zero
1000d22c:	10ffe21e 	bne	r2,r3,1000d1b8 <__alt_data_end+0xf800d1b8>
1000d230:	80800043 	ldbu	r2,1(r16)
1000d234:	00c00ac4 	movi	r3,43
1000d238:	10c0f326 	beq	r2,r3,1000d608 <__gethex+0x540>
1000d23c:	00c00b44 	movi	r3,45
1000d240:	10c0ec26 	beq	r2,r3,1000d5f4 <__gethex+0x52c>
1000d244:	80c00044 	addi	r3,r16,1
1000d248:	d8000315 	stw	zero,12(sp)
1000d24c:	9085883a 	add	r2,r18,r2
1000d250:	11000003 	ldbu	r4,0(r2)
1000d254:	203fda26 	beq	r4,zero,1000d1c0 <__alt_data_end+0xf800d1c0>
1000d258:	01800644 	movi	r6,25
1000d25c:	313fd816 	blt	r6,r4,1000d1c0 <__alt_data_end+0xf800d1c0>
1000d260:	18800043 	ldbu	r2,1(r3)
1000d264:	01440074 	movhi	r5,4097
1000d268:	2959f404 	addi	r5,r5,26576
1000d26c:	213ffc04 	addi	r4,r4,-16
1000d270:	2885883a 	add	r2,r5,r2
1000d274:	15c00003 	ldbu	r23,0(r2)
1000d278:	1d800044 	addi	r22,r3,1
1000d27c:	b8000d26 	beq	r23,zero,1000d2b4 <__gethex+0x1ec>
1000d280:	35c0030e 	bge	r6,r23,1000d290 <__gethex+0x1c8>
1000d284:	00000b06 	br	1000d2b4 <__gethex+0x1ec>
1000d288:	00800644 	movi	r2,25
1000d28c:	15c00916 	blt	r2,r23,1000d2b4 <__gethex+0x1ec>
1000d290:	01400284 	movi	r5,10
1000d294:	00012fc0 	call	100012fc <__mulsi3>
1000d298:	b5800044 	addi	r22,r22,1
1000d29c:	b1400003 	ldbu	r5,0(r22)
1000d2a0:	15c5883a 	add	r2,r2,r23
1000d2a4:	113ffc04 	addi	r4,r2,-16
1000d2a8:	914b883a 	add	r5,r18,r5
1000d2ac:	2dc00003 	ldbu	r23,0(r5)
1000d2b0:	b83ff51e 	bne	r23,zero,1000d288 <__alt_data_end+0xf800d288>
1000d2b4:	d8c00317 	ldw	r3,12(sp)
1000d2b8:	18000126 	beq	r3,zero,1000d2c0 <__gethex+0x1f8>
1000d2bc:	0109c83a 	sub	r4,zero,r4
1000d2c0:	d8c00017 	ldw	r3,0(sp)
1000d2c4:	ad800015 	stw	r22,0(r21)
1000d2c8:	a129883a 	add	r20,r20,r4
1000d2cc:	183fc01e 	bne	r3,zero,1000d1d0 <__alt_data_end+0xf800d1d0>
1000d2d0:	84c5c83a 	sub	r2,r16,r19
1000d2d4:	10bfffc4 	addi	r2,r2,-1
1000d2d8:	00c001c4 	movi	r3,7
1000d2dc:	000b883a 	mov	r5,zero
1000d2e0:	1880030e 	bge	r3,r2,1000d2f0 <__gethex+0x228>
1000d2e4:	1005d07a 	srai	r2,r2,1
1000d2e8:	29400044 	addi	r5,r5,1
1000d2ec:	18bffd16 	blt	r3,r2,1000d2e4 <__alt_data_end+0xf800d2e4>
1000d2f0:	d9000117 	ldw	r4,4(sp)
1000d2f4:	00087000 	call	10008700 <_Balloc>
1000d2f8:	102d883a 	mov	r22,r2
1000d2fc:	15400504 	addi	r21,r2,20
1000d300:	9c001b2e 	bgeu	r19,r16,1000d370 <__gethex+0x2a8>
1000d304:	843fffc4 	addi	r16,r16,-1
1000d308:	98bfffc4 	addi	r2,r19,-1
1000d30c:	a80b883a 	mov	r5,r21
1000d310:	0009883a 	mov	r4,zero
1000d314:	0007883a 	mov	r3,zero
1000d318:	02800b84 	movi	r10,46
1000d31c:	02c00804 	movi	r11,32
1000d320:	00000806 	br	1000d344 <__gethex+0x27c>
1000d324:	18c00104 	addi	r3,r3,4
1000d328:	918d883a 	add	r6,r18,r6
1000d32c:	32400003 	ldbu	r9,0(r6)
1000d330:	4a4003cc 	andi	r9,r9,15
1000d334:	49ce983a 	sll	r7,r9,r7
1000d338:	21c8b03a 	or	r4,r4,r7
1000d33c:	843fffc4 	addi	r16,r16,-1
1000d340:	80800d26 	beq	r16,r2,1000d378 <__gethex+0x2b0>
1000d344:	81800003 	ldbu	r6,0(r16)
1000d348:	180f883a 	mov	r7,r3
1000d34c:	32bffb26 	beq	r6,r10,1000d33c <__alt_data_end+0xf800d33c>
1000d350:	1afff41e 	bne	r3,r11,1000d324 <__alt_data_end+0xf800d324>
1000d354:	29000015 	stw	r4,0(r5)
1000d358:	81800003 	ldbu	r6,0(r16)
1000d35c:	0009883a 	mov	r4,zero
1000d360:	000f883a 	mov	r7,zero
1000d364:	29400104 	addi	r5,r5,4
1000d368:	00c00104 	movi	r3,4
1000d36c:	003fee06 	br	1000d328 <__alt_data_end+0xf800d328>
1000d370:	a80b883a 	mov	r5,r21
1000d374:	0009883a 	mov	r4,zero
1000d378:	28c00104 	addi	r3,r5,4
1000d37c:	1d47c83a 	sub	r3,r3,r21
1000d380:	1807d0ba 	srai	r3,r3,2
1000d384:	29000015 	stw	r4,0(r5)
1000d388:	1820917a 	slli	r16,r3,5
1000d38c:	b0c00415 	stw	r3,16(r22)
1000d390:	0008a180 	call	10008a18 <__hi0bits>
1000d394:	8dc00017 	ldw	r23,0(r17)
1000d398:	8085c83a 	sub	r2,r16,r2
1000d39c:	b8809c16 	blt	r23,r2,1000d610 <__gethex+0x548>
1000d3a0:	15c0b716 	blt	r2,r23,1000d680 <__gethex+0x5b8>
1000d3a4:	0039883a 	mov	fp,zero
1000d3a8:	88c00217 	ldw	r3,8(r17)
1000d3ac:	1d006516 	blt	r3,r20,1000d544 <__gethex+0x47c>
1000d3b0:	88800117 	ldw	r2,4(r17)
1000d3b4:	a080830e 	bge	r20,r2,1000d5c4 <__gethex+0x4fc>
1000d3b8:	1529c83a 	sub	r20,r2,r20
1000d3bc:	a5c01016 	blt	r20,r23,1000d400 <__gethex+0x338>
1000d3c0:	88c00317 	ldw	r3,12(r17)
1000d3c4:	01000084 	movi	r4,2
1000d3c8:	1900c726 	beq	r3,r4,1000d6e8 <__gethex+0x620>
1000d3cc:	010000c4 	movi	r4,3
1000d3d0:	1900f026 	beq	r3,r4,1000d794 <__gethex+0x6cc>
1000d3d4:	01000044 	movi	r4,1
1000d3d8:	1900e626 	beq	r3,r4,1000d774 <__gethex+0x6ac>
1000d3dc:	d9000117 	ldw	r4,4(sp)
1000d3e0:	b00b883a 	mov	r5,r22
1000d3e4:	04001404 	movi	r16,80
1000d3e8:	00087a80 	call	100087a8 <_Bfree>
1000d3ec:	d8c00e17 	ldw	r3,56(sp)
1000d3f0:	18000015 	stw	zero,0(r3)
1000d3f4:	003f7806 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000d3f8:	000d0380 	call	1000d038 <__hexdig_init>
1000d3fc:	003f4506 	br	1000d114 <__alt_data_end+0xf800d114>
1000d400:	a43fffc4 	addi	r16,r20,-1
1000d404:	e000b21e 	bne	fp,zero,1000d6d0 <__gethex+0x608>
1000d408:	0400040e 	bge	zero,r16,1000d41c <__gethex+0x354>
1000d40c:	b009883a 	mov	r4,r22
1000d410:	800b883a 	mov	r5,r16
1000d414:	00096cc0 	call	100096cc <__any_on>
1000d418:	1039883a 	mov	fp,r2
1000d41c:	8005d17a 	srai	r2,r16,5
1000d420:	00c00044 	movi	r3,1
1000d424:	840007cc 	andi	r16,r16,31
1000d428:	1085883a 	add	r2,r2,r2
1000d42c:	1085883a 	add	r2,r2,r2
1000d430:	a885883a 	add	r2,r21,r2
1000d434:	1c06983a 	sll	r3,r3,r16
1000d438:	10800017 	ldw	r2,0(r2)
1000d43c:	1884703a 	and	r2,r3,r2
1000d440:	10000126 	beq	r2,zero,1000d448 <__gethex+0x380>
1000d444:	e7000094 	ori	fp,fp,2
1000d448:	a00b883a 	mov	r5,r20
1000d44c:	b009883a 	mov	r4,r22
1000d450:	000cf280 	call	1000cf28 <rshift>
1000d454:	bd2fc83a 	sub	r23,r23,r20
1000d458:	8d000117 	ldw	r20,4(r17)
1000d45c:	04000084 	movi	r16,2
1000d460:	e0005d26 	beq	fp,zero,1000d5d8 <__gethex+0x510>
1000d464:	88800317 	ldw	r2,12(r17)
1000d468:	00c00084 	movi	r3,2
1000d46c:	10c0b026 	beq	r2,r3,1000d730 <__gethex+0x668>
1000d470:	00c000c4 	movi	r3,3
1000d474:	10c05526 	beq	r2,r3,1000d5cc <__gethex+0x504>
1000d478:	00c00044 	movi	r3,1
1000d47c:	10c0551e 	bne	r2,r3,1000d5d4 <__gethex+0x50c>
1000d480:	e080008c 	andi	r2,fp,2
1000d484:	10005326 	beq	r2,zero,1000d5d4 <__gethex+0x50c>
1000d488:	a8800017 	ldw	r2,0(r21)
1000d48c:	e084b03a 	or	r2,fp,r2
1000d490:	10c4703a 	and	r2,r2,r3
1000d494:	10004f26 	beq	r2,zero,1000d5d4 <__gethex+0x50c>
1000d498:	b7000417 	ldw	fp,16(r22)
1000d49c:	00ffffc4 	movi	r3,-1
1000d4a0:	e1000144 	addi	r4,fp,5
1000d4a4:	2109883a 	add	r4,r4,r4
1000d4a8:	2109883a 	add	r4,r4,r4
1000d4ac:	b109883a 	add	r4,r22,r4
1000d4b0:	a8800017 	ldw	r2,0(r21)
1000d4b4:	10c0ba1e 	bne	r2,r3,1000d7a0 <__gethex+0x6d8>
1000d4b8:	a8000015 	stw	zero,0(r21)
1000d4bc:	ad400104 	addi	r21,r21,4
1000d4c0:	a93ffb36 	bltu	r21,r4,1000d4b0 <__alt_data_end+0xf800d4b0>
1000d4c4:	b0800217 	ldw	r2,8(r22)
1000d4c8:	e080bd0e 	bge	fp,r2,1000d7c0 <__gethex+0x6f8>
1000d4cc:	e005883a 	mov	r2,fp
1000d4d0:	10c00144 	addi	r3,r2,5
1000d4d4:	18c7883a 	add	r3,r3,r3
1000d4d8:	18c7883a 	add	r3,r3,r3
1000d4dc:	b0c7883a 	add	r3,r22,r3
1000d4e0:	10800044 	addi	r2,r2,1
1000d4e4:	01000044 	movi	r4,1
1000d4e8:	19000015 	stw	r4,0(r3)
1000d4ec:	b0800415 	stw	r2,16(r22)
1000d4f0:	00800084 	movi	r2,2
1000d4f4:	8080ad26 	beq	r16,r2,1000d7ac <__gethex+0x6e4>
1000d4f8:	b0800417 	ldw	r2,16(r22)
1000d4fc:	e0800b16 	blt	fp,r2,1000d52c <__gethex+0x464>
1000d500:	bdc007cc 	andi	r23,r23,31
1000d504:	b8008626 	beq	r23,zero,1000d720 <__gethex+0x658>
1000d508:	e7000104 	addi	fp,fp,4
1000d50c:	e739883a 	add	fp,fp,fp
1000d510:	e739883a 	add	fp,fp,fp
1000d514:	b705883a 	add	r2,r22,fp
1000d518:	11000017 	ldw	r4,0(r2)
1000d51c:	0008a180 	call	10008a18 <__hi0bits>
1000d520:	00c00804 	movi	r3,32
1000d524:	1defc83a 	sub	r23,r3,r23
1000d528:	15c07d0e 	bge	r2,r23,1000d720 <__gethex+0x658>
1000d52c:	b009883a 	mov	r4,r22
1000d530:	01400044 	movi	r5,1
1000d534:	000cf280 	call	1000cf28 <rshift>
1000d538:	88800217 	ldw	r2,8(r17)
1000d53c:	a5000044 	addi	r20,r20,1
1000d540:	1500770e 	bge	r2,r20,1000d720 <__gethex+0x658>
1000d544:	d9000117 	ldw	r4,4(sp)
1000d548:	b00b883a 	mov	r5,r22
1000d54c:	040028c4 	movi	r16,163
1000d550:	00087a80 	call	100087a8 <_Bfree>
1000d554:	d8800e17 	ldw	r2,56(sp)
1000d558:	10000015 	stw	zero,0(r2)
1000d55c:	003f1e06 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000d560:	20007826 	beq	r4,zero,1000d744 <__gethex+0x67c>
1000d564:	80800003 	ldbu	r2,0(r16)
1000d568:	003f0d06 	br	1000d1a0 <__alt_data_end+0xf800d1a0>
1000d56c:	98800043 	ldbu	r2,1(r19)
1000d570:	9c000044 	addi	r16,r19,1
1000d574:	288b883a 	add	r5,r5,r2
1000d578:	28c00003 	ldbu	r3,0(r5)
1000d57c:	18005026 	beq	r3,zero,1000d6c0 <__gethex+0x5f8>
1000d580:	00c00c04 	movi	r3,48
1000d584:	10c0541e 	bne	r2,r3,1000d6d8 <__gethex+0x610>
1000d588:	800d883a 	mov	r6,r16
1000d58c:	1007883a 	mov	r3,r2
1000d590:	31800044 	addi	r6,r6,1
1000d594:	30800003 	ldbu	r2,0(r6)
1000d598:	10fffd26 	beq	r2,r3,1000d590 <__alt_data_end+0xf800d590>
1000d59c:	9087883a 	add	r3,r18,r2
1000d5a0:	18c00003 	ldbu	r3,0(r3)
1000d5a4:	3027883a 	mov	r19,r6
1000d5a8:	18004c1e 	bne	r3,zero,1000d6dc <__gethex+0x614>
1000d5ac:	00c00044 	movi	r3,1
1000d5b0:	8009883a 	mov	r4,r16
1000d5b4:	d8c00015 	stw	r3,0(sp)
1000d5b8:	1839883a 	mov	fp,r3
1000d5bc:	3021883a 	mov	r16,r6
1000d5c0:	003ef306 	br	1000d190 <__alt_data_end+0xf800d190>
1000d5c4:	04000044 	movi	r16,1
1000d5c8:	003fa506 	br	1000d460 <__alt_data_end+0xf800d460>
1000d5cc:	d8800f17 	ldw	r2,60(sp)
1000d5d0:	103fb11e 	bne	r2,zero,1000d498 <__alt_data_end+0xf800d498>
1000d5d4:	84000414 	ori	r16,r16,16
1000d5d8:	d8800e17 	ldw	r2,56(sp)
1000d5dc:	d8c00217 	ldw	r3,8(sp)
1000d5e0:	15800015 	stw	r22,0(r2)
1000d5e4:	1d000015 	stw	r20,0(r3)
1000d5e8:	003efb06 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000d5ec:	0021883a 	mov	r16,zero
1000d5f0:	003ef906 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000d5f4:	00c00044 	movi	r3,1
1000d5f8:	d8c00315 	stw	r3,12(sp)
1000d5fc:	80800083 	ldbu	r2,2(r16)
1000d600:	80c00084 	addi	r3,r16,2
1000d604:	003f1106 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d608:	d8000315 	stw	zero,12(sp)
1000d60c:	003ffb06 	br	1000d5fc <__alt_data_end+0xf800d5fc>
1000d610:	15e1c83a 	sub	r16,r2,r23
1000d614:	b009883a 	mov	r4,r22
1000d618:	800b883a 	mov	r5,r16
1000d61c:	00096cc0 	call	100096cc <__any_on>
1000d620:	10002526 	beq	r2,zero,1000d6b8 <__gethex+0x5f0>
1000d624:	80bfffc4 	addi	r2,r16,-1
1000d628:	1007d17a 	srai	r3,r2,5
1000d62c:	110007cc 	andi	r4,r2,31
1000d630:	07000044 	movi	fp,1
1000d634:	18c00144 	addi	r3,r3,5
1000d638:	18c7883a 	add	r3,r3,r3
1000d63c:	18c7883a 	add	r3,r3,r3
1000d640:	b0c7883a 	add	r3,r22,r3
1000d644:	e108983a 	sll	r4,fp,r4
1000d648:	18c00017 	ldw	r3,0(r3)
1000d64c:	20c6703a 	and	r3,r4,r3
1000d650:	18000626 	beq	r3,zero,1000d66c <__gethex+0x5a4>
1000d654:	e080340e 	bge	fp,r2,1000d728 <__gethex+0x660>
1000d658:	b009883a 	mov	r4,r22
1000d65c:	817fff84 	addi	r5,r16,-2
1000d660:	00096cc0 	call	100096cc <__any_on>
1000d664:	10003026 	beq	r2,zero,1000d728 <__gethex+0x660>
1000d668:	070000c4 	movi	fp,3
1000d66c:	b009883a 	mov	r4,r22
1000d670:	800b883a 	mov	r5,r16
1000d674:	000cf280 	call	1000cf28 <rshift>
1000d678:	a429883a 	add	r20,r20,r16
1000d67c:	003f4a06 	br	1000d3a8 <__alt_data_end+0xf800d3a8>
1000d680:	d9000117 	ldw	r4,4(sp)
1000d684:	b8a1c83a 	sub	r16,r23,r2
1000d688:	b00b883a 	mov	r5,r22
1000d68c:	800d883a 	mov	r6,r16
1000d690:	0008ef00 	call	10008ef0 <__lshift>
1000d694:	102d883a 	mov	r22,r2
1000d698:	a429c83a 	sub	r20,r20,r16
1000d69c:	15400504 	addi	r21,r2,20
1000d6a0:	0039883a 	mov	fp,zero
1000d6a4:	003f4006 	br	1000d3a8 <__alt_data_end+0xf800d3a8>
1000d6a8:	0039883a 	mov	fp,zero
1000d6ac:	003ea706 	br	1000d14c <__alt_data_end+0xf800d14c>
1000d6b0:	0029883a 	mov	r20,zero
1000d6b4:	003ebe06 	br	1000d1b0 <__alt_data_end+0xf800d1b0>
1000d6b8:	0039883a 	mov	fp,zero
1000d6bc:	003feb06 	br	1000d66c <__alt_data_end+0xf800d66c>
1000d6c0:	00c00044 	movi	r3,1
1000d6c4:	0029883a 	mov	r20,zero
1000d6c8:	d8c00015 	stw	r3,0(sp)
1000d6cc:	003eb806 	br	1000d1b0 <__alt_data_end+0xf800d1b0>
1000d6d0:	07000044 	movi	fp,1
1000d6d4:	003f5106 	br	1000d41c <__alt_data_end+0xf800d41c>
1000d6d8:	8027883a 	mov	r19,r16
1000d6dc:	8009883a 	mov	r4,r16
1000d6e0:	07000044 	movi	fp,1
1000d6e4:	003ea306 	br	1000d174 <__alt_data_end+0xf800d174>
1000d6e8:	d8c00f17 	ldw	r3,60(sp)
1000d6ec:	183f3b1e 	bne	r3,zero,1000d3dc <__alt_data_end+0xf800d3dc>
1000d6f0:	d8c00217 	ldw	r3,8(sp)
1000d6f4:	04001884 	movi	r16,98
1000d6f8:	18800015 	stw	r2,0(r3)
1000d6fc:	00800044 	movi	r2,1
1000d700:	b0800415 	stw	r2,16(r22)
1000d704:	a8800015 	stw	r2,0(r21)
1000d708:	d8800e17 	ldw	r2,56(sp)
1000d70c:	15800015 	stw	r22,0(r2)
1000d710:	003eb106 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000d714:	9821883a 	mov	r16,r19
1000d718:	d8000015 	stw	zero,0(sp)
1000d71c:	003e9c06 	br	1000d190 <__alt_data_end+0xf800d190>
1000d720:	04000844 	movi	r16,33
1000d724:	003fac06 	br	1000d5d8 <__alt_data_end+0xf800d5d8>
1000d728:	07000084 	movi	fp,2
1000d72c:	003fcf06 	br	1000d66c <__alt_data_end+0xf800d66c>
1000d730:	d8c00f17 	ldw	r3,60(sp)
1000d734:	00800044 	movi	r2,1
1000d738:	10c5c83a 	sub	r2,r2,r3
1000d73c:	103fa526 	beq	r2,zero,1000d5d4 <__alt_data_end+0xf800d5d4>
1000d740:	003f5506 	br	1000d498 <__alt_data_end+0xf800d498>
1000d744:	80800043 	ldbu	r2,1(r16)
1000d748:	81000044 	addi	r4,r16,1
1000d74c:	2021883a 	mov	r16,r4
1000d750:	9087883a 	add	r3,r18,r2
1000d754:	18c00003 	ldbu	r3,0(r3)
1000d758:	183e9026 	beq	r3,zero,1000d19c <__alt_data_end+0xf800d19c>
1000d75c:	84000044 	addi	r16,r16,1
1000d760:	80800003 	ldbu	r2,0(r16)
1000d764:	9087883a 	add	r3,r18,r2
1000d768:	18c00003 	ldbu	r3,0(r3)
1000d76c:	183ffb1e 	bne	r3,zero,1000d75c <__alt_data_end+0xf800d75c>
1000d770:	003e8a06 	br	1000d19c <__alt_data_end+0xf800d19c>
1000d774:	a5ff191e 	bne	r20,r23,1000d3dc <__alt_data_end+0xf800d3dc>
1000d778:	1dffdd0e 	bge	r3,r23,1000d6f0 <__alt_data_end+0xf800d6f0>
1000d77c:	b009883a 	mov	r4,r22
1000d780:	b97fffc4 	addi	r5,r23,-1
1000d784:	00096cc0 	call	100096cc <__any_on>
1000d788:	103f1426 	beq	r2,zero,1000d3dc <__alt_data_end+0xf800d3dc>
1000d78c:	88800117 	ldw	r2,4(r17)
1000d790:	003fd706 	br	1000d6f0 <__alt_data_end+0xf800d6f0>
1000d794:	d8c00f17 	ldw	r3,60(sp)
1000d798:	183f1026 	beq	r3,zero,1000d3dc <__alt_data_end+0xf800d3dc>
1000d79c:	003fd406 	br	1000d6f0 <__alt_data_end+0xf800d6f0>
1000d7a0:	10800044 	addi	r2,r2,1
1000d7a4:	a8800015 	stw	r2,0(r21)
1000d7a8:	003f5106 	br	1000d4f0 <__alt_data_end+0xf800d4f0>
1000d7ac:	88800017 	ldw	r2,0(r17)
1000d7b0:	10bfffc4 	addi	r2,r2,-1
1000d7b4:	15c01426 	beq	r2,r23,1000d808 <__gethex+0x740>
1000d7b8:	04000884 	movi	r16,34
1000d7bc:	003f8606 	br	1000d5d8 <__alt_data_end+0xf800d5d8>
1000d7c0:	b1400117 	ldw	r5,4(r22)
1000d7c4:	d9000117 	ldw	r4,4(sp)
1000d7c8:	29400044 	addi	r5,r5,1
1000d7cc:	00087000 	call	10008700 <_Balloc>
1000d7d0:	b1800417 	ldw	r6,16(r22)
1000d7d4:	b1400304 	addi	r5,r22,12
1000d7d8:	11000304 	addi	r4,r2,12
1000d7dc:	31800084 	addi	r6,r6,2
1000d7e0:	318d883a 	add	r6,r6,r6
1000d7e4:	318d883a 	add	r6,r6,r6
1000d7e8:	102b883a 	mov	r21,r2
1000d7ec:	00083580 	call	10008358 <memcpy>
1000d7f0:	d9000117 	ldw	r4,4(sp)
1000d7f4:	b00b883a 	mov	r5,r22
1000d7f8:	a82d883a 	mov	r22,r21
1000d7fc:	00087a80 	call	100087a8 <_Bfree>
1000d800:	a8800417 	ldw	r2,16(r21)
1000d804:	003f3206 	br	1000d4d0 <__alt_data_end+0xf800d4d0>
1000d808:	b805d17a 	srai	r2,r23,5
1000d80c:	04000044 	movi	r16,1
1000d810:	bdc007cc 	andi	r23,r23,31
1000d814:	10800144 	addi	r2,r2,5
1000d818:	1085883a 	add	r2,r2,r2
1000d81c:	1085883a 	add	r2,r2,r2
1000d820:	b085883a 	add	r2,r22,r2
1000d824:	10800017 	ldw	r2,0(r2)
1000d828:	85e0983a 	sll	r16,r16,r23
1000d82c:	80a0703a 	and	r16,r16,r2
1000d830:	8020c03a 	cmpne	r16,r16,zero
1000d834:	00800884 	movi	r2,34
1000d838:	1421c83a 	sub	r16,r2,r16
1000d83c:	003f6606 	br	1000d5d8 <__alt_data_end+0xf800d5d8>

1000d840 <__hexnan>:
1000d840:	defff604 	addi	sp,sp,-40
1000d844:	dc000315 	stw	r16,12(sp)
1000d848:	04040074 	movhi	r16,4097
1000d84c:	8419f404 	addi	r16,r16,26576
1000d850:	80800c03 	ldbu	r2,48(r16)
1000d854:	dfc00915 	stw	ra,36(sp)
1000d858:	dd400815 	stw	r21,32(sp)
1000d85c:	dd000715 	stw	r20,28(sp)
1000d860:	dcc00615 	stw	r19,24(sp)
1000d864:	dc800515 	stw	r18,20(sp)
1000d868:	dc400415 	stw	r17,16(sp)
1000d86c:	10006c26 	beq	r2,zero,1000da20 <__hexnan+0x1e0>
1000d870:	2d000017 	ldw	r20,0(r5)
1000d874:	a025d17a 	srai	r18,r20,5
1000d878:	a50007cc 	andi	r20,r20,31
1000d87c:	94a5883a 	add	r18,r18,r18
1000d880:	94a5883a 	add	r18,r18,r18
1000d884:	34a5883a 	add	r18,r6,r18
1000d888:	a0000126 	beq	r20,zero,1000d890 <__hexnan+0x50>
1000d88c:	94800104 	addi	r18,r18,4
1000d890:	20c00017 	ldw	r3,0(r4)
1000d894:	903fff15 	stw	zero,-4(r18)
1000d898:	947fff04 	addi	r17,r18,-4
1000d89c:	18800043 	ldbu	r2,1(r3)
1000d8a0:	8817883a 	mov	r11,r17
1000d8a4:	880b883a 	mov	r5,r17
1000d8a8:	0011883a 	mov	r8,zero
1000d8ac:	001b883a 	mov	r13,zero
1000d8b0:	0015883a 	mov	r10,zero
1000d8b4:	03c00204 	movi	r15,8
1000d8b8:	03800804 	movi	r14,32
1000d8bc:	04c001c4 	movi	r19,7
1000d8c0:	10001b26 	beq	r2,zero,1000d930 <__hexnan+0xf0>
1000d8c4:	808f883a 	add	r7,r16,r2
1000d8c8:	39c00003 	ldbu	r7,0(r7)
1000d8cc:	3a403fcc 	andi	r9,r7,255
1000d8d0:	4800301e 	bne	r9,zero,1000d994 <__hexnan+0x154>
1000d8d4:	70804636 	bltu	r14,r2,1000d9f0 <__hexnan+0x1b0>
1000d8d8:	6a80120e 	bge	r13,r10,1000d924 <__hexnan+0xe4>
1000d8dc:	2ac00f2e 	bgeu	r5,r11,1000d91c <__hexnan+0xdc>
1000d8e0:	9a000e16 	blt	r19,r8,1000d91c <__hexnan+0xdc>
1000d8e4:	7a11c83a 	sub	r8,r15,r8
1000d8e8:	4211883a 	add	r8,r8,r8
1000d8ec:	29c00017 	ldw	r7,0(r5)
1000d8f0:	4211883a 	add	r8,r8,r8
1000d8f4:	722bc83a 	sub	r21,r14,r8
1000d8f8:	2805883a 	mov	r2,r5
1000d8fc:	12400117 	ldw	r9,4(r2)
1000d900:	10800104 	addi	r2,r2,4
1000d904:	4d58983a 	sll	r12,r9,r21
1000d908:	3b18b03a 	or	r12,r7,r12
1000d90c:	4a0ed83a 	srl	r7,r9,r8
1000d910:	133fff15 	stw	r12,-4(r2)
1000d914:	11c00015 	stw	r7,0(r2)
1000d918:	12fff836 	bltu	r2,r11,1000d8fc <__alt_data_end+0xf800d8fc>
1000d91c:	31402d36 	bltu	r6,r5,1000d9d4 <__hexnan+0x194>
1000d920:	02000204 	movi	r8,8
1000d924:	18c00044 	addi	r3,r3,1
1000d928:	18800043 	ldbu	r2,1(r3)
1000d92c:	103fe51e 	bne	r2,zero,1000d8c4 <__alt_data_end+0xf800d8c4>
1000d930:	50003126 	beq	r10,zero,1000d9f8 <__hexnan+0x1b8>
1000d934:	2ac0022e 	bgeu	r5,r11,1000d940 <__hexnan+0x100>
1000d938:	008001c4 	movi	r2,7
1000d93c:	1200520e 	bge	r2,r8,1000da88 <__hexnan+0x248>
1000d940:	31403f2e 	bgeu	r6,r5,1000da40 <__hexnan+0x200>
1000d944:	3005883a 	mov	r2,r6
1000d948:	28c00017 	ldw	r3,0(r5)
1000d94c:	10800104 	addi	r2,r2,4
1000d950:	29400104 	addi	r5,r5,4
1000d954:	10ffff15 	stw	r3,-4(r2)
1000d958:	897ffb2e 	bgeu	r17,r5,1000d948 <__alt_data_end+0xf800d948>
1000d95c:	10000015 	stw	zero,0(r2)
1000d960:	10800104 	addi	r2,r2,4
1000d964:	88bffd2e 	bgeu	r17,r2,1000d95c <__alt_data_end+0xf800d95c>
1000d968:	90bfff17 	ldw	r2,-4(r18)
1000d96c:	1000071e 	bne	r2,zero,1000d98c <__hexnan+0x14c>
1000d970:	34403c26 	beq	r6,r17,1000da64 <__hexnan+0x224>
1000d974:	8805883a 	mov	r2,r17
1000d978:	00000106 	br	1000d980 <__hexnan+0x140>
1000d97c:	30803a26 	beq	r6,r2,1000da68 <__hexnan+0x228>
1000d980:	10bfff04 	addi	r2,r2,-4
1000d984:	10c00017 	ldw	r3,0(r2)
1000d988:	183ffc26 	beq	r3,zero,1000d97c <__alt_data_end+0xf800d97c>
1000d98c:	00800144 	movi	r2,5
1000d990:	00001a06 	br	1000d9fc <__hexnan+0x1bc>
1000d994:	42000044 	addi	r8,r8,1
1000d998:	52800044 	addi	r10,r10,1
1000d99c:	7a000716 	blt	r15,r8,1000d9bc <__hexnan+0x17c>
1000d9a0:	28800017 	ldw	r2,0(r5)
1000d9a4:	1004913a 	slli	r2,r2,4
1000d9a8:	39c003cc 	andi	r7,r7,15
1000d9ac:	11ceb03a 	or	r7,r2,r7
1000d9b0:	29c00015 	stw	r7,0(r5)
1000d9b4:	18c00044 	addi	r3,r3,1
1000d9b8:	003fdb06 	br	1000d928 <__alt_data_end+0xf800d928>
1000d9bc:	317fd92e 	bgeu	r6,r5,1000d924 <__alt_data_end+0xf800d924>
1000d9c0:	283fff15 	stw	zero,-4(r5)
1000d9c4:	0005883a 	mov	r2,zero
1000d9c8:	297fff04 	addi	r5,r5,-4
1000d9cc:	02000044 	movi	r8,1
1000d9d0:	003ff506 	br	1000d9a8 <__alt_data_end+0xf800d9a8>
1000d9d4:	283fff15 	stw	zero,-4(r5)
1000d9d8:	297fff04 	addi	r5,r5,-4
1000d9dc:	501b883a 	mov	r13,r10
1000d9e0:	2817883a 	mov	r11,r5
1000d9e4:	0011883a 	mov	r8,zero
1000d9e8:	18c00044 	addi	r3,r3,1
1000d9ec:	003fce06 	br	1000d928 <__alt_data_end+0xf800d928>
1000d9f0:	01c00a44 	movi	r7,41
1000d9f4:	11c02026 	beq	r2,r7,1000da78 <__hexnan+0x238>
1000d9f8:	00800104 	movi	r2,4
1000d9fc:	dfc00917 	ldw	ra,36(sp)
1000da00:	dd400817 	ldw	r21,32(sp)
1000da04:	dd000717 	ldw	r20,28(sp)
1000da08:	dcc00617 	ldw	r19,24(sp)
1000da0c:	dc800517 	ldw	r18,20(sp)
1000da10:	dc400417 	ldw	r17,16(sp)
1000da14:	dc000317 	ldw	r16,12(sp)
1000da18:	dec00a04 	addi	sp,sp,40
1000da1c:	f800283a 	ret
1000da20:	d9000015 	stw	r4,0(sp)
1000da24:	d9400115 	stw	r5,4(sp)
1000da28:	d9800215 	stw	r6,8(sp)
1000da2c:	000d0380 	call	1000d038 <__hexdig_init>
1000da30:	d9800217 	ldw	r6,8(sp)
1000da34:	d9400117 	ldw	r5,4(sp)
1000da38:	d9000017 	ldw	r4,0(sp)
1000da3c:	003f8c06 	br	1000d870 <__alt_data_end+0xf800d870>
1000da40:	a03fc926 	beq	r20,zero,1000d968 <__alt_data_end+0xf800d968>
1000da44:	00800804 	movi	r2,32
1000da48:	1529c83a 	sub	r20,r2,r20
1000da4c:	00ffffc4 	movi	r3,-1
1000da50:	90bfff17 	ldw	r2,-4(r18)
1000da54:	1d06d83a 	srl	r3,r3,r20
1000da58:	1884703a 	and	r2,r3,r2
1000da5c:	90bfff15 	stw	r2,-4(r18)
1000da60:	003fc206 	br	1000d96c <__alt_data_end+0xf800d96c>
1000da64:	3005883a 	mov	r2,r6
1000da68:	00c00044 	movi	r3,1
1000da6c:	10c00015 	stw	r3,0(r2)
1000da70:	00800144 	movi	r2,5
1000da74:	003fe106 	br	1000d9fc <__alt_data_end+0xf800d9fc>
1000da78:	503fdf26 	beq	r10,zero,1000d9f8 <__alt_data_end+0xf800d9f8>
1000da7c:	18c00084 	addi	r3,r3,2
1000da80:	20c00015 	stw	r3,0(r4)
1000da84:	003fab06 	br	1000d934 <__alt_data_end+0xf800d934>
1000da88:	00800204 	movi	r2,8
1000da8c:	1211c83a 	sub	r8,r2,r8
1000da90:	4211883a 	add	r8,r8,r8
1000da94:	28c00017 	ldw	r3,0(r5)
1000da98:	4211883a 	add	r8,r8,r8
1000da9c:	02400804 	movi	r9,32
1000daa0:	4a13c83a 	sub	r9,r9,r8
1000daa4:	2805883a 	mov	r2,r5
1000daa8:	11000117 	ldw	r4,4(r2)
1000daac:	10800104 	addi	r2,r2,4
1000dab0:	224e983a 	sll	r7,r4,r9
1000dab4:	19ceb03a 	or	r7,r3,r7
1000dab8:	2206d83a 	srl	r3,r4,r8
1000dabc:	11ffff15 	stw	r7,-4(r2)
1000dac0:	10c00015 	stw	r3,0(r2)
1000dac4:	12fff836 	bltu	r2,r11,1000daa8 <__alt_data_end+0xf800daa8>
1000dac8:	003f9d06 	br	1000d940 <__alt_data_end+0xf800d940>

1000dacc <_isatty_r>:
1000dacc:	defffd04 	addi	sp,sp,-12
1000dad0:	dc400115 	stw	r17,4(sp)
1000dad4:	dc000015 	stw	r16,0(sp)
1000dad8:	2023883a 	mov	r17,r4
1000dadc:	04040074 	movhi	r16,4097
1000dae0:	8419e304 	addi	r16,r16,26508
1000dae4:	2809883a 	mov	r4,r5
1000dae8:	dfc00215 	stw	ra,8(sp)
1000daec:	80000015 	stw	zero,0(r16)
1000daf0:	00103a40 	call	100103a4 <isatty>
1000daf4:	00ffffc4 	movi	r3,-1
1000daf8:	10c00526 	beq	r2,r3,1000db10 <_isatty_r+0x44>
1000dafc:	dfc00217 	ldw	ra,8(sp)
1000db00:	dc400117 	ldw	r17,4(sp)
1000db04:	dc000017 	ldw	r16,0(sp)
1000db08:	dec00304 	addi	sp,sp,12
1000db0c:	f800283a 	ret
1000db10:	80c00017 	ldw	r3,0(r16)
1000db14:	183ff926 	beq	r3,zero,1000dafc <__alt_data_end+0xf800dafc>
1000db18:	88c00015 	stw	r3,0(r17)
1000db1c:	dfc00217 	ldw	ra,8(sp)
1000db20:	dc400117 	ldw	r17,4(sp)
1000db24:	dc000017 	ldw	r16,0(sp)
1000db28:	dec00304 	addi	sp,sp,12
1000db2c:	f800283a 	ret

1000db30 <_lseek_r>:
1000db30:	defffd04 	addi	sp,sp,-12
1000db34:	dc400115 	stw	r17,4(sp)
1000db38:	dc000015 	stw	r16,0(sp)
1000db3c:	2023883a 	mov	r17,r4
1000db40:	04040074 	movhi	r16,4097
1000db44:	8419e304 	addi	r16,r16,26508
1000db48:	2809883a 	mov	r4,r5
1000db4c:	300b883a 	mov	r5,r6
1000db50:	380d883a 	mov	r6,r7
1000db54:	dfc00215 	stw	ra,8(sp)
1000db58:	80000015 	stw	zero,0(r16)
1000db5c:	00105840 	call	10010584 <lseek>
1000db60:	00ffffc4 	movi	r3,-1
1000db64:	10c00526 	beq	r2,r3,1000db7c <_lseek_r+0x4c>
1000db68:	dfc00217 	ldw	ra,8(sp)
1000db6c:	dc400117 	ldw	r17,4(sp)
1000db70:	dc000017 	ldw	r16,0(sp)
1000db74:	dec00304 	addi	sp,sp,12
1000db78:	f800283a 	ret
1000db7c:	80c00017 	ldw	r3,0(r16)
1000db80:	183ff926 	beq	r3,zero,1000db68 <__alt_data_end+0xf800db68>
1000db84:	88c00015 	stw	r3,0(r17)
1000db88:	dfc00217 	ldw	ra,8(sp)
1000db8c:	dc400117 	ldw	r17,4(sp)
1000db90:	dc000017 	ldw	r16,0(sp)
1000db94:	dec00304 	addi	sp,sp,12
1000db98:	f800283a 	ret

1000db9c <_read_r>:
1000db9c:	defffd04 	addi	sp,sp,-12
1000dba0:	dc400115 	stw	r17,4(sp)
1000dba4:	dc000015 	stw	r16,0(sp)
1000dba8:	2023883a 	mov	r17,r4
1000dbac:	04040074 	movhi	r16,4097
1000dbb0:	8419e304 	addi	r16,r16,26508
1000dbb4:	2809883a 	mov	r4,r5
1000dbb8:	300b883a 	mov	r5,r6
1000dbbc:	380d883a 	mov	r6,r7
1000dbc0:	dfc00215 	stw	ra,8(sp)
1000dbc4:	80000015 	stw	zero,0(r16)
1000dbc8:	00107600 	call	10010760 <read>
1000dbcc:	00ffffc4 	movi	r3,-1
1000dbd0:	10c00526 	beq	r2,r3,1000dbe8 <_read_r+0x4c>
1000dbd4:	dfc00217 	ldw	ra,8(sp)
1000dbd8:	dc400117 	ldw	r17,4(sp)
1000dbdc:	dc000017 	ldw	r16,0(sp)
1000dbe0:	dec00304 	addi	sp,sp,12
1000dbe4:	f800283a 	ret
1000dbe8:	80c00017 	ldw	r3,0(r16)
1000dbec:	183ff926 	beq	r3,zero,1000dbd4 <__alt_data_end+0xf800dbd4>
1000dbf0:	88c00015 	stw	r3,0(r17)
1000dbf4:	dfc00217 	ldw	ra,8(sp)
1000dbf8:	dc400117 	ldw	r17,4(sp)
1000dbfc:	dc000017 	ldw	r16,0(sp)
1000dc00:	dec00304 	addi	sp,sp,12
1000dc04:	f800283a 	ret

1000dc08 <__muldi3>:
1000dc08:	defff604 	addi	sp,sp,-40
1000dc0c:	dd400515 	stw	r21,20(sp)
1000dc10:	dd000415 	stw	r20,16(sp)
1000dc14:	257fffcc 	andi	r21,r4,65535
1000dc18:	353fffcc 	andi	r20,r6,65535
1000dc1c:	dcc00315 	stw	r19,12(sp)
1000dc20:	3026d43a 	srli	r19,r6,16
1000dc24:	dd800615 	stw	r22,24(sp)
1000dc28:	dc800215 	stw	r18,8(sp)
1000dc2c:	dc400115 	stw	r17,4(sp)
1000dc30:	2024d43a 	srli	r18,r4,16
1000dc34:	2023883a 	mov	r17,r4
1000dc38:	282d883a 	mov	r22,r5
1000dc3c:	a009883a 	mov	r4,r20
1000dc40:	a80b883a 	mov	r5,r21
1000dc44:	dfc00915 	stw	ra,36(sp)
1000dc48:	df000815 	stw	fp,32(sp)
1000dc4c:	ddc00715 	stw	r23,28(sp)
1000dc50:	3839883a 	mov	fp,r7
1000dc54:	dc000015 	stw	r16,0(sp)
1000dc58:	3021883a 	mov	r16,r6
1000dc5c:	00012fc0 	call	100012fc <__mulsi3>
1000dc60:	a80b883a 	mov	r5,r21
1000dc64:	9809883a 	mov	r4,r19
1000dc68:	102f883a 	mov	r23,r2
1000dc6c:	00012fc0 	call	100012fc <__mulsi3>
1000dc70:	a009883a 	mov	r4,r20
1000dc74:	900b883a 	mov	r5,r18
1000dc78:	102b883a 	mov	r21,r2
1000dc7c:	00012fc0 	call	100012fc <__mulsi3>
1000dc80:	9809883a 	mov	r4,r19
1000dc84:	900b883a 	mov	r5,r18
1000dc88:	1029883a 	mov	r20,r2
1000dc8c:	00012fc0 	call	100012fc <__mulsi3>
1000dc90:	1007883a 	mov	r3,r2
1000dc94:	b804d43a 	srli	r2,r23,16
1000dc98:	a549883a 	add	r4,r20,r21
1000dc9c:	2089883a 	add	r4,r4,r2
1000dca0:	2500022e 	bgeu	r4,r20,1000dcac <__muldi3+0xa4>
1000dca4:	00800074 	movhi	r2,1
1000dca8:	1887883a 	add	r3,r3,r2
1000dcac:	200cd43a 	srli	r6,r4,16
1000dcb0:	2004943a 	slli	r2,r4,16
1000dcb4:	e00b883a 	mov	r5,fp
1000dcb8:	8809883a 	mov	r4,r17
1000dcbc:	bdffffcc 	andi	r23,r23,65535
1000dcc0:	19a3883a 	add	r17,r3,r6
1000dcc4:	15ef883a 	add	r23,r2,r23
1000dcc8:	00012fc0 	call	100012fc <__mulsi3>
1000dccc:	8009883a 	mov	r4,r16
1000dcd0:	b00b883a 	mov	r5,r22
1000dcd4:	1025883a 	mov	r18,r2
1000dcd8:	00012fc0 	call	100012fc <__mulsi3>
1000dcdc:	9085883a 	add	r2,r18,r2
1000dce0:	1447883a 	add	r3,r2,r17
1000dce4:	b805883a 	mov	r2,r23
1000dce8:	dfc00917 	ldw	ra,36(sp)
1000dcec:	df000817 	ldw	fp,32(sp)
1000dcf0:	ddc00717 	ldw	r23,28(sp)
1000dcf4:	dd800617 	ldw	r22,24(sp)
1000dcf8:	dd400517 	ldw	r21,20(sp)
1000dcfc:	dd000417 	ldw	r20,16(sp)
1000dd00:	dcc00317 	ldw	r19,12(sp)
1000dd04:	dc800217 	ldw	r18,8(sp)
1000dd08:	dc400117 	ldw	r17,4(sp)
1000dd0c:	dc000017 	ldw	r16,0(sp)
1000dd10:	dec00a04 	addi	sp,sp,40
1000dd14:	f800283a 	ret

1000dd18 <__fixunsdfsi>:
1000dd18:	defffd04 	addi	sp,sp,-12
1000dd1c:	000d883a 	mov	r6,zero
1000dd20:	01d07834 	movhi	r7,16864
1000dd24:	dc400115 	stw	r17,4(sp)
1000dd28:	dc000015 	stw	r16,0(sp)
1000dd2c:	dfc00215 	stw	ra,8(sp)
1000dd30:	2023883a 	mov	r17,r4
1000dd34:	2821883a 	mov	r16,r5
1000dd38:	000f4d40 	call	1000f4d4 <__gedf2>
1000dd3c:	1000080e 	bge	r2,zero,1000dd60 <__fixunsdfsi+0x48>
1000dd40:	8809883a 	mov	r4,r17
1000dd44:	800b883a 	mov	r5,r16
1000dd48:	000f6c40 	call	1000f6c4 <__fixdfsi>
1000dd4c:	dfc00217 	ldw	ra,8(sp)
1000dd50:	dc400117 	ldw	r17,4(sp)
1000dd54:	dc000017 	ldw	r16,0(sp)
1000dd58:	dec00304 	addi	sp,sp,12
1000dd5c:	f800283a 	ret
1000dd60:	000d883a 	mov	r6,zero
1000dd64:	01d07834 	movhi	r7,16864
1000dd68:	8809883a 	mov	r4,r17
1000dd6c:	800b883a 	mov	r5,r16
1000dd70:	000eec00 	call	1000eec0 <__subdf3>
1000dd74:	180b883a 	mov	r5,r3
1000dd78:	1009883a 	mov	r4,r2
1000dd7c:	000f6c40 	call	1000f6c4 <__fixdfsi>
1000dd80:	00e00034 	movhi	r3,32768
1000dd84:	10c5883a 	add	r2,r2,r3
1000dd88:	dfc00217 	ldw	ra,8(sp)
1000dd8c:	dc400117 	ldw	r17,4(sp)
1000dd90:	dc000017 	ldw	r16,0(sp)
1000dd94:	dec00304 	addi	sp,sp,12
1000dd98:	f800283a 	ret

1000dd9c <__udivdi3>:
1000dd9c:	defff504 	addi	sp,sp,-44
1000dda0:	dd000515 	stw	r20,20(sp)
1000dda4:	dcc00415 	stw	r19,16(sp)
1000dda8:	dc800315 	stw	r18,12(sp)
1000ddac:	dc400215 	stw	r17,8(sp)
1000ddb0:	dc000115 	stw	r16,4(sp)
1000ddb4:	dfc00a15 	stw	ra,40(sp)
1000ddb8:	df000915 	stw	fp,36(sp)
1000ddbc:	ddc00815 	stw	r23,32(sp)
1000ddc0:	dd800715 	stw	r22,28(sp)
1000ddc4:	dd400615 	stw	r21,24(sp)
1000ddc8:	2025883a 	mov	r18,r4
1000ddcc:	2823883a 	mov	r17,r5
1000ddd0:	3021883a 	mov	r16,r6
1000ddd4:	2027883a 	mov	r19,r4
1000ddd8:	2829883a 	mov	r20,r5
1000dddc:	3800451e 	bne	r7,zero,1000def4 <__udivdi3+0x158>
1000dde0:	2980652e 	bgeu	r5,r6,1000df78 <__udivdi3+0x1dc>
1000dde4:	00bfffd4 	movui	r2,65535
1000dde8:	1180b436 	bltu	r2,r6,1000e0bc <__udivdi3+0x320>
1000ddec:	00803fc4 	movi	r2,255
1000ddf0:	11816636 	bltu	r2,r6,1000e38c <__udivdi3+0x5f0>
1000ddf4:	0005883a 	mov	r2,zero
1000ddf8:	0007883a 	mov	r3,zero
1000ddfc:	3084d83a 	srl	r2,r6,r2
1000de00:	01040074 	movhi	r4,4097
1000de04:	210b3a04 	addi	r4,r4,11496
1000de08:	2085883a 	add	r2,r4,r2
1000de0c:	10800003 	ldbu	r2,0(r2)
1000de10:	10c7883a 	add	r3,r2,r3
1000de14:	00800804 	movi	r2,32
1000de18:	10c5c83a 	sub	r2,r2,r3
1000de1c:	10000526 	beq	r2,zero,1000de34 <__udivdi3+0x98>
1000de20:	88a2983a 	sll	r17,r17,r2
1000de24:	90c6d83a 	srl	r3,r18,r3
1000de28:	30a0983a 	sll	r16,r6,r2
1000de2c:	90a6983a 	sll	r19,r18,r2
1000de30:	88e8b03a 	or	r20,r17,r3
1000de34:	8022d43a 	srli	r17,r16,16
1000de38:	a009883a 	mov	r4,r20
1000de3c:	857fffcc 	andi	r21,r16,65535
1000de40:	880b883a 	mov	r5,r17
1000de44:	00012f40 	call	100012f4 <__umodsi3>
1000de48:	a009883a 	mov	r4,r20
1000de4c:	880b883a 	mov	r5,r17
1000de50:	102d883a 	mov	r22,r2
1000de54:	00012ec0 	call	100012ec <__udivsi3>
1000de58:	1009883a 	mov	r4,r2
1000de5c:	a80b883a 	mov	r5,r21
1000de60:	1025883a 	mov	r18,r2
1000de64:	00012fc0 	call	100012fc <__mulsi3>
1000de68:	1009883a 	mov	r4,r2
1000de6c:	b006943a 	slli	r3,r22,16
1000de70:	9804d43a 	srli	r2,r19,16
1000de74:	1886b03a 	or	r3,r3,r2
1000de78:	1900052e 	bgeu	r3,r4,1000de90 <__udivdi3+0xf4>
1000de7c:	1c07883a 	add	r3,r3,r16
1000de80:	90bfffc4 	addi	r2,r18,-1
1000de84:	1c000136 	bltu	r3,r16,1000de8c <__udivdi3+0xf0>
1000de88:	19015536 	bltu	r3,r4,1000e3e0 <__udivdi3+0x644>
1000de8c:	1025883a 	mov	r18,r2
1000de90:	1929c83a 	sub	r20,r3,r4
1000de94:	880b883a 	mov	r5,r17
1000de98:	a009883a 	mov	r4,r20
1000de9c:	00012f40 	call	100012f4 <__umodsi3>
1000dea0:	102d883a 	mov	r22,r2
1000dea4:	880b883a 	mov	r5,r17
1000dea8:	a009883a 	mov	r4,r20
1000deac:	b02c943a 	slli	r22,r22,16
1000deb0:	00012ec0 	call	100012ec <__udivsi3>
1000deb4:	1009883a 	mov	r4,r2
1000deb8:	a80b883a 	mov	r5,r21
1000debc:	9cffffcc 	andi	r19,r19,65535
1000dec0:	1023883a 	mov	r17,r2
1000dec4:	b4e6b03a 	or	r19,r22,r19
1000dec8:	00012fc0 	call	100012fc <__mulsi3>
1000decc:	9880052e 	bgeu	r19,r2,1000dee4 <__udivdi3+0x148>
1000ded0:	9c27883a 	add	r19,r19,r16
1000ded4:	88ffffc4 	addi	r3,r17,-1
1000ded8:	9c011436 	bltu	r19,r16,1000e32c <__udivdi3+0x590>
1000dedc:	9881132e 	bgeu	r19,r2,1000e32c <__udivdi3+0x590>
1000dee0:	8c7fff84 	addi	r17,r17,-2
1000dee4:	9004943a 	slli	r2,r18,16
1000dee8:	0007883a 	mov	r3,zero
1000deec:	8884b03a 	or	r2,r17,r2
1000def0:	00001506 	br	1000df48 <__udivdi3+0x1ac>
1000def4:	29c06a36 	bltu	r5,r7,1000e0a0 <__udivdi3+0x304>
1000def8:	00bfffd4 	movui	r2,65535
1000defc:	11c06a2e 	bgeu	r2,r7,1000e0a8 <__udivdi3+0x30c>
1000df00:	00804034 	movhi	r2,256
1000df04:	10bfffc4 	addi	r2,r2,-1
1000df08:	11c11436 	bltu	r2,r7,1000e35c <__udivdi3+0x5c0>
1000df0c:	00c00404 	movi	r3,16
1000df10:	180b883a 	mov	r5,r3
1000df14:	38c6d83a 	srl	r3,r7,r3
1000df18:	01040074 	movhi	r4,4097
1000df1c:	210b3a04 	addi	r4,r4,11496
1000df20:	04000804 	movi	r16,32
1000df24:	20c7883a 	add	r3,r4,r3
1000df28:	18800003 	ldbu	r2,0(r3)
1000df2c:	1145883a 	add	r2,r2,r5
1000df30:	80a1c83a 	sub	r16,r16,r2
1000df34:	80006e1e 	bne	r16,zero,1000e0f0 <__udivdi3+0x354>
1000df38:	0007883a 	mov	r3,zero
1000df3c:	3c406a36 	bltu	r7,r17,1000e0e8 <__udivdi3+0x34c>
1000df40:	9180692e 	bgeu	r18,r6,1000e0e8 <__udivdi3+0x34c>
1000df44:	0005883a 	mov	r2,zero
1000df48:	dfc00a17 	ldw	ra,40(sp)
1000df4c:	df000917 	ldw	fp,36(sp)
1000df50:	ddc00817 	ldw	r23,32(sp)
1000df54:	dd800717 	ldw	r22,28(sp)
1000df58:	dd400617 	ldw	r21,24(sp)
1000df5c:	dd000517 	ldw	r20,20(sp)
1000df60:	dcc00417 	ldw	r19,16(sp)
1000df64:	dc800317 	ldw	r18,12(sp)
1000df68:	dc400217 	ldw	r17,8(sp)
1000df6c:	dc000117 	ldw	r16,4(sp)
1000df70:	dec00b04 	addi	sp,sp,44
1000df74:	f800283a 	ret
1000df78:	3000041e 	bne	r6,zero,1000df8c <__udivdi3+0x1f0>
1000df7c:	01000044 	movi	r4,1
1000df80:	000b883a 	mov	r5,zero
1000df84:	00012ec0 	call	100012ec <__udivsi3>
1000df88:	1021883a 	mov	r16,r2
1000df8c:	00bfffd4 	movui	r2,65535
1000df90:	1400502e 	bgeu	r2,r16,1000e0d4 <__udivdi3+0x338>
1000df94:	00804034 	movhi	r2,256
1000df98:	10bfffc4 	addi	r2,r2,-1
1000df9c:	1400f536 	bltu	r2,r16,1000e374 <__udivdi3+0x5d8>
1000dfa0:	00800404 	movi	r2,16
1000dfa4:	1007883a 	mov	r3,r2
1000dfa8:	8084d83a 	srl	r2,r16,r2
1000dfac:	01040074 	movhi	r4,4097
1000dfb0:	210b3a04 	addi	r4,r4,11496
1000dfb4:	2085883a 	add	r2,r4,r2
1000dfb8:	10800003 	ldbu	r2,0(r2)
1000dfbc:	10c7883a 	add	r3,r2,r3
1000dfc0:	00800804 	movi	r2,32
1000dfc4:	10c5c83a 	sub	r2,r2,r3
1000dfc8:	1000a01e 	bne	r2,zero,1000e24c <__udivdi3+0x4b0>
1000dfcc:	8028d43a 	srli	r20,r16,16
1000dfd0:	8c23c83a 	sub	r17,r17,r16
1000dfd4:	857fffcc 	andi	r21,r16,65535
1000dfd8:	00c00044 	movi	r3,1
1000dfdc:	8809883a 	mov	r4,r17
1000dfe0:	a00b883a 	mov	r5,r20
1000dfe4:	d8c00015 	stw	r3,0(sp)
1000dfe8:	00012f40 	call	100012f4 <__umodsi3>
1000dfec:	8809883a 	mov	r4,r17
1000dff0:	a00b883a 	mov	r5,r20
1000dff4:	102d883a 	mov	r22,r2
1000dff8:	00012ec0 	call	100012ec <__udivsi3>
1000dffc:	1009883a 	mov	r4,r2
1000e000:	a80b883a 	mov	r5,r21
1000e004:	1025883a 	mov	r18,r2
1000e008:	00012fc0 	call	100012fc <__mulsi3>
1000e00c:	1009883a 	mov	r4,r2
1000e010:	b00c943a 	slli	r6,r22,16
1000e014:	9804d43a 	srli	r2,r19,16
1000e018:	d8c00017 	ldw	r3,0(sp)
1000e01c:	308cb03a 	or	r6,r6,r2
1000e020:	3100052e 	bgeu	r6,r4,1000e038 <__udivdi3+0x29c>
1000e024:	340d883a 	add	r6,r6,r16
1000e028:	90bfffc4 	addi	r2,r18,-1
1000e02c:	34000136 	bltu	r6,r16,1000e034 <__udivdi3+0x298>
1000e030:	3100e836 	bltu	r6,r4,1000e3d4 <__udivdi3+0x638>
1000e034:	1025883a 	mov	r18,r2
1000e038:	3123c83a 	sub	r17,r6,r4
1000e03c:	8809883a 	mov	r4,r17
1000e040:	a00b883a 	mov	r5,r20
1000e044:	d8c00015 	stw	r3,0(sp)
1000e048:	00012f40 	call	100012f4 <__umodsi3>
1000e04c:	102d883a 	mov	r22,r2
1000e050:	8809883a 	mov	r4,r17
1000e054:	a00b883a 	mov	r5,r20
1000e058:	b02c943a 	slli	r22,r22,16
1000e05c:	00012ec0 	call	100012ec <__udivsi3>
1000e060:	1009883a 	mov	r4,r2
1000e064:	a80b883a 	mov	r5,r21
1000e068:	9cffffcc 	andi	r19,r19,65535
1000e06c:	1023883a 	mov	r17,r2
1000e070:	b4e6b03a 	or	r19,r22,r19
1000e074:	00012fc0 	call	100012fc <__mulsi3>
1000e078:	d8c00017 	ldw	r3,0(sp)
1000e07c:	9880052e 	bgeu	r19,r2,1000e094 <__udivdi3+0x2f8>
1000e080:	9c27883a 	add	r19,r19,r16
1000e084:	893fffc4 	addi	r4,r17,-1
1000e088:	9c00aa36 	bltu	r19,r16,1000e334 <__udivdi3+0x598>
1000e08c:	9880a92e 	bgeu	r19,r2,1000e334 <__udivdi3+0x598>
1000e090:	8c7fff84 	addi	r17,r17,-2
1000e094:	9004943a 	slli	r2,r18,16
1000e098:	8884b03a 	or	r2,r17,r2
1000e09c:	003faa06 	br	1000df48 <__alt_data_end+0xf800df48>
1000e0a0:	0007883a 	mov	r3,zero
1000e0a4:	003fa706 	br	1000df44 <__alt_data_end+0xf800df44>
1000e0a8:	00803fc4 	movi	r2,255
1000e0ac:	11c0ae36 	bltu	r2,r7,1000e368 <__udivdi3+0x5cc>
1000e0b0:	0007883a 	mov	r3,zero
1000e0b4:	000b883a 	mov	r5,zero
1000e0b8:	003f9606 	br	1000df14 <__alt_data_end+0xf800df14>
1000e0bc:	00804034 	movhi	r2,256
1000e0c0:	10bfffc4 	addi	r2,r2,-1
1000e0c4:	1180ae36 	bltu	r2,r6,1000e380 <__udivdi3+0x5e4>
1000e0c8:	00800404 	movi	r2,16
1000e0cc:	1007883a 	mov	r3,r2
1000e0d0:	003f4a06 	br	1000ddfc <__alt_data_end+0xf800ddfc>
1000e0d4:	00803fc4 	movi	r2,255
1000e0d8:	1400af36 	bltu	r2,r16,1000e398 <__udivdi3+0x5fc>
1000e0dc:	0005883a 	mov	r2,zero
1000e0e0:	0007883a 	mov	r3,zero
1000e0e4:	003fb006 	br	1000dfa8 <__alt_data_end+0xf800dfa8>
1000e0e8:	00800044 	movi	r2,1
1000e0ec:	003f9606 	br	1000df48 <__alt_data_end+0xf800df48>
1000e0f0:	3c0e983a 	sll	r7,r7,r16
1000e0f4:	3086d83a 	srl	r3,r6,r2
1000e0f8:	88aed83a 	srl	r23,r17,r2
1000e0fc:	9084d83a 	srl	r2,r18,r2
1000e100:	38e6b03a 	or	r19,r7,r3
1000e104:	9828d43a 	srli	r20,r19,16
1000e108:	8c22983a 	sll	r17,r17,r16
1000e10c:	b809883a 	mov	r4,r23
1000e110:	a00b883a 	mov	r5,r20
1000e114:	342a983a 	sll	r21,r6,r16
1000e118:	88a2b03a 	or	r17,r17,r2
1000e11c:	00012f40 	call	100012f4 <__umodsi3>
1000e120:	b809883a 	mov	r4,r23
1000e124:	a00b883a 	mov	r5,r20
1000e128:	1039883a 	mov	fp,r2
1000e12c:	9dbfffcc 	andi	r22,r19,65535
1000e130:	00012ec0 	call	100012ec <__udivsi3>
1000e134:	1009883a 	mov	r4,r2
1000e138:	b00b883a 	mov	r5,r22
1000e13c:	102f883a 	mov	r23,r2
1000e140:	00012fc0 	call	100012fc <__mulsi3>
1000e144:	1009883a 	mov	r4,r2
1000e148:	e00e943a 	slli	r7,fp,16
1000e14c:	8804d43a 	srli	r2,r17,16
1000e150:	388eb03a 	or	r7,r7,r2
1000e154:	3900042e 	bgeu	r7,r4,1000e168 <__udivdi3+0x3cc>
1000e158:	3ccf883a 	add	r7,r7,r19
1000e15c:	b8bfffc4 	addi	r2,r23,-1
1000e160:	3cc0942e 	bgeu	r7,r19,1000e3b4 <__udivdi3+0x618>
1000e164:	102f883a 	mov	r23,r2
1000e168:	3939c83a 	sub	fp,r7,r4
1000e16c:	a00b883a 	mov	r5,r20
1000e170:	e009883a 	mov	r4,fp
1000e174:	00012f40 	call	100012f4 <__umodsi3>
1000e178:	a00b883a 	mov	r5,r20
1000e17c:	e009883a 	mov	r4,fp
1000e180:	d8800015 	stw	r2,0(sp)
1000e184:	00012ec0 	call	100012ec <__udivsi3>
1000e188:	1009883a 	mov	r4,r2
1000e18c:	b00b883a 	mov	r5,r22
1000e190:	1029883a 	mov	r20,r2
1000e194:	00012fc0 	call	100012fc <__mulsi3>
1000e198:	d8c00017 	ldw	r3,0(sp)
1000e19c:	8c7fffcc 	andi	r17,r17,65535
1000e1a0:	1806943a 	slli	r3,r3,16
1000e1a4:	1c46b03a 	or	r3,r3,r17
1000e1a8:	1880042e 	bgeu	r3,r2,1000e1bc <__udivdi3+0x420>
1000e1ac:	1cc7883a 	add	r3,r3,r19
1000e1b0:	a13fffc4 	addi	r4,r20,-1
1000e1b4:	1cc07b2e 	bgeu	r3,r19,1000e3a4 <__udivdi3+0x608>
1000e1b8:	2029883a 	mov	r20,r4
1000e1bc:	b82e943a 	slli	r23,r23,16
1000e1c0:	a822d43a 	srli	r17,r21,16
1000e1c4:	ad7fffcc 	andi	r21,r21,65535
1000e1c8:	a5e8b03a 	or	r20,r20,r23
1000e1cc:	a5bfffcc 	andi	r22,r20,65535
1000e1d0:	b009883a 	mov	r4,r22
1000e1d4:	a80b883a 	mov	r5,r21
1000e1d8:	18afc83a 	sub	r23,r3,r2
1000e1dc:	a026d43a 	srli	r19,r20,16
1000e1e0:	00012fc0 	call	100012fc <__mulsi3>
1000e1e4:	b009883a 	mov	r4,r22
1000e1e8:	880b883a 	mov	r5,r17
1000e1ec:	1039883a 	mov	fp,r2
1000e1f0:	00012fc0 	call	100012fc <__mulsi3>
1000e1f4:	a80b883a 	mov	r5,r21
1000e1f8:	9809883a 	mov	r4,r19
1000e1fc:	102d883a 	mov	r22,r2
1000e200:	00012fc0 	call	100012fc <__mulsi3>
1000e204:	9809883a 	mov	r4,r19
1000e208:	880b883a 	mov	r5,r17
1000e20c:	102b883a 	mov	r21,r2
1000e210:	00012fc0 	call	100012fc <__mulsi3>
1000e214:	100b883a 	mov	r5,r2
1000e218:	e004d43a 	srli	r2,fp,16
1000e21c:	ad89883a 	add	r4,r21,r22
1000e220:	2089883a 	add	r4,r4,r2
1000e224:	2540022e 	bgeu	r4,r21,1000e230 <__udivdi3+0x494>
1000e228:	00800074 	movhi	r2,1
1000e22c:	288b883a 	add	r5,r5,r2
1000e230:	2004d43a 	srli	r2,r4,16
1000e234:	288b883a 	add	r5,r5,r2
1000e238:	b9404536 	bltu	r23,r5,1000e350 <__udivdi3+0x5b4>
1000e23c:	b9403f26 	beq	r23,r5,1000e33c <__udivdi3+0x5a0>
1000e240:	a005883a 	mov	r2,r20
1000e244:	0007883a 	mov	r3,zero
1000e248:	003f3f06 	br	1000df48 <__alt_data_end+0xf800df48>
1000e24c:	80a0983a 	sll	r16,r16,r2
1000e250:	88eed83a 	srl	r23,r17,r3
1000e254:	90c6d83a 	srl	r3,r18,r3
1000e258:	8028d43a 	srli	r20,r16,16
1000e25c:	88a2983a 	sll	r17,r17,r2
1000e260:	b809883a 	mov	r4,r23
1000e264:	a00b883a 	mov	r5,r20
1000e268:	88ecb03a 	or	r22,r17,r3
1000e26c:	90a6983a 	sll	r19,r18,r2
1000e270:	00012f40 	call	100012f4 <__umodsi3>
1000e274:	b809883a 	mov	r4,r23
1000e278:	a00b883a 	mov	r5,r20
1000e27c:	1023883a 	mov	r17,r2
1000e280:	857fffcc 	andi	r21,r16,65535
1000e284:	00012ec0 	call	100012ec <__udivsi3>
1000e288:	1009883a 	mov	r4,r2
1000e28c:	a80b883a 	mov	r5,r21
1000e290:	102f883a 	mov	r23,r2
1000e294:	00012fc0 	call	100012fc <__mulsi3>
1000e298:	1009883a 	mov	r4,r2
1000e29c:	880a943a 	slli	r5,r17,16
1000e2a0:	b004d43a 	srli	r2,r22,16
1000e2a4:	288ab03a 	or	r5,r5,r2
1000e2a8:	2900062e 	bgeu	r5,r4,1000e2c4 <__udivdi3+0x528>
1000e2ac:	2c0b883a 	add	r5,r5,r16
1000e2b0:	b8bfffc4 	addi	r2,r23,-1
1000e2b4:	2c004536 	bltu	r5,r16,1000e3cc <__udivdi3+0x630>
1000e2b8:	2900442e 	bgeu	r5,r4,1000e3cc <__udivdi3+0x630>
1000e2bc:	bdffff84 	addi	r23,r23,-2
1000e2c0:	2c0b883a 	add	r5,r5,r16
1000e2c4:	2925c83a 	sub	r18,r5,r4
1000e2c8:	9009883a 	mov	r4,r18
1000e2cc:	a00b883a 	mov	r5,r20
1000e2d0:	00012f40 	call	100012f4 <__umodsi3>
1000e2d4:	1023883a 	mov	r17,r2
1000e2d8:	9009883a 	mov	r4,r18
1000e2dc:	a00b883a 	mov	r5,r20
1000e2e0:	8822943a 	slli	r17,r17,16
1000e2e4:	00012ec0 	call	100012ec <__udivsi3>
1000e2e8:	1009883a 	mov	r4,r2
1000e2ec:	a80b883a 	mov	r5,r21
1000e2f0:	b5bfffcc 	andi	r22,r22,65535
1000e2f4:	1025883a 	mov	r18,r2
1000e2f8:	8da2b03a 	or	r17,r17,r22
1000e2fc:	00012fc0 	call	100012fc <__mulsi3>
1000e300:	8880062e 	bgeu	r17,r2,1000e31c <__udivdi3+0x580>
1000e304:	8c23883a 	add	r17,r17,r16
1000e308:	90ffffc4 	addi	r3,r18,-1
1000e30c:	8c002d36 	bltu	r17,r16,1000e3c4 <__udivdi3+0x628>
1000e310:	88802c2e 	bgeu	r17,r2,1000e3c4 <__udivdi3+0x628>
1000e314:	94bfff84 	addi	r18,r18,-2
1000e318:	8c23883a 	add	r17,r17,r16
1000e31c:	b806943a 	slli	r3,r23,16
1000e320:	88a3c83a 	sub	r17,r17,r2
1000e324:	90c6b03a 	or	r3,r18,r3
1000e328:	003f2c06 	br	1000dfdc <__alt_data_end+0xf800dfdc>
1000e32c:	1823883a 	mov	r17,r3
1000e330:	003eec06 	br	1000dee4 <__alt_data_end+0xf800dee4>
1000e334:	2023883a 	mov	r17,r4
1000e338:	003f5606 	br	1000e094 <__alt_data_end+0xf800e094>
1000e33c:	2008943a 	slli	r4,r4,16
1000e340:	9420983a 	sll	r16,r18,r16
1000e344:	e73fffcc 	andi	fp,fp,65535
1000e348:	2709883a 	add	r4,r4,fp
1000e34c:	813fbc2e 	bgeu	r16,r4,1000e240 <__alt_data_end+0xf800e240>
1000e350:	a0bfffc4 	addi	r2,r20,-1
1000e354:	0007883a 	mov	r3,zero
1000e358:	003efb06 	br	1000df48 <__alt_data_end+0xf800df48>
1000e35c:	00c00604 	movi	r3,24
1000e360:	180b883a 	mov	r5,r3
1000e364:	003eeb06 	br	1000df14 <__alt_data_end+0xf800df14>
1000e368:	00c00204 	movi	r3,8
1000e36c:	180b883a 	mov	r5,r3
1000e370:	003ee806 	br	1000df14 <__alt_data_end+0xf800df14>
1000e374:	00800604 	movi	r2,24
1000e378:	1007883a 	mov	r3,r2
1000e37c:	003f0a06 	br	1000dfa8 <__alt_data_end+0xf800dfa8>
1000e380:	00800604 	movi	r2,24
1000e384:	1007883a 	mov	r3,r2
1000e388:	003e9c06 	br	1000ddfc <__alt_data_end+0xf800ddfc>
1000e38c:	00800204 	movi	r2,8
1000e390:	1007883a 	mov	r3,r2
1000e394:	003e9906 	br	1000ddfc <__alt_data_end+0xf800ddfc>
1000e398:	00800204 	movi	r2,8
1000e39c:	1007883a 	mov	r3,r2
1000e3a0:	003f0106 	br	1000dfa8 <__alt_data_end+0xf800dfa8>
1000e3a4:	18bf842e 	bgeu	r3,r2,1000e1b8 <__alt_data_end+0xf800e1b8>
1000e3a8:	a53fff84 	addi	r20,r20,-2
1000e3ac:	1cc7883a 	add	r3,r3,r19
1000e3b0:	003f8206 	br	1000e1bc <__alt_data_end+0xf800e1bc>
1000e3b4:	393f6b2e 	bgeu	r7,r4,1000e164 <__alt_data_end+0xf800e164>
1000e3b8:	bdffff84 	addi	r23,r23,-2
1000e3bc:	3ccf883a 	add	r7,r7,r19
1000e3c0:	003f6906 	br	1000e168 <__alt_data_end+0xf800e168>
1000e3c4:	1825883a 	mov	r18,r3
1000e3c8:	003fd406 	br	1000e31c <__alt_data_end+0xf800e31c>
1000e3cc:	102f883a 	mov	r23,r2
1000e3d0:	003fbc06 	br	1000e2c4 <__alt_data_end+0xf800e2c4>
1000e3d4:	94bfff84 	addi	r18,r18,-2
1000e3d8:	340d883a 	add	r6,r6,r16
1000e3dc:	003f1606 	br	1000e038 <__alt_data_end+0xf800e038>
1000e3e0:	94bfff84 	addi	r18,r18,-2
1000e3e4:	1c07883a 	add	r3,r3,r16
1000e3e8:	003ea906 	br	1000de90 <__alt_data_end+0xf800de90>

1000e3ec <__umoddi3>:
1000e3ec:	defff304 	addi	sp,sp,-52
1000e3f0:	dd000715 	stw	r20,28(sp)
1000e3f4:	dcc00615 	stw	r19,24(sp)
1000e3f8:	dc800515 	stw	r18,20(sp)
1000e3fc:	dc400415 	stw	r17,16(sp)
1000e400:	dc000315 	stw	r16,12(sp)
1000e404:	dfc00c15 	stw	ra,48(sp)
1000e408:	df000b15 	stw	fp,44(sp)
1000e40c:	ddc00a15 	stw	r23,40(sp)
1000e410:	dd800915 	stw	r22,36(sp)
1000e414:	dd400815 	stw	r21,32(sp)
1000e418:	2025883a 	mov	r18,r4
1000e41c:	2823883a 	mov	r17,r5
1000e420:	3021883a 	mov	r16,r6
1000e424:	2027883a 	mov	r19,r4
1000e428:	2829883a 	mov	r20,r5
1000e42c:	38003a1e 	bne	r7,zero,1000e518 <__umoddi3+0x12c>
1000e430:	2980522e 	bgeu	r5,r6,1000e57c <__umoddi3+0x190>
1000e434:	00bfffd4 	movui	r2,65535
1000e438:	1180a436 	bltu	r2,r6,1000e6cc <__umoddi3+0x2e0>
1000e43c:	00803fc4 	movi	r2,255
1000e440:	11816036 	bltu	r2,r6,1000e9c4 <__umoddi3+0x5d8>
1000e444:	0005883a 	mov	r2,zero
1000e448:	0009883a 	mov	r4,zero
1000e44c:	3084d83a 	srl	r2,r6,r2
1000e450:	00c40074 	movhi	r3,4097
1000e454:	18cb3a04 	addi	r3,r3,11496
1000e458:	05400804 	movi	r21,32
1000e45c:	1885883a 	add	r2,r3,r2
1000e460:	10800003 	ldbu	r2,0(r2)
1000e464:	1109883a 	add	r4,r2,r4
1000e468:	a92bc83a 	sub	r21,r21,r4
1000e46c:	a8010e26 	beq	r21,zero,1000e8a8 <__umoddi3+0x4bc>
1000e470:	8d62983a 	sll	r17,r17,r21
1000e474:	9108d83a 	srl	r4,r18,r4
1000e478:	3560983a 	sll	r16,r6,r21
1000e47c:	9566983a 	sll	r19,r18,r21
1000e480:	8928b03a 	or	r20,r17,r4
1000e484:	8022d43a 	srli	r17,r16,16
1000e488:	a009883a 	mov	r4,r20
1000e48c:	84bfffcc 	andi	r18,r16,65535
1000e490:	880b883a 	mov	r5,r17
1000e494:	00012f40 	call	100012f4 <__umodsi3>
1000e498:	a009883a 	mov	r4,r20
1000e49c:	880b883a 	mov	r5,r17
1000e4a0:	102d883a 	mov	r22,r2
1000e4a4:	00012ec0 	call	100012ec <__udivsi3>
1000e4a8:	1009883a 	mov	r4,r2
1000e4ac:	900b883a 	mov	r5,r18
1000e4b0:	00012fc0 	call	100012fc <__mulsi3>
1000e4b4:	1009883a 	mov	r4,r2
1000e4b8:	b006943a 	slli	r3,r22,16
1000e4bc:	9804d43a 	srli	r2,r19,16
1000e4c0:	1886b03a 	or	r3,r3,r2
1000e4c4:	1900042e 	bgeu	r3,r4,1000e4d8 <__umoddi3+0xec>
1000e4c8:	1c07883a 	add	r3,r3,r16
1000e4cc:	1c000236 	bltu	r3,r16,1000e4d8 <__umoddi3+0xec>
1000e4d0:	1900012e 	bgeu	r3,r4,1000e4d8 <__umoddi3+0xec>
1000e4d4:	1c07883a 	add	r3,r3,r16
1000e4d8:	1929c83a 	sub	r20,r3,r4
1000e4dc:	a009883a 	mov	r4,r20
1000e4e0:	880b883a 	mov	r5,r17
1000e4e4:	00012f40 	call	100012f4 <__umodsi3>
1000e4e8:	102d883a 	mov	r22,r2
1000e4ec:	a009883a 	mov	r4,r20
1000e4f0:	880b883a 	mov	r5,r17
1000e4f4:	b02c943a 	slli	r22,r22,16
1000e4f8:	00012ec0 	call	100012ec <__udivsi3>
1000e4fc:	1009883a 	mov	r4,r2
1000e500:	900b883a 	mov	r5,r18
1000e504:	9cffffcc 	andi	r19,r19,65535
1000e508:	00012fc0 	call	100012fc <__mulsi3>
1000e50c:	b4e6b03a 	or	r19,r22,r19
1000e510:	9880572e 	bgeu	r19,r2,1000e670 <__umoddi3+0x284>
1000e514:	00005206 	br	1000e660 <__umoddi3+0x274>
1000e518:	29c05936 	bltu	r5,r7,1000e680 <__umoddi3+0x294>
1000e51c:	00bfffd4 	movui	r2,65535
1000e520:	11c0652e 	bgeu	r2,r7,1000e6b8 <__umoddi3+0x2cc>
1000e524:	00804034 	movhi	r2,256
1000e528:	10bfffc4 	addi	r2,r2,-1
1000e52c:	11c11936 	bltu	r2,r7,1000e994 <__umoddi3+0x5a8>
1000e530:	00c00404 	movi	r3,16
1000e534:	1827883a 	mov	r19,r3
1000e538:	38c6d83a 	srl	r3,r7,r3
1000e53c:	01040074 	movhi	r4,4097
1000e540:	210b3a04 	addi	r4,r4,11496
1000e544:	04000804 	movi	r16,32
1000e548:	20c7883a 	add	r3,r4,r3
1000e54c:	18800003 	ldbu	r2,0(r3)
1000e550:	14e7883a 	add	r19,r2,r19
1000e554:	84e1c83a 	sub	r16,r16,r19
1000e558:	8000671e 	bne	r16,zero,1000e6f8 <__umoddi3+0x30c>
1000e55c:	3c400136 	bltu	r7,r17,1000e564 <__umoddi3+0x178>
1000e560:	91812536 	bltu	r18,r6,1000e9f8 <__umoddi3+0x60c>
1000e564:	9185c83a 	sub	r2,r18,r6
1000e568:	89e3c83a 	sub	r17,r17,r7
1000e56c:	90a5803a 	cmpltu	r18,r18,r2
1000e570:	8ca9c83a 	sub	r20,r17,r18
1000e574:	a007883a 	mov	r3,r20
1000e578:	00004306 	br	1000e688 <__umoddi3+0x29c>
1000e57c:	3000041e 	bne	r6,zero,1000e590 <__umoddi3+0x1a4>
1000e580:	01000044 	movi	r4,1
1000e584:	000b883a 	mov	r5,zero
1000e588:	00012ec0 	call	100012ec <__udivsi3>
1000e58c:	1021883a 	mov	r16,r2
1000e590:	00bfffd4 	movui	r2,65535
1000e594:	1400532e 	bgeu	r2,r16,1000e6e4 <__umoddi3+0x2f8>
1000e598:	00804034 	movhi	r2,256
1000e59c:	10bfffc4 	addi	r2,r2,-1
1000e5a0:	14010536 	bltu	r2,r16,1000e9b8 <__umoddi3+0x5cc>
1000e5a4:	00800404 	movi	r2,16
1000e5a8:	1007883a 	mov	r3,r2
1000e5ac:	8084d83a 	srl	r2,r16,r2
1000e5b0:	01040074 	movhi	r4,4097
1000e5b4:	210b3a04 	addi	r4,r4,11496
1000e5b8:	05400804 	movi	r21,32
1000e5bc:	2085883a 	add	r2,r4,r2
1000e5c0:	10800003 	ldbu	r2,0(r2)
1000e5c4:	10c7883a 	add	r3,r2,r3
1000e5c8:	a8ebc83a 	sub	r21,r21,r3
1000e5cc:	a800b81e 	bne	r21,zero,1000e8b0 <__umoddi3+0x4c4>
1000e5d0:	8028d43a 	srli	r20,r16,16
1000e5d4:	8c23c83a 	sub	r17,r17,r16
1000e5d8:	85bfffcc 	andi	r22,r16,65535
1000e5dc:	8809883a 	mov	r4,r17
1000e5e0:	a00b883a 	mov	r5,r20
1000e5e4:	00012f40 	call	100012f4 <__umodsi3>
1000e5e8:	8809883a 	mov	r4,r17
1000e5ec:	a00b883a 	mov	r5,r20
1000e5f0:	1025883a 	mov	r18,r2
1000e5f4:	00012ec0 	call	100012ec <__udivsi3>
1000e5f8:	1009883a 	mov	r4,r2
1000e5fc:	b00b883a 	mov	r5,r22
1000e600:	00012fc0 	call	100012fc <__mulsi3>
1000e604:	1009883a 	mov	r4,r2
1000e608:	9006943a 	slli	r3,r18,16
1000e60c:	9804d43a 	srli	r2,r19,16
1000e610:	1886b03a 	or	r3,r3,r2
1000e614:	1900032e 	bgeu	r3,r4,1000e624 <__umoddi3+0x238>
1000e618:	1c07883a 	add	r3,r3,r16
1000e61c:	1c000136 	bltu	r3,r16,1000e624 <__umoddi3+0x238>
1000e620:	1900f336 	bltu	r3,r4,1000e9f0 <__umoddi3+0x604>
1000e624:	1923c83a 	sub	r17,r3,r4
1000e628:	8809883a 	mov	r4,r17
1000e62c:	a00b883a 	mov	r5,r20
1000e630:	00012f40 	call	100012f4 <__umodsi3>
1000e634:	102f883a 	mov	r23,r2
1000e638:	8809883a 	mov	r4,r17
1000e63c:	a00b883a 	mov	r5,r20
1000e640:	b82e943a 	slli	r23,r23,16
1000e644:	00012ec0 	call	100012ec <__udivsi3>
1000e648:	1009883a 	mov	r4,r2
1000e64c:	b00b883a 	mov	r5,r22
1000e650:	9cffffcc 	andi	r19,r19,65535
1000e654:	00012fc0 	call	100012fc <__mulsi3>
1000e658:	bce6b03a 	or	r19,r23,r19
1000e65c:	9880042e 	bgeu	r19,r2,1000e670 <__umoddi3+0x284>
1000e660:	9c27883a 	add	r19,r19,r16
1000e664:	9c000236 	bltu	r19,r16,1000e670 <__umoddi3+0x284>
1000e668:	9880012e 	bgeu	r19,r2,1000e670 <__umoddi3+0x284>
1000e66c:	9c27883a 	add	r19,r19,r16
1000e670:	9885c83a 	sub	r2,r19,r2
1000e674:	1544d83a 	srl	r2,r2,r21
1000e678:	0007883a 	mov	r3,zero
1000e67c:	00000206 	br	1000e688 <__umoddi3+0x29c>
1000e680:	2005883a 	mov	r2,r4
1000e684:	2807883a 	mov	r3,r5
1000e688:	dfc00c17 	ldw	ra,48(sp)
1000e68c:	df000b17 	ldw	fp,44(sp)
1000e690:	ddc00a17 	ldw	r23,40(sp)
1000e694:	dd800917 	ldw	r22,36(sp)
1000e698:	dd400817 	ldw	r21,32(sp)
1000e69c:	dd000717 	ldw	r20,28(sp)
1000e6a0:	dcc00617 	ldw	r19,24(sp)
1000e6a4:	dc800517 	ldw	r18,20(sp)
1000e6a8:	dc400417 	ldw	r17,16(sp)
1000e6ac:	dc000317 	ldw	r16,12(sp)
1000e6b0:	dec00d04 	addi	sp,sp,52
1000e6b4:	f800283a 	ret
1000e6b8:	00803fc4 	movi	r2,255
1000e6bc:	11c0b236 	bltu	r2,r7,1000e988 <__umoddi3+0x59c>
1000e6c0:	0007883a 	mov	r3,zero
1000e6c4:	0027883a 	mov	r19,zero
1000e6c8:	003f9b06 	br	1000e538 <__alt_data_end+0xf800e538>
1000e6cc:	00804034 	movhi	r2,256
1000e6d0:	10bfffc4 	addi	r2,r2,-1
1000e6d4:	1180b236 	bltu	r2,r6,1000e9a0 <__umoddi3+0x5b4>
1000e6d8:	00800404 	movi	r2,16
1000e6dc:	1009883a 	mov	r4,r2
1000e6e0:	003f5a06 	br	1000e44c <__alt_data_end+0xf800e44c>
1000e6e4:	00803fc4 	movi	r2,255
1000e6e8:	1400b036 	bltu	r2,r16,1000e9ac <__umoddi3+0x5c0>
1000e6ec:	0005883a 	mov	r2,zero
1000e6f0:	0007883a 	mov	r3,zero
1000e6f4:	003fad06 	br	1000e5ac <__alt_data_end+0xf800e5ac>
1000e6f8:	34c4d83a 	srl	r2,r6,r19
1000e6fc:	3c0e983a 	sll	r7,r7,r16
1000e700:	8cf8d83a 	srl	fp,r17,r19
1000e704:	8c22983a 	sll	r17,r17,r16
1000e708:	38a8b03a 	or	r20,r7,r2
1000e70c:	a02ad43a 	srli	r21,r20,16
1000e710:	94c4d83a 	srl	r2,r18,r19
1000e714:	e009883a 	mov	r4,fp
1000e718:	a80b883a 	mov	r5,r21
1000e71c:	342c983a 	sll	r22,r6,r16
1000e720:	88a2b03a 	or	r17,r17,r2
1000e724:	00012f40 	call	100012f4 <__umodsi3>
1000e728:	e009883a 	mov	r4,fp
1000e72c:	a80b883a 	mov	r5,r21
1000e730:	a5ffffcc 	andi	r23,r20,65535
1000e734:	d8800215 	stw	r2,8(sp)
1000e738:	00012ec0 	call	100012ec <__udivsi3>
1000e73c:	1009883a 	mov	r4,r2
1000e740:	b80b883a 	mov	r5,r23
1000e744:	1039883a 	mov	fp,r2
1000e748:	00012fc0 	call	100012fc <__mulsi3>
1000e74c:	d8c00217 	ldw	r3,8(sp)
1000e750:	1009883a 	mov	r4,r2
1000e754:	8804d43a 	srli	r2,r17,16
1000e758:	1806943a 	slli	r3,r3,16
1000e75c:	9424983a 	sll	r18,r18,r16
1000e760:	1886b03a 	or	r3,r3,r2
1000e764:	1900042e 	bgeu	r3,r4,1000e778 <__umoddi3+0x38c>
1000e768:	1d07883a 	add	r3,r3,r20
1000e76c:	e0bfffc4 	addi	r2,fp,-1
1000e770:	1d009b2e 	bgeu	r3,r20,1000e9e0 <__umoddi3+0x5f4>
1000e774:	1039883a 	mov	fp,r2
1000e778:	1907c83a 	sub	r3,r3,r4
1000e77c:	1809883a 	mov	r4,r3
1000e780:	a80b883a 	mov	r5,r21
1000e784:	d8c00215 	stw	r3,8(sp)
1000e788:	00012f40 	call	100012f4 <__umodsi3>
1000e78c:	d8c00217 	ldw	r3,8(sp)
1000e790:	a80b883a 	mov	r5,r21
1000e794:	d8800015 	stw	r2,0(sp)
1000e798:	1809883a 	mov	r4,r3
1000e79c:	00012ec0 	call	100012ec <__udivsi3>
1000e7a0:	1009883a 	mov	r4,r2
1000e7a4:	b80b883a 	mov	r5,r23
1000e7a8:	102b883a 	mov	r21,r2
1000e7ac:	00012fc0 	call	100012fc <__mulsi3>
1000e7b0:	d9c00017 	ldw	r7,0(sp)
1000e7b4:	8c7fffcc 	andi	r17,r17,65535
1000e7b8:	380e943a 	slli	r7,r7,16
1000e7bc:	3c4eb03a 	or	r7,r7,r17
1000e7c0:	3880042e 	bgeu	r7,r2,1000e7d4 <__umoddi3+0x3e8>
1000e7c4:	3d0f883a 	add	r7,r7,r20
1000e7c8:	a8ffffc4 	addi	r3,r21,-1
1000e7cc:	3d00802e 	bgeu	r7,r20,1000e9d0 <__umoddi3+0x5e4>
1000e7d0:	182b883a 	mov	r21,r3
1000e7d4:	e038943a 	slli	fp,fp,16
1000e7d8:	b010d43a 	srli	r8,r22,16
1000e7dc:	b1bfffcc 	andi	r6,r22,65535
1000e7e0:	af2ab03a 	or	r21,r21,fp
1000e7e4:	a82ed43a 	srli	r23,r21,16
1000e7e8:	ad7fffcc 	andi	r21,r21,65535
1000e7ec:	300b883a 	mov	r5,r6
1000e7f0:	a809883a 	mov	r4,r21
1000e7f4:	38a3c83a 	sub	r17,r7,r2
1000e7f8:	d9800115 	stw	r6,4(sp)
1000e7fc:	da000015 	stw	r8,0(sp)
1000e800:	00012fc0 	call	100012fc <__mulsi3>
1000e804:	da000017 	ldw	r8,0(sp)
1000e808:	a809883a 	mov	r4,r21
1000e80c:	1039883a 	mov	fp,r2
1000e810:	400b883a 	mov	r5,r8
1000e814:	da000215 	stw	r8,8(sp)
1000e818:	00012fc0 	call	100012fc <__mulsi3>
1000e81c:	d9800117 	ldw	r6,4(sp)
1000e820:	b809883a 	mov	r4,r23
1000e824:	d8800015 	stw	r2,0(sp)
1000e828:	300b883a 	mov	r5,r6
1000e82c:	00012fc0 	call	100012fc <__mulsi3>
1000e830:	d8c00217 	ldw	r3,8(sp)
1000e834:	b809883a 	mov	r4,r23
1000e838:	102b883a 	mov	r21,r2
1000e83c:	180b883a 	mov	r5,r3
1000e840:	00012fc0 	call	100012fc <__mulsi3>
1000e844:	d9c00017 	ldw	r7,0(sp)
1000e848:	1007883a 	mov	r3,r2
1000e84c:	e004d43a 	srli	r2,fp,16
1000e850:	a9c9883a 	add	r4,r21,r7
1000e854:	2089883a 	add	r4,r4,r2
1000e858:	2540022e 	bgeu	r4,r21,1000e864 <__umoddi3+0x478>
1000e85c:	00800074 	movhi	r2,1
1000e860:	1887883a 	add	r3,r3,r2
1000e864:	2004d43a 	srli	r2,r4,16
1000e868:	2008943a 	slli	r4,r4,16
1000e86c:	e73fffcc 	andi	fp,fp,65535
1000e870:	1887883a 	add	r3,r3,r2
1000e874:	2709883a 	add	r4,r4,fp
1000e878:	88c03d36 	bltu	r17,r3,1000e970 <__umoddi3+0x584>
1000e87c:	88c06126 	beq	r17,r3,1000ea04 <__umoddi3+0x618>
1000e880:	88c7c83a 	sub	r3,r17,r3
1000e884:	202d883a 	mov	r22,r4
1000e888:	95adc83a 	sub	r22,r18,r22
1000e88c:	95a5803a 	cmpltu	r18,r18,r22
1000e890:	1c87c83a 	sub	r3,r3,r18
1000e894:	1cc4983a 	sll	r2,r3,r19
1000e898:	b42cd83a 	srl	r22,r22,r16
1000e89c:	1c06d83a 	srl	r3,r3,r16
1000e8a0:	1584b03a 	or	r2,r2,r22
1000e8a4:	003f7806 	br	1000e688 <__alt_data_end+0xf800e688>
1000e8a8:	002b883a 	mov	r21,zero
1000e8ac:	003ef506 	br	1000e484 <__alt_data_end+0xf800e484>
1000e8b0:	8560983a 	sll	r16,r16,r21
1000e8b4:	88e6d83a 	srl	r19,r17,r3
1000e8b8:	90c6d83a 	srl	r3,r18,r3
1000e8bc:	8028d43a 	srli	r20,r16,16
1000e8c0:	8d62983a 	sll	r17,r17,r21
1000e8c4:	9809883a 	mov	r4,r19
1000e8c8:	a00b883a 	mov	r5,r20
1000e8cc:	88eeb03a 	or	r23,r17,r3
1000e8d0:	00012f40 	call	100012f4 <__umodsi3>
1000e8d4:	9809883a 	mov	r4,r19
1000e8d8:	a00b883a 	mov	r5,r20
1000e8dc:	1023883a 	mov	r17,r2
1000e8e0:	85bfffcc 	andi	r22,r16,65535
1000e8e4:	00012ec0 	call	100012ec <__udivsi3>
1000e8e8:	1009883a 	mov	r4,r2
1000e8ec:	b00b883a 	mov	r5,r22
1000e8f0:	00012fc0 	call	100012fc <__mulsi3>
1000e8f4:	1007883a 	mov	r3,r2
1000e8f8:	8808943a 	slli	r4,r17,16
1000e8fc:	b804d43a 	srli	r2,r23,16
1000e900:	9566983a 	sll	r19,r18,r21
1000e904:	2088b03a 	or	r4,r4,r2
1000e908:	20c0042e 	bgeu	r4,r3,1000e91c <__umoddi3+0x530>
1000e90c:	2409883a 	add	r4,r4,r16
1000e910:	24000236 	bltu	r4,r16,1000e91c <__umoddi3+0x530>
1000e914:	20c0012e 	bgeu	r4,r3,1000e91c <__umoddi3+0x530>
1000e918:	2409883a 	add	r4,r4,r16
1000e91c:	20e5c83a 	sub	r18,r4,r3
1000e920:	9009883a 	mov	r4,r18
1000e924:	a00b883a 	mov	r5,r20
1000e928:	00012f40 	call	100012f4 <__umodsi3>
1000e92c:	1023883a 	mov	r17,r2
1000e930:	9009883a 	mov	r4,r18
1000e934:	a00b883a 	mov	r5,r20
1000e938:	8822943a 	slli	r17,r17,16
1000e93c:	00012ec0 	call	100012ec <__udivsi3>
1000e940:	1009883a 	mov	r4,r2
1000e944:	b00b883a 	mov	r5,r22
1000e948:	bdffffcc 	andi	r23,r23,65535
1000e94c:	00012fc0 	call	100012fc <__mulsi3>
1000e950:	8de2b03a 	or	r17,r17,r23
1000e954:	8880042e 	bgeu	r17,r2,1000e968 <__umoddi3+0x57c>
1000e958:	8c23883a 	add	r17,r17,r16
1000e95c:	8c000236 	bltu	r17,r16,1000e968 <__umoddi3+0x57c>
1000e960:	8880012e 	bgeu	r17,r2,1000e968 <__umoddi3+0x57c>
1000e964:	8c23883a 	add	r17,r17,r16
1000e968:	88a3c83a 	sub	r17,r17,r2
1000e96c:	003f1b06 	br	1000e5dc <__alt_data_end+0xf800e5dc>
1000e970:	25adc83a 	sub	r22,r4,r22
1000e974:	1d07c83a 	sub	r3,r3,r20
1000e978:	2589803a 	cmpltu	r4,r4,r22
1000e97c:	1907c83a 	sub	r3,r3,r4
1000e980:	88c7c83a 	sub	r3,r17,r3
1000e984:	003fc006 	br	1000e888 <__alt_data_end+0xf800e888>
1000e988:	00c00204 	movi	r3,8
1000e98c:	1827883a 	mov	r19,r3
1000e990:	003ee906 	br	1000e538 <__alt_data_end+0xf800e538>
1000e994:	00c00604 	movi	r3,24
1000e998:	1827883a 	mov	r19,r3
1000e99c:	003ee606 	br	1000e538 <__alt_data_end+0xf800e538>
1000e9a0:	00800604 	movi	r2,24
1000e9a4:	1009883a 	mov	r4,r2
1000e9a8:	003ea806 	br	1000e44c <__alt_data_end+0xf800e44c>
1000e9ac:	00800204 	movi	r2,8
1000e9b0:	1007883a 	mov	r3,r2
1000e9b4:	003efd06 	br	1000e5ac <__alt_data_end+0xf800e5ac>
1000e9b8:	00800604 	movi	r2,24
1000e9bc:	1007883a 	mov	r3,r2
1000e9c0:	003efa06 	br	1000e5ac <__alt_data_end+0xf800e5ac>
1000e9c4:	00800204 	movi	r2,8
1000e9c8:	1009883a 	mov	r4,r2
1000e9cc:	003e9f06 	br	1000e44c <__alt_data_end+0xf800e44c>
1000e9d0:	38bf7f2e 	bgeu	r7,r2,1000e7d0 <__alt_data_end+0xf800e7d0>
1000e9d4:	ad7fff84 	addi	r21,r21,-2
1000e9d8:	3d0f883a 	add	r7,r7,r20
1000e9dc:	003f7d06 	br	1000e7d4 <__alt_data_end+0xf800e7d4>
1000e9e0:	193f642e 	bgeu	r3,r4,1000e774 <__alt_data_end+0xf800e774>
1000e9e4:	e73fff84 	addi	fp,fp,-2
1000e9e8:	1d07883a 	add	r3,r3,r20
1000e9ec:	003f6206 	br	1000e778 <__alt_data_end+0xf800e778>
1000e9f0:	1c07883a 	add	r3,r3,r16
1000e9f4:	003f0b06 	br	1000e624 <__alt_data_end+0xf800e624>
1000e9f8:	9005883a 	mov	r2,r18
1000e9fc:	a007883a 	mov	r3,r20
1000ea00:	003f2106 	br	1000e688 <__alt_data_end+0xf800e688>
1000ea04:	913fda36 	bltu	r18,r4,1000e970 <__alt_data_end+0xf800e970>
1000ea08:	202d883a 	mov	r22,r4
1000ea0c:	0007883a 	mov	r3,zero
1000ea10:	003f9d06 	br	1000e888 <__alt_data_end+0xf800e888>

1000ea14 <__nesf2>:
1000ea14:	defff504 	addi	sp,sp,-44
1000ea18:	d9000915 	stw	r4,36(sp)
1000ea1c:	d9400815 	stw	r5,32(sp)
1000ea20:	d9000904 	addi	r4,sp,36
1000ea24:	d9400404 	addi	r5,sp,16
1000ea28:	dfc00a15 	stw	ra,40(sp)
1000ea2c:	000f9b00 	call	1000f9b0 <__unpack_f>
1000ea30:	d9000804 	addi	r4,sp,32
1000ea34:	d80b883a 	mov	r5,sp
1000ea38:	000f9b00 	call	1000f9b0 <__unpack_f>
1000ea3c:	d8c00417 	ldw	r3,16(sp)
1000ea40:	00800044 	movi	r2,1
1000ea44:	10c0052e 	bgeu	r2,r3,1000ea5c <__nesf2+0x48>
1000ea48:	d8c00017 	ldw	r3,0(sp)
1000ea4c:	10c0032e 	bgeu	r2,r3,1000ea5c <__nesf2+0x48>
1000ea50:	d9000404 	addi	r4,sp,16
1000ea54:	d80b883a 	mov	r5,sp
1000ea58:	000fa780 	call	1000fa78 <__fpcmp_parts_f>
1000ea5c:	dfc00a17 	ldw	ra,40(sp)
1000ea60:	dec00b04 	addi	sp,sp,44
1000ea64:	f800283a 	ret

1000ea68 <__gtsf2>:
1000ea68:	defff504 	addi	sp,sp,-44
1000ea6c:	d9000915 	stw	r4,36(sp)
1000ea70:	d9400815 	stw	r5,32(sp)
1000ea74:	d9000904 	addi	r4,sp,36
1000ea78:	d9400404 	addi	r5,sp,16
1000ea7c:	dfc00a15 	stw	ra,40(sp)
1000ea80:	000f9b00 	call	1000f9b0 <__unpack_f>
1000ea84:	d9000804 	addi	r4,sp,32
1000ea88:	d80b883a 	mov	r5,sp
1000ea8c:	000f9b00 	call	1000f9b0 <__unpack_f>
1000ea90:	d8c00417 	ldw	r3,16(sp)
1000ea94:	00800044 	movi	r2,1
1000ea98:	10c0082e 	bgeu	r2,r3,1000eabc <__gtsf2+0x54>
1000ea9c:	d8c00017 	ldw	r3,0(sp)
1000eaa0:	10c0062e 	bgeu	r2,r3,1000eabc <__gtsf2+0x54>
1000eaa4:	d9000404 	addi	r4,sp,16
1000eaa8:	d80b883a 	mov	r5,sp
1000eaac:	000fa780 	call	1000fa78 <__fpcmp_parts_f>
1000eab0:	dfc00a17 	ldw	ra,40(sp)
1000eab4:	dec00b04 	addi	sp,sp,44
1000eab8:	f800283a 	ret
1000eabc:	00bfffc4 	movi	r2,-1
1000eac0:	003ffb06 	br	1000eab0 <__alt_data_end+0xf800eab0>

1000eac4 <__ltsf2>:
1000eac4:	defff504 	addi	sp,sp,-44
1000eac8:	d9000915 	stw	r4,36(sp)
1000eacc:	d9400815 	stw	r5,32(sp)
1000ead0:	d9000904 	addi	r4,sp,36
1000ead4:	d9400404 	addi	r5,sp,16
1000ead8:	dfc00a15 	stw	ra,40(sp)
1000eadc:	000f9b00 	call	1000f9b0 <__unpack_f>
1000eae0:	d9000804 	addi	r4,sp,32
1000eae4:	d80b883a 	mov	r5,sp
1000eae8:	000f9b00 	call	1000f9b0 <__unpack_f>
1000eaec:	d8c00417 	ldw	r3,16(sp)
1000eaf0:	00800044 	movi	r2,1
1000eaf4:	10c0052e 	bgeu	r2,r3,1000eb0c <__ltsf2+0x48>
1000eaf8:	d8c00017 	ldw	r3,0(sp)
1000eafc:	10c0032e 	bgeu	r2,r3,1000eb0c <__ltsf2+0x48>
1000eb00:	d9000404 	addi	r4,sp,16
1000eb04:	d80b883a 	mov	r5,sp
1000eb08:	000fa780 	call	1000fa78 <__fpcmp_parts_f>
1000eb0c:	dfc00a17 	ldw	ra,40(sp)
1000eb10:	dec00b04 	addi	sp,sp,44
1000eb14:	f800283a 	ret

1000eb18 <_fpadd_parts>:
1000eb18:	2005883a 	mov	r2,r4
1000eb1c:	21000017 	ldw	r4,0(r4)
1000eb20:	01c00044 	movi	r7,1
1000eb24:	3900622e 	bgeu	r7,r4,1000ecb0 <_fpadd_parts+0x198>
1000eb28:	28c00017 	ldw	r3,0(r5)
1000eb2c:	38c05f2e 	bgeu	r7,r3,1000ecac <_fpadd_parts+0x194>
1000eb30:	01c00104 	movi	r7,4
1000eb34:	21c0c626 	beq	r4,r7,1000ee50 <_fpadd_parts+0x338>
1000eb38:	19c05c26 	beq	r3,r7,1000ecac <_fpadd_parts+0x194>
1000eb3c:	01c00084 	movi	r7,2
1000eb40:	19c06b26 	beq	r3,r7,1000ecf0 <_fpadd_parts+0x1d8>
1000eb44:	21c05926 	beq	r4,r7,1000ecac <_fpadd_parts+0x194>
1000eb48:	11c00217 	ldw	r7,8(r2)
1000eb4c:	2ac00217 	ldw	r11,8(r5)
1000eb50:	13000317 	ldw	r12,12(r2)
1000eb54:	13400417 	ldw	r13,16(r2)
1000eb58:	3ac9c83a 	sub	r4,r7,r11
1000eb5c:	2a000317 	ldw	r8,12(r5)
1000eb60:	2a400417 	ldw	r9,16(r5)
1000eb64:	2015883a 	mov	r10,r4
1000eb68:	20007516 	blt	r4,zero,1000ed40 <_fpadd_parts+0x228>
1000eb6c:	00c00fc4 	movi	r3,63
1000eb70:	1a805016 	blt	r3,r10,1000ecb4 <_fpadd_parts+0x19c>
1000eb74:	0100870e 	bge	zero,r4,1000ed94 <_fpadd_parts+0x27c>
1000eb78:	50fff804 	addi	r3,r10,-32
1000eb7c:	18009916 	blt	r3,zero,1000ede4 <_fpadd_parts+0x2cc>
1000eb80:	48d6d83a 	srl	r11,r9,r3
1000eb84:	001d883a 	mov	r14,zero
1000eb88:	18009e16 	blt	r3,zero,1000ee04 <_fpadd_parts+0x2ec>
1000eb8c:	01000044 	movi	r4,1
1000eb90:	20c6983a 	sll	r3,r4,r3
1000eb94:	0015883a 	mov	r10,zero
1000eb98:	513fffc4 	addi	r4,r10,-1
1000eb9c:	2295403a 	cmpgeu	r10,r4,r10
1000eba0:	1a87c83a 	sub	r3,r3,r10
1000eba4:	1a52703a 	and	r9,r3,r9
1000eba8:	2210703a 	and	r8,r4,r8
1000ebac:	4250b03a 	or	r8,r8,r9
1000ebb0:	4010c03a 	cmpne	r8,r8,zero
1000ebb4:	42d0b03a 	or	r8,r8,r11
1000ebb8:	7013883a 	mov	r9,r14
1000ebbc:	11000117 	ldw	r4,4(r2)
1000ebc0:	28800117 	ldw	r2,4(r5)
1000ebc4:	20804126 	beq	r4,r2,1000eccc <_fpadd_parts+0x1b4>
1000ebc8:	20006326 	beq	r4,zero,1000ed58 <_fpadd_parts+0x240>
1000ebcc:	4305c83a 	sub	r2,r8,r12
1000ebd0:	4091803a 	cmpltu	r8,r8,r2
1000ebd4:	4b47c83a 	sub	r3,r9,r13
1000ebd8:	1a07c83a 	sub	r3,r3,r8
1000ebdc:	18006316 	blt	r3,zero,1000ed6c <_fpadd_parts+0x254>
1000ebe0:	30000115 	stw	zero,4(r6)
1000ebe4:	31c00215 	stw	r7,8(r6)
1000ebe8:	30800315 	stw	r2,12(r6)
1000ebec:	30c00415 	stw	r3,16(r6)
1000ebf0:	11ffffc4 	addi	r7,r2,-1
1000ebf4:	388b403a 	cmpgeu	r5,r7,r2
1000ebf8:	194bc83a 	sub	r5,r3,r5
1000ebfc:	01040034 	movhi	r4,4096
1000ec00:	213fffc4 	addi	r4,r4,-1
1000ec04:	21401736 	bltu	r4,r5,1000ec64 <_fpadd_parts+0x14c>
1000ec08:	29008226 	beq	r5,r4,1000ee14 <_fpadd_parts+0x2fc>
1000ec0c:	31400217 	ldw	r5,8(r6)
1000ec10:	02840034 	movhi	r10,4096
1000ec14:	52bfffc4 	addi	r10,r10,-1
1000ec18:	033fff84 	movi	r12,-2
1000ec1c:	297fffc4 	addi	r5,r5,-1
1000ec20:	00000106 	br	1000ec28 <_fpadd_parts+0x110>
1000ec24:	3a804a26 	beq	r7,r10,1000ed50 <_fpadd_parts+0x238>
1000ec28:	1089883a 	add	r4,r2,r2
1000ec2c:	2091803a 	cmpltu	r8,r4,r2
1000ec30:	18c7883a 	add	r3,r3,r3
1000ec34:	227fffc4 	addi	r9,r4,-1
1000ec38:	40d1883a 	add	r8,r8,r3
1000ec3c:	490f403a 	cmpgeu	r7,r9,r4
1000ec40:	41cfc83a 	sub	r7,r8,r7
1000ec44:	2817883a 	mov	r11,r5
1000ec48:	2005883a 	mov	r2,r4
1000ec4c:	4007883a 	mov	r3,r8
1000ec50:	297fffc4 	addi	r5,r5,-1
1000ec54:	51fff32e 	bgeu	r10,r7,1000ec24 <__alt_data_end+0xf800ec24>
1000ec58:	31000315 	stw	r4,12(r6)
1000ec5c:	32000415 	stw	r8,16(r6)
1000ec60:	32c00215 	stw	r11,8(r6)
1000ec64:	010000c4 	movi	r4,3
1000ec68:	31000015 	stw	r4,0(r6)
1000ec6c:	01080034 	movhi	r4,8192
1000ec70:	213fffc4 	addi	r4,r4,-1
1000ec74:	20c00b2e 	bgeu	r4,r3,1000eca4 <_fpadd_parts+0x18c>
1000ec78:	180e97fa 	slli	r7,r3,31
1000ec7c:	1008d07a 	srli	r4,r2,1
1000ec80:	31400217 	ldw	r5,8(r6)
1000ec84:	1806d07a 	srli	r3,r3,1
1000ec88:	1080004c 	andi	r2,r2,1
1000ec8c:	3908b03a 	or	r4,r7,r4
1000ec90:	1108b03a 	or	r4,r2,r4
1000ec94:	29400044 	addi	r5,r5,1
1000ec98:	31000315 	stw	r4,12(r6)
1000ec9c:	30c00415 	stw	r3,16(r6)
1000eca0:	31400215 	stw	r5,8(r6)
1000eca4:	3005883a 	mov	r2,r6
1000eca8:	f800283a 	ret
1000ecac:	2805883a 	mov	r2,r5
1000ecb0:	f800283a 	ret
1000ecb4:	59c01e0e 	bge	r11,r7,1000ed30 <_fpadd_parts+0x218>
1000ecb8:	11000117 	ldw	r4,4(r2)
1000ecbc:	28800117 	ldw	r2,4(r5)
1000ecc0:	0011883a 	mov	r8,zero
1000ecc4:	0013883a 	mov	r9,zero
1000ecc8:	20bfbf1e 	bne	r4,r2,1000ebc8 <__alt_data_end+0xf800ebc8>
1000eccc:	4305883a 	add	r2,r8,r12
1000ecd0:	1207803a 	cmpltu	r3,r2,r8
1000ecd4:	4b53883a 	add	r9,r9,r13
1000ecd8:	1a47883a 	add	r3,r3,r9
1000ecdc:	31000115 	stw	r4,4(r6)
1000ece0:	31c00215 	stw	r7,8(r6)
1000ece4:	30800315 	stw	r2,12(r6)
1000ece8:	30c00415 	stw	r3,16(r6)
1000ecec:	003fdd06 	br	1000ec64 <__alt_data_end+0xf800ec64>
1000ecf0:	20ffef1e 	bne	r4,r3,1000ecb0 <__alt_data_end+0xf800ecb0>
1000ecf4:	31000015 	stw	r4,0(r6)
1000ecf8:	10c00117 	ldw	r3,4(r2)
1000ecfc:	30c00115 	stw	r3,4(r6)
1000ed00:	10c00217 	ldw	r3,8(r2)
1000ed04:	11000117 	ldw	r4,4(r2)
1000ed08:	29400117 	ldw	r5,4(r5)
1000ed0c:	30c00215 	stw	r3,8(r6)
1000ed10:	10c00317 	ldw	r3,12(r2)
1000ed14:	2908703a 	and	r4,r5,r4
1000ed18:	30c00315 	stw	r3,12(r6)
1000ed1c:	10c00417 	ldw	r3,16(r2)
1000ed20:	31000115 	stw	r4,4(r6)
1000ed24:	3005883a 	mov	r2,r6
1000ed28:	30c00415 	stw	r3,16(r6)
1000ed2c:	f800283a 	ret
1000ed30:	580f883a 	mov	r7,r11
1000ed34:	0019883a 	mov	r12,zero
1000ed38:	001b883a 	mov	r13,zero
1000ed3c:	003f9f06 	br	1000ebbc <__alt_data_end+0xf800ebbc>
1000ed40:	0115c83a 	sub	r10,zero,r4
1000ed44:	00c00fc4 	movi	r3,63
1000ed48:	1abfda16 	blt	r3,r10,1000ecb4 <__alt_data_end+0xf800ecb4>
1000ed4c:	003f8906 	br	1000eb74 <__alt_data_end+0xf800eb74>
1000ed50:	627fb52e 	bgeu	r12,r9,1000ec28 <__alt_data_end+0xf800ec28>
1000ed54:	003fc006 	br	1000ec58 <__alt_data_end+0xf800ec58>
1000ed58:	6205c83a 	sub	r2,r12,r8
1000ed5c:	6099803a 	cmpltu	r12,r12,r2
1000ed60:	6a47c83a 	sub	r3,r13,r9
1000ed64:	1b07c83a 	sub	r3,r3,r12
1000ed68:	183f9d0e 	bge	r3,zero,1000ebe0 <__alt_data_end+0xf800ebe0>
1000ed6c:	0085c83a 	sub	r2,zero,r2
1000ed70:	1008c03a 	cmpne	r4,r2,zero
1000ed74:	00c7c83a 	sub	r3,zero,r3
1000ed78:	1907c83a 	sub	r3,r3,r4
1000ed7c:	01000044 	movi	r4,1
1000ed80:	31000115 	stw	r4,4(r6)
1000ed84:	31c00215 	stw	r7,8(r6)
1000ed88:	30800315 	stw	r2,12(r6)
1000ed8c:	30c00415 	stw	r3,16(r6)
1000ed90:	003f9706 	br	1000ebf0 <__alt_data_end+0xf800ebf0>
1000ed94:	203f8926 	beq	r4,zero,1000ebbc <__alt_data_end+0xf800ebbc>
1000ed98:	50fff804 	addi	r3,r10,-32
1000ed9c:	3a8f883a 	add	r7,r7,r10
1000eda0:	18002316 	blt	r3,zero,1000ee30 <_fpadd_parts+0x318>
1000eda4:	68d6d83a 	srl	r11,r13,r3
1000eda8:	001d883a 	mov	r14,zero
1000edac:	18001c16 	blt	r3,zero,1000ee20 <_fpadd_parts+0x308>
1000edb0:	01000044 	movi	r4,1
1000edb4:	20c6983a 	sll	r3,r4,r3
1000edb8:	0015883a 	mov	r10,zero
1000edbc:	513fffc4 	addi	r4,r10,-1
1000edc0:	2295403a 	cmpgeu	r10,r4,r10
1000edc4:	1a87c83a 	sub	r3,r3,r10
1000edc8:	1b5a703a 	and	r13,r3,r13
1000edcc:	2318703a 	and	r12,r4,r12
1000edd0:	6358b03a 	or	r12,r12,r13
1000edd4:	6018c03a 	cmpne	r12,r12,zero
1000edd8:	62d8b03a 	or	r12,r12,r11
1000eddc:	701b883a 	mov	r13,r14
1000ede0:	003f7606 	br	1000ebbc <__alt_data_end+0xf800ebbc>
1000ede4:	4808907a 	slli	r4,r9,1
1000ede8:	02c007c4 	movi	r11,31
1000edec:	5a97c83a 	sub	r11,r11,r10
1000edf0:	22c8983a 	sll	r4,r4,r11
1000edf4:	4296d83a 	srl	r11,r8,r10
1000edf8:	4a9cd83a 	srl	r14,r9,r10
1000edfc:	22d6b03a 	or	r11,r4,r11
1000ee00:	003f6106 	br	1000eb88 <__alt_data_end+0xf800eb88>
1000ee04:	00c00044 	movi	r3,1
1000ee08:	1a94983a 	sll	r10,r3,r10
1000ee0c:	0007883a 	mov	r3,zero
1000ee10:	003f6106 	br	1000eb98 <__alt_data_end+0xf800eb98>
1000ee14:	013fff84 	movi	r4,-2
1000ee18:	21ff7c2e 	bgeu	r4,r7,1000ec0c <__alt_data_end+0xf800ec0c>
1000ee1c:	003f9106 	br	1000ec64 <__alt_data_end+0xf800ec64>
1000ee20:	00c00044 	movi	r3,1
1000ee24:	1a94983a 	sll	r10,r3,r10
1000ee28:	0007883a 	mov	r3,zero
1000ee2c:	003fe306 	br	1000edbc <__alt_data_end+0xf800edbc>
1000ee30:	6816907a 	slli	r11,r13,1
1000ee34:	010007c4 	movi	r4,31
1000ee38:	2289c83a 	sub	r4,r4,r10
1000ee3c:	5908983a 	sll	r4,r11,r4
1000ee40:	6296d83a 	srl	r11,r12,r10
1000ee44:	6a9cd83a 	srl	r14,r13,r10
1000ee48:	22d6b03a 	or	r11,r4,r11
1000ee4c:	003fd706 	br	1000edac <__alt_data_end+0xf800edac>
1000ee50:	193f971e 	bne	r3,r4,1000ecb0 <__alt_data_end+0xf800ecb0>
1000ee54:	11000117 	ldw	r4,4(r2)
1000ee58:	28c00117 	ldw	r3,4(r5)
1000ee5c:	20ff9426 	beq	r4,r3,1000ecb0 <__alt_data_end+0xf800ecb0>
1000ee60:	00840074 	movhi	r2,4097
1000ee64:	108b3504 	addi	r2,r2,11476
1000ee68:	f800283a 	ret

1000ee6c <__adddf3>:
1000ee6c:	deffec04 	addi	sp,sp,-80
1000ee70:	d9001115 	stw	r4,68(sp)
1000ee74:	d9401215 	stw	r5,72(sp)
1000ee78:	d9001104 	addi	r4,sp,68
1000ee7c:	d9400a04 	addi	r5,sp,40
1000ee80:	dfc01315 	stw	ra,76(sp)
1000ee84:	d9c01015 	stw	r7,64(sp)
1000ee88:	d9800f15 	stw	r6,60(sp)
1000ee8c:	000fd840 	call	1000fd84 <__unpack_d>
1000ee90:	d9000f04 	addi	r4,sp,60
1000ee94:	d9400504 	addi	r5,sp,20
1000ee98:	000fd840 	call	1000fd84 <__unpack_d>
1000ee9c:	d9000a04 	addi	r4,sp,40
1000eea0:	d9400504 	addi	r5,sp,20
1000eea4:	d80d883a 	mov	r6,sp
1000eea8:	000eb180 	call	1000eb18 <_fpadd_parts>
1000eeac:	1009883a 	mov	r4,r2
1000eeb0:	000fb600 	call	1000fb60 <__pack_d>
1000eeb4:	dfc01317 	ldw	ra,76(sp)
1000eeb8:	dec01404 	addi	sp,sp,80
1000eebc:	f800283a 	ret

1000eec0 <__subdf3>:
1000eec0:	deffec04 	addi	sp,sp,-80
1000eec4:	d9001115 	stw	r4,68(sp)
1000eec8:	d9401215 	stw	r5,72(sp)
1000eecc:	d9001104 	addi	r4,sp,68
1000eed0:	d9400a04 	addi	r5,sp,40
1000eed4:	dfc01315 	stw	ra,76(sp)
1000eed8:	d9c01015 	stw	r7,64(sp)
1000eedc:	d9800f15 	stw	r6,60(sp)
1000eee0:	000fd840 	call	1000fd84 <__unpack_d>
1000eee4:	d9000f04 	addi	r4,sp,60
1000eee8:	d9400504 	addi	r5,sp,20
1000eeec:	000fd840 	call	1000fd84 <__unpack_d>
1000eef0:	d8800617 	ldw	r2,24(sp)
1000eef4:	d9000a04 	addi	r4,sp,40
1000eef8:	d9400504 	addi	r5,sp,20
1000eefc:	d80d883a 	mov	r6,sp
1000ef00:	1080005c 	xori	r2,r2,1
1000ef04:	d8800615 	stw	r2,24(sp)
1000ef08:	000eb180 	call	1000eb18 <_fpadd_parts>
1000ef0c:	1009883a 	mov	r4,r2
1000ef10:	000fb600 	call	1000fb60 <__pack_d>
1000ef14:	dfc01317 	ldw	ra,76(sp)
1000ef18:	dec01404 	addi	sp,sp,80
1000ef1c:	f800283a 	ret

1000ef20 <__muldf3>:
1000ef20:	deffe404 	addi	sp,sp,-112
1000ef24:	d9001115 	stw	r4,68(sp)
1000ef28:	d9401215 	stw	r5,72(sp)
1000ef2c:	d9001104 	addi	r4,sp,68
1000ef30:	d9400a04 	addi	r5,sp,40
1000ef34:	dfc01b15 	stw	ra,108(sp)
1000ef38:	d9800f15 	stw	r6,60(sp)
1000ef3c:	d9c01015 	stw	r7,64(sp)
1000ef40:	ddc01a15 	stw	r23,104(sp)
1000ef44:	dd801915 	stw	r22,100(sp)
1000ef48:	dd401815 	stw	r21,96(sp)
1000ef4c:	dd001715 	stw	r20,92(sp)
1000ef50:	dcc01615 	stw	r19,88(sp)
1000ef54:	dc801515 	stw	r18,84(sp)
1000ef58:	dc401415 	stw	r17,80(sp)
1000ef5c:	dc001315 	stw	r16,76(sp)
1000ef60:	000fd840 	call	1000fd84 <__unpack_d>
1000ef64:	d9000f04 	addi	r4,sp,60
1000ef68:	d9400504 	addi	r5,sp,20
1000ef6c:	000fd840 	call	1000fd84 <__unpack_d>
1000ef70:	d8c00a17 	ldw	r3,40(sp)
1000ef74:	00800044 	movi	r2,1
1000ef78:	10c01136 	bltu	r2,r3,1000efc0 <__muldf3+0xa0>
1000ef7c:	d8c00b17 	ldw	r3,44(sp)
1000ef80:	d8800617 	ldw	r2,24(sp)
1000ef84:	d9000a04 	addi	r4,sp,40
1000ef88:	1884c03a 	cmpne	r2,r3,r2
1000ef8c:	d8800b15 	stw	r2,44(sp)
1000ef90:	000fb600 	call	1000fb60 <__pack_d>
1000ef94:	dfc01b17 	ldw	ra,108(sp)
1000ef98:	ddc01a17 	ldw	r23,104(sp)
1000ef9c:	dd801917 	ldw	r22,100(sp)
1000efa0:	dd401817 	ldw	r21,96(sp)
1000efa4:	dd001717 	ldw	r20,92(sp)
1000efa8:	dcc01617 	ldw	r19,88(sp)
1000efac:	dc801517 	ldw	r18,84(sp)
1000efb0:	dc401417 	ldw	r17,80(sp)
1000efb4:	dc001317 	ldw	r16,76(sp)
1000efb8:	dec01c04 	addi	sp,sp,112
1000efbc:	f800283a 	ret
1000efc0:	d9000517 	ldw	r4,20(sp)
1000efc4:	11000636 	bltu	r2,r4,1000efe0 <__muldf3+0xc0>
1000efc8:	d8800617 	ldw	r2,24(sp)
1000efcc:	d8c00b17 	ldw	r3,44(sp)
1000efd0:	d9000504 	addi	r4,sp,20
1000efd4:	1884c03a 	cmpne	r2,r3,r2
1000efd8:	d8800615 	stw	r2,24(sp)
1000efdc:	003fec06 	br	1000ef90 <__alt_data_end+0xf800ef90>
1000efe0:	00800104 	movi	r2,4
1000efe4:	1880051e 	bne	r3,r2,1000effc <__muldf3+0xdc>
1000efe8:	00800084 	movi	r2,2
1000efec:	20bfe31e 	bne	r4,r2,1000ef7c <__alt_data_end+0xf800ef7c>
1000eff0:	01040074 	movhi	r4,4097
1000eff4:	210b3504 	addi	r4,r4,11476
1000eff8:	003fe506 	br	1000ef90 <__alt_data_end+0xf800ef90>
1000effc:	2080031e 	bne	r4,r2,1000f00c <__muldf3+0xec>
1000f000:	00800084 	movi	r2,2
1000f004:	18bffa26 	beq	r3,r2,1000eff0 <__alt_data_end+0xf800eff0>
1000f008:	003fef06 	br	1000efc8 <__alt_data_end+0xf800efc8>
1000f00c:	00800084 	movi	r2,2
1000f010:	18bfda26 	beq	r3,r2,1000ef7c <__alt_data_end+0xf800ef7c>
1000f014:	20bfec26 	beq	r4,r2,1000efc8 <__alt_data_end+0xf800efc8>
1000f018:	dc000d17 	ldw	r16,52(sp)
1000f01c:	dd000817 	ldw	r20,32(sp)
1000f020:	dc800917 	ldw	r18,36(sp)
1000f024:	8009883a 	mov	r4,r16
1000f028:	000b883a 	mov	r5,zero
1000f02c:	a00d883a 	mov	r6,r20
1000f030:	000f883a 	mov	r7,zero
1000f034:	000dc080 	call	1000dc08 <__muldi3>
1000f038:	dc400e17 	ldw	r17,56(sp)
1000f03c:	9009883a 	mov	r4,r18
1000f040:	800d883a 	mov	r6,r16
1000f044:	000b883a 	mov	r5,zero
1000f048:	000f883a 	mov	r7,zero
1000f04c:	102f883a 	mov	r23,r2
1000f050:	1827883a 	mov	r19,r3
1000f054:	000dc080 	call	1000dc08 <__muldi3>
1000f058:	900d883a 	mov	r6,r18
1000f05c:	8809883a 	mov	r4,r17
1000f060:	000b883a 	mov	r5,zero
1000f064:	000f883a 	mov	r7,zero
1000f068:	102b883a 	mov	r21,r2
1000f06c:	1821883a 	mov	r16,r3
1000f070:	000dc080 	call	1000dc08 <__muldi3>
1000f074:	8809883a 	mov	r4,r17
1000f078:	000b883a 	mov	r5,zero
1000f07c:	a00d883a 	mov	r6,r20
1000f080:	000f883a 	mov	r7,zero
1000f084:	102d883a 	mov	r22,r2
1000f088:	1825883a 	mov	r18,r3
1000f08c:	000dc080 	call	1000dc08 <__muldi3>
1000f090:	154b883a 	add	r5,r2,r21
1000f094:	2889803a 	cmpltu	r4,r5,r2
1000f098:	1c07883a 	add	r3,r3,r16
1000f09c:	20c9883a 	add	r4,r4,r3
1000f0a0:	24004b36 	bltu	r4,r16,1000f1d0 <__muldf3+0x2b0>
1000f0a4:	8100011e 	bne	r16,r4,1000f0ac <__muldf3+0x18c>
1000f0a8:	2d404936 	bltu	r5,r21,1000f1d0 <__muldf3+0x2b0>
1000f0ac:	0011883a 	mov	r8,zero
1000f0b0:	0007883a 	mov	r3,zero
1000f0b4:	2ccb883a 	add	r5,r5,r19
1000f0b8:	b80d883a 	mov	r6,r23
1000f0bc:	2cc0012e 	bgeu	r5,r19,1000f0c4 <__muldf3+0x1a4>
1000f0c0:	02000044 	movi	r8,1
1000f0c4:	258f883a 	add	r7,r4,r22
1000f0c8:	3909803a 	cmpltu	r4,r7,r4
1000f0cc:	da400c17 	ldw	r9,48(sp)
1000f0d0:	2489883a 	add	r4,r4,r18
1000f0d4:	d8800717 	ldw	r2,28(sp)
1000f0d8:	20c9883a 	add	r4,r4,r3
1000f0dc:	da800b17 	ldw	r10,44(sp)
1000f0e0:	d8c00617 	ldw	r3,24(sp)
1000f0e4:	3a11883a 	add	r8,r7,r8
1000f0e8:	4885883a 	add	r2,r9,r2
1000f0ec:	50c6c03a 	cmpne	r3,r10,r3
1000f0f0:	41cf803a 	cmpltu	r7,r8,r7
1000f0f4:	12400104 	addi	r9,r2,4
1000f0f8:	d8c00115 	stw	r3,4(sp)
1000f0fc:	3909883a 	add	r4,r7,r4
1000f100:	da400215 	stw	r9,8(sp)
1000f104:	03480034 	movhi	r13,8192
1000f108:	6b7fffc4 	addi	r13,r13,-1
1000f10c:	4007883a 	mov	r3,r8
1000f110:	6900102e 	bgeu	r13,r4,1000f154 <__muldf3+0x234>
1000f114:	10800144 	addi	r2,r2,5
1000f118:	180ed07a 	srli	r7,r3,1
1000f11c:	18c0004c 	andi	r3,r3,1
1000f120:	201097fa 	slli	r8,r4,31
1000f124:	281697fa 	slli	r11,r5,31
1000f128:	2008d07a 	srli	r4,r4,1
1000f12c:	3014d07a 	srli	r10,r6,1
1000f130:	2812d07a 	srli	r9,r5,1
1000f134:	1019883a 	mov	r12,r2
1000f138:	18000226 	beq	r3,zero,1000f144 <__muldf3+0x224>
1000f13c:	5a8cb03a 	or	r6,r11,r10
1000f140:	49600034 	orhi	r5,r9,32768
1000f144:	41c6b03a 	or	r3,r8,r7
1000f148:	10800044 	addi	r2,r2,1
1000f14c:	693ff236 	bltu	r13,r4,1000f118 <__alt_data_end+0xf800f118>
1000f150:	db000215 	stw	r12,8(sp)
1000f154:	03440034 	movhi	r13,4096
1000f158:	6b7fffc4 	addi	r13,r13,-1
1000f15c:	69001336 	bltu	r13,r4,1000f1ac <__muldf3+0x28c>
1000f160:	d8800217 	ldw	r2,8(sp)
1000f164:	10bfffc4 	addi	r2,r2,-1
1000f168:	18d3883a 	add	r9,r3,r3
1000f16c:	48c7803a 	cmpltu	r3,r9,r3
1000f170:	2109883a 	add	r4,r4,r4
1000f174:	190f883a 	add	r7,r3,r4
1000f178:	3191883a 	add	r8,r6,r6
1000f17c:	4197803a 	cmpltu	r11,r8,r6
1000f180:	2955883a 	add	r10,r5,r5
1000f184:	1019883a 	mov	r12,r2
1000f188:	4807883a 	mov	r3,r9
1000f18c:	3809883a 	mov	r4,r7
1000f190:	2800010e 	bge	r5,zero,1000f198 <__muldf3+0x278>
1000f194:	48c00054 	ori	r3,r9,1
1000f198:	400d883a 	mov	r6,r8
1000f19c:	5a8b883a 	add	r5,r11,r10
1000f1a0:	10bfffc4 	addi	r2,r2,-1
1000f1a4:	69fff02e 	bgeu	r13,r7,1000f168 <__alt_data_end+0xf800f168>
1000f1a8:	db000215 	stw	r12,8(sp)
1000f1ac:	18803fcc 	andi	r2,r3,255
1000f1b0:	01c02004 	movi	r7,128
1000f1b4:	11c00926 	beq	r2,r7,1000f1dc <__muldf3+0x2bc>
1000f1b8:	008000c4 	movi	r2,3
1000f1bc:	d9000415 	stw	r4,16(sp)
1000f1c0:	d8c00315 	stw	r3,12(sp)
1000f1c4:	d8800015 	stw	r2,0(sp)
1000f1c8:	d809883a 	mov	r4,sp
1000f1cc:	003f7006 	br	1000ef90 <__alt_data_end+0xf800ef90>
1000f1d0:	0011883a 	mov	r8,zero
1000f1d4:	00c00044 	movi	r3,1
1000f1d8:	003fb606 	br	1000f0b4 <__alt_data_end+0xf800f0b4>
1000f1dc:	19c0400c 	andi	r7,r3,256
1000f1e0:	383ff51e 	bne	r7,zero,1000f1b8 <__alt_data_end+0xf800f1b8>
1000f1e4:	314ab03a 	or	r5,r6,r5
1000f1e8:	283ff326 	beq	r5,zero,1000f1b8 <__alt_data_end+0xf800f1b8>
1000f1ec:	1885883a 	add	r2,r3,r2
1000f1f0:	10cb803a 	cmpltu	r5,r2,r3
1000f1f4:	00ffc004 	movi	r3,-256
1000f1f8:	10c6703a 	and	r3,r2,r3
1000f1fc:	2909883a 	add	r4,r5,r4
1000f200:	003fed06 	br	1000f1b8 <__alt_data_end+0xf800f1b8>

1000f204 <__divdf3>:
1000f204:	defff104 	addi	sp,sp,-60
1000f208:	d9000c15 	stw	r4,48(sp)
1000f20c:	d9400d15 	stw	r5,52(sp)
1000f210:	d9000c04 	addi	r4,sp,48
1000f214:	d9400504 	addi	r5,sp,20
1000f218:	dfc00e15 	stw	ra,56(sp)
1000f21c:	d9800a15 	stw	r6,40(sp)
1000f220:	d9c00b15 	stw	r7,44(sp)
1000f224:	000fd840 	call	1000fd84 <__unpack_d>
1000f228:	d9000a04 	addi	r4,sp,40
1000f22c:	d80b883a 	mov	r5,sp
1000f230:	000fd840 	call	1000fd84 <__unpack_d>
1000f234:	d8c00517 	ldw	r3,20(sp)
1000f238:	00800044 	movi	r2,1
1000f23c:	10c00536 	bltu	r2,r3,1000f254 <__divdf3+0x50>
1000f240:	d9000504 	addi	r4,sp,20
1000f244:	000fb600 	call	1000fb60 <__pack_d>
1000f248:	dfc00e17 	ldw	ra,56(sp)
1000f24c:	dec00f04 	addi	sp,sp,60
1000f250:	f800283a 	ret
1000f254:	d9000017 	ldw	r4,0(sp)
1000f258:	11000536 	bltu	r2,r4,1000f270 <__divdf3+0x6c>
1000f25c:	d809883a 	mov	r4,sp
1000f260:	000fb600 	call	1000fb60 <__pack_d>
1000f264:	dfc00e17 	ldw	ra,56(sp)
1000f268:	dec00f04 	addi	sp,sp,60
1000f26c:	f800283a 	ret
1000f270:	d9800617 	ldw	r6,24(sp)
1000f274:	d9400117 	ldw	r5,4(sp)
1000f278:	00800104 	movi	r2,4
1000f27c:	314af03a 	xor	r5,r6,r5
1000f280:	d9400615 	stw	r5,24(sp)
1000f284:	18800226 	beq	r3,r2,1000f290 <__divdf3+0x8c>
1000f288:	01400084 	movi	r5,2
1000f28c:	1940041e 	bne	r3,r5,1000f2a0 <__divdf3+0x9c>
1000f290:	193feb1e 	bne	r3,r4,1000f240 <__alt_data_end+0xf800f240>
1000f294:	01040074 	movhi	r4,4097
1000f298:	210b3504 	addi	r4,r4,11476
1000f29c:	003fe906 	br	1000f244 <__alt_data_end+0xf800f244>
1000f2a0:	20803326 	beq	r4,r2,1000f370 <__divdf3+0x16c>
1000f2a4:	21403726 	beq	r4,r5,1000f384 <__divdf3+0x180>
1000f2a8:	d8800217 	ldw	r2,8(sp)
1000f2ac:	d9000717 	ldw	r4,28(sp)
1000f2b0:	d8c00917 	ldw	r3,36(sp)
1000f2b4:	da000417 	ldw	r8,16(sp)
1000f2b8:	2089c83a 	sub	r4,r4,r2
1000f2bc:	d9000715 	stw	r4,28(sp)
1000f2c0:	d8800817 	ldw	r2,32(sp)
1000f2c4:	dbc00317 	ldw	r15,12(sp)
1000f2c8:	1a000236 	bltu	r3,r8,1000f2d4 <__divdf3+0xd0>
1000f2cc:	40c0081e 	bne	r8,r3,1000f2f0 <__divdf3+0xec>
1000f2d0:	13c0072e 	bgeu	r2,r15,1000f2f0 <__divdf3+0xec>
1000f2d4:	108b883a 	add	r5,r2,r2
1000f2d8:	288d803a 	cmpltu	r6,r5,r2
1000f2dc:	18c7883a 	add	r3,r3,r3
1000f2e0:	213fffc4 	addi	r4,r4,-1
1000f2e4:	2805883a 	mov	r2,r5
1000f2e8:	30c7883a 	add	r3,r6,r3
1000f2ec:	d9000715 	stw	r4,28(sp)
1000f2f0:	01400f44 	movi	r5,61
1000f2f4:	000f883a 	mov	r7,zero
1000f2f8:	01040034 	movhi	r4,4096
1000f2fc:	0019883a 	mov	r12,zero
1000f300:	001b883a 	mov	r13,zero
1000f304:	201697fa 	slli	r11,r4,31
1000f308:	3814d07a 	srli	r10,r7,1
1000f30c:	297fffc4 	addi	r5,r5,-1
1000f310:	1a000936 	bltu	r3,r8,1000f338 <__divdf3+0x134>
1000f314:	13cdc83a 	sub	r6,r2,r15
1000f318:	1193803a 	cmpltu	r9,r2,r6
1000f31c:	1a1dc83a 	sub	r14,r3,r8
1000f320:	40c0011e 	bne	r8,r3,1000f328 <__divdf3+0x124>
1000f324:	13c00436 	bltu	r2,r15,1000f338 <__divdf3+0x134>
1000f328:	3005883a 	mov	r2,r6
1000f32c:	7247c83a 	sub	r3,r14,r9
1000f330:	61d8b03a 	or	r12,r12,r7
1000f334:	691ab03a 	or	r13,r13,r4
1000f338:	108d883a 	add	r6,r2,r2
1000f33c:	3093803a 	cmpltu	r9,r6,r2
1000f340:	18c7883a 	add	r3,r3,r3
1000f344:	5a8eb03a 	or	r7,r11,r10
1000f348:	2008d07a 	srli	r4,r4,1
1000f34c:	3005883a 	mov	r2,r6
1000f350:	48c7883a 	add	r3,r9,r3
1000f354:	283feb1e 	bne	r5,zero,1000f304 <__alt_data_end+0xf800f304>
1000f358:	61003fcc 	andi	r4,r12,255
1000f35c:	01402004 	movi	r5,128
1000f360:	21400b26 	beq	r4,r5,1000f390 <__divdf3+0x18c>
1000f364:	db000815 	stw	r12,32(sp)
1000f368:	db400915 	stw	r13,36(sp)
1000f36c:	003fb406 	br	1000f240 <__alt_data_end+0xf800f240>
1000f370:	d8000815 	stw	zero,32(sp)
1000f374:	d8000915 	stw	zero,36(sp)
1000f378:	d8000715 	stw	zero,28(sp)
1000f37c:	d9000504 	addi	r4,sp,20
1000f380:	003fb006 	br	1000f244 <__alt_data_end+0xf800f244>
1000f384:	d8800515 	stw	r2,20(sp)
1000f388:	d9000504 	addi	r4,sp,20
1000f38c:	003fad06 	br	1000f244 <__alt_data_end+0xf800f244>
1000f390:	6140400c 	andi	r5,r12,256
1000f394:	283ff31e 	bne	r5,zero,1000f364 <__alt_data_end+0xf800f364>
1000f398:	30c4b03a 	or	r2,r6,r3
1000f39c:	103ff126 	beq	r2,zero,1000f364 <__alt_data_end+0xf800f364>
1000f3a0:	6109883a 	add	r4,r12,r4
1000f3a4:	2305803a 	cmpltu	r2,r4,r12
1000f3a8:	033fc004 	movi	r12,-256
1000f3ac:	2318703a 	and	r12,r4,r12
1000f3b0:	135b883a 	add	r13,r2,r13
1000f3b4:	003feb06 	br	1000f364 <__alt_data_end+0xf800f364>

1000f3b8 <__eqdf2>:
1000f3b8:	defff104 	addi	sp,sp,-60
1000f3bc:	d9000c15 	stw	r4,48(sp)
1000f3c0:	d9400d15 	stw	r5,52(sp)
1000f3c4:	d9000c04 	addi	r4,sp,48
1000f3c8:	d9400504 	addi	r5,sp,20
1000f3cc:	dfc00e15 	stw	ra,56(sp)
1000f3d0:	d9800a15 	stw	r6,40(sp)
1000f3d4:	d9c00b15 	stw	r7,44(sp)
1000f3d8:	000fd840 	call	1000fd84 <__unpack_d>
1000f3dc:	d9000a04 	addi	r4,sp,40
1000f3e0:	d80b883a 	mov	r5,sp
1000f3e4:	000fd840 	call	1000fd84 <__unpack_d>
1000f3e8:	d8c00517 	ldw	r3,20(sp)
1000f3ec:	00800044 	movi	r2,1
1000f3f0:	10c0052e 	bgeu	r2,r3,1000f408 <__eqdf2+0x50>
1000f3f4:	d8c00017 	ldw	r3,0(sp)
1000f3f8:	10c0032e 	bgeu	r2,r3,1000f408 <__eqdf2+0x50>
1000f3fc:	d9000504 	addi	r4,sp,20
1000f400:	d80b883a 	mov	r5,sp
1000f404:	000fe880 	call	1000fe88 <__fpcmp_parts_d>
1000f408:	dfc00e17 	ldw	ra,56(sp)
1000f40c:	dec00f04 	addi	sp,sp,60
1000f410:	f800283a 	ret

1000f414 <__nedf2>:
1000f414:	defff104 	addi	sp,sp,-60
1000f418:	d9000c15 	stw	r4,48(sp)
1000f41c:	d9400d15 	stw	r5,52(sp)
1000f420:	d9000c04 	addi	r4,sp,48
1000f424:	d9400504 	addi	r5,sp,20
1000f428:	dfc00e15 	stw	ra,56(sp)
1000f42c:	d9800a15 	stw	r6,40(sp)
1000f430:	d9c00b15 	stw	r7,44(sp)
1000f434:	000fd840 	call	1000fd84 <__unpack_d>
1000f438:	d9000a04 	addi	r4,sp,40
1000f43c:	d80b883a 	mov	r5,sp
1000f440:	000fd840 	call	1000fd84 <__unpack_d>
1000f444:	d8c00517 	ldw	r3,20(sp)
1000f448:	00800044 	movi	r2,1
1000f44c:	10c0052e 	bgeu	r2,r3,1000f464 <__nedf2+0x50>
1000f450:	d8c00017 	ldw	r3,0(sp)
1000f454:	10c0032e 	bgeu	r2,r3,1000f464 <__nedf2+0x50>
1000f458:	d9000504 	addi	r4,sp,20
1000f45c:	d80b883a 	mov	r5,sp
1000f460:	000fe880 	call	1000fe88 <__fpcmp_parts_d>
1000f464:	dfc00e17 	ldw	ra,56(sp)
1000f468:	dec00f04 	addi	sp,sp,60
1000f46c:	f800283a 	ret

1000f470 <__gtdf2>:
1000f470:	defff104 	addi	sp,sp,-60
1000f474:	d9000c15 	stw	r4,48(sp)
1000f478:	d9400d15 	stw	r5,52(sp)
1000f47c:	d9000c04 	addi	r4,sp,48
1000f480:	d9400504 	addi	r5,sp,20
1000f484:	dfc00e15 	stw	ra,56(sp)
1000f488:	d9800a15 	stw	r6,40(sp)
1000f48c:	d9c00b15 	stw	r7,44(sp)
1000f490:	000fd840 	call	1000fd84 <__unpack_d>
1000f494:	d9000a04 	addi	r4,sp,40
1000f498:	d80b883a 	mov	r5,sp
1000f49c:	000fd840 	call	1000fd84 <__unpack_d>
1000f4a0:	d8c00517 	ldw	r3,20(sp)
1000f4a4:	00800044 	movi	r2,1
1000f4a8:	10c0082e 	bgeu	r2,r3,1000f4cc <__gtdf2+0x5c>
1000f4ac:	d8c00017 	ldw	r3,0(sp)
1000f4b0:	10c0062e 	bgeu	r2,r3,1000f4cc <__gtdf2+0x5c>
1000f4b4:	d9000504 	addi	r4,sp,20
1000f4b8:	d80b883a 	mov	r5,sp
1000f4bc:	000fe880 	call	1000fe88 <__fpcmp_parts_d>
1000f4c0:	dfc00e17 	ldw	ra,56(sp)
1000f4c4:	dec00f04 	addi	sp,sp,60
1000f4c8:	f800283a 	ret
1000f4cc:	00bfffc4 	movi	r2,-1
1000f4d0:	003ffb06 	br	1000f4c0 <__alt_data_end+0xf800f4c0>

1000f4d4 <__gedf2>:
1000f4d4:	defff104 	addi	sp,sp,-60
1000f4d8:	d9000c15 	stw	r4,48(sp)
1000f4dc:	d9400d15 	stw	r5,52(sp)
1000f4e0:	d9000c04 	addi	r4,sp,48
1000f4e4:	d9400504 	addi	r5,sp,20
1000f4e8:	dfc00e15 	stw	ra,56(sp)
1000f4ec:	d9800a15 	stw	r6,40(sp)
1000f4f0:	d9c00b15 	stw	r7,44(sp)
1000f4f4:	000fd840 	call	1000fd84 <__unpack_d>
1000f4f8:	d9000a04 	addi	r4,sp,40
1000f4fc:	d80b883a 	mov	r5,sp
1000f500:	000fd840 	call	1000fd84 <__unpack_d>
1000f504:	d8c00517 	ldw	r3,20(sp)
1000f508:	00800044 	movi	r2,1
1000f50c:	10c0082e 	bgeu	r2,r3,1000f530 <__gedf2+0x5c>
1000f510:	d8c00017 	ldw	r3,0(sp)
1000f514:	10c0062e 	bgeu	r2,r3,1000f530 <__gedf2+0x5c>
1000f518:	d9000504 	addi	r4,sp,20
1000f51c:	d80b883a 	mov	r5,sp
1000f520:	000fe880 	call	1000fe88 <__fpcmp_parts_d>
1000f524:	dfc00e17 	ldw	ra,56(sp)
1000f528:	dec00f04 	addi	sp,sp,60
1000f52c:	f800283a 	ret
1000f530:	00bfffc4 	movi	r2,-1
1000f534:	003ffb06 	br	1000f524 <__alt_data_end+0xf800f524>

1000f538 <__ltdf2>:
1000f538:	defff104 	addi	sp,sp,-60
1000f53c:	d9000c15 	stw	r4,48(sp)
1000f540:	d9400d15 	stw	r5,52(sp)
1000f544:	d9000c04 	addi	r4,sp,48
1000f548:	d9400504 	addi	r5,sp,20
1000f54c:	dfc00e15 	stw	ra,56(sp)
1000f550:	d9800a15 	stw	r6,40(sp)
1000f554:	d9c00b15 	stw	r7,44(sp)
1000f558:	000fd840 	call	1000fd84 <__unpack_d>
1000f55c:	d9000a04 	addi	r4,sp,40
1000f560:	d80b883a 	mov	r5,sp
1000f564:	000fd840 	call	1000fd84 <__unpack_d>
1000f568:	d8c00517 	ldw	r3,20(sp)
1000f56c:	00800044 	movi	r2,1
1000f570:	10c0052e 	bgeu	r2,r3,1000f588 <__ltdf2+0x50>
1000f574:	d8c00017 	ldw	r3,0(sp)
1000f578:	10c0032e 	bgeu	r2,r3,1000f588 <__ltdf2+0x50>
1000f57c:	d9000504 	addi	r4,sp,20
1000f580:	d80b883a 	mov	r5,sp
1000f584:	000fe880 	call	1000fe88 <__fpcmp_parts_d>
1000f588:	dfc00e17 	ldw	ra,56(sp)
1000f58c:	dec00f04 	addi	sp,sp,60
1000f590:	f800283a 	ret

1000f594 <__ledf2>:
1000f594:	defff104 	addi	sp,sp,-60
1000f598:	d9000c15 	stw	r4,48(sp)
1000f59c:	d9400d15 	stw	r5,52(sp)
1000f5a0:	d9000c04 	addi	r4,sp,48
1000f5a4:	d9400504 	addi	r5,sp,20
1000f5a8:	dfc00e15 	stw	ra,56(sp)
1000f5ac:	d9800a15 	stw	r6,40(sp)
1000f5b0:	d9c00b15 	stw	r7,44(sp)
1000f5b4:	000fd840 	call	1000fd84 <__unpack_d>
1000f5b8:	d9000a04 	addi	r4,sp,40
1000f5bc:	d80b883a 	mov	r5,sp
1000f5c0:	000fd840 	call	1000fd84 <__unpack_d>
1000f5c4:	d8c00517 	ldw	r3,20(sp)
1000f5c8:	00800044 	movi	r2,1
1000f5cc:	10c0052e 	bgeu	r2,r3,1000f5e4 <__ledf2+0x50>
1000f5d0:	d8c00017 	ldw	r3,0(sp)
1000f5d4:	10c0032e 	bgeu	r2,r3,1000f5e4 <__ledf2+0x50>
1000f5d8:	d9000504 	addi	r4,sp,20
1000f5dc:	d80b883a 	mov	r5,sp
1000f5e0:	000fe880 	call	1000fe88 <__fpcmp_parts_d>
1000f5e4:	dfc00e17 	ldw	ra,56(sp)
1000f5e8:	dec00f04 	addi	sp,sp,60
1000f5ec:	f800283a 	ret

1000f5f0 <__floatsidf>:
1000f5f0:	2004d7fa 	srli	r2,r4,31
1000f5f4:	defff904 	addi	sp,sp,-28
1000f5f8:	00c000c4 	movi	r3,3
1000f5fc:	dfc00615 	stw	ra,24(sp)
1000f600:	dc000515 	stw	r16,20(sp)
1000f604:	d8c00015 	stw	r3,0(sp)
1000f608:	d8800115 	stw	r2,4(sp)
1000f60c:	2000081e 	bne	r4,zero,1000f630 <__floatsidf+0x40>
1000f610:	00800084 	movi	r2,2
1000f614:	d8800015 	stw	r2,0(sp)
1000f618:	d809883a 	mov	r4,sp
1000f61c:	000fb600 	call	1000fb60 <__pack_d>
1000f620:	dfc00617 	ldw	ra,24(sp)
1000f624:	dc000517 	ldw	r16,20(sp)
1000f628:	dec00704 	addi	sp,sp,28
1000f62c:	f800283a 	ret
1000f630:	00c00f04 	movi	r3,60
1000f634:	d8c00215 	stw	r3,8(sp)
1000f638:	10000f1e 	bne	r2,zero,1000f678 <__floatsidf+0x88>
1000f63c:	2021883a 	mov	r16,r4
1000f640:	8009883a 	mov	r4,r16
1000f644:	000f9040 	call	1000f904 <__clzsi2>
1000f648:	11000744 	addi	r4,r2,29
1000f64c:	0100110e 	bge	zero,r4,1000f694 <__floatsidf+0xa4>
1000f650:	10ffff44 	addi	r3,r2,-3
1000f654:	18001216 	blt	r3,zero,1000f6a0 <__floatsidf+0xb0>
1000f658:	80c6983a 	sll	r3,r16,r3
1000f65c:	0009883a 	mov	r4,zero
1000f660:	014007c4 	movi	r5,31
1000f664:	2885c83a 	sub	r2,r5,r2
1000f668:	d9000315 	stw	r4,12(sp)
1000f66c:	d8c00415 	stw	r3,16(sp)
1000f670:	d8800215 	stw	r2,8(sp)
1000f674:	003fe806 	br	1000f618 <__alt_data_end+0xf800f618>
1000f678:	00a00034 	movhi	r2,32768
1000f67c:	20800e26 	beq	r4,r2,1000f6b8 <__floatsidf+0xc8>
1000f680:	0121c83a 	sub	r16,zero,r4
1000f684:	8009883a 	mov	r4,r16
1000f688:	000f9040 	call	1000f904 <__clzsi2>
1000f68c:	11000744 	addi	r4,r2,29
1000f690:	013fef16 	blt	zero,r4,1000f650 <__alt_data_end+0xf800f650>
1000f694:	dc000315 	stw	r16,12(sp)
1000f698:	d8000415 	stw	zero,16(sp)
1000f69c:	003fde06 	br	1000f618 <__alt_data_end+0xf800f618>
1000f6a0:	800ad07a 	srli	r5,r16,1
1000f6a4:	00c007c4 	movi	r3,31
1000f6a8:	1907c83a 	sub	r3,r3,r4
1000f6ac:	28c6d83a 	srl	r3,r5,r3
1000f6b0:	8108983a 	sll	r4,r16,r4
1000f6b4:	003fea06 	br	1000f660 <__alt_data_end+0xf800f660>
1000f6b8:	0005883a 	mov	r2,zero
1000f6bc:	00f07834 	movhi	r3,49632
1000f6c0:	003fd706 	br	1000f620 <__alt_data_end+0xf800f620>

1000f6c4 <__fixdfsi>:
1000f6c4:	defff804 	addi	sp,sp,-32
1000f6c8:	d9000515 	stw	r4,20(sp)
1000f6cc:	d9400615 	stw	r5,24(sp)
1000f6d0:	d9000504 	addi	r4,sp,20
1000f6d4:	d80b883a 	mov	r5,sp
1000f6d8:	dfc00715 	stw	ra,28(sp)
1000f6dc:	000fd840 	call	1000fd84 <__unpack_d>
1000f6e0:	d8800017 	ldw	r2,0(sp)
1000f6e4:	00c00084 	movi	r3,2
1000f6e8:	10c01c26 	beq	r2,r3,1000f75c <__fixdfsi+0x98>
1000f6ec:	00c00044 	movi	r3,1
1000f6f0:	18801a2e 	bgeu	r3,r2,1000f75c <__fixdfsi+0x98>
1000f6f4:	00c00104 	movi	r3,4
1000f6f8:	10c01126 	beq	r2,r3,1000f740 <__fixdfsi+0x7c>
1000f6fc:	d8800217 	ldw	r2,8(sp)
1000f700:	10001616 	blt	r2,zero,1000f75c <__fixdfsi+0x98>
1000f704:	00c00784 	movi	r3,30
1000f708:	18800d16 	blt	r3,r2,1000f740 <__fixdfsi+0x7c>
1000f70c:	00c00f04 	movi	r3,60
1000f710:	1885c83a 	sub	r2,r3,r2
1000f714:	10fff804 	addi	r3,r2,-32
1000f718:	d9400317 	ldw	r5,12(sp)
1000f71c:	d9000417 	ldw	r4,16(sp)
1000f720:	18001216 	blt	r3,zero,1000f76c <__fixdfsi+0xa8>
1000f724:	20c4d83a 	srl	r2,r4,r3
1000f728:	d8c00117 	ldw	r3,4(sp)
1000f72c:	18000826 	beq	r3,zero,1000f750 <__fixdfsi+0x8c>
1000f730:	0085c83a 	sub	r2,zero,r2
1000f734:	dfc00717 	ldw	ra,28(sp)
1000f738:	dec00804 	addi	sp,sp,32
1000f73c:	f800283a 	ret
1000f740:	d8800117 	ldw	r2,4(sp)
1000f744:	00e00034 	movhi	r3,32768
1000f748:	1005003a 	cmpeq	r2,r2,zero
1000f74c:	1885c83a 	sub	r2,r3,r2
1000f750:	dfc00717 	ldw	ra,28(sp)
1000f754:	dec00804 	addi	sp,sp,32
1000f758:	f800283a 	ret
1000f75c:	0005883a 	mov	r2,zero
1000f760:	dfc00717 	ldw	ra,28(sp)
1000f764:	dec00804 	addi	sp,sp,32
1000f768:	f800283a 	ret
1000f76c:	2008907a 	slli	r4,r4,1
1000f770:	018007c4 	movi	r6,31
1000f774:	308dc83a 	sub	r6,r6,r2
1000f778:	2188983a 	sll	r4,r4,r6
1000f77c:	2884d83a 	srl	r2,r5,r2
1000f780:	2084b03a 	or	r2,r4,r2
1000f784:	003fe806 	br	1000f728 <__alt_data_end+0xf800f728>

1000f788 <__truncdfsf2>:
1000f788:	defff804 	addi	sp,sp,-32
1000f78c:	d9000515 	stw	r4,20(sp)
1000f790:	d9400615 	stw	r5,24(sp)
1000f794:	d9000504 	addi	r4,sp,20
1000f798:	d80b883a 	mov	r5,sp
1000f79c:	dfc00715 	stw	ra,28(sp)
1000f7a0:	000fd840 	call	1000fd84 <__unpack_d>
1000f7a4:	d8800317 	ldw	r2,12(sp)
1000f7a8:	d8c00417 	ldw	r3,16(sp)
1000f7ac:	01100034 	movhi	r4,16384
1000f7b0:	213fffc4 	addi	r4,r4,-1
1000f7b4:	100ed7ba 	srli	r7,r2,30
1000f7b8:	180690ba 	slli	r3,r3,2
1000f7bc:	1104703a 	and	r2,r2,r4
1000f7c0:	19ceb03a 	or	r7,r3,r7
1000f7c4:	10000126 	beq	r2,zero,1000f7cc <__truncdfsf2+0x44>
1000f7c8:	39c00054 	ori	r7,r7,1
1000f7cc:	d9000017 	ldw	r4,0(sp)
1000f7d0:	d9400117 	ldw	r5,4(sp)
1000f7d4:	d9800217 	ldw	r6,8(sp)
1000f7d8:	000fb340 	call	1000fb34 <__make_fp>
1000f7dc:	dfc00717 	ldw	ra,28(sp)
1000f7e0:	dec00804 	addi	sp,sp,32
1000f7e4:	f800283a 	ret

1000f7e8 <__floatunsidf>:
1000f7e8:	defff904 	addi	sp,sp,-28
1000f7ec:	dc000515 	stw	r16,20(sp)
1000f7f0:	dfc00615 	stw	ra,24(sp)
1000f7f4:	d8000115 	stw	zero,4(sp)
1000f7f8:	2021883a 	mov	r16,r4
1000f7fc:	20001726 	beq	r4,zero,1000f85c <__floatunsidf+0x74>
1000f800:	008000c4 	movi	r2,3
1000f804:	d8800015 	stw	r2,0(sp)
1000f808:	00800f04 	movi	r2,60
1000f80c:	d8800215 	stw	r2,8(sp)
1000f810:	000f9040 	call	1000f904 <__clzsi2>
1000f814:	10c00744 	addi	r3,r2,29
1000f818:	18001816 	blt	r3,zero,1000f87c <__floatunsidf+0x94>
1000f81c:	18002d26 	beq	r3,zero,1000f8d4 <__floatunsidf+0xec>
1000f820:	113fff44 	addi	r4,r2,-3
1000f824:	20002e16 	blt	r4,zero,1000f8e0 <__floatunsidf+0xf8>
1000f828:	8108983a 	sll	r4,r16,r4
1000f82c:	0021883a 	mov	r16,zero
1000f830:	014007c4 	movi	r5,31
1000f834:	2885c83a 	sub	r2,r5,r2
1000f838:	dc000315 	stw	r16,12(sp)
1000f83c:	d9000415 	stw	r4,16(sp)
1000f840:	d8800215 	stw	r2,8(sp)
1000f844:	d809883a 	mov	r4,sp
1000f848:	000fb600 	call	1000fb60 <__pack_d>
1000f84c:	dfc00617 	ldw	ra,24(sp)
1000f850:	dc000517 	ldw	r16,20(sp)
1000f854:	dec00704 	addi	sp,sp,28
1000f858:	f800283a 	ret
1000f85c:	00800084 	movi	r2,2
1000f860:	d809883a 	mov	r4,sp
1000f864:	d8800015 	stw	r2,0(sp)
1000f868:	000fb600 	call	1000fb60 <__pack_d>
1000f86c:	dfc00617 	ldw	ra,24(sp)
1000f870:	dc000517 	ldw	r16,20(sp)
1000f874:	dec00704 	addi	sp,sp,28
1000f878:	f800283a 	ret
1000f87c:	00c7c83a 	sub	r3,zero,r3
1000f880:	193ff804 	addi	r4,r3,-32
1000f884:	20001c16 	blt	r4,zero,1000f8f8 <__floatunsidf+0x110>
1000f888:	000b883a 	mov	r5,zero
1000f88c:	2009d7fa 	srai	r4,r4,31
1000f890:	80c6d83a 	srl	r3,r16,r3
1000f894:	297fffc4 	addi	r5,r5,-1
1000f898:	2c20703a 	and	r16,r5,r16
1000f89c:	8020c03a 	cmpne	r16,r16,zero
1000f8a0:	1906703a 	and	r3,r3,r4
1000f8a4:	010007c4 	movi	r4,31
1000f8a8:	80c6b03a 	or	r3,r16,r3
1000f8ac:	2085c83a 	sub	r2,r4,r2
1000f8b0:	d809883a 	mov	r4,sp
1000f8b4:	d8c00315 	stw	r3,12(sp)
1000f8b8:	d8000415 	stw	zero,16(sp)
1000f8bc:	d8800215 	stw	r2,8(sp)
1000f8c0:	000fb600 	call	1000fb60 <__pack_d>
1000f8c4:	dfc00617 	ldw	ra,24(sp)
1000f8c8:	dc000517 	ldw	r16,20(sp)
1000f8cc:	dec00704 	addi	sp,sp,28
1000f8d0:	f800283a 	ret
1000f8d4:	dc000315 	stw	r16,12(sp)
1000f8d8:	d8000415 	stw	zero,16(sp)
1000f8dc:	003fd906 	br	1000f844 <__alt_data_end+0xf800f844>
1000f8e0:	800ad07a 	srli	r5,r16,1
1000f8e4:	010007c4 	movi	r4,31
1000f8e8:	20c9c83a 	sub	r4,r4,r3
1000f8ec:	2908d83a 	srl	r4,r5,r4
1000f8f0:	80e0983a 	sll	r16,r16,r3
1000f8f4:	003fce06 	br	1000f830 <__alt_data_end+0xf800f830>
1000f8f8:	01400044 	movi	r5,1
1000f8fc:	28ca983a 	sll	r5,r5,r3
1000f900:	003fe206 	br	1000f88c <__alt_data_end+0xf800f88c>

1000f904 <__clzsi2>:
1000f904:	00bfffd4 	movui	r2,65535
1000f908:	11000b36 	bltu	r2,r4,1000f938 <__clzsi2+0x34>
1000f90c:	00803fc4 	movi	r2,255
1000f910:	11001e2e 	bgeu	r2,r4,1000f98c <__clzsi2+0x88>
1000f914:	00c00204 	movi	r3,8
1000f918:	20c8d83a 	srl	r4,r4,r3
1000f91c:	00c40074 	movhi	r3,4097
1000f920:	18cb3a04 	addi	r3,r3,11496
1000f924:	00800604 	movi	r2,24
1000f928:	1909883a 	add	r4,r3,r4
1000f92c:	20c00003 	ldbu	r3,0(r4)
1000f930:	10c5c83a 	sub	r2,r2,r3
1000f934:	f800283a 	ret
1000f938:	00804034 	movhi	r2,256
1000f93c:	10bfffc4 	addi	r2,r2,-1
1000f940:	11000936 	bltu	r2,r4,1000f968 <__clzsi2+0x64>
1000f944:	00800404 	movi	r2,16
1000f948:	1007883a 	mov	r3,r2
1000f94c:	20c8d83a 	srl	r4,r4,r3
1000f950:	00c40074 	movhi	r3,4097
1000f954:	18cb3a04 	addi	r3,r3,11496
1000f958:	1909883a 	add	r4,r3,r4
1000f95c:	20c00003 	ldbu	r3,0(r4)
1000f960:	10c5c83a 	sub	r2,r2,r3
1000f964:	f800283a 	ret
1000f968:	00c00604 	movi	r3,24
1000f96c:	20c8d83a 	srl	r4,r4,r3
1000f970:	00c40074 	movhi	r3,4097
1000f974:	18cb3a04 	addi	r3,r3,11496
1000f978:	00800204 	movi	r2,8
1000f97c:	1909883a 	add	r4,r3,r4
1000f980:	20c00003 	ldbu	r3,0(r4)
1000f984:	10c5c83a 	sub	r2,r2,r3
1000f988:	f800283a 	ret
1000f98c:	0007883a 	mov	r3,zero
1000f990:	20c8d83a 	srl	r4,r4,r3
1000f994:	00c40074 	movhi	r3,4097
1000f998:	18cb3a04 	addi	r3,r3,11496
1000f99c:	00800804 	movi	r2,32
1000f9a0:	1909883a 	add	r4,r3,r4
1000f9a4:	20c00003 	ldbu	r3,0(r4)
1000f9a8:	10c5c83a 	sub	r2,r2,r3
1000f9ac:	f800283a 	ret

1000f9b0 <__unpack_f>:
1000f9b0:	20c00017 	ldw	r3,0(r4)
1000f9b4:	00802034 	movhi	r2,128
1000f9b8:	10bfffc4 	addi	r2,r2,-1
1000f9bc:	1808d5fa 	srli	r4,r3,23
1000f9c0:	180cd7fa 	srli	r6,r3,31
1000f9c4:	1884703a 	and	r2,r3,r2
1000f9c8:	21003fcc 	andi	r4,r4,255
1000f9cc:	29800115 	stw	r6,4(r5)
1000f9d0:	2000111e 	bne	r4,zero,1000fa18 <__unpack_f+0x68>
1000f9d4:	10001a26 	beq	r2,zero,1000fa40 <__unpack_f+0x90>
1000f9d8:	00ffe084 	movi	r3,-126
1000f9dc:	100491fa 	slli	r2,r2,7
1000f9e0:	28c00215 	stw	r3,8(r5)
1000f9e4:	00c000c4 	movi	r3,3
1000f9e8:	28c00015 	stw	r3,0(r5)
1000f9ec:	01900034 	movhi	r6,16384
1000f9f0:	31bfffc4 	addi	r6,r6,-1
1000f9f4:	30801036 	bltu	r6,r2,1000fa38 <__unpack_f+0x88>
1000f9f8:	00ffe044 	movi	r3,-127
1000f9fc:	1085883a 	add	r2,r2,r2
1000fa00:	1809883a 	mov	r4,r3
1000fa04:	18ffffc4 	addi	r3,r3,-1
1000fa08:	30bffc2e 	bgeu	r6,r2,1000f9fc <__alt_data_end+0xf800f9fc>
1000fa0c:	29000215 	stw	r4,8(r5)
1000fa10:	28800315 	stw	r2,12(r5)
1000fa14:	f800283a 	ret
1000fa18:	01803fc4 	movi	r6,255
1000fa1c:	21800b26 	beq	r4,r6,1000fa4c <__unpack_f+0x9c>
1000fa20:	100491fa 	slli	r2,r2,7
1000fa24:	213fe044 	addi	r4,r4,-127
1000fa28:	00c000c4 	movi	r3,3
1000fa2c:	10900034 	orhi	r2,r2,16384
1000fa30:	29000215 	stw	r4,8(r5)
1000fa34:	28c00015 	stw	r3,0(r5)
1000fa38:	28800315 	stw	r2,12(r5)
1000fa3c:	f800283a 	ret
1000fa40:	00800084 	movi	r2,2
1000fa44:	28800015 	stw	r2,0(r5)
1000fa48:	f800283a 	ret
1000fa4c:	10000526 	beq	r2,zero,1000fa64 <__unpack_f+0xb4>
1000fa50:	18c0042c 	andhi	r3,r3,16
1000fa54:	18000626 	beq	r3,zero,1000fa70 <__unpack_f+0xc0>
1000fa58:	00c00044 	movi	r3,1
1000fa5c:	28c00015 	stw	r3,0(r5)
1000fa60:	003ff506 	br	1000fa38 <__alt_data_end+0xf800fa38>
1000fa64:	00800104 	movi	r2,4
1000fa68:	28800015 	stw	r2,0(r5)
1000fa6c:	f800283a 	ret
1000fa70:	28000015 	stw	zero,0(r5)
1000fa74:	003ff006 	br	1000fa38 <__alt_data_end+0xf800fa38>

1000fa78 <__fpcmp_parts_f>:
1000fa78:	20c00017 	ldw	r3,0(r4)
1000fa7c:	00800044 	movi	r2,1
1000fa80:	10c0172e 	bgeu	r2,r3,1000fae0 <__fpcmp_parts_f+0x68>
1000fa84:	29800017 	ldw	r6,0(r5)
1000fa88:	1180152e 	bgeu	r2,r6,1000fae0 <__fpcmp_parts_f+0x68>
1000fa8c:	01c00104 	movi	r7,4
1000fa90:	19c02326 	beq	r3,r7,1000fb20 <__fpcmp_parts_f+0xa8>
1000fa94:	31c00926 	beq	r6,r7,1000fabc <__fpcmp_parts_f+0x44>
1000fa98:	01c00084 	movi	r7,2
1000fa9c:	19c00626 	beq	r3,r7,1000fab8 <__fpcmp_parts_f+0x40>
1000faa0:	31c01126 	beq	r6,r7,1000fae8 <__fpcmp_parts_f+0x70>
1000faa4:	20c00117 	ldw	r3,4(r4)
1000faa8:	29800117 	ldw	r6,4(r5)
1000faac:	19801226 	beq	r3,r6,1000faf8 <__fpcmp_parts_f+0x80>
1000fab0:	1800041e 	bne	r3,zero,1000fac4 <__fpcmp_parts_f+0x4c>
1000fab4:	f800283a 	ret
1000fab8:	30c01526 	beq	r6,r3,1000fb10 <__fpcmp_parts_f+0x98>
1000fabc:	28800117 	ldw	r2,4(r5)
1000fac0:	1000071e 	bne	r2,zero,1000fae0 <__fpcmp_parts_f+0x68>
1000fac4:	00bfffc4 	movi	r2,-1
1000fac8:	f800283a 	ret
1000facc:	39801216 	blt	r7,r6,1000fb18 <__fpcmp_parts_f+0xa0>
1000fad0:	21000317 	ldw	r4,12(r4)
1000fad4:	28800317 	ldw	r2,12(r5)
1000fad8:	11000c2e 	bgeu	r2,r4,1000fb0c <__fpcmp_parts_f+0x94>
1000fadc:	183ff91e 	bne	r3,zero,1000fac4 <__alt_data_end+0xf800fac4>
1000fae0:	00800044 	movi	r2,1
1000fae4:	f800283a 	ret
1000fae8:	20800117 	ldw	r2,4(r4)
1000faec:	103ff51e 	bne	r2,zero,1000fac4 <__alt_data_end+0xf800fac4>
1000faf0:	00800044 	movi	r2,1
1000faf4:	f800283a 	ret
1000faf8:	21c00217 	ldw	r7,8(r4)
1000fafc:	29800217 	ldw	r6,8(r5)
1000fb00:	31fff20e 	bge	r6,r7,1000facc <__alt_data_end+0xf800facc>
1000fb04:	183fef1e 	bne	r3,zero,1000fac4 <__alt_data_end+0xf800fac4>
1000fb08:	f800283a 	ret
1000fb0c:	20800236 	bltu	r4,r2,1000fb18 <__fpcmp_parts_f+0xa0>
1000fb10:	0005883a 	mov	r2,zero
1000fb14:	f800283a 	ret
1000fb18:	183fea26 	beq	r3,zero,1000fac4 <__alt_data_end+0xf800fac4>
1000fb1c:	003ff006 	br	1000fae0 <__alt_data_end+0xf800fae0>
1000fb20:	30fff11e 	bne	r6,r3,1000fae8 <__alt_data_end+0xf800fae8>
1000fb24:	28c00117 	ldw	r3,4(r5)
1000fb28:	20800117 	ldw	r2,4(r4)
1000fb2c:	1885c83a 	sub	r2,r3,r2
1000fb30:	f800283a 	ret

1000fb34 <__make_fp>:
1000fb34:	defffb04 	addi	sp,sp,-20
1000fb38:	d9000015 	stw	r4,0(sp)
1000fb3c:	d809883a 	mov	r4,sp
1000fb40:	dfc00415 	stw	ra,16(sp)
1000fb44:	d9400115 	stw	r5,4(sp)
1000fb48:	d9800215 	stw	r6,8(sp)
1000fb4c:	d9c00315 	stw	r7,12(sp)
1000fb50:	000ffe00 	call	1000ffe0 <__pack_f>
1000fb54:	dfc00417 	ldw	ra,16(sp)
1000fb58:	dec00504 	addi	sp,sp,20
1000fb5c:	f800283a 	ret

1000fb60 <__pack_d>:
1000fb60:	20800017 	ldw	r2,0(r4)
1000fb64:	defff804 	addi	sp,sp,-32
1000fb68:	dcc00315 	stw	r19,12(sp)
1000fb6c:	dc800215 	stw	r18,8(sp)
1000fb70:	dfc00715 	stw	ra,28(sp)
1000fb74:	dd800615 	stw	r22,24(sp)
1000fb78:	dd400515 	stw	r21,20(sp)
1000fb7c:	dd000415 	stw	r20,16(sp)
1000fb80:	dc400115 	stw	r17,4(sp)
1000fb84:	dc000015 	stw	r16,0(sp)
1000fb88:	04800044 	movi	r18,1
1000fb8c:	24400317 	ldw	r17,12(r4)
1000fb90:	24000417 	ldw	r16,16(r4)
1000fb94:	24c00117 	ldw	r19,4(r4)
1000fb98:	9080422e 	bgeu	r18,r2,1000fca4 <__pack_d+0x144>
1000fb9c:	00c00104 	movi	r3,4
1000fba0:	10c03c26 	beq	r2,r3,1000fc94 <__pack_d+0x134>
1000fba4:	00c00084 	movi	r3,2
1000fba8:	10c01926 	beq	r2,r3,1000fc10 <__pack_d+0xb0>
1000fbac:	8c04b03a 	or	r2,r17,r16
1000fbb0:	10001726 	beq	r2,zero,1000fc10 <__pack_d+0xb0>
1000fbb4:	21000217 	ldw	r4,8(r4)
1000fbb8:	00bf0084 	movi	r2,-1022
1000fbbc:	20804016 	blt	r4,r2,1000fcc0 <__pack_d+0x160>
1000fbc0:	0080ffc4 	movi	r2,1023
1000fbc4:	11003316 	blt	r2,r4,1000fc94 <__pack_d+0x134>
1000fbc8:	88803fcc 	andi	r2,r17,255
1000fbcc:	00c02004 	movi	r3,128
1000fbd0:	10c02926 	beq	r2,r3,1000fc78 <__pack_d+0x118>
1000fbd4:	88801fc4 	addi	r2,r17,127
1000fbd8:	1463803a 	cmpltu	r17,r2,r17
1000fbdc:	8c21883a 	add	r16,r17,r16
1000fbe0:	1023883a 	mov	r17,r2
1000fbe4:	00880034 	movhi	r2,8192
1000fbe8:	10bfffc4 	addi	r2,r2,-1
1000fbec:	14001c36 	bltu	r2,r16,1000fc60 <__pack_d+0x100>
1000fbf0:	2100ffc4 	addi	r4,r4,1023
1000fbf4:	8006963a 	slli	r3,r16,24
1000fbf8:	8804d23a 	srli	r2,r17,8
1000fbfc:	8020913a 	slli	r16,r16,4
1000fc00:	2101ffcc 	andi	r4,r4,2047
1000fc04:	1884b03a 	or	r2,r3,r2
1000fc08:	8020d33a 	srli	r16,r16,12
1000fc0c:	00000306 	br	1000fc1c <__pack_d+0xbc>
1000fc10:	0009883a 	mov	r4,zero
1000fc14:	0005883a 	mov	r2,zero
1000fc18:	0021883a 	mov	r16,zero
1000fc1c:	2008953a 	slli	r4,r4,20
1000fc20:	982697fa 	slli	r19,r19,31
1000fc24:	00c00434 	movhi	r3,16
1000fc28:	18ffffc4 	addi	r3,r3,-1
1000fc2c:	80e0703a 	and	r16,r16,r3
1000fc30:	8106b03a 	or	r3,r16,r4
1000fc34:	1cc6b03a 	or	r3,r3,r19
1000fc38:	dfc00717 	ldw	ra,28(sp)
1000fc3c:	dd800617 	ldw	r22,24(sp)
1000fc40:	dd400517 	ldw	r21,20(sp)
1000fc44:	dd000417 	ldw	r20,16(sp)
1000fc48:	dcc00317 	ldw	r19,12(sp)
1000fc4c:	dc800217 	ldw	r18,8(sp)
1000fc50:	dc400117 	ldw	r17,4(sp)
1000fc54:	dc000017 	ldw	r16,0(sp)
1000fc58:	dec00804 	addi	sp,sp,32
1000fc5c:	f800283a 	ret
1000fc60:	800697fa 	slli	r3,r16,31
1000fc64:	8804d07a 	srli	r2,r17,1
1000fc68:	21010004 	addi	r4,r4,1024
1000fc6c:	8020d07a 	srli	r16,r16,1
1000fc70:	18a2b03a 	or	r17,r3,r2
1000fc74:	003fdf06 	br	1000fbf4 <__alt_data_end+0xf800fbf4>
1000fc78:	88c0400c 	andi	r3,r17,256
1000fc7c:	183fd926 	beq	r3,zero,1000fbe4 <__alt_data_end+0xf800fbe4>
1000fc80:	8885883a 	add	r2,r17,r2
1000fc84:	1463803a 	cmpltu	r17,r2,r17
1000fc88:	8c21883a 	add	r16,r17,r16
1000fc8c:	1023883a 	mov	r17,r2
1000fc90:	003fd406 	br	1000fbe4 <__alt_data_end+0xf800fbe4>
1000fc94:	0101ffc4 	movi	r4,2047
1000fc98:	0005883a 	mov	r2,zero
1000fc9c:	0021883a 	mov	r16,zero
1000fca0:	003fde06 	br	1000fc1c <__alt_data_end+0xf800fc1c>
1000fca4:	84000234 	orhi	r16,r16,8
1000fca8:	00c00434 	movhi	r3,16
1000fcac:	18ffffc4 	addi	r3,r3,-1
1000fcb0:	8805883a 	mov	r2,r17
1000fcb4:	80e0703a 	and	r16,r16,r3
1000fcb8:	0101ffc4 	movi	r4,2047
1000fcbc:	003fd706 	br	1000fc1c <__alt_data_end+0xf800fc1c>
1000fcc0:	1129c83a 	sub	r20,r2,r4
1000fcc4:	00800e04 	movi	r2,56
1000fcc8:	15002716 	blt	r2,r20,1000fd68 <__pack_d+0x208>
1000fccc:	800b883a 	mov	r5,r16
1000fcd0:	a00d883a 	mov	r6,r20
1000fcd4:	8809883a 	mov	r4,r17
1000fcd8:	000ff580 	call	1000ff58 <__lshrdi3>
1000fcdc:	9009883a 	mov	r4,r18
1000fce0:	000b883a 	mov	r5,zero
1000fce4:	a00d883a 	mov	r6,r20
1000fce8:	102d883a 	mov	r22,r2
1000fcec:	182b883a 	mov	r21,r3
1000fcf0:	000ff9c0 	call	1000ff9c <__ashldi3>
1000fcf4:	1009003a 	cmpeq	r4,r2,zero
1000fcf8:	1907c83a 	sub	r3,r3,r4
1000fcfc:	10bfffc4 	addi	r2,r2,-1
1000fd00:	1c20703a 	and	r16,r3,r16
1000fd04:	1444703a 	and	r2,r2,r17
1000fd08:	1404b03a 	or	r2,r2,r16
1000fd0c:	1004c03a 	cmpne	r2,r2,zero
1000fd10:	1584b03a 	or	r2,r2,r22
1000fd14:	11003fcc 	andi	r4,r2,255
1000fd18:	01402004 	movi	r5,128
1000fd1c:	a807883a 	mov	r3,r21
1000fd20:	2140131e 	bne	r4,r5,1000fd70 <__pack_d+0x210>
1000fd24:	1140400c 	andi	r5,r2,256
1000fd28:	28000426 	beq	r5,zero,1000fd3c <__pack_d+0x1dc>
1000fd2c:	1109883a 	add	r4,r2,r4
1000fd30:	2085803a 	cmpltu	r2,r4,r2
1000fd34:	1547883a 	add	r3,r2,r21
1000fd38:	2005883a 	mov	r2,r4
1000fd3c:	1808963a 	slli	r4,r3,24
1000fd40:	1004d23a 	srli	r2,r2,8
1000fd44:	1820913a 	slli	r16,r3,4
1000fd48:	01440034 	movhi	r5,4096
1000fd4c:	297fffc4 	addi	r5,r5,-1
1000fd50:	2084b03a 	or	r2,r4,r2
1000fd54:	8020d33a 	srli	r16,r16,12
1000fd58:	01000044 	movi	r4,1
1000fd5c:	28ffaf36 	bltu	r5,r3,1000fc1c <__alt_data_end+0xf800fc1c>
1000fd60:	0009883a 	mov	r4,zero
1000fd64:	003fad06 	br	1000fc1c <__alt_data_end+0xf800fc1c>
1000fd68:	0005883a 	mov	r2,zero
1000fd6c:	0007883a 	mov	r3,zero
1000fd70:	11001fc4 	addi	r4,r2,127
1000fd74:	2085803a 	cmpltu	r2,r4,r2
1000fd78:	10c7883a 	add	r3,r2,r3
1000fd7c:	2005883a 	mov	r2,r4
1000fd80:	003fee06 	br	1000fd3c <__alt_data_end+0xf800fd3c>

1000fd84 <__unpack_d>:
1000fd84:	21800117 	ldw	r6,4(r4)
1000fd88:	20c00017 	ldw	r3,0(r4)
1000fd8c:	3004d7fa 	srli	r2,r6,31
1000fd90:	3008d53a 	srli	r4,r6,20
1000fd94:	28800115 	stw	r2,4(r5)
1000fd98:	2101ffcc 	andi	r4,r4,2047
1000fd9c:	00800434 	movhi	r2,16
1000fda0:	10bfffc4 	addi	r2,r2,-1
1000fda4:	3084703a 	and	r2,r6,r2
1000fda8:	20001a1e 	bne	r4,zero,1000fe14 <__unpack_d+0x90>
1000fdac:	1888b03a 	or	r4,r3,r2
1000fdb0:	20002626 	beq	r4,zero,1000fe4c <__unpack_d+0xc8>
1000fdb4:	1808d63a 	srli	r4,r3,24
1000fdb8:	1004923a 	slli	r2,r2,8
1000fdbc:	01bf0084 	movi	r6,-1022
1000fdc0:	29800215 	stw	r6,8(r5)
1000fdc4:	2084b03a 	or	r2,r4,r2
1000fdc8:	010000c4 	movi	r4,3
1000fdcc:	29000015 	stw	r4,0(r5)
1000fdd0:	02040034 	movhi	r8,4096
1000fdd4:	423fffc4 	addi	r8,r8,-1
1000fdd8:	1806923a 	slli	r3,r3,8
1000fddc:	40801836 	bltu	r8,r2,1000fe40 <__unpack_d+0xbc>
1000fde0:	013f0044 	movi	r4,-1023
1000fde4:	18cd883a 	add	r6,r3,r3
1000fde8:	30c7803a 	cmpltu	r3,r6,r3
1000fdec:	1085883a 	add	r2,r2,r2
1000fdf0:	1885883a 	add	r2,r3,r2
1000fdf4:	200f883a 	mov	r7,r4
1000fdf8:	3007883a 	mov	r3,r6
1000fdfc:	213fffc4 	addi	r4,r4,-1
1000fe00:	40bff82e 	bgeu	r8,r2,1000fde4 <__alt_data_end+0xf800fde4>
1000fe04:	29c00215 	stw	r7,8(r5)
1000fe08:	28c00315 	stw	r3,12(r5)
1000fe0c:	28800415 	stw	r2,16(r5)
1000fe10:	f800283a 	ret
1000fe14:	01c1ffc4 	movi	r7,2047
1000fe18:	21c00f26 	beq	r4,r7,1000fe58 <__unpack_d+0xd4>
1000fe1c:	180cd63a 	srli	r6,r3,24
1000fe20:	1004923a 	slli	r2,r2,8
1000fe24:	213f0044 	addi	r4,r4,-1023
1000fe28:	1806923a 	slli	r3,r3,8
1000fe2c:	3084b03a 	or	r2,r6,r2
1000fe30:	29000215 	stw	r4,8(r5)
1000fe34:	010000c4 	movi	r4,3
1000fe38:	10840034 	orhi	r2,r2,4096
1000fe3c:	29000015 	stw	r4,0(r5)
1000fe40:	28c00315 	stw	r3,12(r5)
1000fe44:	28800415 	stw	r2,16(r5)
1000fe48:	f800283a 	ret
1000fe4c:	00800084 	movi	r2,2
1000fe50:	28800015 	stw	r2,0(r5)
1000fe54:	f800283a 	ret
1000fe58:	1888b03a 	or	r4,r3,r2
1000fe5c:	20000526 	beq	r4,zero,1000fe74 <__unpack_d+0xf0>
1000fe60:	3180022c 	andhi	r6,r6,8
1000fe64:	30000626 	beq	r6,zero,1000fe80 <__unpack_d+0xfc>
1000fe68:	01000044 	movi	r4,1
1000fe6c:	29000015 	stw	r4,0(r5)
1000fe70:	003ff306 	br	1000fe40 <__alt_data_end+0xf800fe40>
1000fe74:	00800104 	movi	r2,4
1000fe78:	28800015 	stw	r2,0(r5)
1000fe7c:	f800283a 	ret
1000fe80:	28000015 	stw	zero,0(r5)
1000fe84:	003fee06 	br	1000fe40 <__alt_data_end+0xf800fe40>

1000fe88 <__fpcmp_parts_d>:
1000fe88:	20c00017 	ldw	r3,0(r4)
1000fe8c:	00800044 	movi	r2,1
1000fe90:	10c0142e 	bgeu	r2,r3,1000fee4 <__fpcmp_parts_d+0x5c>
1000fe94:	29800017 	ldw	r6,0(r5)
1000fe98:	1180122e 	bgeu	r2,r6,1000fee4 <__fpcmp_parts_d+0x5c>
1000fe9c:	01c00104 	movi	r7,4
1000fea0:	19c02826 	beq	r3,r7,1000ff44 <__fpcmp_parts_d+0xbc>
1000fea4:	31c00926 	beq	r6,r7,1000fecc <__fpcmp_parts_d+0x44>
1000fea8:	01c00084 	movi	r7,2
1000feac:	19c00626 	beq	r3,r7,1000fec8 <__fpcmp_parts_d+0x40>
1000feb0:	31c00a26 	beq	r6,r7,1000fedc <__fpcmp_parts_d+0x54>
1000feb4:	20c00117 	ldw	r3,4(r4)
1000feb8:	29800117 	ldw	r6,4(r5)
1000febc:	19800b26 	beq	r3,r6,1000feec <__fpcmp_parts_d+0x64>
1000fec0:	1800041e 	bne	r3,zero,1000fed4 <__fpcmp_parts_d+0x4c>
1000fec4:	f800283a 	ret
1000fec8:	30c01a26 	beq	r6,r3,1000ff34 <__fpcmp_parts_d+0xac>
1000fecc:	28800117 	ldw	r2,4(r5)
1000fed0:	1000041e 	bne	r2,zero,1000fee4 <__fpcmp_parts_d+0x5c>
1000fed4:	00bfffc4 	movi	r2,-1
1000fed8:	f800283a 	ret
1000fedc:	20800117 	ldw	r2,4(r4)
1000fee0:	103ffc1e 	bne	r2,zero,1000fed4 <__alt_data_end+0xf800fed4>
1000fee4:	00800044 	movi	r2,1
1000fee8:	f800283a 	ret
1000feec:	21c00217 	ldw	r7,8(r4)
1000fef0:	29800217 	ldw	r6,8(r5)
1000fef4:	31c0020e 	bge	r6,r7,1000ff00 <__fpcmp_parts_d+0x78>
1000fef8:	183ff61e 	bne	r3,zero,1000fed4 <__alt_data_end+0xf800fed4>
1000fefc:	f800283a 	ret
1000ff00:	39800a16 	blt	r7,r6,1000ff2c <__fpcmp_parts_d+0xa4>
1000ff04:	20800417 	ldw	r2,16(r4)
1000ff08:	29800417 	ldw	r6,16(r5)
1000ff0c:	21c00317 	ldw	r7,12(r4)
1000ff10:	29000317 	ldw	r4,12(r5)
1000ff14:	30800936 	bltu	r6,r2,1000ff3c <__fpcmp_parts_d+0xb4>
1000ff18:	1180011e 	bne	r2,r6,1000ff20 <__fpcmp_parts_d+0x98>
1000ff1c:	21c00736 	bltu	r4,r7,1000ff3c <__fpcmp_parts_d+0xb4>
1000ff20:	11800236 	bltu	r2,r6,1000ff2c <__fpcmp_parts_d+0xa4>
1000ff24:	3080031e 	bne	r6,r2,1000ff34 <__fpcmp_parts_d+0xac>
1000ff28:	3900022e 	bgeu	r7,r4,1000ff34 <__fpcmp_parts_d+0xac>
1000ff2c:	183fe926 	beq	r3,zero,1000fed4 <__alt_data_end+0xf800fed4>
1000ff30:	003fec06 	br	1000fee4 <__alt_data_end+0xf800fee4>
1000ff34:	0005883a 	mov	r2,zero
1000ff38:	f800283a 	ret
1000ff3c:	183fe926 	beq	r3,zero,1000fee4 <__alt_data_end+0xf800fee4>
1000ff40:	003fe406 	br	1000fed4 <__alt_data_end+0xf800fed4>
1000ff44:	30ffe51e 	bne	r6,r3,1000fedc <__alt_data_end+0xf800fedc>
1000ff48:	28c00117 	ldw	r3,4(r5)
1000ff4c:	20800117 	ldw	r2,4(r4)
1000ff50:	1885c83a 	sub	r2,r3,r2
1000ff54:	f800283a 	ret

1000ff58 <__lshrdi3>:
1000ff58:	2005883a 	mov	r2,r4
1000ff5c:	2807883a 	mov	r3,r5
1000ff60:	30000826 	beq	r6,zero,1000ff84 <__lshrdi3+0x2c>
1000ff64:	01000804 	movi	r4,32
1000ff68:	2189c83a 	sub	r4,r4,r6
1000ff6c:	0100060e 	bge	zero,r4,1000ff88 <__lshrdi3+0x30>
1000ff70:	1184d83a 	srl	r2,r2,r6
1000ff74:	2908983a 	sll	r4,r5,r4
1000ff78:	298cd83a 	srl	r6,r5,r6
1000ff7c:	2084b03a 	or	r2,r4,r2
1000ff80:	3007883a 	mov	r3,r6
1000ff84:	f800283a 	ret
1000ff88:	0105c83a 	sub	r2,zero,r4
1000ff8c:	000d883a 	mov	r6,zero
1000ff90:	2884d83a 	srl	r2,r5,r2
1000ff94:	3007883a 	mov	r3,r6
1000ff98:	003ffa06 	br	1000ff84 <__alt_data_end+0xf800ff84>

1000ff9c <__ashldi3>:
1000ff9c:	2005883a 	mov	r2,r4
1000ffa0:	2807883a 	mov	r3,r5
1000ffa4:	30000826 	beq	r6,zero,1000ffc8 <__ashldi3+0x2c>
1000ffa8:	01000804 	movi	r4,32
1000ffac:	2189c83a 	sub	r4,r4,r6
1000ffb0:	0100060e 	bge	zero,r4,1000ffcc <__ashldi3+0x30>
1000ffb4:	1108d83a 	srl	r4,r2,r4
1000ffb8:	2986983a 	sll	r3,r5,r6
1000ffbc:	118c983a 	sll	r6,r2,r6
1000ffc0:	20c6b03a 	or	r3,r4,r3
1000ffc4:	3005883a 	mov	r2,r6
1000ffc8:	f800283a 	ret
1000ffcc:	0107c83a 	sub	r3,zero,r4
1000ffd0:	000d883a 	mov	r6,zero
1000ffd4:	10c6983a 	sll	r3,r2,r3
1000ffd8:	3005883a 	mov	r2,r6
1000ffdc:	003ffa06 	br	1000ffc8 <__alt_data_end+0xf800ffc8>

1000ffe0 <__pack_f>:
1000ffe0:	21400017 	ldw	r5,0(r4)
1000ffe4:	01800044 	movi	r6,1
1000ffe8:	20c00317 	ldw	r3,12(r4)
1000ffec:	21c00117 	ldw	r7,4(r4)
1000fff0:	3140282e 	bgeu	r6,r5,10010094 <__pack_f+0xb4>
1000fff4:	00800104 	movi	r2,4
1000fff8:	28802326 	beq	r5,r2,10010088 <__pack_f+0xa8>
1000fffc:	00800084 	movi	r2,2
10010000:	28800f26 	beq	r5,r2,10010040 <__pack_f+0x60>
10010004:	18000e26 	beq	r3,zero,10010040 <__pack_f+0x60>
10010008:	21000217 	ldw	r4,8(r4)
1001000c:	00bfe084 	movi	r2,-126
10010010:	20802616 	blt	r4,r2,100100ac <__pack_f+0xcc>
10010014:	00801fc4 	movi	r2,127
10010018:	11001b16 	blt	r2,r4,10010088 <__pack_f+0xa8>
1001001c:	188a703a 	and	r5,r3,r2
10010020:	00801004 	movi	r2,64
10010024:	28801126 	beq	r5,r2,1001006c <__pack_f+0x8c>
10010028:	18c00fc4 	addi	r3,r3,63
1001002c:	18001316 	blt	r3,zero,1001007c <__pack_f+0x9c>
10010030:	21001fc4 	addi	r4,r4,127
10010034:	180690ba 	slli	r3,r3,2
10010038:	1806d27a 	srli	r3,r3,9
1001003c:	00000206 	br	10010048 <__pack_f+0x68>
10010040:	0009883a 	mov	r4,zero
10010044:	0007883a 	mov	r3,zero
10010048:	21003fcc 	andi	r4,r4,255
1001004c:	200895fa 	slli	r4,r4,23
10010050:	380a97fa 	slli	r5,r7,31
10010054:	00802034 	movhi	r2,128
10010058:	10bfffc4 	addi	r2,r2,-1
1001005c:	1886703a 	and	r3,r3,r2
10010060:	1904b03a 	or	r2,r3,r4
10010064:	1144b03a 	or	r2,r2,r5
10010068:	f800283a 	ret
1001006c:	1880200c 	andi	r2,r3,128
10010070:	103fee26 	beq	r2,zero,1001002c <__alt_data_end+0xf801002c>
10010074:	18c01004 	addi	r3,r3,64
10010078:	183fed0e 	bge	r3,zero,10010030 <__alt_data_end+0xf8010030>
1001007c:	1806d07a 	srli	r3,r3,1
10010080:	21002004 	addi	r4,r4,128
10010084:	003feb06 	br	10010034 <__alt_data_end+0xf8010034>
10010088:	013fffc4 	movi	r4,-1
1001008c:	0007883a 	mov	r3,zero
10010090:	003fed06 	br	10010048 <__alt_data_end+0xf8010048>
10010094:	18c00434 	orhi	r3,r3,16
10010098:	00802034 	movhi	r2,128
1001009c:	10bfffc4 	addi	r2,r2,-1
100100a0:	1886703a 	and	r3,r3,r2
100100a4:	013fffc4 	movi	r4,-1
100100a8:	003fe706 	br	10010048 <__alt_data_end+0xf8010048>
100100ac:	1105c83a 	sub	r2,r2,r4
100100b0:	01000644 	movi	r4,25
100100b4:	20801216 	blt	r4,r2,10010100 <__pack_f+0x120>
100100b8:	3088983a 	sll	r4,r6,r2
100100bc:	1884d83a 	srl	r2,r3,r2
100100c0:	213fffc4 	addi	r4,r4,-1
100100c4:	20c6703a 	and	r3,r4,r3
100100c8:	1806c03a 	cmpne	r3,r3,zero
100100cc:	1884b03a 	or	r2,r3,r2
100100d0:	11001fcc 	andi	r4,r2,127
100100d4:	00c01004 	movi	r3,64
100100d8:	20c00a1e 	bne	r4,r3,10010104 <__pack_f+0x124>
100100dc:	10c0200c 	andi	r3,r2,128
100100e0:	18000126 	beq	r3,zero,100100e8 <__pack_f+0x108>
100100e4:	10801004 	addi	r2,r2,64
100100e8:	100690ba 	slli	r3,r2,2
100100ec:	01100034 	movhi	r4,16384
100100f0:	1105403a 	cmpgeu	r2,r2,r4
100100f4:	1806d27a 	srli	r3,r3,9
100100f8:	1009883a 	mov	r4,r2
100100fc:	003fd206 	br	10010048 <__alt_data_end+0xf8010048>
10010100:	0005883a 	mov	r2,zero
10010104:	10800fc4 	addi	r2,r2,63
10010108:	003ff706 	br	100100e8 <__alt_data_end+0xf80100e8>

1001010c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001010c:	defffe04 	addi	sp,sp,-8
10010110:	dfc00115 	stw	ra,4(sp)
10010114:	df000015 	stw	fp,0(sp)
10010118:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001011c:	00840074 	movhi	r2,4097
10010120:	1092ad04 	addi	r2,r2,19124
10010124:	10800017 	ldw	r2,0(r2)
10010128:	10000526 	beq	r2,zero,10010140 <alt_get_errno+0x34>
1001012c:	00840074 	movhi	r2,4097
10010130:	1092ad04 	addi	r2,r2,19124
10010134:	10800017 	ldw	r2,0(r2)
10010138:	103ee83a 	callr	r2
1001013c:	00000206 	br	10010148 <alt_get_errno+0x3c>
10010140:	00840074 	movhi	r2,4097
10010144:	1099e304 	addi	r2,r2,26508
}
10010148:	e037883a 	mov	sp,fp
1001014c:	dfc00117 	ldw	ra,4(sp)
10010150:	df000017 	ldw	fp,0(sp)
10010154:	dec00204 	addi	sp,sp,8
10010158:	f800283a 	ret

1001015c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1001015c:	defffb04 	addi	sp,sp,-20
10010160:	dfc00415 	stw	ra,16(sp)
10010164:	df000315 	stw	fp,12(sp)
10010168:	df000304 	addi	fp,sp,12
1001016c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10010170:	e0bfff17 	ldw	r2,-4(fp)
10010174:	10000716 	blt	r2,zero,10010194 <close+0x38>
10010178:	e13fff17 	ldw	r4,-4(fp)
1001017c:	01400304 	movi	r5,12
10010180:	00012fc0 	call	100012fc <__mulsi3>
10010184:	00c40074 	movhi	r3,4097
10010188:	18ce2a04 	addi	r3,r3,14504
1001018c:	10c5883a 	add	r2,r2,r3
10010190:	00000106 	br	10010198 <close+0x3c>
10010194:	0005883a 	mov	r2,zero
10010198:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1001019c:	e0bffd17 	ldw	r2,-12(fp)
100101a0:	10001826 	beq	r2,zero,10010204 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100101a4:	e0bffd17 	ldw	r2,-12(fp)
100101a8:	10800017 	ldw	r2,0(r2)
100101ac:	10800417 	ldw	r2,16(r2)
100101b0:	10000626 	beq	r2,zero,100101cc <close+0x70>
100101b4:	e0bffd17 	ldw	r2,-12(fp)
100101b8:	10800017 	ldw	r2,0(r2)
100101bc:	10800417 	ldw	r2,16(r2)
100101c0:	e13ffd17 	ldw	r4,-12(fp)
100101c4:	103ee83a 	callr	r2
100101c8:	00000106 	br	100101d0 <close+0x74>
100101cc:	0005883a 	mov	r2,zero
100101d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100101d4:	e13fff17 	ldw	r4,-4(fp)
100101d8:	00108540 	call	10010854 <alt_release_fd>
    if (rval < 0)
100101dc:	e0bffe17 	ldw	r2,-8(fp)
100101e0:	1000060e 	bge	r2,zero,100101fc <close+0xa0>
    {
      ALT_ERRNO = -rval;
100101e4:	001010c0 	call	1001010c <alt_get_errno>
100101e8:	e0fffe17 	ldw	r3,-8(fp)
100101ec:	00c7c83a 	sub	r3,zero,r3
100101f0:	10c00015 	stw	r3,0(r2)
      return -1;
100101f4:	00bfffc4 	movi	r2,-1
100101f8:	00000606 	br	10010214 <close+0xb8>
    }
    return 0;
100101fc:	0005883a 	mov	r2,zero
10010200:	00000406 	br	10010214 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010204:	001010c0 	call	1001010c <alt_get_errno>
10010208:	00c01444 	movi	r3,81
1001020c:	10c00015 	stw	r3,0(r2)
    return -1;
10010210:	00bfffc4 	movi	r2,-1
  }
}
10010214:	e037883a 	mov	sp,fp
10010218:	dfc00117 	ldw	ra,4(sp)
1001021c:	df000017 	ldw	fp,0(sp)
10010220:	dec00204 	addi	sp,sp,8
10010224:	f800283a 	ret

10010228 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10010228:	defffc04 	addi	sp,sp,-16
1001022c:	df000315 	stw	fp,12(sp)
10010230:	df000304 	addi	fp,sp,12
10010234:	e13ffd15 	stw	r4,-12(fp)
10010238:	e17ffe15 	stw	r5,-8(fp)
1001023c:	e1bfff15 	stw	r6,-4(fp)
  return len;
10010240:	e0bfff17 	ldw	r2,-4(fp)
}
10010244:	e037883a 	mov	sp,fp
10010248:	df000017 	ldw	fp,0(sp)
1001024c:	dec00104 	addi	sp,sp,4
10010250:	f800283a 	ret

10010254 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010254:	defffe04 	addi	sp,sp,-8
10010258:	dfc00115 	stw	ra,4(sp)
1001025c:	df000015 	stw	fp,0(sp)
10010260:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010264:	00840074 	movhi	r2,4097
10010268:	1092ad04 	addi	r2,r2,19124
1001026c:	10800017 	ldw	r2,0(r2)
10010270:	10000526 	beq	r2,zero,10010288 <alt_get_errno+0x34>
10010274:	00840074 	movhi	r2,4097
10010278:	1092ad04 	addi	r2,r2,19124
1001027c:	10800017 	ldw	r2,0(r2)
10010280:	103ee83a 	callr	r2
10010284:	00000206 	br	10010290 <alt_get_errno+0x3c>
10010288:	00840074 	movhi	r2,4097
1001028c:	1099e304 	addi	r2,r2,26508
}
10010290:	e037883a 	mov	sp,fp
10010294:	dfc00117 	ldw	ra,4(sp)
10010298:	df000017 	ldw	fp,0(sp)
1001029c:	dec00204 	addi	sp,sp,8
100102a0:	f800283a 	ret

100102a4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100102a4:	defffb04 	addi	sp,sp,-20
100102a8:	dfc00415 	stw	ra,16(sp)
100102ac:	df000315 	stw	fp,12(sp)
100102b0:	df000304 	addi	fp,sp,12
100102b4:	e13ffe15 	stw	r4,-8(fp)
100102b8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100102bc:	e0bffe17 	ldw	r2,-8(fp)
100102c0:	10000716 	blt	r2,zero,100102e0 <fstat+0x3c>
100102c4:	e13ffe17 	ldw	r4,-8(fp)
100102c8:	01400304 	movi	r5,12
100102cc:	00012fc0 	call	100012fc <__mulsi3>
100102d0:	00c40074 	movhi	r3,4097
100102d4:	18ce2a04 	addi	r3,r3,14504
100102d8:	10c5883a 	add	r2,r2,r3
100102dc:	00000106 	br	100102e4 <fstat+0x40>
100102e0:	0005883a 	mov	r2,zero
100102e4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100102e8:	e0bffd17 	ldw	r2,-12(fp)
100102ec:	10001026 	beq	r2,zero,10010330 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100102f0:	e0bffd17 	ldw	r2,-12(fp)
100102f4:	10800017 	ldw	r2,0(r2)
100102f8:	10800817 	ldw	r2,32(r2)
100102fc:	10000726 	beq	r2,zero,1001031c <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
10010300:	e0bffd17 	ldw	r2,-12(fp)
10010304:	10800017 	ldw	r2,0(r2)
10010308:	10800817 	ldw	r2,32(r2)
1001030c:	e13ffd17 	ldw	r4,-12(fp)
10010310:	e17fff17 	ldw	r5,-4(fp)
10010314:	103ee83a 	callr	r2
10010318:	00000906 	br	10010340 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1001031c:	e0bfff17 	ldw	r2,-4(fp)
10010320:	00c80004 	movi	r3,8192
10010324:	10c00115 	stw	r3,4(r2)
      return 0;
10010328:	0005883a 	mov	r2,zero
1001032c:	00000406 	br	10010340 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010330:	00102540 	call	10010254 <alt_get_errno>
10010334:	00c01444 	movi	r3,81
10010338:	10c00015 	stw	r3,0(r2)
    return -1;
1001033c:	00bfffc4 	movi	r2,-1
  }
}
10010340:	e037883a 	mov	sp,fp
10010344:	dfc00117 	ldw	ra,4(sp)
10010348:	df000017 	ldw	fp,0(sp)
1001034c:	dec00204 	addi	sp,sp,8
10010350:	f800283a 	ret

10010354 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010354:	defffe04 	addi	sp,sp,-8
10010358:	dfc00115 	stw	ra,4(sp)
1001035c:	df000015 	stw	fp,0(sp)
10010360:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010364:	00840074 	movhi	r2,4097
10010368:	1092ad04 	addi	r2,r2,19124
1001036c:	10800017 	ldw	r2,0(r2)
10010370:	10000526 	beq	r2,zero,10010388 <alt_get_errno+0x34>
10010374:	00840074 	movhi	r2,4097
10010378:	1092ad04 	addi	r2,r2,19124
1001037c:	10800017 	ldw	r2,0(r2)
10010380:	103ee83a 	callr	r2
10010384:	00000206 	br	10010390 <alt_get_errno+0x3c>
10010388:	00840074 	movhi	r2,4097
1001038c:	1099e304 	addi	r2,r2,26508
}
10010390:	e037883a 	mov	sp,fp
10010394:	dfc00117 	ldw	ra,4(sp)
10010398:	df000017 	ldw	fp,0(sp)
1001039c:	dec00204 	addi	sp,sp,8
100103a0:	f800283a 	ret

100103a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100103a4:	deffed04 	addi	sp,sp,-76
100103a8:	dfc01215 	stw	ra,72(sp)
100103ac:	df001115 	stw	fp,68(sp)
100103b0:	df001104 	addi	fp,sp,68
100103b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100103b8:	e0bfff17 	ldw	r2,-4(fp)
100103bc:	10000716 	blt	r2,zero,100103dc <isatty+0x38>
100103c0:	e13fff17 	ldw	r4,-4(fp)
100103c4:	01400304 	movi	r5,12
100103c8:	00012fc0 	call	100012fc <__mulsi3>
100103cc:	00c40074 	movhi	r3,4097
100103d0:	18ce2a04 	addi	r3,r3,14504
100103d4:	10c5883a 	add	r2,r2,r3
100103d8:	00000106 	br	100103e0 <isatty+0x3c>
100103dc:	0005883a 	mov	r2,zero
100103e0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100103e4:	e0bfef17 	ldw	r2,-68(fp)
100103e8:	10000e26 	beq	r2,zero,10010424 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100103ec:	e0bfef17 	ldw	r2,-68(fp)
100103f0:	10800017 	ldw	r2,0(r2)
100103f4:	10800817 	ldw	r2,32(r2)
100103f8:	1000021e 	bne	r2,zero,10010404 <isatty+0x60>
    {
      return 1;
100103fc:	00800044 	movi	r2,1
10010400:	00000c06 	br	10010434 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10010404:	e0bff004 	addi	r2,fp,-64
10010408:	e13fff17 	ldw	r4,-4(fp)
1001040c:	100b883a 	mov	r5,r2
10010410:	00102a40 	call	100102a4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10010414:	e0bff117 	ldw	r2,-60(fp)
10010418:	10880020 	cmpeqi	r2,r2,8192
1001041c:	10803fcc 	andi	r2,r2,255
10010420:	00000406 	br	10010434 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010424:	00103540 	call	10010354 <alt_get_errno>
10010428:	00c01444 	movi	r3,81
1001042c:	10c00015 	stw	r3,0(r2)
    return 0;
10010430:	0005883a 	mov	r2,zero
  }
}
10010434:	e037883a 	mov	sp,fp
10010438:	dfc00117 	ldw	ra,4(sp)
1001043c:	df000017 	ldw	fp,0(sp)
10010440:	dec00204 	addi	sp,sp,8
10010444:	f800283a 	ret

10010448 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10010448:	defffc04 	addi	sp,sp,-16
1001044c:	df000315 	stw	fp,12(sp)
10010450:	df000304 	addi	fp,sp,12
10010454:	e13ffd15 	stw	r4,-12(fp)
10010458:	e17ffe15 	stw	r5,-8(fp)
1001045c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10010460:	e0fffe17 	ldw	r3,-8(fp)
10010464:	e0bffd17 	ldw	r2,-12(fp)
10010468:	18800e26 	beq	r3,r2,100104a4 <alt_load_section+0x5c>
  {
    while( to != end )
1001046c:	00000a06 	br	10010498 <alt_load_section+0x50>
    {
      *to++ = *from++;
10010470:	e0bffd17 	ldw	r2,-12(fp)
10010474:	10c00017 	ldw	r3,0(r2)
10010478:	e0bffe17 	ldw	r2,-8(fp)
1001047c:	10c00015 	stw	r3,0(r2)
10010480:	e0bffe17 	ldw	r2,-8(fp)
10010484:	10800104 	addi	r2,r2,4
10010488:	e0bffe15 	stw	r2,-8(fp)
1001048c:	e0bffd17 	ldw	r2,-12(fp)
10010490:	10800104 	addi	r2,r2,4
10010494:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10010498:	e0fffe17 	ldw	r3,-8(fp)
1001049c:	e0bfff17 	ldw	r2,-4(fp)
100104a0:	18bff31e 	bne	r3,r2,10010470 <__alt_data_end+0xf8010470>
    {
      *to++ = *from++;
    }
  }
}
100104a4:	e037883a 	mov	sp,fp
100104a8:	df000017 	ldw	fp,0(sp)
100104ac:	dec00104 	addi	sp,sp,4
100104b0:	f800283a 	ret

100104b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100104b4:	defffe04 	addi	sp,sp,-8
100104b8:	dfc00115 	stw	ra,4(sp)
100104bc:	df000015 	stw	fp,0(sp)
100104c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100104c4:	01040074 	movhi	r4,4097
100104c8:	2112b204 	addi	r4,r4,19144
100104cc:	01440074 	movhi	r5,4097
100104d0:	294b8704 	addi	r5,r5,11804
100104d4:	01840074 	movhi	r6,4097
100104d8:	3192b204 	addi	r6,r6,19144
100104dc:	00104480 	call	10010448 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100104e0:	01040034 	movhi	r4,4096
100104e4:	21000804 	addi	r4,r4,32
100104e8:	01440034 	movhi	r5,4096
100104ec:	29400804 	addi	r5,r5,32
100104f0:	01840034 	movhi	r6,4096
100104f4:	31806e04 	addi	r6,r6,440
100104f8:	00104480 	call	10010448 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100104fc:	01040074 	movhi	r4,4097
10010500:	2109ee04 	addi	r4,r4,10168
10010504:	01440074 	movhi	r5,4097
10010508:	2949ee04 	addi	r5,r5,10168
1001050c:	01840074 	movhi	r6,4097
10010510:	318b8704 	addi	r6,r6,11804
10010514:	00104480 	call	10010448 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10010518:	00117180 	call	10011718 <alt_dcache_flush_all>
  alt_icache_flush_all();
1001051c:	00118dc0 	call	100118dc <alt_icache_flush_all>
}
10010520:	e037883a 	mov	sp,fp
10010524:	dfc00117 	ldw	ra,4(sp)
10010528:	df000017 	ldw	fp,0(sp)
1001052c:	dec00204 	addi	sp,sp,8
10010530:	f800283a 	ret

10010534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010534:	defffe04 	addi	sp,sp,-8
10010538:	dfc00115 	stw	ra,4(sp)
1001053c:	df000015 	stw	fp,0(sp)
10010540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010544:	00840074 	movhi	r2,4097
10010548:	1092ad04 	addi	r2,r2,19124
1001054c:	10800017 	ldw	r2,0(r2)
10010550:	10000526 	beq	r2,zero,10010568 <alt_get_errno+0x34>
10010554:	00840074 	movhi	r2,4097
10010558:	1092ad04 	addi	r2,r2,19124
1001055c:	10800017 	ldw	r2,0(r2)
10010560:	103ee83a 	callr	r2
10010564:	00000206 	br	10010570 <alt_get_errno+0x3c>
10010568:	00840074 	movhi	r2,4097
1001056c:	1099e304 	addi	r2,r2,26508
}
10010570:	e037883a 	mov	sp,fp
10010574:	dfc00117 	ldw	ra,4(sp)
10010578:	df000017 	ldw	fp,0(sp)
1001057c:	dec00204 	addi	sp,sp,8
10010580:	f800283a 	ret

10010584 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10010584:	defff904 	addi	sp,sp,-28
10010588:	dfc00615 	stw	ra,24(sp)
1001058c:	df000515 	stw	fp,20(sp)
10010590:	df000504 	addi	fp,sp,20
10010594:	e13ffd15 	stw	r4,-12(fp)
10010598:	e17ffe15 	stw	r5,-8(fp)
1001059c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100105a0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100105a4:	e0bffd17 	ldw	r2,-12(fp)
100105a8:	10000716 	blt	r2,zero,100105c8 <lseek+0x44>
100105ac:	e13ffd17 	ldw	r4,-12(fp)
100105b0:	01400304 	movi	r5,12
100105b4:	00012fc0 	call	100012fc <__mulsi3>
100105b8:	00c40074 	movhi	r3,4097
100105bc:	18ce2a04 	addi	r3,r3,14504
100105c0:	10c5883a 	add	r2,r2,r3
100105c4:	00000106 	br	100105cc <lseek+0x48>
100105c8:	0005883a 	mov	r2,zero
100105cc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100105d0:	e0bffc17 	ldw	r2,-16(fp)
100105d4:	10001026 	beq	r2,zero,10010618 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100105d8:	e0bffc17 	ldw	r2,-16(fp)
100105dc:	10800017 	ldw	r2,0(r2)
100105e0:	10800717 	ldw	r2,28(r2)
100105e4:	10000926 	beq	r2,zero,1001060c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100105e8:	e0bffc17 	ldw	r2,-16(fp)
100105ec:	10800017 	ldw	r2,0(r2)
100105f0:	10800717 	ldw	r2,28(r2)
100105f4:	e13ffc17 	ldw	r4,-16(fp)
100105f8:	e17ffe17 	ldw	r5,-8(fp)
100105fc:	e1bfff17 	ldw	r6,-4(fp)
10010600:	103ee83a 	callr	r2
10010604:	e0bffb15 	stw	r2,-20(fp)
10010608:	00000506 	br	10010620 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1001060c:	00bfde84 	movi	r2,-134
10010610:	e0bffb15 	stw	r2,-20(fp)
10010614:	00000206 	br	10010620 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
10010618:	00bfebc4 	movi	r2,-81
1001061c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10010620:	e0bffb17 	ldw	r2,-20(fp)
10010624:	1000060e 	bge	r2,zero,10010640 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
10010628:	00105340 	call	10010534 <alt_get_errno>
1001062c:	e0fffb17 	ldw	r3,-20(fp)
10010630:	00c7c83a 	sub	r3,zero,r3
10010634:	10c00015 	stw	r3,0(r2)
    rc = -1;
10010638:	00bfffc4 	movi	r2,-1
1001063c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10010640:	e0bffb17 	ldw	r2,-20(fp)
}
10010644:	e037883a 	mov	sp,fp
10010648:	dfc00117 	ldw	ra,4(sp)
1001064c:	df000017 	ldw	fp,0(sp)
10010650:	dec00204 	addi	sp,sp,8
10010654:	f800283a 	ret

10010658 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10010658:	defffd04 	addi	sp,sp,-12
1001065c:	dfc00215 	stw	ra,8(sp)
10010660:	df000115 	stw	fp,4(sp)
10010664:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10010668:	0009883a 	mov	r4,zero
1001066c:	0010afc0 	call	10010afc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10010670:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10010674:	0010b300 	call	10010b30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10010678:	01040074 	movhi	r4,4097
1001067c:	210b7d04 	addi	r4,r4,11764
10010680:	01440074 	movhi	r5,4097
10010684:	294b7d04 	addi	r5,r5,11764
10010688:	01840074 	movhi	r6,4097
1001068c:	318b7d04 	addi	r6,r6,11764
10010690:	0011ca00 	call	10011ca0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10010694:	00118240 	call	10011824 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010698:	01040074 	movhi	r4,4097
1001069c:	21062004 	addi	r4,r4,6272
100106a0:	00123e40 	call	100123e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100106a4:	d1274217 	ldw	r4,-25336(gp)
100106a8:	d0e74317 	ldw	r3,-25332(gp)
100106ac:	d0a74417 	ldw	r2,-25328(gp)
100106b0:	180b883a 	mov	r5,r3
100106b4:	100d883a 	mov	r6,r2
100106b8:	0000f9c0 	call	10000f9c <main>
100106bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100106c0:	01000044 	movi	r4,1
100106c4:	001015c0 	call	1001015c <close>
  exit (result);
100106c8:	e13fff17 	ldw	r4,-4(fp)
100106cc:	00123f80 	call	100123f8 <exit>

100106d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100106d0:	defffe04 	addi	sp,sp,-8
100106d4:	df000115 	stw	fp,4(sp)
100106d8:	df000104 	addi	fp,sp,4
100106dc:	e13fff15 	stw	r4,-4(fp)
}
100106e0:	e037883a 	mov	sp,fp
100106e4:	df000017 	ldw	fp,0(sp)
100106e8:	dec00104 	addi	sp,sp,4
100106ec:	f800283a 	ret

100106f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100106f0:	defffe04 	addi	sp,sp,-8
100106f4:	df000115 	stw	fp,4(sp)
100106f8:	df000104 	addi	fp,sp,4
100106fc:	e13fff15 	stw	r4,-4(fp)
}
10010700:	e037883a 	mov	sp,fp
10010704:	df000017 	ldw	fp,0(sp)
10010708:	dec00104 	addi	sp,sp,4
1001070c:	f800283a 	ret

10010710 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010710:	defffe04 	addi	sp,sp,-8
10010714:	dfc00115 	stw	ra,4(sp)
10010718:	df000015 	stw	fp,0(sp)
1001071c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010720:	00840074 	movhi	r2,4097
10010724:	1092ad04 	addi	r2,r2,19124
10010728:	10800017 	ldw	r2,0(r2)
1001072c:	10000526 	beq	r2,zero,10010744 <alt_get_errno+0x34>
10010730:	00840074 	movhi	r2,4097
10010734:	1092ad04 	addi	r2,r2,19124
10010738:	10800017 	ldw	r2,0(r2)
1001073c:	103ee83a 	callr	r2
10010740:	00000206 	br	1001074c <alt_get_errno+0x3c>
10010744:	00840074 	movhi	r2,4097
10010748:	1099e304 	addi	r2,r2,26508
}
1001074c:	e037883a 	mov	sp,fp
10010750:	dfc00117 	ldw	ra,4(sp)
10010754:	df000017 	ldw	fp,0(sp)
10010758:	dec00204 	addi	sp,sp,8
1001075c:	f800283a 	ret

10010760 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10010760:	defff904 	addi	sp,sp,-28
10010764:	dfc00615 	stw	ra,24(sp)
10010768:	df000515 	stw	fp,20(sp)
1001076c:	df000504 	addi	fp,sp,20
10010770:	e13ffd15 	stw	r4,-12(fp)
10010774:	e17ffe15 	stw	r5,-8(fp)
10010778:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001077c:	e0bffd17 	ldw	r2,-12(fp)
10010780:	10000716 	blt	r2,zero,100107a0 <read+0x40>
10010784:	e13ffd17 	ldw	r4,-12(fp)
10010788:	01400304 	movi	r5,12
1001078c:	00012fc0 	call	100012fc <__mulsi3>
10010790:	00c40074 	movhi	r3,4097
10010794:	18ce2a04 	addi	r3,r3,14504
10010798:	10c5883a 	add	r2,r2,r3
1001079c:	00000106 	br	100107a4 <read+0x44>
100107a0:	0005883a 	mov	r2,zero
100107a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100107a8:	e0bffb17 	ldw	r2,-20(fp)
100107ac:	10002026 	beq	r2,zero,10010830 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100107b0:	e0bffb17 	ldw	r2,-20(fp)
100107b4:	10800217 	ldw	r2,8(r2)
100107b8:	108000cc 	andi	r2,r2,3
100107bc:	10800060 	cmpeqi	r2,r2,1
100107c0:	1000171e 	bne	r2,zero,10010820 <read+0xc0>
        (fd->dev->read))
100107c4:	e0bffb17 	ldw	r2,-20(fp)
100107c8:	10800017 	ldw	r2,0(r2)
100107cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100107d0:	10001326 	beq	r2,zero,10010820 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100107d4:	e0bffb17 	ldw	r2,-20(fp)
100107d8:	10800017 	ldw	r2,0(r2)
100107dc:	10c00517 	ldw	r3,20(r2)
100107e0:	e0bfff17 	ldw	r2,-4(fp)
100107e4:	e13ffb17 	ldw	r4,-20(fp)
100107e8:	e17ffe17 	ldw	r5,-8(fp)
100107ec:	100d883a 	mov	r6,r2
100107f0:	183ee83a 	callr	r3
100107f4:	e0bffc15 	stw	r2,-16(fp)
100107f8:	e0bffc17 	ldw	r2,-16(fp)
100107fc:	1000060e 	bge	r2,zero,10010818 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10010800:	00107100 	call	10010710 <alt_get_errno>
10010804:	e0fffc17 	ldw	r3,-16(fp)
10010808:	00c7c83a 	sub	r3,zero,r3
1001080c:	10c00015 	stw	r3,0(r2)
          return -1;
10010810:	00bfffc4 	movi	r2,-1
10010814:	00000a06 	br	10010840 <read+0xe0>
        }
        return rval;
10010818:	e0bffc17 	ldw	r2,-16(fp)
1001081c:	00000806 	br	10010840 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10010820:	00107100 	call	10010710 <alt_get_errno>
10010824:	00c00344 	movi	r3,13
10010828:	10c00015 	stw	r3,0(r2)
1001082c:	00000306 	br	1001083c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10010830:	00107100 	call	10010710 <alt_get_errno>
10010834:	00c01444 	movi	r3,81
10010838:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1001083c:	00bfffc4 	movi	r2,-1
}
10010840:	e037883a 	mov	sp,fp
10010844:	dfc00117 	ldw	ra,4(sp)
10010848:	df000017 	ldw	fp,0(sp)
1001084c:	dec00204 	addi	sp,sp,8
10010850:	f800283a 	ret

10010854 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010854:	defffc04 	addi	sp,sp,-16
10010858:	dfc00315 	stw	ra,12(sp)
1001085c:	df000215 	stw	fp,8(sp)
10010860:	dc000115 	stw	r16,4(sp)
10010864:	df000104 	addi	fp,sp,4
10010868:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1001086c:	e0bfff17 	ldw	r2,-4(fp)
10010870:	108000d0 	cmplti	r2,r2,3
10010874:	1000111e 	bne	r2,zero,100108bc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010878:	04040074 	movhi	r16,4097
1001087c:	840e2a04 	addi	r16,r16,14504
10010880:	e0bfff17 	ldw	r2,-4(fp)
10010884:	1009883a 	mov	r4,r2
10010888:	01400304 	movi	r5,12
1001088c:	00012fc0 	call	100012fc <__mulsi3>
10010890:	8085883a 	add	r2,r16,r2
10010894:	10800204 	addi	r2,r2,8
10010898:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1001089c:	04040074 	movhi	r16,4097
100108a0:	840e2a04 	addi	r16,r16,14504
100108a4:	e0bfff17 	ldw	r2,-4(fp)
100108a8:	1009883a 	mov	r4,r2
100108ac:	01400304 	movi	r5,12
100108b0:	00012fc0 	call	100012fc <__mulsi3>
100108b4:	8085883a 	add	r2,r16,r2
100108b8:	10000015 	stw	zero,0(r2)
  }
}
100108bc:	e037883a 	mov	sp,fp
100108c0:	dfc00217 	ldw	ra,8(sp)
100108c4:	df000117 	ldw	fp,4(sp)
100108c8:	dc000017 	ldw	r16,0(sp)
100108cc:	dec00304 	addi	sp,sp,12
100108d0:	f800283a 	ret

100108d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100108d4:	defff904 	addi	sp,sp,-28
100108d8:	df000615 	stw	fp,24(sp)
100108dc:	df000604 	addi	fp,sp,24
100108e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100108e4:	0005303a 	rdctl	r2,status
100108e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100108ec:	e0fffc17 	ldw	r3,-16(fp)
100108f0:	00bfff84 	movi	r2,-2
100108f4:	1884703a 	and	r2,r3,r2
100108f8:	1001703a 	wrctl	status,r2
  
  return context;
100108fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10010900:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10010904:	d0a00c17 	ldw	r2,-32720(gp)
10010908:	10c000c4 	addi	r3,r2,3
1001090c:	00bfff04 	movi	r2,-4
10010910:	1884703a 	and	r2,r3,r2
10010914:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010918:	d0e00c17 	ldw	r3,-32720(gp)
1001091c:	e0bfff17 	ldw	r2,-4(fp)
10010920:	1885883a 	add	r2,r3,r2
10010924:	00c60034 	movhi	r3,6144
10010928:	18c00004 	addi	r3,r3,0
1001092c:	1880062e 	bgeu	r3,r2,10010948 <sbrk+0x74>
10010930:	e0bffa17 	ldw	r2,-24(fp)
10010934:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010938:	e0bffd17 	ldw	r2,-12(fp)
1001093c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010940:	00bfffc4 	movi	r2,-1
10010944:	00000b06 	br	10010974 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010948:	d0a00c17 	ldw	r2,-32720(gp)
1001094c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10010950:	d0e00c17 	ldw	r3,-32720(gp)
10010954:	e0bfff17 	ldw	r2,-4(fp)
10010958:	1885883a 	add	r2,r3,r2
1001095c:	d0a00c15 	stw	r2,-32720(gp)
10010960:	e0bffa17 	ldw	r2,-24(fp)
10010964:	e0bffe15 	stw	r2,-8(fp)
10010968:	e0bffe17 	ldw	r2,-8(fp)
1001096c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010970:	e0bffb17 	ldw	r2,-20(fp)
} 
10010974:	e037883a 	mov	sp,fp
10010978:	df000017 	ldw	fp,0(sp)
1001097c:	dec00104 	addi	sp,sp,4
10010980:	f800283a 	ret

10010984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010984:	defffe04 	addi	sp,sp,-8
10010988:	dfc00115 	stw	ra,4(sp)
1001098c:	df000015 	stw	fp,0(sp)
10010990:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010994:	00840074 	movhi	r2,4097
10010998:	1092ad04 	addi	r2,r2,19124
1001099c:	10800017 	ldw	r2,0(r2)
100109a0:	10000526 	beq	r2,zero,100109b8 <alt_get_errno+0x34>
100109a4:	00840074 	movhi	r2,4097
100109a8:	1092ad04 	addi	r2,r2,19124
100109ac:	10800017 	ldw	r2,0(r2)
100109b0:	103ee83a 	callr	r2
100109b4:	00000206 	br	100109c0 <alt_get_errno+0x3c>
100109b8:	00840074 	movhi	r2,4097
100109bc:	1099e304 	addi	r2,r2,26508
}
100109c0:	e037883a 	mov	sp,fp
100109c4:	dfc00117 	ldw	ra,4(sp)
100109c8:	df000017 	ldw	fp,0(sp)
100109cc:	dec00204 	addi	sp,sp,8
100109d0:	f800283a 	ret

100109d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100109d4:	defff904 	addi	sp,sp,-28
100109d8:	dfc00615 	stw	ra,24(sp)
100109dc:	df000515 	stw	fp,20(sp)
100109e0:	df000504 	addi	fp,sp,20
100109e4:	e13ffd15 	stw	r4,-12(fp)
100109e8:	e17ffe15 	stw	r5,-8(fp)
100109ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100109f0:	e0bffd17 	ldw	r2,-12(fp)
100109f4:	10000716 	blt	r2,zero,10010a14 <write+0x40>
100109f8:	e13ffd17 	ldw	r4,-12(fp)
100109fc:	01400304 	movi	r5,12
10010a00:	00012fc0 	call	100012fc <__mulsi3>
10010a04:	00c40074 	movhi	r3,4097
10010a08:	18ce2a04 	addi	r3,r3,14504
10010a0c:	10c5883a 	add	r2,r2,r3
10010a10:	00000106 	br	10010a18 <write+0x44>
10010a14:	0005883a 	mov	r2,zero
10010a18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010a1c:	e0bffb17 	ldw	r2,-20(fp)
10010a20:	10001f26 	beq	r2,zero,10010aa0 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010a24:	e0bffb17 	ldw	r2,-20(fp)
10010a28:	10800217 	ldw	r2,8(r2)
10010a2c:	108000cc 	andi	r2,r2,3
10010a30:	10001726 	beq	r2,zero,10010a90 <write+0xbc>
10010a34:	e0bffb17 	ldw	r2,-20(fp)
10010a38:	10800017 	ldw	r2,0(r2)
10010a3c:	10800617 	ldw	r2,24(r2)
10010a40:	10001326 	beq	r2,zero,10010a90 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010a44:	e0bffb17 	ldw	r2,-20(fp)
10010a48:	10800017 	ldw	r2,0(r2)
10010a4c:	10c00617 	ldw	r3,24(r2)
10010a50:	e0bfff17 	ldw	r2,-4(fp)
10010a54:	e13ffb17 	ldw	r4,-20(fp)
10010a58:	e17ffe17 	ldw	r5,-8(fp)
10010a5c:	100d883a 	mov	r6,r2
10010a60:	183ee83a 	callr	r3
10010a64:	e0bffc15 	stw	r2,-16(fp)
10010a68:	e0bffc17 	ldw	r2,-16(fp)
10010a6c:	1000060e 	bge	r2,zero,10010a88 <write+0xb4>
      {
        ALT_ERRNO = -rval;
10010a70:	00109840 	call	10010984 <alt_get_errno>
10010a74:	e0fffc17 	ldw	r3,-16(fp)
10010a78:	00c7c83a 	sub	r3,zero,r3
10010a7c:	10c00015 	stw	r3,0(r2)
        return -1;
10010a80:	00bfffc4 	movi	r2,-1
10010a84:	00000a06 	br	10010ab0 <write+0xdc>
      }
      return rval;
10010a88:	e0bffc17 	ldw	r2,-16(fp)
10010a8c:	00000806 	br	10010ab0 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010a90:	00109840 	call	10010984 <alt_get_errno>
10010a94:	00c00344 	movi	r3,13
10010a98:	10c00015 	stw	r3,0(r2)
10010a9c:	00000306 	br	10010aac <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010aa0:	00109840 	call	10010984 <alt_get_errno>
10010aa4:	00c01444 	movi	r3,81
10010aa8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
10010aac:	00bfffc4 	movi	r2,-1
}
10010ab0:	e037883a 	mov	sp,fp
10010ab4:	dfc00117 	ldw	ra,4(sp)
10010ab8:	df000017 	ldw	fp,0(sp)
10010abc:	dec00204 	addi	sp,sp,8
10010ac0:	f800283a 	ret

10010ac4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010ac4:	defffd04 	addi	sp,sp,-12
10010ac8:	dfc00215 	stw	ra,8(sp)
10010acc:	df000115 	stw	fp,4(sp)
10010ad0:	df000104 	addi	fp,sp,4
10010ad4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010ad8:	e13fff17 	ldw	r4,-4(fp)
10010adc:	01440074 	movhi	r5,4097
10010ae0:	2952aa04 	addi	r5,r5,19112
10010ae4:	00117840 	call	10011784 <alt_dev_llist_insert>
}
10010ae8:	e037883a 	mov	sp,fp
10010aec:	dfc00117 	ldw	ra,4(sp)
10010af0:	df000017 	ldw	fp,0(sp)
10010af4:	dec00204 	addi	sp,sp,8
10010af8:	f800283a 	ret

10010afc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010afc:	defffd04 	addi	sp,sp,-12
10010b00:	dfc00215 	stw	ra,8(sp)
10010b04:	df000115 	stw	fp,4(sp)
10010b08:	df000104 	addi	fp,sp,4
10010b0c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10010b10:	001214c0 	call	1001214c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010b14:	00800044 	movi	r2,1
10010b18:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010b1c:	e037883a 	mov	sp,fp
10010b20:	dfc00117 	ldw	ra,4(sp)
10010b24:	df000017 	ldw	fp,0(sp)
10010b28:	dec00204 	addi	sp,sp,8
10010b2c:	f800283a 	ret

10010b30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010b30:	defffe04 	addi	sp,sp,-8
10010b34:	dfc00115 	stw	ra,4(sp)
10010b38:	df000015 	stw	fp,0(sp)
10010b3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010b40:	01040074 	movhi	r4,4097
10010b44:	210e9404 	addi	r4,r4,14928
10010b48:	000b883a 	mov	r5,zero
10010b4c:	01800144 	movi	r6,5
10010b50:	0010cdc0 	call	10010cdc <altera_avalon_jtag_uart_init>
10010b54:	01040074 	movhi	r4,4097
10010b58:	210e8a04 	addi	r4,r4,14888
10010b5c:	0010ac40 	call	10010ac4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010b60:	0001883a 	nop
}
10010b64:	e037883a 	mov	sp,fp
10010b68:	dfc00117 	ldw	ra,4(sp)
10010b6c:	df000017 	ldw	fp,0(sp)
10010b70:	dec00204 	addi	sp,sp,8
10010b74:	f800283a 	ret

10010b78 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010b78:	defffa04 	addi	sp,sp,-24
10010b7c:	dfc00515 	stw	ra,20(sp)
10010b80:	df000415 	stw	fp,16(sp)
10010b84:	df000404 	addi	fp,sp,16
10010b88:	e13ffd15 	stw	r4,-12(fp)
10010b8c:	e17ffe15 	stw	r5,-8(fp)
10010b90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010b94:	e0bffd17 	ldw	r2,-12(fp)
10010b98:	10800017 	ldw	r2,0(r2)
10010b9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010ba0:	e0bffc17 	ldw	r2,-16(fp)
10010ba4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
10010ba8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010bac:	10800217 	ldw	r2,8(r2)
10010bb0:	1809883a 	mov	r4,r3
10010bb4:	e17ffe17 	ldw	r5,-8(fp)
10010bb8:	e1bfff17 	ldw	r6,-4(fp)
10010bbc:	100f883a 	mov	r7,r2
10010bc0:	00111a00 	call	100111a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010bc4:	e037883a 	mov	sp,fp
10010bc8:	dfc00117 	ldw	ra,4(sp)
10010bcc:	df000017 	ldw	fp,0(sp)
10010bd0:	dec00204 	addi	sp,sp,8
10010bd4:	f800283a 	ret

10010bd8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010bd8:	defffa04 	addi	sp,sp,-24
10010bdc:	dfc00515 	stw	ra,20(sp)
10010be0:	df000415 	stw	fp,16(sp)
10010be4:	df000404 	addi	fp,sp,16
10010be8:	e13ffd15 	stw	r4,-12(fp)
10010bec:	e17ffe15 	stw	r5,-8(fp)
10010bf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010bf4:	e0bffd17 	ldw	r2,-12(fp)
10010bf8:	10800017 	ldw	r2,0(r2)
10010bfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010c00:	e0bffc17 	ldw	r2,-16(fp)
10010c04:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
10010c08:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010c0c:	10800217 	ldw	r2,8(r2)
10010c10:	1809883a 	mov	r4,r3
10010c14:	e17ffe17 	ldw	r5,-8(fp)
10010c18:	e1bfff17 	ldw	r6,-4(fp)
10010c1c:	100f883a 	mov	r7,r2
10010c20:	00113b80 	call	100113b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010c24:	e037883a 	mov	sp,fp
10010c28:	dfc00117 	ldw	ra,4(sp)
10010c2c:	df000017 	ldw	fp,0(sp)
10010c30:	dec00204 	addi	sp,sp,8
10010c34:	f800283a 	ret

10010c38 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010c38:	defffc04 	addi	sp,sp,-16
10010c3c:	dfc00315 	stw	ra,12(sp)
10010c40:	df000215 	stw	fp,8(sp)
10010c44:	df000204 	addi	fp,sp,8
10010c48:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010c4c:	e0bfff17 	ldw	r2,-4(fp)
10010c50:	10800017 	ldw	r2,0(r2)
10010c54:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010c58:	e0bffe17 	ldw	r2,-8(fp)
10010c5c:	10c00a04 	addi	r3,r2,40
10010c60:	e0bfff17 	ldw	r2,-4(fp)
10010c64:	10800217 	ldw	r2,8(r2)
10010c68:	1809883a 	mov	r4,r3
10010c6c:	100b883a 	mov	r5,r2
10010c70:	00110440 	call	10011044 <altera_avalon_jtag_uart_close>
}
10010c74:	e037883a 	mov	sp,fp
10010c78:	dfc00117 	ldw	ra,4(sp)
10010c7c:	df000017 	ldw	fp,0(sp)
10010c80:	dec00204 	addi	sp,sp,8
10010c84:	f800283a 	ret

10010c88 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010c88:	defffa04 	addi	sp,sp,-24
10010c8c:	dfc00515 	stw	ra,20(sp)
10010c90:	df000415 	stw	fp,16(sp)
10010c94:	df000404 	addi	fp,sp,16
10010c98:	e13ffd15 	stw	r4,-12(fp)
10010c9c:	e17ffe15 	stw	r5,-8(fp)
10010ca0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010ca4:	e0bffd17 	ldw	r2,-12(fp)
10010ca8:	10800017 	ldw	r2,0(r2)
10010cac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010cb0:	e0bffc17 	ldw	r2,-16(fp)
10010cb4:	10800a04 	addi	r2,r2,40
10010cb8:	1009883a 	mov	r4,r2
10010cbc:	e17ffe17 	ldw	r5,-8(fp)
10010cc0:	e1bfff17 	ldw	r6,-4(fp)
10010cc4:	00110ac0 	call	100110ac <altera_avalon_jtag_uart_ioctl>
}
10010cc8:	e037883a 	mov	sp,fp
10010ccc:	dfc00117 	ldw	ra,4(sp)
10010cd0:	df000017 	ldw	fp,0(sp)
10010cd4:	dec00204 	addi	sp,sp,8
10010cd8:	f800283a 	ret

10010cdc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010cdc:	defffa04 	addi	sp,sp,-24
10010ce0:	dfc00515 	stw	ra,20(sp)
10010ce4:	df000415 	stw	fp,16(sp)
10010ce8:	df000404 	addi	fp,sp,16
10010cec:	e13ffd15 	stw	r4,-12(fp)
10010cf0:	e17ffe15 	stw	r5,-8(fp)
10010cf4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010cf8:	e0bffd17 	ldw	r2,-12(fp)
10010cfc:	00c00044 	movi	r3,1
10010d00:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010d04:	e0bffd17 	ldw	r2,-12(fp)
10010d08:	10800017 	ldw	r2,0(r2)
10010d0c:	10800104 	addi	r2,r2,4
10010d10:	e0fffd17 	ldw	r3,-12(fp)
10010d14:	18c00817 	ldw	r3,32(r3)
10010d18:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010d1c:	e0fffe17 	ldw	r3,-8(fp)
10010d20:	e0bfff17 	ldw	r2,-4(fp)
10010d24:	d8000015 	stw	zero,0(sp)
10010d28:	1809883a 	mov	r4,r3
10010d2c:	100b883a 	mov	r5,r2
10010d30:	01840074 	movhi	r6,4097
10010d34:	31836704 	addi	r6,r6,3484
10010d38:	e1fffd17 	ldw	r7,-12(fp)
10010d3c:	00118f80 	call	100118f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010d40:	e0bffd17 	ldw	r2,-12(fp)
10010d44:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010d48:	e0bffd17 	ldw	r2,-12(fp)
10010d4c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010d50:	00840074 	movhi	r2,4097
10010d54:	1099e804 	addi	r2,r2,26528
10010d58:	10800017 	ldw	r2,0(r2)
10010d5c:	1809883a 	mov	r4,r3
10010d60:	100b883a 	mov	r5,r2
10010d64:	01840074 	movhi	r6,4097
10010d68:	3183e804 	addi	r6,r6,4000
10010d6c:	e1fffd17 	ldw	r7,-12(fp)
10010d70:	00115d80 	call	100115d8 <alt_alarm_start>
10010d74:	1000040e 	bge	r2,zero,10010d88 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010d78:	e0bffd17 	ldw	r2,-12(fp)
10010d7c:	00e00034 	movhi	r3,32768
10010d80:	18ffffc4 	addi	r3,r3,-1
10010d84:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010d88:	e037883a 	mov	sp,fp
10010d8c:	dfc00117 	ldw	ra,4(sp)
10010d90:	df000017 	ldw	fp,0(sp)
10010d94:	dec00204 	addi	sp,sp,8
10010d98:	f800283a 	ret

10010d9c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010d9c:	defff804 	addi	sp,sp,-32
10010da0:	df000715 	stw	fp,28(sp)
10010da4:	df000704 	addi	fp,sp,28
10010da8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010dac:	e0bfff17 	ldw	r2,-4(fp)
10010db0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010db4:	e0bffb17 	ldw	r2,-20(fp)
10010db8:	10800017 	ldw	r2,0(r2)
10010dbc:	e0bffc15 	stw	r2,-16(fp)
10010dc0:	00000106 	br	10010dc8 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
10010dc4:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010dc8:	e0bffc17 	ldw	r2,-16(fp)
10010dcc:	10800104 	addi	r2,r2,4
10010dd0:	10800037 	ldwio	r2,0(r2)
10010dd4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010dd8:	e0bffd17 	ldw	r2,-12(fp)
10010ddc:	1080c00c 	andi	r2,r2,768
10010de0:	10006a26 	beq	r2,zero,10010f8c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010de4:	e0bffd17 	ldw	r2,-12(fp)
10010de8:	1080400c 	andi	r2,r2,256
10010dec:	10003326 	beq	r2,zero,10010ebc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010df0:	00800074 	movhi	r2,1
10010df4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010df8:	e0bffb17 	ldw	r2,-20(fp)
10010dfc:	10800a17 	ldw	r2,40(r2)
10010e00:	10800044 	addi	r2,r2,1
10010e04:	1081ffcc 	andi	r2,r2,2047
10010e08:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010e0c:	e0bffb17 	ldw	r2,-20(fp)
10010e10:	10c00b17 	ldw	r3,44(r2)
10010e14:	e0bffe17 	ldw	r2,-8(fp)
10010e18:	18801426 	beq	r3,r2,10010e6c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010e1c:	e0bffc17 	ldw	r2,-16(fp)
10010e20:	10800037 	ldwio	r2,0(r2)
10010e24:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010e28:	e0bff917 	ldw	r2,-28(fp)
10010e2c:	10a0000c 	andi	r2,r2,32768
10010e30:	10001026 	beq	r2,zero,10010e74 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010e34:	e0bffb17 	ldw	r2,-20(fp)
10010e38:	10800a17 	ldw	r2,40(r2)
10010e3c:	e0fff917 	ldw	r3,-28(fp)
10010e40:	e13ffb17 	ldw	r4,-20(fp)
10010e44:	2085883a 	add	r2,r4,r2
10010e48:	10800e04 	addi	r2,r2,56
10010e4c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010e50:	e0bffb17 	ldw	r2,-20(fp)
10010e54:	10800a17 	ldw	r2,40(r2)
10010e58:	10800044 	addi	r2,r2,1
10010e5c:	10c1ffcc 	andi	r3,r2,2047
10010e60:	e0bffb17 	ldw	r2,-20(fp)
10010e64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010e68:	003fe306 	br	10010df8 <__alt_data_end+0xf8010df8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10010e6c:	0001883a 	nop
10010e70:	00000106 	br	10010e78 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10010e74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010e78:	e0bff917 	ldw	r2,-28(fp)
10010e7c:	10bfffec 	andhi	r2,r2,65535
10010e80:	10000e26 	beq	r2,zero,10010ebc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010e84:	e0bffb17 	ldw	r2,-20(fp)
10010e88:	10c00817 	ldw	r3,32(r2)
10010e8c:	00bfff84 	movi	r2,-2
10010e90:	1886703a 	and	r3,r3,r2
10010e94:	e0bffb17 	ldw	r2,-20(fp)
10010e98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010e9c:	e0bffc17 	ldw	r2,-16(fp)
10010ea0:	10800104 	addi	r2,r2,4
10010ea4:	e0fffb17 	ldw	r3,-20(fp)
10010ea8:	18c00817 	ldw	r3,32(r3)
10010eac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010eb0:	e0bffc17 	ldw	r2,-16(fp)
10010eb4:	10800104 	addi	r2,r2,4
10010eb8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010ebc:	e0bffd17 	ldw	r2,-12(fp)
10010ec0:	1080800c 	andi	r2,r2,512
10010ec4:	103fbf26 	beq	r2,zero,10010dc4 <__alt_data_end+0xf8010dc4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010ec8:	e0bffd17 	ldw	r2,-12(fp)
10010ecc:	1004d43a 	srli	r2,r2,16
10010ed0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010ed4:	00001406 	br	10010f28 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010ed8:	e0bffc17 	ldw	r2,-16(fp)
10010edc:	e0fffb17 	ldw	r3,-20(fp)
10010ee0:	18c00d17 	ldw	r3,52(r3)
10010ee4:	e13ffb17 	ldw	r4,-20(fp)
10010ee8:	20c7883a 	add	r3,r4,r3
10010eec:	18c20e04 	addi	r3,r3,2104
10010ef0:	18c00003 	ldbu	r3,0(r3)
10010ef4:	18c03fcc 	andi	r3,r3,255
10010ef8:	18c0201c 	xori	r3,r3,128
10010efc:	18ffe004 	addi	r3,r3,-128
10010f00:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010f04:	e0bffb17 	ldw	r2,-20(fp)
10010f08:	10800d17 	ldw	r2,52(r2)
10010f0c:	10800044 	addi	r2,r2,1
10010f10:	10c1ffcc 	andi	r3,r2,2047
10010f14:	e0bffb17 	ldw	r2,-20(fp)
10010f18:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010f1c:	e0bffa17 	ldw	r2,-24(fp)
10010f20:	10bfffc4 	addi	r2,r2,-1
10010f24:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010f28:	e0bffa17 	ldw	r2,-24(fp)
10010f2c:	10000526 	beq	r2,zero,10010f44 <altera_avalon_jtag_uart_irq+0x1a8>
10010f30:	e0bffb17 	ldw	r2,-20(fp)
10010f34:	10c00d17 	ldw	r3,52(r2)
10010f38:	e0bffb17 	ldw	r2,-20(fp)
10010f3c:	10800c17 	ldw	r2,48(r2)
10010f40:	18bfe51e 	bne	r3,r2,10010ed8 <__alt_data_end+0xf8010ed8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010f44:	e0bffa17 	ldw	r2,-24(fp)
10010f48:	103f9e26 	beq	r2,zero,10010dc4 <__alt_data_end+0xf8010dc4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010f4c:	e0bffb17 	ldw	r2,-20(fp)
10010f50:	10c00817 	ldw	r3,32(r2)
10010f54:	00bfff44 	movi	r2,-3
10010f58:	1886703a 	and	r3,r3,r2
10010f5c:	e0bffb17 	ldw	r2,-20(fp)
10010f60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010f64:	e0bffb17 	ldw	r2,-20(fp)
10010f68:	10800017 	ldw	r2,0(r2)
10010f6c:	10800104 	addi	r2,r2,4
10010f70:	e0fffb17 	ldw	r3,-20(fp)
10010f74:	18c00817 	ldw	r3,32(r3)
10010f78:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010f7c:	e0bffc17 	ldw	r2,-16(fp)
10010f80:	10800104 	addi	r2,r2,4
10010f84:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010f88:	003f8e06 	br	10010dc4 <__alt_data_end+0xf8010dc4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010f8c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010f90:	e037883a 	mov	sp,fp
10010f94:	df000017 	ldw	fp,0(sp)
10010f98:	dec00104 	addi	sp,sp,4
10010f9c:	f800283a 	ret

10010fa0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010fa0:	defffc04 	addi	sp,sp,-16
10010fa4:	df000315 	stw	fp,12(sp)
10010fa8:	df000304 	addi	fp,sp,12
10010fac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010fb0:	e0bfff17 	ldw	r2,-4(fp)
10010fb4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010fb8:	e0bffd17 	ldw	r2,-12(fp)
10010fbc:	10800017 	ldw	r2,0(r2)
10010fc0:	10800104 	addi	r2,r2,4
10010fc4:	10800037 	ldwio	r2,0(r2)
10010fc8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010fcc:	e0bffe17 	ldw	r2,-8(fp)
10010fd0:	1081000c 	andi	r2,r2,1024
10010fd4:	10000a26 	beq	r2,zero,10011000 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010fd8:	e0bffd17 	ldw	r2,-12(fp)
10010fdc:	10800017 	ldw	r2,0(r2)
10010fe0:	10800104 	addi	r2,r2,4
10010fe4:	e0fffd17 	ldw	r3,-12(fp)
10010fe8:	18c00817 	ldw	r3,32(r3)
10010fec:	18c10014 	ori	r3,r3,1024
10010ff0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
10010ff4:	e0bffd17 	ldw	r2,-12(fp)
10010ff8:	10000915 	stw	zero,36(r2)
10010ffc:	00000a06 	br	10011028 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10011000:	e0bffd17 	ldw	r2,-12(fp)
10011004:	10800917 	ldw	r2,36(r2)
10011008:	00e00034 	movhi	r3,32768
1001100c:	18ffff04 	addi	r3,r3,-4
10011010:	18800536 	bltu	r3,r2,10011028 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
10011014:	e0bffd17 	ldw	r2,-12(fp)
10011018:	10800917 	ldw	r2,36(r2)
1001101c:	10c00044 	addi	r3,r2,1
10011020:	e0bffd17 	ldw	r2,-12(fp)
10011024:	10c00915 	stw	r3,36(r2)
10011028:	00840074 	movhi	r2,4097
1001102c:	1099e804 	addi	r2,r2,26528
10011030:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10011034:	e037883a 	mov	sp,fp
10011038:	df000017 	ldw	fp,0(sp)
1001103c:	dec00104 	addi	sp,sp,4
10011040:	f800283a 	ret

10011044 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10011044:	defffd04 	addi	sp,sp,-12
10011048:	df000215 	stw	fp,8(sp)
1001104c:	df000204 	addi	fp,sp,8
10011050:	e13ffe15 	stw	r4,-8(fp)
10011054:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10011058:	00000506 	br	10011070 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1001105c:	e0bfff17 	ldw	r2,-4(fp)
10011060:	1090000c 	andi	r2,r2,16384
10011064:	10000226 	beq	r2,zero,10011070 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10011068:	00bffd44 	movi	r2,-11
1001106c:	00000b06 	br	1001109c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10011070:	e0bffe17 	ldw	r2,-8(fp)
10011074:	10c00d17 	ldw	r3,52(r2)
10011078:	e0bffe17 	ldw	r2,-8(fp)
1001107c:	10800c17 	ldw	r2,48(r2)
10011080:	18800526 	beq	r3,r2,10011098 <altera_avalon_jtag_uart_close+0x54>
10011084:	e0bffe17 	ldw	r2,-8(fp)
10011088:	10c00917 	ldw	r3,36(r2)
1001108c:	e0bffe17 	ldw	r2,-8(fp)
10011090:	10800117 	ldw	r2,4(r2)
10011094:	18bff136 	bltu	r3,r2,1001105c <__alt_data_end+0xf801105c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10011098:	0005883a 	mov	r2,zero
}
1001109c:	e037883a 	mov	sp,fp
100110a0:	df000017 	ldw	fp,0(sp)
100110a4:	dec00104 	addi	sp,sp,4
100110a8:	f800283a 	ret

100110ac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100110ac:	defffa04 	addi	sp,sp,-24
100110b0:	df000515 	stw	fp,20(sp)
100110b4:	df000504 	addi	fp,sp,20
100110b8:	e13ffd15 	stw	r4,-12(fp)
100110bc:	e17ffe15 	stw	r5,-8(fp)
100110c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100110c4:	00bff9c4 	movi	r2,-25
100110c8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100110cc:	e0bffe17 	ldw	r2,-8(fp)
100110d0:	10da8060 	cmpeqi	r3,r2,27137
100110d4:	1800031e 	bne	r3,zero,100110e4 <altera_avalon_jtag_uart_ioctl+0x38>
100110d8:	109a80a0 	cmpeqi	r2,r2,27138
100110dc:	1000181e 	bne	r2,zero,10011140 <altera_avalon_jtag_uart_ioctl+0x94>
100110e0:	00002606 	br	1001117c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100110e4:	e0bffd17 	ldw	r2,-12(fp)
100110e8:	10c00117 	ldw	r3,4(r2)
100110ec:	00a00034 	movhi	r2,32768
100110f0:	10bfffc4 	addi	r2,r2,-1
100110f4:	18802226 	beq	r3,r2,10011180 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
100110f8:	e0bfff17 	ldw	r2,-4(fp)
100110fc:	10800017 	ldw	r2,0(r2)
10011100:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10011104:	e0bffc17 	ldw	r2,-16(fp)
10011108:	10800090 	cmplti	r2,r2,2
1001110c:	1000061e 	bne	r2,zero,10011128 <altera_avalon_jtag_uart_ioctl+0x7c>
10011110:	e0fffc17 	ldw	r3,-16(fp)
10011114:	00a00034 	movhi	r2,32768
10011118:	10bfffc4 	addi	r2,r2,-1
1001111c:	18800226 	beq	r3,r2,10011128 <altera_avalon_jtag_uart_ioctl+0x7c>
10011120:	e0bffc17 	ldw	r2,-16(fp)
10011124:	00000206 	br	10011130 <altera_avalon_jtag_uart_ioctl+0x84>
10011128:	00a00034 	movhi	r2,32768
1001112c:	10bfff84 	addi	r2,r2,-2
10011130:	e0fffd17 	ldw	r3,-12(fp)
10011134:	18800115 	stw	r2,4(r3)
      rc = 0;
10011138:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1001113c:	00001006 	br	10011180 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10011140:	e0bffd17 	ldw	r2,-12(fp)
10011144:	10c00117 	ldw	r3,4(r2)
10011148:	00a00034 	movhi	r2,32768
1001114c:	10bfffc4 	addi	r2,r2,-1
10011150:	18800d26 	beq	r3,r2,10011188 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10011154:	e0bffd17 	ldw	r2,-12(fp)
10011158:	10c00917 	ldw	r3,36(r2)
1001115c:	e0bffd17 	ldw	r2,-12(fp)
10011160:	10800117 	ldw	r2,4(r2)
10011164:	1885803a 	cmpltu	r2,r3,r2
10011168:	10c03fcc 	andi	r3,r2,255
1001116c:	e0bfff17 	ldw	r2,-4(fp)
10011170:	10c00015 	stw	r3,0(r2)
      rc = 0;
10011174:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011178:	00000306 	br	10011188 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
1001117c:	00000306 	br	1001118c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10011180:	0001883a 	nop
10011184:	00000106 	br	1001118c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10011188:	0001883a 	nop

  default:
    break;
  }

  return rc;
1001118c:	e0bffb17 	ldw	r2,-20(fp)
}
10011190:	e037883a 	mov	sp,fp
10011194:	df000017 	ldw	fp,0(sp)
10011198:	dec00104 	addi	sp,sp,4
1001119c:	f800283a 	ret

100111a0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100111a0:	defff304 	addi	sp,sp,-52
100111a4:	dfc00c15 	stw	ra,48(sp)
100111a8:	df000b15 	stw	fp,44(sp)
100111ac:	df000b04 	addi	fp,sp,44
100111b0:	e13ffc15 	stw	r4,-16(fp)
100111b4:	e17ffd15 	stw	r5,-12(fp)
100111b8:	e1bffe15 	stw	r6,-8(fp)
100111bc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100111c0:	e0bffd17 	ldw	r2,-12(fp)
100111c4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100111c8:	00004706 	br	100112e8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100111cc:	e0bffc17 	ldw	r2,-16(fp)
100111d0:	10800a17 	ldw	r2,40(r2)
100111d4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100111d8:	e0bffc17 	ldw	r2,-16(fp)
100111dc:	10800b17 	ldw	r2,44(r2)
100111e0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100111e4:	e0fff717 	ldw	r3,-36(fp)
100111e8:	e0bff817 	ldw	r2,-32(fp)
100111ec:	18800536 	bltu	r3,r2,10011204 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100111f0:	e0fff717 	ldw	r3,-36(fp)
100111f4:	e0bff817 	ldw	r2,-32(fp)
100111f8:	1885c83a 	sub	r2,r3,r2
100111fc:	e0bff615 	stw	r2,-40(fp)
10011200:	00000406 	br	10011214 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10011204:	00c20004 	movi	r3,2048
10011208:	e0bff817 	ldw	r2,-32(fp)
1001120c:	1885c83a 	sub	r2,r3,r2
10011210:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011214:	e0bff617 	ldw	r2,-40(fp)
10011218:	10001e26 	beq	r2,zero,10011294 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1001121c:	e0fffe17 	ldw	r3,-8(fp)
10011220:	e0bff617 	ldw	r2,-40(fp)
10011224:	1880022e 	bgeu	r3,r2,10011230 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10011228:	e0bffe17 	ldw	r2,-8(fp)
1001122c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10011230:	e0bff817 	ldw	r2,-32(fp)
10011234:	10800e04 	addi	r2,r2,56
10011238:	e0fffc17 	ldw	r3,-16(fp)
1001123c:	1885883a 	add	r2,r3,r2
10011240:	e13ff517 	ldw	r4,-44(fp)
10011244:	100b883a 	mov	r5,r2
10011248:	e1bff617 	ldw	r6,-40(fp)
1001124c:	00083580 	call	10008358 <memcpy>
      ptr   += n;
10011250:	e0fff517 	ldw	r3,-44(fp)
10011254:	e0bff617 	ldw	r2,-40(fp)
10011258:	1885883a 	add	r2,r3,r2
1001125c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10011260:	e0fffe17 	ldw	r3,-8(fp)
10011264:	e0bff617 	ldw	r2,-40(fp)
10011268:	1885c83a 	sub	r2,r3,r2
1001126c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011270:	e0fff817 	ldw	r3,-32(fp)
10011274:	e0bff617 	ldw	r2,-40(fp)
10011278:	1885883a 	add	r2,r3,r2
1001127c:	10c1ffcc 	andi	r3,r2,2047
10011280:	e0bffc17 	ldw	r2,-16(fp)
10011284:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10011288:	e0bffe17 	ldw	r2,-8(fp)
1001128c:	00bfcf16 	blt	zero,r2,100111cc <__alt_data_end+0xf80111cc>
10011290:	00000106 	br	10011298 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10011294:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10011298:	e0fff517 	ldw	r3,-44(fp)
1001129c:	e0bffd17 	ldw	r2,-12(fp)
100112a0:	1880141e 	bne	r3,r2,100112f4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100112a4:	e0bfff17 	ldw	r2,-4(fp)
100112a8:	1090000c 	andi	r2,r2,16384
100112ac:	1000131e 	bne	r2,zero,100112fc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100112b0:	0001883a 	nop
100112b4:	e0bffc17 	ldw	r2,-16(fp)
100112b8:	10c00a17 	ldw	r3,40(r2)
100112bc:	e0bff717 	ldw	r2,-36(fp)
100112c0:	1880051e 	bne	r3,r2,100112d8 <altera_avalon_jtag_uart_read+0x138>
100112c4:	e0bffc17 	ldw	r2,-16(fp)
100112c8:	10c00917 	ldw	r3,36(r2)
100112cc:	e0bffc17 	ldw	r2,-16(fp)
100112d0:	10800117 	ldw	r2,4(r2)
100112d4:	18bff736 	bltu	r3,r2,100112b4 <__alt_data_end+0xf80112b4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100112d8:	e0bffc17 	ldw	r2,-16(fp)
100112dc:	10c00a17 	ldw	r3,40(r2)
100112e0:	e0bff717 	ldw	r2,-36(fp)
100112e4:	18800726 	beq	r3,r2,10011304 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100112e8:	e0bffe17 	ldw	r2,-8(fp)
100112ec:	00bfb716 	blt	zero,r2,100111cc <__alt_data_end+0xf80111cc>
100112f0:	00000506 	br	10011308 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
100112f4:	0001883a 	nop
100112f8:	00000306 	br	10011308 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100112fc:	0001883a 	nop
10011300:	00000106 	br	10011308 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10011304:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10011308:	e0fff517 	ldw	r3,-44(fp)
1001130c:	e0bffd17 	ldw	r2,-12(fp)
10011310:	18801726 	beq	r3,r2,10011370 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011314:	0005303a 	rdctl	r2,status
10011318:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001131c:	e0fffa17 	ldw	r3,-24(fp)
10011320:	00bfff84 	movi	r2,-2
10011324:	1884703a 	and	r2,r3,r2
10011328:	1001703a 	wrctl	status,r2
  
  return context;
1001132c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10011330:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011334:	e0bffc17 	ldw	r2,-16(fp)
10011338:	10800817 	ldw	r2,32(r2)
1001133c:	10c00054 	ori	r3,r2,1
10011340:	e0bffc17 	ldw	r2,-16(fp)
10011344:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011348:	e0bffc17 	ldw	r2,-16(fp)
1001134c:	10800017 	ldw	r2,0(r2)
10011350:	10800104 	addi	r2,r2,4
10011354:	e0fffc17 	ldw	r3,-16(fp)
10011358:	18c00817 	ldw	r3,32(r3)
1001135c:	10c00035 	stwio	r3,0(r2)
10011360:	e0bff917 	ldw	r2,-28(fp)
10011364:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011368:	e0bffb17 	ldw	r2,-20(fp)
1001136c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10011370:	e0fff517 	ldw	r3,-44(fp)
10011374:	e0bffd17 	ldw	r2,-12(fp)
10011378:	18800426 	beq	r3,r2,1001138c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
1001137c:	e0fff517 	ldw	r3,-44(fp)
10011380:	e0bffd17 	ldw	r2,-12(fp)
10011384:	1885c83a 	sub	r2,r3,r2
10011388:	00000606 	br	100113a4 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
1001138c:	e0bfff17 	ldw	r2,-4(fp)
10011390:	1090000c 	andi	r2,r2,16384
10011394:	10000226 	beq	r2,zero,100113a0 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
10011398:	00bffd44 	movi	r2,-11
1001139c:	00000106 	br	100113a4 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
100113a0:	00bffec4 	movi	r2,-5
}
100113a4:	e037883a 	mov	sp,fp
100113a8:	dfc00117 	ldw	ra,4(sp)
100113ac:	df000017 	ldw	fp,0(sp)
100113b0:	dec00204 	addi	sp,sp,8
100113b4:	f800283a 	ret

100113b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100113b8:	defff304 	addi	sp,sp,-52
100113bc:	dfc00c15 	stw	ra,48(sp)
100113c0:	df000b15 	stw	fp,44(sp)
100113c4:	df000b04 	addi	fp,sp,44
100113c8:	e13ffc15 	stw	r4,-16(fp)
100113cc:	e17ffd15 	stw	r5,-12(fp)
100113d0:	e1bffe15 	stw	r6,-8(fp)
100113d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100113d8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100113dc:	e0bffd17 	ldw	r2,-12(fp)
100113e0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100113e4:	00003706 	br	100114c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100113e8:	e0bffc17 	ldw	r2,-16(fp)
100113ec:	10800c17 	ldw	r2,48(r2)
100113f0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
100113f4:	e0bffc17 	ldw	r2,-16(fp)
100113f8:	10800d17 	ldw	r2,52(r2)
100113fc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10011400:	e0fff817 	ldw	r3,-32(fp)
10011404:	e0bff517 	ldw	r2,-44(fp)
10011408:	1880062e 	bgeu	r3,r2,10011424 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1001140c:	e0fff517 	ldw	r3,-44(fp)
10011410:	e0bff817 	ldw	r2,-32(fp)
10011414:	1885c83a 	sub	r2,r3,r2
10011418:	10bfffc4 	addi	r2,r2,-1
1001141c:	e0bff615 	stw	r2,-40(fp)
10011420:	00000b06 	br	10011450 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10011424:	e0bff517 	ldw	r2,-44(fp)
10011428:	10000526 	beq	r2,zero,10011440 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1001142c:	00c20004 	movi	r3,2048
10011430:	e0bff817 	ldw	r2,-32(fp)
10011434:	1885c83a 	sub	r2,r3,r2
10011438:	e0bff615 	stw	r2,-40(fp)
1001143c:	00000406 	br	10011450 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10011440:	00c1ffc4 	movi	r3,2047
10011444:	e0bff817 	ldw	r2,-32(fp)
10011448:	1885c83a 	sub	r2,r3,r2
1001144c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011450:	e0bff617 	ldw	r2,-40(fp)
10011454:	10001e26 	beq	r2,zero,100114d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10011458:	e0fffe17 	ldw	r3,-8(fp)
1001145c:	e0bff617 	ldw	r2,-40(fp)
10011460:	1880022e 	bgeu	r3,r2,1001146c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10011464:	e0bffe17 	ldw	r2,-8(fp)
10011468:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1001146c:	e0bff817 	ldw	r2,-32(fp)
10011470:	10820e04 	addi	r2,r2,2104
10011474:	e0fffc17 	ldw	r3,-16(fp)
10011478:	1885883a 	add	r2,r3,r2
1001147c:	1009883a 	mov	r4,r2
10011480:	e17ffd17 	ldw	r5,-12(fp)
10011484:	e1bff617 	ldw	r6,-40(fp)
10011488:	00083580 	call	10008358 <memcpy>
      ptr   += n;
1001148c:	e0fffd17 	ldw	r3,-12(fp)
10011490:	e0bff617 	ldw	r2,-40(fp)
10011494:	1885883a 	add	r2,r3,r2
10011498:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1001149c:	e0fffe17 	ldw	r3,-8(fp)
100114a0:	e0bff617 	ldw	r2,-40(fp)
100114a4:	1885c83a 	sub	r2,r3,r2
100114a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100114ac:	e0fff817 	ldw	r3,-32(fp)
100114b0:	e0bff617 	ldw	r2,-40(fp)
100114b4:	1885883a 	add	r2,r3,r2
100114b8:	10c1ffcc 	andi	r3,r2,2047
100114bc:	e0bffc17 	ldw	r2,-16(fp)
100114c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100114c4:	e0bffe17 	ldw	r2,-8(fp)
100114c8:	00bfc716 	blt	zero,r2,100113e8 <__alt_data_end+0xf80113e8>
100114cc:	00000106 	br	100114d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100114d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100114d4:	0005303a 	rdctl	r2,status
100114d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100114dc:	e0fffa17 	ldw	r3,-24(fp)
100114e0:	00bfff84 	movi	r2,-2
100114e4:	1884703a 	and	r2,r3,r2
100114e8:	1001703a 	wrctl	status,r2
  
  return context;
100114ec:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100114f0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100114f4:	e0bffc17 	ldw	r2,-16(fp)
100114f8:	10800817 	ldw	r2,32(r2)
100114fc:	10c00094 	ori	r3,r2,2
10011500:	e0bffc17 	ldw	r2,-16(fp)
10011504:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011508:	e0bffc17 	ldw	r2,-16(fp)
1001150c:	10800017 	ldw	r2,0(r2)
10011510:	10800104 	addi	r2,r2,4
10011514:	e0fffc17 	ldw	r3,-16(fp)
10011518:	18c00817 	ldw	r3,32(r3)
1001151c:	10c00035 	stwio	r3,0(r2)
10011520:	e0bff917 	ldw	r2,-28(fp)
10011524:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011528:	e0bffb17 	ldw	r2,-20(fp)
1001152c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10011530:	e0bffe17 	ldw	r2,-8(fp)
10011534:	0080100e 	bge	zero,r2,10011578 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
10011538:	e0bfff17 	ldw	r2,-4(fp)
1001153c:	1090000c 	andi	r2,r2,16384
10011540:	1000101e 	bne	r2,zero,10011584 <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011544:	0001883a 	nop
10011548:	e0bffc17 	ldw	r2,-16(fp)
1001154c:	10c00d17 	ldw	r3,52(r2)
10011550:	e0bff517 	ldw	r2,-44(fp)
10011554:	1880051e 	bne	r3,r2,1001156c <altera_avalon_jtag_uart_write+0x1b4>
10011558:	e0bffc17 	ldw	r2,-16(fp)
1001155c:	10c00917 	ldw	r3,36(r2)
10011560:	e0bffc17 	ldw	r2,-16(fp)
10011564:	10800117 	ldw	r2,4(r2)
10011568:	18bff736 	bltu	r3,r2,10011548 <__alt_data_end+0xf8011548>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1001156c:	e0bffc17 	ldw	r2,-16(fp)
10011570:	10800917 	ldw	r2,36(r2)
10011574:	1000051e 	bne	r2,zero,1001158c <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
10011578:	e0bffe17 	ldw	r2,-8(fp)
1001157c:	00bfd116 	blt	zero,r2,100114c4 <__alt_data_end+0xf80114c4>
10011580:	00000306 	br	10011590 <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10011584:	0001883a 	nop
10011588:	00000106 	br	10011590 <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1001158c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10011590:	e0fffd17 	ldw	r3,-12(fp)
10011594:	e0bff717 	ldw	r2,-36(fp)
10011598:	18800426 	beq	r3,r2,100115ac <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
1001159c:	e0fffd17 	ldw	r3,-12(fp)
100115a0:	e0bff717 	ldw	r2,-36(fp)
100115a4:	1885c83a 	sub	r2,r3,r2
100115a8:	00000606 	br	100115c4 <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
100115ac:	e0bfff17 	ldw	r2,-4(fp)
100115b0:	1090000c 	andi	r2,r2,16384
100115b4:	10000226 	beq	r2,zero,100115c0 <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
100115b8:	00bffd44 	movi	r2,-11
100115bc:	00000106 	br	100115c4 <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100115c0:	00bffec4 	movi	r2,-5
}
100115c4:	e037883a 	mov	sp,fp
100115c8:	dfc00117 	ldw	ra,4(sp)
100115cc:	df000017 	ldw	fp,0(sp)
100115d0:	dec00204 	addi	sp,sp,8
100115d4:	f800283a 	ret

100115d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100115d8:	defff504 	addi	sp,sp,-44
100115dc:	df000a15 	stw	fp,40(sp)
100115e0:	df000a04 	addi	fp,sp,40
100115e4:	e13ffc15 	stw	r4,-16(fp)
100115e8:	e17ffd15 	stw	r5,-12(fp)
100115ec:	e1bffe15 	stw	r6,-8(fp)
100115f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100115f4:	e03ff615 	stw	zero,-40(fp)
100115f8:	00840074 	movhi	r2,4097
100115fc:	1099e804 	addi	r2,r2,26528
10011600:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10011604:	10003f26 	beq	r2,zero,10011704 <alt_alarm_start+0x12c>
  {
    if (alarm)
10011608:	e0bffc17 	ldw	r2,-16(fp)
1001160c:	10003b26 	beq	r2,zero,100116fc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10011610:	e0bffc17 	ldw	r2,-16(fp)
10011614:	e0fffe17 	ldw	r3,-8(fp)
10011618:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001161c:	e0bffc17 	ldw	r2,-16(fp)
10011620:	e0ffff17 	ldw	r3,-4(fp)
10011624:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011628:	0005303a 	rdctl	r2,status
1001162c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011630:	e0fff817 	ldw	r3,-32(fp)
10011634:	00bfff84 	movi	r2,-2
10011638:	1884703a 	and	r2,r3,r2
1001163c:	1001703a 	wrctl	status,r2
  
  return context;
10011640:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10011644:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011648:	00840074 	movhi	r2,4097
1001164c:	1099e904 	addi	r2,r2,26532
10011650:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10011654:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10011658:	e0fffd17 	ldw	r3,-12(fp)
1001165c:	e0bff617 	ldw	r2,-40(fp)
10011660:	1885883a 	add	r2,r3,r2
10011664:	10c00044 	addi	r3,r2,1
10011668:	e0bffc17 	ldw	r2,-16(fp)
1001166c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10011670:	e0bffc17 	ldw	r2,-16(fp)
10011674:	10c00217 	ldw	r3,8(r2)
10011678:	e0bff617 	ldw	r2,-40(fp)
1001167c:	1880042e 	bgeu	r3,r2,10011690 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10011680:	e0bffc17 	ldw	r2,-16(fp)
10011684:	00c00044 	movi	r3,1
10011688:	10c00405 	stb	r3,16(r2)
1001168c:	00000206 	br	10011698 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10011690:	e0bffc17 	ldw	r2,-16(fp)
10011694:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10011698:	e0bffc17 	ldw	r2,-16(fp)
1001169c:	00c40074 	movhi	r3,4097
100116a0:	18d2b004 	addi	r3,r3,19136
100116a4:	e0fff915 	stw	r3,-28(fp)
100116a8:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100116ac:	e0bffa17 	ldw	r2,-24(fp)
100116b0:	e0fff917 	ldw	r3,-28(fp)
100116b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100116b8:	e0bff917 	ldw	r2,-28(fp)
100116bc:	10c00017 	ldw	r3,0(r2)
100116c0:	e0bffa17 	ldw	r2,-24(fp)
100116c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100116c8:	e0bff917 	ldw	r2,-28(fp)
100116cc:	10800017 	ldw	r2,0(r2)
100116d0:	e0fffa17 	ldw	r3,-24(fp)
100116d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100116d8:	e0bff917 	ldw	r2,-28(fp)
100116dc:	e0fffa17 	ldw	r3,-24(fp)
100116e0:	10c00015 	stw	r3,0(r2)
100116e4:	e0bff717 	ldw	r2,-36(fp)
100116e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100116ec:	e0bffb17 	ldw	r2,-20(fp)
100116f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100116f4:	0005883a 	mov	r2,zero
100116f8:	00000306 	br	10011708 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100116fc:	00bffa84 	movi	r2,-22
10011700:	00000106 	br	10011708 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10011704:	00bfde84 	movi	r2,-134
  }
}
10011708:	e037883a 	mov	sp,fp
1001170c:	df000017 	ldw	fp,0(sp)
10011710:	dec00104 	addi	sp,sp,4
10011714:	f800283a 	ret

10011718 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10011718:	deffff04 	addi	sp,sp,-4
1001171c:	df000015 	stw	fp,0(sp)
10011720:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10011724:	e037883a 	mov	sp,fp
10011728:	df000017 	ldw	fp,0(sp)
1001172c:	dec00104 	addi	sp,sp,4
10011730:	f800283a 	ret

10011734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011734:	defffe04 	addi	sp,sp,-8
10011738:	dfc00115 	stw	ra,4(sp)
1001173c:	df000015 	stw	fp,0(sp)
10011740:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011744:	00840074 	movhi	r2,4097
10011748:	1092ad04 	addi	r2,r2,19124
1001174c:	10800017 	ldw	r2,0(r2)
10011750:	10000526 	beq	r2,zero,10011768 <alt_get_errno+0x34>
10011754:	00840074 	movhi	r2,4097
10011758:	1092ad04 	addi	r2,r2,19124
1001175c:	10800017 	ldw	r2,0(r2)
10011760:	103ee83a 	callr	r2
10011764:	00000206 	br	10011770 <alt_get_errno+0x3c>
10011768:	00840074 	movhi	r2,4097
1001176c:	1099e304 	addi	r2,r2,26508
}
10011770:	e037883a 	mov	sp,fp
10011774:	dfc00117 	ldw	ra,4(sp)
10011778:	df000017 	ldw	fp,0(sp)
1001177c:	dec00204 	addi	sp,sp,8
10011780:	f800283a 	ret

10011784 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10011784:	defffa04 	addi	sp,sp,-24
10011788:	dfc00515 	stw	ra,20(sp)
1001178c:	df000415 	stw	fp,16(sp)
10011790:	df000404 	addi	fp,sp,16
10011794:	e13ffe15 	stw	r4,-8(fp)
10011798:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1001179c:	e0bffe17 	ldw	r2,-8(fp)
100117a0:	10000326 	beq	r2,zero,100117b0 <alt_dev_llist_insert+0x2c>
100117a4:	e0bffe17 	ldw	r2,-8(fp)
100117a8:	10800217 	ldw	r2,8(r2)
100117ac:	1000051e 	bne	r2,zero,100117c4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
100117b0:	00117340 	call	10011734 <alt_get_errno>
100117b4:	00c00584 	movi	r3,22
100117b8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
100117bc:	00bffa84 	movi	r2,-22
100117c0:	00001306 	br	10011810 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100117c4:	e0bffe17 	ldw	r2,-8(fp)
100117c8:	e0ffff17 	ldw	r3,-4(fp)
100117cc:	e0fffc15 	stw	r3,-16(fp)
100117d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100117d4:	e0bffd17 	ldw	r2,-12(fp)
100117d8:	e0fffc17 	ldw	r3,-16(fp)
100117dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100117e0:	e0bffc17 	ldw	r2,-16(fp)
100117e4:	10c00017 	ldw	r3,0(r2)
100117e8:	e0bffd17 	ldw	r2,-12(fp)
100117ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100117f0:	e0bffc17 	ldw	r2,-16(fp)
100117f4:	10800017 	ldw	r2,0(r2)
100117f8:	e0fffd17 	ldw	r3,-12(fp)
100117fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011800:	e0bffc17 	ldw	r2,-16(fp)
10011804:	e0fffd17 	ldw	r3,-12(fp)
10011808:	10c00015 	stw	r3,0(r2)

  return 0;  
1001180c:	0005883a 	mov	r2,zero
}
10011810:	e037883a 	mov	sp,fp
10011814:	dfc00117 	ldw	ra,4(sp)
10011818:	df000017 	ldw	fp,0(sp)
1001181c:	dec00204 	addi	sp,sp,8
10011820:	f800283a 	ret

10011824 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011824:	defffd04 	addi	sp,sp,-12
10011828:	dfc00215 	stw	ra,8(sp)
1001182c:	df000115 	stw	fp,4(sp)
10011830:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011834:	00840074 	movhi	r2,4097
10011838:	1089ed04 	addi	r2,r2,10164
1001183c:	e0bfff15 	stw	r2,-4(fp)
10011840:	00000606 	br	1001185c <_do_ctors+0x38>
        (*ctor) (); 
10011844:	e0bfff17 	ldw	r2,-4(fp)
10011848:	10800017 	ldw	r2,0(r2)
1001184c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011850:	e0bfff17 	ldw	r2,-4(fp)
10011854:	10bfff04 	addi	r2,r2,-4
10011858:	e0bfff15 	stw	r2,-4(fp)
1001185c:	e0ffff17 	ldw	r3,-4(fp)
10011860:	00840074 	movhi	r2,4097
10011864:	1089ee04 	addi	r2,r2,10168
10011868:	18bff62e 	bgeu	r3,r2,10011844 <__alt_data_end+0xf8011844>
        (*ctor) (); 
}
1001186c:	e037883a 	mov	sp,fp
10011870:	dfc00117 	ldw	ra,4(sp)
10011874:	df000017 	ldw	fp,0(sp)
10011878:	dec00204 	addi	sp,sp,8
1001187c:	f800283a 	ret

10011880 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10011880:	defffd04 	addi	sp,sp,-12
10011884:	dfc00215 	stw	ra,8(sp)
10011888:	df000115 	stw	fp,4(sp)
1001188c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011890:	00840074 	movhi	r2,4097
10011894:	1089ed04 	addi	r2,r2,10164
10011898:	e0bfff15 	stw	r2,-4(fp)
1001189c:	00000606 	br	100118b8 <_do_dtors+0x38>
        (*dtor) (); 
100118a0:	e0bfff17 	ldw	r2,-4(fp)
100118a4:	10800017 	ldw	r2,0(r2)
100118a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100118ac:	e0bfff17 	ldw	r2,-4(fp)
100118b0:	10bfff04 	addi	r2,r2,-4
100118b4:	e0bfff15 	stw	r2,-4(fp)
100118b8:	e0ffff17 	ldw	r3,-4(fp)
100118bc:	00840074 	movhi	r2,4097
100118c0:	1089ee04 	addi	r2,r2,10168
100118c4:	18bff62e 	bgeu	r3,r2,100118a0 <__alt_data_end+0xf80118a0>
        (*dtor) (); 
}
100118c8:	e037883a 	mov	sp,fp
100118cc:	dfc00117 	ldw	ra,4(sp)
100118d0:	df000017 	ldw	fp,0(sp)
100118d4:	dec00204 	addi	sp,sp,8
100118d8:	f800283a 	ret

100118dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100118dc:	deffff04 	addi	sp,sp,-4
100118e0:	df000015 	stw	fp,0(sp)
100118e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100118e8:	e037883a 	mov	sp,fp
100118ec:	df000017 	ldw	fp,0(sp)
100118f0:	dec00104 	addi	sp,sp,4
100118f4:	f800283a 	ret

100118f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100118f8:	defff904 	addi	sp,sp,-28
100118fc:	dfc00615 	stw	ra,24(sp)
10011900:	df000515 	stw	fp,20(sp)
10011904:	df000504 	addi	fp,sp,20
10011908:	e13ffc15 	stw	r4,-16(fp)
1001190c:	e17ffd15 	stw	r5,-12(fp)
10011910:	e1bffe15 	stw	r6,-8(fp)
10011914:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011918:	e0800217 	ldw	r2,8(fp)
1001191c:	d8800015 	stw	r2,0(sp)
10011920:	e13ffc17 	ldw	r4,-16(fp)
10011924:	e17ffd17 	ldw	r5,-12(fp)
10011928:	e1bffe17 	ldw	r6,-8(fp)
1001192c:	e1ffff17 	ldw	r7,-4(fp)
10011930:	0011ad00 	call	10011ad0 <alt_iic_isr_register>
}  
10011934:	e037883a 	mov	sp,fp
10011938:	dfc00117 	ldw	ra,4(sp)
1001193c:	df000017 	ldw	fp,0(sp)
10011940:	dec00204 	addi	sp,sp,8
10011944:	f800283a 	ret

10011948 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011948:	defff904 	addi	sp,sp,-28
1001194c:	df000615 	stw	fp,24(sp)
10011950:	df000604 	addi	fp,sp,24
10011954:	e13ffe15 	stw	r4,-8(fp)
10011958:	e17fff15 	stw	r5,-4(fp)
1001195c:	e0bfff17 	ldw	r2,-4(fp)
10011960:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011964:	0005303a 	rdctl	r2,status
10011968:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001196c:	e0fffb17 	ldw	r3,-20(fp)
10011970:	00bfff84 	movi	r2,-2
10011974:	1884703a 	and	r2,r3,r2
10011978:	1001703a 	wrctl	status,r2
  
  return context;
1001197c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011980:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10011984:	e0bffa17 	ldw	r2,-24(fp)
10011988:	00c00044 	movi	r3,1
1001198c:	1884983a 	sll	r2,r3,r2
10011990:	1007883a 	mov	r3,r2
10011994:	00840074 	movhi	r2,4097
10011998:	1099e704 	addi	r2,r2,26524
1001199c:	10800017 	ldw	r2,0(r2)
100119a0:	1886b03a 	or	r3,r3,r2
100119a4:	00840074 	movhi	r2,4097
100119a8:	1099e704 	addi	r2,r2,26524
100119ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100119b0:	00840074 	movhi	r2,4097
100119b4:	1099e704 	addi	r2,r2,26524
100119b8:	10800017 	ldw	r2,0(r2)
100119bc:	100170fa 	wrctl	ienable,r2
100119c0:	e0bffc17 	ldw	r2,-16(fp)
100119c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100119c8:	e0bffd17 	ldw	r2,-12(fp)
100119cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100119d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
100119d4:	e037883a 	mov	sp,fp
100119d8:	df000017 	ldw	fp,0(sp)
100119dc:	dec00104 	addi	sp,sp,4
100119e0:	f800283a 	ret

100119e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100119e4:	defff904 	addi	sp,sp,-28
100119e8:	df000615 	stw	fp,24(sp)
100119ec:	df000604 	addi	fp,sp,24
100119f0:	e13ffe15 	stw	r4,-8(fp)
100119f4:	e17fff15 	stw	r5,-4(fp)
100119f8:	e0bfff17 	ldw	r2,-4(fp)
100119fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011a00:	0005303a 	rdctl	r2,status
10011a04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011a08:	e0fffb17 	ldw	r3,-20(fp)
10011a0c:	00bfff84 	movi	r2,-2
10011a10:	1884703a 	and	r2,r3,r2
10011a14:	1001703a 	wrctl	status,r2
  
  return context;
10011a18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011a1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011a20:	e0bffa17 	ldw	r2,-24(fp)
10011a24:	00c00044 	movi	r3,1
10011a28:	1884983a 	sll	r2,r3,r2
10011a2c:	0084303a 	nor	r2,zero,r2
10011a30:	1007883a 	mov	r3,r2
10011a34:	00840074 	movhi	r2,4097
10011a38:	1099e704 	addi	r2,r2,26524
10011a3c:	10800017 	ldw	r2,0(r2)
10011a40:	1886703a 	and	r3,r3,r2
10011a44:	00840074 	movhi	r2,4097
10011a48:	1099e704 	addi	r2,r2,26524
10011a4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011a50:	00840074 	movhi	r2,4097
10011a54:	1099e704 	addi	r2,r2,26524
10011a58:	10800017 	ldw	r2,0(r2)
10011a5c:	100170fa 	wrctl	ienable,r2
10011a60:	e0bffc17 	ldw	r2,-16(fp)
10011a64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011a68:	e0bffd17 	ldw	r2,-12(fp)
10011a6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011a70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
10011a74:	e037883a 	mov	sp,fp
10011a78:	df000017 	ldw	fp,0(sp)
10011a7c:	dec00104 	addi	sp,sp,4
10011a80:	f800283a 	ret

10011a84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011a84:	defffc04 	addi	sp,sp,-16
10011a88:	df000315 	stw	fp,12(sp)
10011a8c:	df000304 	addi	fp,sp,12
10011a90:	e13ffe15 	stw	r4,-8(fp)
10011a94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011a98:	000530fa 	rdctl	r2,ienable
10011a9c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011aa0:	e0bfff17 	ldw	r2,-4(fp)
10011aa4:	00c00044 	movi	r3,1
10011aa8:	1884983a 	sll	r2,r3,r2
10011aac:	1007883a 	mov	r3,r2
10011ab0:	e0bffd17 	ldw	r2,-12(fp)
10011ab4:	1884703a 	and	r2,r3,r2
10011ab8:	1004c03a 	cmpne	r2,r2,zero
10011abc:	10803fcc 	andi	r2,r2,255
}
10011ac0:	e037883a 	mov	sp,fp
10011ac4:	df000017 	ldw	fp,0(sp)
10011ac8:	dec00104 	addi	sp,sp,4
10011acc:	f800283a 	ret

10011ad0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011ad0:	defff504 	addi	sp,sp,-44
10011ad4:	dfc00a15 	stw	ra,40(sp)
10011ad8:	df000915 	stw	fp,36(sp)
10011adc:	df000904 	addi	fp,sp,36
10011ae0:	e13ffc15 	stw	r4,-16(fp)
10011ae4:	e17ffd15 	stw	r5,-12(fp)
10011ae8:	e1bffe15 	stw	r6,-8(fp)
10011aec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011af0:	00bffa84 	movi	r2,-22
10011af4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011af8:	e0bffd17 	ldw	r2,-12(fp)
10011afc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011b00:	e0bff817 	ldw	r2,-32(fp)
10011b04:	10800808 	cmpgei	r2,r2,32
10011b08:	1000271e 	bne	r2,zero,10011ba8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011b0c:	0005303a 	rdctl	r2,status
10011b10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011b14:	e0fffa17 	ldw	r3,-24(fp)
10011b18:	00bfff84 	movi	r2,-2
10011b1c:	1884703a 	and	r2,r3,r2
10011b20:	1001703a 	wrctl	status,r2
  
  return context;
10011b24:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011b28:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10011b2c:	00c40074 	movhi	r3,4097
10011b30:	18da3404 	addi	r3,r3,26832
10011b34:	e0bff817 	ldw	r2,-32(fp)
10011b38:	100490fa 	slli	r2,r2,3
10011b3c:	1885883a 	add	r2,r3,r2
10011b40:	e0fffe17 	ldw	r3,-8(fp)
10011b44:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011b48:	00c40074 	movhi	r3,4097
10011b4c:	18da3404 	addi	r3,r3,26832
10011b50:	e0bff817 	ldw	r2,-32(fp)
10011b54:	100490fa 	slli	r2,r2,3
10011b58:	1885883a 	add	r2,r3,r2
10011b5c:	10800104 	addi	r2,r2,4
10011b60:	e0ffff17 	ldw	r3,-4(fp)
10011b64:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011b68:	e0bffe17 	ldw	r2,-8(fp)
10011b6c:	10000526 	beq	r2,zero,10011b84 <alt_iic_isr_register+0xb4>
10011b70:	e0bff817 	ldw	r2,-32(fp)
10011b74:	e13ffc17 	ldw	r4,-16(fp)
10011b78:	100b883a 	mov	r5,r2
10011b7c:	00119480 	call	10011948 <alt_ic_irq_enable>
10011b80:	00000406 	br	10011b94 <alt_iic_isr_register+0xc4>
10011b84:	e0bff817 	ldw	r2,-32(fp)
10011b88:	e13ffc17 	ldw	r4,-16(fp)
10011b8c:	100b883a 	mov	r5,r2
10011b90:	00119e40 	call	100119e4 <alt_ic_irq_disable>
10011b94:	e0bff715 	stw	r2,-36(fp)
10011b98:	e0bff917 	ldw	r2,-28(fp)
10011b9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011ba0:	e0bffb17 	ldw	r2,-20(fp)
10011ba4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011ba8:	e0bff717 	ldw	r2,-36(fp)
}
10011bac:	e037883a 	mov	sp,fp
10011bb0:	dfc00117 	ldw	ra,4(sp)
10011bb4:	df000017 	ldw	fp,0(sp)
10011bb8:	dec00204 	addi	sp,sp,8
10011bbc:	f800283a 	ret

10011bc0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011bc0:	defff804 	addi	sp,sp,-32
10011bc4:	dfc00715 	stw	ra,28(sp)
10011bc8:	df000615 	stw	fp,24(sp)
10011bcc:	dc000515 	stw	r16,20(sp)
10011bd0:	df000504 	addi	fp,sp,20
10011bd4:	e13ffc15 	stw	r4,-16(fp)
10011bd8:	e17ffd15 	stw	r5,-12(fp)
10011bdc:	e1bffe15 	stw	r6,-8(fp)
10011be0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10011be4:	e13ffd17 	ldw	r4,-12(fp)
10011be8:	e17ffe17 	ldw	r5,-8(fp)
10011bec:	e1bfff17 	ldw	r6,-4(fp)
10011bf0:	0011e580 	call	10011e58 <open>
10011bf4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10011bf8:	e0bffb17 	ldw	r2,-20(fp)
10011bfc:	10002216 	blt	r2,zero,10011c88 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011c00:	04040074 	movhi	r16,4097
10011c04:	840e2a04 	addi	r16,r16,14504
10011c08:	e0bffb17 	ldw	r2,-20(fp)
10011c0c:	1009883a 	mov	r4,r2
10011c10:	01400304 	movi	r5,12
10011c14:	00012fc0 	call	100012fc <__mulsi3>
10011c18:	8085883a 	add	r2,r16,r2
10011c1c:	10c00017 	ldw	r3,0(r2)
10011c20:	e0bffc17 	ldw	r2,-16(fp)
10011c24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011c28:	04040074 	movhi	r16,4097
10011c2c:	840e2a04 	addi	r16,r16,14504
10011c30:	e0bffb17 	ldw	r2,-20(fp)
10011c34:	1009883a 	mov	r4,r2
10011c38:	01400304 	movi	r5,12
10011c3c:	00012fc0 	call	100012fc <__mulsi3>
10011c40:	8085883a 	add	r2,r16,r2
10011c44:	10800104 	addi	r2,r2,4
10011c48:	10c00017 	ldw	r3,0(r2)
10011c4c:	e0bffc17 	ldw	r2,-16(fp)
10011c50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011c54:	04040074 	movhi	r16,4097
10011c58:	840e2a04 	addi	r16,r16,14504
10011c5c:	e0bffb17 	ldw	r2,-20(fp)
10011c60:	1009883a 	mov	r4,r2
10011c64:	01400304 	movi	r5,12
10011c68:	00012fc0 	call	100012fc <__mulsi3>
10011c6c:	8085883a 	add	r2,r16,r2
10011c70:	10800204 	addi	r2,r2,8
10011c74:	10c00017 	ldw	r3,0(r2)
10011c78:	e0bffc17 	ldw	r2,-16(fp)
10011c7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011c80:	e13ffb17 	ldw	r4,-20(fp)
10011c84:	00108540 	call	10010854 <alt_release_fd>
  }
} 
10011c88:	e037883a 	mov	sp,fp
10011c8c:	dfc00217 	ldw	ra,8(sp)
10011c90:	df000117 	ldw	fp,4(sp)
10011c94:	dc000017 	ldw	r16,0(sp)
10011c98:	dec00304 	addi	sp,sp,12
10011c9c:	f800283a 	ret

10011ca0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10011ca0:	defffb04 	addi	sp,sp,-20
10011ca4:	dfc00415 	stw	ra,16(sp)
10011ca8:	df000315 	stw	fp,12(sp)
10011cac:	df000304 	addi	fp,sp,12
10011cb0:	e13ffd15 	stw	r4,-12(fp)
10011cb4:	e17ffe15 	stw	r5,-8(fp)
10011cb8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011cbc:	01040074 	movhi	r4,4097
10011cc0:	210e2d04 	addi	r4,r4,14516
10011cc4:	e17ffd17 	ldw	r5,-12(fp)
10011cc8:	01800044 	movi	r6,1
10011ccc:	01c07fc4 	movi	r7,511
10011cd0:	0011bc00 	call	10011bc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011cd4:	01040074 	movhi	r4,4097
10011cd8:	210e2a04 	addi	r4,r4,14504
10011cdc:	e17ffe17 	ldw	r5,-8(fp)
10011ce0:	000d883a 	mov	r6,zero
10011ce4:	01c07fc4 	movi	r7,511
10011ce8:	0011bc00 	call	10011bc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011cec:	01040074 	movhi	r4,4097
10011cf0:	210e3004 	addi	r4,r4,14528
10011cf4:	e17fff17 	ldw	r5,-4(fp)
10011cf8:	01800044 	movi	r6,1
10011cfc:	01c07fc4 	movi	r7,511
10011d00:	0011bc00 	call	10011bc0 <alt_open_fd>
}  
10011d04:	e037883a 	mov	sp,fp
10011d08:	dfc00117 	ldw	ra,4(sp)
10011d0c:	df000017 	ldw	fp,0(sp)
10011d10:	dec00204 	addi	sp,sp,8
10011d14:	f800283a 	ret

10011d18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011d18:	defffe04 	addi	sp,sp,-8
10011d1c:	dfc00115 	stw	ra,4(sp)
10011d20:	df000015 	stw	fp,0(sp)
10011d24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011d28:	00840074 	movhi	r2,4097
10011d2c:	1092ad04 	addi	r2,r2,19124
10011d30:	10800017 	ldw	r2,0(r2)
10011d34:	10000526 	beq	r2,zero,10011d4c <alt_get_errno+0x34>
10011d38:	00840074 	movhi	r2,4097
10011d3c:	1092ad04 	addi	r2,r2,19124
10011d40:	10800017 	ldw	r2,0(r2)
10011d44:	103ee83a 	callr	r2
10011d48:	00000206 	br	10011d54 <alt_get_errno+0x3c>
10011d4c:	00840074 	movhi	r2,4097
10011d50:	1099e304 	addi	r2,r2,26508
}
10011d54:	e037883a 	mov	sp,fp
10011d58:	dfc00117 	ldw	ra,4(sp)
10011d5c:	df000017 	ldw	fp,0(sp)
10011d60:	dec00204 	addi	sp,sp,8
10011d64:	f800283a 	ret

10011d68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10011d68:	defffb04 	addi	sp,sp,-20
10011d6c:	dfc00415 	stw	ra,16(sp)
10011d70:	df000315 	stw	fp,12(sp)
10011d74:	dc000215 	stw	r16,8(sp)
10011d78:	df000204 	addi	fp,sp,8
10011d7c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10011d80:	e0bfff17 	ldw	r2,-4(fp)
10011d84:	10800217 	ldw	r2,8(r2)
10011d88:	10d00034 	orhi	r3,r2,16384
10011d8c:	e0bfff17 	ldw	r2,-4(fp)
10011d90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011d94:	e03ffe15 	stw	zero,-8(fp)
10011d98:	00002206 	br	10011e24 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011d9c:	04040074 	movhi	r16,4097
10011da0:	840e2a04 	addi	r16,r16,14504
10011da4:	e0bffe17 	ldw	r2,-8(fp)
10011da8:	1009883a 	mov	r4,r2
10011dac:	01400304 	movi	r5,12
10011db0:	00012fc0 	call	100012fc <__mulsi3>
10011db4:	8085883a 	add	r2,r16,r2
10011db8:	10c00017 	ldw	r3,0(r2)
10011dbc:	e0bfff17 	ldw	r2,-4(fp)
10011dc0:	10800017 	ldw	r2,0(r2)
10011dc4:	1880141e 	bne	r3,r2,10011e18 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011dc8:	04040074 	movhi	r16,4097
10011dcc:	840e2a04 	addi	r16,r16,14504
10011dd0:	e0bffe17 	ldw	r2,-8(fp)
10011dd4:	1009883a 	mov	r4,r2
10011dd8:	01400304 	movi	r5,12
10011ddc:	00012fc0 	call	100012fc <__mulsi3>
10011de0:	8085883a 	add	r2,r16,r2
10011de4:	10800204 	addi	r2,r2,8
10011de8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011dec:	10000a0e 	bge	r2,zero,10011e18 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10011df0:	e13ffe17 	ldw	r4,-8(fp)
10011df4:	01400304 	movi	r5,12
10011df8:	00012fc0 	call	100012fc <__mulsi3>
10011dfc:	00c40074 	movhi	r3,4097
10011e00:	18ce2a04 	addi	r3,r3,14504
10011e04:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011e08:	e0bfff17 	ldw	r2,-4(fp)
10011e0c:	18800226 	beq	r3,r2,10011e18 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011e10:	00bffcc4 	movi	r2,-13
10011e14:	00000a06 	br	10011e40 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011e18:	e0bffe17 	ldw	r2,-8(fp)
10011e1c:	10800044 	addi	r2,r2,1
10011e20:	e0bffe15 	stw	r2,-8(fp)
10011e24:	00840074 	movhi	r2,4097
10011e28:	1092ac04 	addi	r2,r2,19120
10011e2c:	10800017 	ldw	r2,0(r2)
10011e30:	1007883a 	mov	r3,r2
10011e34:	e0bffe17 	ldw	r2,-8(fp)
10011e38:	18bfd82e 	bgeu	r3,r2,10011d9c <__alt_data_end+0xf8011d9c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10011e3c:	0005883a 	mov	r2,zero
}
10011e40:	e037883a 	mov	sp,fp
10011e44:	dfc00217 	ldw	ra,8(sp)
10011e48:	df000117 	ldw	fp,4(sp)
10011e4c:	dc000017 	ldw	r16,0(sp)
10011e50:	dec00304 	addi	sp,sp,12
10011e54:	f800283a 	ret

10011e58 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011e58:	defff604 	addi	sp,sp,-40
10011e5c:	dfc00915 	stw	ra,36(sp)
10011e60:	df000815 	stw	fp,32(sp)
10011e64:	df000804 	addi	fp,sp,32
10011e68:	e13ffd15 	stw	r4,-12(fp)
10011e6c:	e17ffe15 	stw	r5,-8(fp)
10011e70:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10011e74:	00bfffc4 	movi	r2,-1
10011e78:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10011e7c:	00bffb44 	movi	r2,-19
10011e80:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10011e84:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011e88:	e13ffd17 	ldw	r4,-12(fp)
10011e8c:	01440074 	movhi	r5,4097
10011e90:	2952aa04 	addi	r5,r5,19112
10011e94:	001216c0 	call	1001216c <alt_find_dev>
10011e98:	e0bff815 	stw	r2,-32(fp)
10011e9c:	e0bff817 	ldw	r2,-32(fp)
10011ea0:	1000051e 	bne	r2,zero,10011eb8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10011ea4:	e13ffd17 	ldw	r4,-12(fp)
10011ea8:	00121fc0 	call	100121fc <alt_find_file>
10011eac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10011eb0:	00800044 	movi	r2,1
10011eb4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10011eb8:	e0bff817 	ldw	r2,-32(fp)
10011ebc:	10002a26 	beq	r2,zero,10011f68 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10011ec0:	e13ff817 	ldw	r4,-32(fp)
10011ec4:	00123100 	call	10012310 <alt_get_fd>
10011ec8:	e0bff915 	stw	r2,-28(fp)
10011ecc:	e0bff917 	ldw	r2,-28(fp)
10011ed0:	1000030e 	bge	r2,zero,10011ee0 <open+0x88>
    {
      status = index;
10011ed4:	e0bff917 	ldw	r2,-28(fp)
10011ed8:	e0bffa15 	stw	r2,-24(fp)
10011edc:	00002406 	br	10011f70 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10011ee0:	e13ff917 	ldw	r4,-28(fp)
10011ee4:	01400304 	movi	r5,12
10011ee8:	00012fc0 	call	100012fc <__mulsi3>
10011eec:	00c40074 	movhi	r3,4097
10011ef0:	18ce2a04 	addi	r3,r3,14504
10011ef4:	10c5883a 	add	r2,r2,r3
10011ef8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011efc:	e0fffe17 	ldw	r3,-8(fp)
10011f00:	00900034 	movhi	r2,16384
10011f04:	10bfffc4 	addi	r2,r2,-1
10011f08:	1886703a 	and	r3,r3,r2
10011f0c:	e0bffc17 	ldw	r2,-16(fp)
10011f10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011f14:	e0bffb17 	ldw	r2,-20(fp)
10011f18:	1000051e 	bne	r2,zero,10011f30 <open+0xd8>
10011f1c:	e13ffc17 	ldw	r4,-16(fp)
10011f20:	0011d680 	call	10011d68 <alt_file_locked>
10011f24:	e0bffa15 	stw	r2,-24(fp)
10011f28:	e0bffa17 	ldw	r2,-24(fp)
10011f2c:	10001016 	blt	r2,zero,10011f70 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011f30:	e0bff817 	ldw	r2,-32(fp)
10011f34:	10800317 	ldw	r2,12(r2)
10011f38:	10000826 	beq	r2,zero,10011f5c <open+0x104>
10011f3c:	e0bff817 	ldw	r2,-32(fp)
10011f40:	10800317 	ldw	r2,12(r2)
10011f44:	e13ffc17 	ldw	r4,-16(fp)
10011f48:	e17ffd17 	ldw	r5,-12(fp)
10011f4c:	e1bffe17 	ldw	r6,-8(fp)
10011f50:	e1ffff17 	ldw	r7,-4(fp)
10011f54:	103ee83a 	callr	r2
10011f58:	00000106 	br	10011f60 <open+0x108>
10011f5c:	0005883a 	mov	r2,zero
10011f60:	e0bffa15 	stw	r2,-24(fp)
10011f64:	00000206 	br	10011f70 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011f68:	00bffb44 	movi	r2,-19
10011f6c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011f70:	e0bffa17 	ldw	r2,-24(fp)
10011f74:	1000080e 	bge	r2,zero,10011f98 <open+0x140>
  {
    alt_release_fd (index);  
10011f78:	e13ff917 	ldw	r4,-28(fp)
10011f7c:	00108540 	call	10010854 <alt_release_fd>
    ALT_ERRNO = -status;
10011f80:	0011d180 	call	10011d18 <alt_get_errno>
10011f84:	e0fffa17 	ldw	r3,-24(fp)
10011f88:	00c7c83a 	sub	r3,zero,r3
10011f8c:	10c00015 	stw	r3,0(r2)
    return -1;
10011f90:	00bfffc4 	movi	r2,-1
10011f94:	00000106 	br	10011f9c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
10011f98:	e0bff917 	ldw	r2,-28(fp)
}
10011f9c:	e037883a 	mov	sp,fp
10011fa0:	dfc00117 	ldw	ra,4(sp)
10011fa4:	df000017 	ldw	fp,0(sp)
10011fa8:	dec00204 	addi	sp,sp,8
10011fac:	f800283a 	ret

10011fb0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011fb0:	defffa04 	addi	sp,sp,-24
10011fb4:	df000515 	stw	fp,20(sp)
10011fb8:	df000504 	addi	fp,sp,20
10011fbc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011fc0:	0005303a 	rdctl	r2,status
10011fc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011fc8:	e0fffc17 	ldw	r3,-16(fp)
10011fcc:	00bfff84 	movi	r2,-2
10011fd0:	1884703a 	and	r2,r3,r2
10011fd4:	1001703a 	wrctl	status,r2
  
  return context;
10011fd8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10011fdc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011fe0:	e0bfff17 	ldw	r2,-4(fp)
10011fe4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011fe8:	e0bffd17 	ldw	r2,-12(fp)
10011fec:	10800017 	ldw	r2,0(r2)
10011ff0:	e0fffd17 	ldw	r3,-12(fp)
10011ff4:	18c00117 	ldw	r3,4(r3)
10011ff8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10011ffc:	e0bffd17 	ldw	r2,-12(fp)
10012000:	10800117 	ldw	r2,4(r2)
10012004:	e0fffd17 	ldw	r3,-12(fp)
10012008:	18c00017 	ldw	r3,0(r3)
1001200c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10012010:	e0bffd17 	ldw	r2,-12(fp)
10012014:	e0fffd17 	ldw	r3,-12(fp)
10012018:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1001201c:	e0bffd17 	ldw	r2,-12(fp)
10012020:	e0fffd17 	ldw	r3,-12(fp)
10012024:	10c00015 	stw	r3,0(r2)
10012028:	e0bffb17 	ldw	r2,-20(fp)
1001202c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012030:	e0bffe17 	ldw	r2,-8(fp)
10012034:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10012038:	e037883a 	mov	sp,fp
1001203c:	df000017 	ldw	fp,0(sp)
10012040:	dec00104 	addi	sp,sp,4
10012044:	f800283a 	ret

10012048 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10012048:	defffb04 	addi	sp,sp,-20
1001204c:	dfc00415 	stw	ra,16(sp)
10012050:	df000315 	stw	fp,12(sp)
10012054:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10012058:	d0a00e17 	ldw	r2,-32712(gp)
1001205c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10012060:	d0a74717 	ldw	r2,-25316(gp)
10012064:	10800044 	addi	r2,r2,1
10012068:	d0a74715 	stw	r2,-25316(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001206c:	00002e06 	br	10012128 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10012070:	e0bffd17 	ldw	r2,-12(fp)
10012074:	10800017 	ldw	r2,0(r2)
10012078:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001207c:	e0bffd17 	ldw	r2,-12(fp)
10012080:	10800403 	ldbu	r2,16(r2)
10012084:	10803fcc 	andi	r2,r2,255
10012088:	10000426 	beq	r2,zero,1001209c <alt_tick+0x54>
1001208c:	d0a74717 	ldw	r2,-25316(gp)
10012090:	1000021e 	bne	r2,zero,1001209c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10012094:	e0bffd17 	ldw	r2,-12(fp)
10012098:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001209c:	e0bffd17 	ldw	r2,-12(fp)
100120a0:	10800217 	ldw	r2,8(r2)
100120a4:	d0e74717 	ldw	r3,-25316(gp)
100120a8:	18801d36 	bltu	r3,r2,10012120 <alt_tick+0xd8>
100120ac:	e0bffd17 	ldw	r2,-12(fp)
100120b0:	10800403 	ldbu	r2,16(r2)
100120b4:	10803fcc 	andi	r2,r2,255
100120b8:	1000191e 	bne	r2,zero,10012120 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100120bc:	e0bffd17 	ldw	r2,-12(fp)
100120c0:	10c00317 	ldw	r3,12(r2)
100120c4:	e0bffd17 	ldw	r2,-12(fp)
100120c8:	10800517 	ldw	r2,20(r2)
100120cc:	1009883a 	mov	r4,r2
100120d0:	183ee83a 	callr	r3
100120d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100120d8:	e0bfff17 	ldw	r2,-4(fp)
100120dc:	1000031e 	bne	r2,zero,100120ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100120e0:	e13ffd17 	ldw	r4,-12(fp)
100120e4:	0011fb00 	call	10011fb0 <alt_alarm_stop>
100120e8:	00000d06 	br	10012120 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100120ec:	e0bffd17 	ldw	r2,-12(fp)
100120f0:	10c00217 	ldw	r3,8(r2)
100120f4:	e0bfff17 	ldw	r2,-4(fp)
100120f8:	1887883a 	add	r3,r3,r2
100120fc:	e0bffd17 	ldw	r2,-12(fp)
10012100:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10012104:	e0bffd17 	ldw	r2,-12(fp)
10012108:	10c00217 	ldw	r3,8(r2)
1001210c:	d0a74717 	ldw	r2,-25316(gp)
10012110:	1880032e 	bgeu	r3,r2,10012120 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10012114:	e0bffd17 	ldw	r2,-12(fp)
10012118:	00c00044 	movi	r3,1
1001211c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10012120:	e0bffe17 	ldw	r2,-8(fp)
10012124:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012128:	e0fffd17 	ldw	r3,-12(fp)
1001212c:	d0a00e04 	addi	r2,gp,-32712
10012130:	18bfcf1e 	bne	r3,r2,10012070 <__alt_data_end+0xf8012070>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10012134:	0001883a 	nop
}
10012138:	e037883a 	mov	sp,fp
1001213c:	dfc00117 	ldw	ra,4(sp)
10012140:	df000017 	ldw	fp,0(sp)
10012144:	dec00204 	addi	sp,sp,8
10012148:	f800283a 	ret

1001214c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
1001214c:	deffff04 	addi	sp,sp,-4
10012150:	df000015 	stw	fp,0(sp)
10012154:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10012158:	000170fa 	wrctl	ienable,zero
}
1001215c:	e037883a 	mov	sp,fp
10012160:	df000017 	ldw	fp,0(sp)
10012164:	dec00104 	addi	sp,sp,4
10012168:	f800283a 	ret

1001216c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001216c:	defffa04 	addi	sp,sp,-24
10012170:	dfc00515 	stw	ra,20(sp)
10012174:	df000415 	stw	fp,16(sp)
10012178:	df000404 	addi	fp,sp,16
1001217c:	e13ffe15 	stw	r4,-8(fp)
10012180:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10012184:	e0bfff17 	ldw	r2,-4(fp)
10012188:	10800017 	ldw	r2,0(r2)
1001218c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10012190:	e13ffe17 	ldw	r4,-8(fp)
10012194:	00014b40 	call	100014b4 <strlen>
10012198:	10800044 	addi	r2,r2,1
1001219c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100121a0:	00000d06 	br	100121d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100121a4:	e0bffc17 	ldw	r2,-16(fp)
100121a8:	10c00217 	ldw	r3,8(r2)
100121ac:	e0bffd17 	ldw	r2,-12(fp)
100121b0:	1809883a 	mov	r4,r3
100121b4:	e17ffe17 	ldw	r5,-8(fp)
100121b8:	100d883a 	mov	r6,r2
100121bc:	00124300 	call	10012430 <memcmp>
100121c0:	1000021e 	bne	r2,zero,100121cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100121c4:	e0bffc17 	ldw	r2,-16(fp)
100121c8:	00000706 	br	100121e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100121cc:	e0bffc17 	ldw	r2,-16(fp)
100121d0:	10800017 	ldw	r2,0(r2)
100121d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100121d8:	e0fffc17 	ldw	r3,-16(fp)
100121dc:	e0bfff17 	ldw	r2,-4(fp)
100121e0:	18bff01e 	bne	r3,r2,100121a4 <__alt_data_end+0xf80121a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100121e4:	0005883a 	mov	r2,zero
}
100121e8:	e037883a 	mov	sp,fp
100121ec:	dfc00117 	ldw	ra,4(sp)
100121f0:	df000017 	ldw	fp,0(sp)
100121f4:	dec00204 	addi	sp,sp,8
100121f8:	f800283a 	ret

100121fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100121fc:	defffb04 	addi	sp,sp,-20
10012200:	dfc00415 	stw	ra,16(sp)
10012204:	df000315 	stw	fp,12(sp)
10012208:	df000304 	addi	fp,sp,12
1001220c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10012210:	00840074 	movhi	r2,4097
10012214:	1092a804 	addi	r2,r2,19104
10012218:	10800017 	ldw	r2,0(r2)
1001221c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10012220:	00003106 	br	100122e8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10012224:	e0bffd17 	ldw	r2,-12(fp)
10012228:	10800217 	ldw	r2,8(r2)
1001222c:	1009883a 	mov	r4,r2
10012230:	00014b40 	call	100014b4 <strlen>
10012234:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10012238:	e0bffd17 	ldw	r2,-12(fp)
1001223c:	10c00217 	ldw	r3,8(r2)
10012240:	e0bffe17 	ldw	r2,-8(fp)
10012244:	10bfffc4 	addi	r2,r2,-1
10012248:	1885883a 	add	r2,r3,r2
1001224c:	10800003 	ldbu	r2,0(r2)
10012250:	10803fcc 	andi	r2,r2,255
10012254:	1080201c 	xori	r2,r2,128
10012258:	10bfe004 	addi	r2,r2,-128
1001225c:	10800bd8 	cmpnei	r2,r2,47
10012260:	1000031e 	bne	r2,zero,10012270 <alt_find_file+0x74>
    {
      len -= 1;
10012264:	e0bffe17 	ldw	r2,-8(fp)
10012268:	10bfffc4 	addi	r2,r2,-1
1001226c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10012270:	e0bffe17 	ldw	r2,-8(fp)
10012274:	e0ffff17 	ldw	r3,-4(fp)
10012278:	1885883a 	add	r2,r3,r2
1001227c:	10800003 	ldbu	r2,0(r2)
10012280:	10803fcc 	andi	r2,r2,255
10012284:	1080201c 	xori	r2,r2,128
10012288:	10bfe004 	addi	r2,r2,-128
1001228c:	10800be0 	cmpeqi	r2,r2,47
10012290:	1000081e 	bne	r2,zero,100122b4 <alt_find_file+0xb8>
10012294:	e0bffe17 	ldw	r2,-8(fp)
10012298:	e0ffff17 	ldw	r3,-4(fp)
1001229c:	1885883a 	add	r2,r3,r2
100122a0:	10800003 	ldbu	r2,0(r2)
100122a4:	10803fcc 	andi	r2,r2,255
100122a8:	1080201c 	xori	r2,r2,128
100122ac:	10bfe004 	addi	r2,r2,-128
100122b0:	10000a1e 	bne	r2,zero,100122dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
100122b4:	e0bffd17 	ldw	r2,-12(fp)
100122b8:	10c00217 	ldw	r3,8(r2)
100122bc:	e0bffe17 	ldw	r2,-8(fp)
100122c0:	1809883a 	mov	r4,r3
100122c4:	e17fff17 	ldw	r5,-4(fp)
100122c8:	100d883a 	mov	r6,r2
100122cc:	00124300 	call	10012430 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100122d0:	1000021e 	bne	r2,zero,100122dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100122d4:	e0bffd17 	ldw	r2,-12(fp)
100122d8:	00000806 	br	100122fc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100122dc:	e0bffd17 	ldw	r2,-12(fp)
100122e0:	10800017 	ldw	r2,0(r2)
100122e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100122e8:	e0fffd17 	ldw	r3,-12(fp)
100122ec:	00840074 	movhi	r2,4097
100122f0:	1092a804 	addi	r2,r2,19104
100122f4:	18bfcb1e 	bne	r3,r2,10012224 <__alt_data_end+0xf8012224>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100122f8:	0005883a 	mov	r2,zero
}
100122fc:	e037883a 	mov	sp,fp
10012300:	dfc00117 	ldw	ra,4(sp)
10012304:	df000017 	ldw	fp,0(sp)
10012308:	dec00204 	addi	sp,sp,8
1001230c:	f800283a 	ret

10012310 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10012310:	defffa04 	addi	sp,sp,-24
10012314:	dfc00515 	stw	ra,20(sp)
10012318:	df000415 	stw	fp,16(sp)
1001231c:	dc000315 	stw	r16,12(sp)
10012320:	df000304 	addi	fp,sp,12
10012324:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10012328:	00bffa04 	movi	r2,-24
1001232c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012330:	e03ffd15 	stw	zero,-12(fp)
10012334:	00002106 	br	100123bc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10012338:	04040074 	movhi	r16,4097
1001233c:	840e2a04 	addi	r16,r16,14504
10012340:	e0bffd17 	ldw	r2,-12(fp)
10012344:	1009883a 	mov	r4,r2
10012348:	01400304 	movi	r5,12
1001234c:	00012fc0 	call	100012fc <__mulsi3>
10012350:	8085883a 	add	r2,r16,r2
10012354:	10800017 	ldw	r2,0(r2)
10012358:	1000151e 	bne	r2,zero,100123b0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1001235c:	04040074 	movhi	r16,4097
10012360:	840e2a04 	addi	r16,r16,14504
10012364:	e0bffd17 	ldw	r2,-12(fp)
10012368:	1009883a 	mov	r4,r2
1001236c:	01400304 	movi	r5,12
10012370:	00012fc0 	call	100012fc <__mulsi3>
10012374:	8085883a 	add	r2,r16,r2
10012378:	e0ffff17 	ldw	r3,-4(fp)
1001237c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10012380:	00840074 	movhi	r2,4097
10012384:	1092ac04 	addi	r2,r2,19120
10012388:	10c00017 	ldw	r3,0(r2)
1001238c:	e0bffd17 	ldw	r2,-12(fp)
10012390:	1880040e 	bge	r3,r2,100123a4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10012394:	00840074 	movhi	r2,4097
10012398:	1092ac04 	addi	r2,r2,19120
1001239c:	e0fffd17 	ldw	r3,-12(fp)
100123a0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
100123a4:	e0bffd17 	ldw	r2,-12(fp)
100123a8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
100123ac:	00000606 	br	100123c8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100123b0:	e0bffd17 	ldw	r2,-12(fp)
100123b4:	10800044 	addi	r2,r2,1
100123b8:	e0bffd15 	stw	r2,-12(fp)
100123bc:	e0bffd17 	ldw	r2,-12(fp)
100123c0:	10800810 	cmplti	r2,r2,32
100123c4:	103fdc1e 	bne	r2,zero,10012338 <__alt_data_end+0xf8012338>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100123c8:	e0bffe17 	ldw	r2,-8(fp)
}
100123cc:	e037883a 	mov	sp,fp
100123d0:	dfc00217 	ldw	ra,8(sp)
100123d4:	df000117 	ldw	fp,4(sp)
100123d8:	dc000017 	ldw	r16,0(sp)
100123dc:	dec00304 	addi	sp,sp,12
100123e0:	f800283a 	ret

100123e4 <atexit>:
100123e4:	200b883a 	mov	r5,r4
100123e8:	000d883a 	mov	r6,zero
100123ec:	0009883a 	mov	r4,zero
100123f0:	000f883a 	mov	r7,zero
100123f4:	00124ac1 	jmpi	100124ac <__register_exitproc>

100123f8 <exit>:
100123f8:	defffe04 	addi	sp,sp,-8
100123fc:	000b883a 	mov	r5,zero
10012400:	dc000015 	stw	r16,0(sp)
10012404:	dfc00115 	stw	ra,4(sp)
10012408:	2021883a 	mov	r16,r4
1001240c:	00125dc0 	call	100125dc <__call_exitprocs>
10012410:	00840074 	movhi	r2,4097
10012414:	1092a304 	addi	r2,r2,19084
10012418:	11000017 	ldw	r4,0(r2)
1001241c:	20800f17 	ldw	r2,60(r4)
10012420:	10000126 	beq	r2,zero,10012428 <exit+0x30>
10012424:	103ee83a 	callr	r2
10012428:	8009883a 	mov	r4,r16
1001242c:	001277c0 	call	1001277c <_exit>

10012430 <memcmp>:
10012430:	01c000c4 	movi	r7,3
10012434:	3980192e 	bgeu	r7,r6,1001249c <memcmp+0x6c>
10012438:	2904b03a 	or	r2,r5,r4
1001243c:	11c4703a 	and	r2,r2,r7
10012440:	10000f26 	beq	r2,zero,10012480 <memcmp+0x50>
10012444:	20c00003 	ldbu	r3,0(r4)
10012448:	28800003 	ldbu	r2,0(r5)
1001244c:	1880151e 	bne	r3,r2,100124a4 <memcmp+0x74>
10012450:	31bfff84 	addi	r6,r6,-2
10012454:	01ffffc4 	movi	r7,-1
10012458:	00000406 	br	1001246c <memcmp+0x3c>
1001245c:	20c00003 	ldbu	r3,0(r4)
10012460:	28800003 	ldbu	r2,0(r5)
10012464:	31bfffc4 	addi	r6,r6,-1
10012468:	18800e1e 	bne	r3,r2,100124a4 <memcmp+0x74>
1001246c:	21000044 	addi	r4,r4,1
10012470:	29400044 	addi	r5,r5,1
10012474:	31fff91e 	bne	r6,r7,1001245c <__alt_data_end+0xf801245c>
10012478:	0005883a 	mov	r2,zero
1001247c:	f800283a 	ret
10012480:	20c00017 	ldw	r3,0(r4)
10012484:	28800017 	ldw	r2,0(r5)
10012488:	1880041e 	bne	r3,r2,1001249c <memcmp+0x6c>
1001248c:	31bfff04 	addi	r6,r6,-4
10012490:	21000104 	addi	r4,r4,4
10012494:	29400104 	addi	r5,r5,4
10012498:	39bff936 	bltu	r7,r6,10012480 <__alt_data_end+0xf8012480>
1001249c:	303fe91e 	bne	r6,zero,10012444 <__alt_data_end+0xf8012444>
100124a0:	003ff506 	br	10012478 <__alt_data_end+0xf8012478>
100124a4:	1885c83a 	sub	r2,r3,r2
100124a8:	f800283a 	ret

100124ac <__register_exitproc>:
100124ac:	defffa04 	addi	sp,sp,-24
100124b0:	00840074 	movhi	r2,4097
100124b4:	1092a304 	addi	r2,r2,19084
100124b8:	dc000315 	stw	r16,12(sp)
100124bc:	14000017 	ldw	r16,0(r2)
100124c0:	dc400415 	stw	r17,16(sp)
100124c4:	dfc00515 	stw	ra,20(sp)
100124c8:	80805217 	ldw	r2,328(r16)
100124cc:	2023883a 	mov	r17,r4
100124d0:	10003e26 	beq	r2,zero,100125cc <__register_exitproc+0x120>
100124d4:	10c00117 	ldw	r3,4(r2)
100124d8:	020007c4 	movi	r8,31
100124dc:	40c0180e 	bge	r8,r3,10012540 <__register_exitproc+0x94>
100124e0:	00800034 	movhi	r2,0
100124e4:	10800004 	addi	r2,r2,0
100124e8:	1000061e 	bne	r2,zero,10012504 <__register_exitproc+0x58>
100124ec:	00bfffc4 	movi	r2,-1
100124f0:	dfc00517 	ldw	ra,20(sp)
100124f4:	dc400417 	ldw	r17,16(sp)
100124f8:	dc000317 	ldw	r16,12(sp)
100124fc:	dec00604 	addi	sp,sp,24
10012500:	f800283a 	ret
10012504:	01006404 	movi	r4,400
10012508:	d9400015 	stw	r5,0(sp)
1001250c:	d9800115 	stw	r6,4(sp)
10012510:	d9c00215 	stw	r7,8(sp)
10012514:	00000000 	call	10000000 <__reset>
10012518:	d9400017 	ldw	r5,0(sp)
1001251c:	d9800117 	ldw	r6,4(sp)
10012520:	d9c00217 	ldw	r7,8(sp)
10012524:	103ff126 	beq	r2,zero,100124ec <__alt_data_end+0xf80124ec>
10012528:	80c05217 	ldw	r3,328(r16)
1001252c:	10000115 	stw	zero,4(r2)
10012530:	10c00015 	stw	r3,0(r2)
10012534:	80805215 	stw	r2,328(r16)
10012538:	10006215 	stw	zero,392(r2)
1001253c:	10006315 	stw	zero,396(r2)
10012540:	10c00117 	ldw	r3,4(r2)
10012544:	88000d1e 	bne	r17,zero,1001257c <__register_exitproc+0xd0>
10012548:	19000084 	addi	r4,r3,2
1001254c:	2109883a 	add	r4,r4,r4
10012550:	18c00044 	addi	r3,r3,1
10012554:	2109883a 	add	r4,r4,r4
10012558:	1109883a 	add	r4,r2,r4
1001255c:	10c00115 	stw	r3,4(r2)
10012560:	0005883a 	mov	r2,zero
10012564:	21400015 	stw	r5,0(r4)
10012568:	dfc00517 	ldw	ra,20(sp)
1001256c:	dc400417 	ldw	r17,16(sp)
10012570:	dc000317 	ldw	r16,12(sp)
10012574:	dec00604 	addi	sp,sp,24
10012578:	f800283a 	ret
1001257c:	02400044 	movi	r9,1
10012580:	12806217 	ldw	r10,392(r2)
10012584:	48d2983a 	sll	r9,r9,r3
10012588:	19000804 	addi	r4,r3,32
1001258c:	18d1883a 	add	r8,r3,r3
10012590:	2109883a 	add	r4,r4,r4
10012594:	4211883a 	add	r8,r8,r8
10012598:	2109883a 	add	r4,r4,r4
1001259c:	1109883a 	add	r4,r2,r4
100125a0:	1211883a 	add	r8,r2,r8
100125a4:	5254b03a 	or	r10,r10,r9
100125a8:	21c02215 	stw	r7,136(r4)
100125ac:	41802215 	stw	r6,136(r8)
100125b0:	12806215 	stw	r10,392(r2)
100125b4:	01000084 	movi	r4,2
100125b8:	893fe31e 	bne	r17,r4,10012548 <__alt_data_end+0xf8012548>
100125bc:	11006317 	ldw	r4,396(r2)
100125c0:	2252b03a 	or	r9,r4,r9
100125c4:	12406315 	stw	r9,396(r2)
100125c8:	003fdf06 	br	10012548 <__alt_data_end+0xf8012548>
100125cc:	00840074 	movhi	r2,4097
100125d0:	109a7404 	addi	r2,r2,27088
100125d4:	80805215 	stw	r2,328(r16)
100125d8:	003fbe06 	br	100124d4 <__alt_data_end+0xf80124d4>

100125dc <__call_exitprocs>:
100125dc:	00840074 	movhi	r2,4097
100125e0:	1092a304 	addi	r2,r2,19084
100125e4:	10800017 	ldw	r2,0(r2)
100125e8:	defff304 	addi	sp,sp,-52
100125ec:	df000b15 	stw	fp,44(sp)
100125f0:	d8800015 	stw	r2,0(sp)
100125f4:	10805204 	addi	r2,r2,328
100125f8:	dd400815 	stw	r21,32(sp)
100125fc:	dfc00c15 	stw	ra,48(sp)
10012600:	ddc00a15 	stw	r23,40(sp)
10012604:	dd800915 	stw	r22,36(sp)
10012608:	dd000715 	stw	r20,28(sp)
1001260c:	dcc00615 	stw	r19,24(sp)
10012610:	dc800515 	stw	r18,20(sp)
10012614:	dc400415 	stw	r17,16(sp)
10012618:	dc000315 	stw	r16,12(sp)
1001261c:	d9000115 	stw	r4,4(sp)
10012620:	2839883a 	mov	fp,r5
10012624:	d8800215 	stw	r2,8(sp)
10012628:	057fffc4 	movi	r21,-1
1001262c:	d8800017 	ldw	r2,0(sp)
10012630:	ddc00217 	ldw	r23,8(sp)
10012634:	14805217 	ldw	r18,328(r2)
10012638:	90001726 	beq	r18,zero,10012698 <__call_exitprocs+0xbc>
1001263c:	94400117 	ldw	r17,4(r18)
10012640:	8c3fffc4 	addi	r16,r17,-1
10012644:	80001116 	blt	r16,zero,1001268c <__call_exitprocs+0xb0>
10012648:	8c400044 	addi	r17,r17,1
1001264c:	8427883a 	add	r19,r16,r16
10012650:	8c63883a 	add	r17,r17,r17
10012654:	95802204 	addi	r22,r18,136
10012658:	9ce7883a 	add	r19,r19,r19
1001265c:	8c63883a 	add	r17,r17,r17
10012660:	b4e7883a 	add	r19,r22,r19
10012664:	9463883a 	add	r17,r18,r17
10012668:	e0001726 	beq	fp,zero,100126c8 <__call_exitprocs+0xec>
1001266c:	8c87c83a 	sub	r3,r17,r18
10012670:	b0c7883a 	add	r3,r22,r3
10012674:	18c01e17 	ldw	r3,120(r3)
10012678:	1f001326 	beq	r3,fp,100126c8 <__call_exitprocs+0xec>
1001267c:	843fffc4 	addi	r16,r16,-1
10012680:	9cffff04 	addi	r19,r19,-4
10012684:	8c7fff04 	addi	r17,r17,-4
10012688:	857ff71e 	bne	r16,r21,10012668 <__alt_data_end+0xf8012668>
1001268c:	00800034 	movhi	r2,0
10012690:	10800004 	addi	r2,r2,0
10012694:	10002a1e 	bne	r2,zero,10012740 <__call_exitprocs+0x164>
10012698:	dfc00c17 	ldw	ra,48(sp)
1001269c:	df000b17 	ldw	fp,44(sp)
100126a0:	ddc00a17 	ldw	r23,40(sp)
100126a4:	dd800917 	ldw	r22,36(sp)
100126a8:	dd400817 	ldw	r21,32(sp)
100126ac:	dd000717 	ldw	r20,28(sp)
100126b0:	dcc00617 	ldw	r19,24(sp)
100126b4:	dc800517 	ldw	r18,20(sp)
100126b8:	dc400417 	ldw	r17,16(sp)
100126bc:	dc000317 	ldw	r16,12(sp)
100126c0:	dec00d04 	addi	sp,sp,52
100126c4:	f800283a 	ret
100126c8:	91000117 	ldw	r4,4(r18)
100126cc:	88c00017 	ldw	r3,0(r17)
100126d0:	213fffc4 	addi	r4,r4,-1
100126d4:	24001526 	beq	r4,r16,1001272c <__call_exitprocs+0x150>
100126d8:	88000015 	stw	zero,0(r17)
100126dc:	183fe726 	beq	r3,zero,1001267c <__alt_data_end+0xf801267c>
100126e0:	00800044 	movi	r2,1
100126e4:	1408983a 	sll	r4,r2,r16
100126e8:	91406217 	ldw	r5,392(r18)
100126ec:	95000117 	ldw	r20,4(r18)
100126f0:	214a703a 	and	r5,r4,r5
100126f4:	28000b26 	beq	r5,zero,10012724 <__call_exitprocs+0x148>
100126f8:	91406317 	ldw	r5,396(r18)
100126fc:	2148703a 	and	r4,r4,r5
10012700:	20000c1e 	bne	r4,zero,10012734 <__call_exitprocs+0x158>
10012704:	99400017 	ldw	r5,0(r19)
10012708:	d9000117 	ldw	r4,4(sp)
1001270c:	183ee83a 	callr	r3
10012710:	90c00117 	ldw	r3,4(r18)
10012714:	1d3fc51e 	bne	r3,r20,1001262c <__alt_data_end+0xf801262c>
10012718:	b8c00017 	ldw	r3,0(r23)
1001271c:	1cbfd726 	beq	r3,r18,1001267c <__alt_data_end+0xf801267c>
10012720:	003fc206 	br	1001262c <__alt_data_end+0xf801262c>
10012724:	183ee83a 	callr	r3
10012728:	003ff906 	br	10012710 <__alt_data_end+0xf8012710>
1001272c:	94000115 	stw	r16,4(r18)
10012730:	003fea06 	br	100126dc <__alt_data_end+0xf80126dc>
10012734:	99000017 	ldw	r4,0(r19)
10012738:	183ee83a 	callr	r3
1001273c:	003ff406 	br	10012710 <__alt_data_end+0xf8012710>
10012740:	90c00117 	ldw	r3,4(r18)
10012744:	1800071e 	bne	r3,zero,10012764 <__call_exitprocs+0x188>
10012748:	90c00017 	ldw	r3,0(r18)
1001274c:	18000926 	beq	r3,zero,10012774 <__call_exitprocs+0x198>
10012750:	9009883a 	mov	r4,r18
10012754:	b8c00015 	stw	r3,0(r23)
10012758:	00000000 	call	10000000 <__reset>
1001275c:	bc800017 	ldw	r18,0(r23)
10012760:	003fb506 	br	10012638 <__alt_data_end+0xf8012638>
10012764:	90c00017 	ldw	r3,0(r18)
10012768:	902f883a 	mov	r23,r18
1001276c:	1825883a 	mov	r18,r3
10012770:	003fb106 	br	10012638 <__alt_data_end+0xf8012638>
10012774:	0007883a 	mov	r3,zero
10012778:	003ffb06 	br	10012768 <__alt_data_end+0xf8012768>

1001277c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1001277c:	defffc04 	addi	sp,sp,-16
10012780:	df000315 	stw	fp,12(sp)
10012784:	df000304 	addi	fp,sp,12
10012788:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1001278c:	0001883a 	nop
10012790:	e0bfff17 	ldw	r2,-4(fp)
10012794:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
10012798:	e0bffd17 	ldw	r2,-12(fp)
1001279c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100127a0:	e0bffe17 	ldw	r2,-8(fp)
100127a4:	10000226 	beq	r2,zero,100127b0 <_exit+0x34>
    ALT_SIM_FAIL();
100127a8:	002af070 	cmpltui	zero,zero,43969
100127ac:	00000106 	br	100127b4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
100127b0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100127b4:	003fff06 	br	100127b4 <__alt_data_end+0xf80127b4>
