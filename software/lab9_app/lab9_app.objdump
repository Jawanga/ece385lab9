
lab9_app.elf:     file format elf32-littlenios2
lab9_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00013108 memsz 0x00013108 flags r-x
    LOAD off    0x00014128 vaddr 0x10013128 paddr 0x10014dd4 align 2**12
         filesz 0x00001cac memsz 0x00001cac flags rw-
    LOAD off    0x00016a80 vaddr 0x10016a80 paddr 0x10016a80 align 2**12
         filesz 0x00000000 memsz 0x000003ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012890  100001b8  100001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006e0  10012a48  10012a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cac  10013128  10014dd4  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003ec  10016a80  10016a80  00016a80  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00015dd4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001158  00000000  00000000  00015df8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000317a1  00000000  00000000  00016f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c62f  00000000  00000000  000486f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000e27e  00000000  00000000  00054d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001fec  00000000  00000000  00062fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000387b  00000000  00000000  00064f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00018754  00000000  00000000  00068807  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00080f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00080f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000855b9  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  000855bc  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000855c8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000855c9  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000855ca  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000855ce  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000855d2  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000855d6  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000855e1  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000855ec  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000008  00000000  00000000  000855f7  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001a  00000000  00000000  000855ff  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000623d7  00000000  00000000  00085619  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001b8 l    d  .text	00000000 .text
10012a48 l    d  .rodata	00000000 .rodata
10013128 l    d  .rwdata	00000000 .rwdata
10016a80 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab9_app_bsp//obj/HAL/src/crt0.o
100001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 AES.c
00000000 l    df *ABS*	00000000 keyexpansion.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000145c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100017d0 l     F .text	00000034 __sprint_r
10012b46 l     O .rodata	00000010 blanks.3546
10012b56 l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 vfscanf.c
10012b6e l     O .rodata	00000022 basefix.3458
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
10012c91 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
10004fa0 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10006a10 l     F .text	00000008 __fp_lock
10006a18 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10013350 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
10012e38 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012f80 l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
1000a188 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
10013b64 l     O .rwdata	00000014 fpi.2046
10012f9c l     O .rodata	00000028 tinytens
10013b78 l     O .rwdata	00000014 fpinan.2082
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
1000d1b8 l     F .text	00000110 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
1000eda8 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
1001039c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100104b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100104e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
100105e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100106d8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100107c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100109a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014dc4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10010c14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010d54 l     F .text	00000038 alt_dev_reg
10013d34 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1001102c l     F .text	00000204 altera_avalon_jtag_uart_irq
10011230 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100119c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011e50 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011fa8 l     F .text	00000050 alt_get_errno
10011ff8 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
10001624 g     F .text	0000001c putchar
1000986c g     F .text	00000074 _mprec_log10
10000a68 g     F .text	000000bc charToHex
1000995c g     F .text	00000084 __any_on
1000dd5c g     F .text	00000064 _isatty_r
10012e68 g     O .rodata	00000028 __mprec_tinytens
100108e8 g     F .text	00000078 alt_main
1001022c g     F .text	00000044 __ashldi3
10001640 g     F .text	00000084 _puts_r
10016bdc g     O .bss	00000100 alt_irq
1000ddc0 g     F .text	0000006c _lseek_r
10014dd4 g       *ABS*	00000000 __flash_rwdata_start
1000f648 g     F .text	0000005c __eqdf2
10016e6c g       *ABS*	00000000 __alt_heap_start
100015e0 g     F .text	0000003c printf
10000d14 g     F .text	00000088 RotWord
10000b8c g     F .text	00000188 SubWord
1000a6c4 g     F .text	0000005c __sseek
10006ab4 g     F .text	0000010c __sinit
1000cd0c g     F .text	0000013c __swbuf_r
10007a00 g     F .text	0000009c _setlocale_r
10006a2c g     F .text	00000078 __sfmoreglue
1000ccf0 g     F .text	0000001c ungetc
10000b24 g     F .text	00000068 charsToHex
10010980 g     F .text	00000020 __malloc_unlock
1000a7cc g     F .text	00001548 _strtod_r
10008728 g     F .text	0000018c memmove
10006aa4 g     F .text	00000010 _cleanup
10008990 g     F .text	000000a8 _Balloc
1000f700 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000d150 g     F .text	00000068 _fstat_r
10016a98 g     O .bss	00000004 errno
10004d98 g     F .text	00000024 __svfscanf
1000fdc4 g     F .text	0000002c __make_fp
10016aa0 g     O .bss	00000004 alt_argv
10000660 g     F .text	00000130 ShiftRows
1001cd94 g       *ABS*	00000000 _gp
10013250 g     O .rwdata	00000100 sbox
10013bb4 g     O .rwdata	00000180 alt_fd_list
1000161c g     F .text	00000008 _putchar_r
100123fc g     F .text	00000090 alt_find_dev
100085e8 g     F .text	00000140 memcpy
1000dad0 g     F .text	0000028c __hexnan
10006a20 g     F .text	0000000c _cleanup_r
1000f880 g     F .text	000000d4 __floatsidf
10011f30 g     F .text	00000078 alt_io_redirect
1000f7c8 g     F .text	0000005c __ltdf2
10012a48 g       *ABS*	00000000 __DTOR_END__
100016c4 g     F .text	00000014 puts
1000846c g     F .text	00000040 mbrtowc
10004d4c g     F .text	0000004c _vfscanf_r
100097c8 g     F .text	000000a4 __ratio
10011430 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
100015b4 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000157c g     F .text	00000008 __udivsi3
10010634 g     F .text	000000a4 isatty
100079c8 g     F .text	00000038 iswspace
10012eb8 g     O .rodata	000000c8 __mprec_tens
10007a9c g     F .text	0000000c __locale_charset
1000dfa8 g     F .text	00000084 __fixunsdfsi
10016a94 g     O .bss	00000004 __malloc_top_pad
1000c6ac g     F .text	00000024 strtoul
10014da0 g     O .rwdata	00000004 __mb_cur_max
10007aa8 g     F .text	0000000c _localeconv_r
1000c6d0 g     F .text	00000394 _strtoull_r
10008dc0 g     F .text	0000003c __i2b
10007384 g     F .text	000004e4 __sfvwrite_r
1000a3f4 g     F .text	00000064 _sbrk_r
1000de2c g     F .text	0000006c _read_r
10013750 g     O .rwdata	0000000c __lc_ctype
10014dbc g     O .rwdata	00000004 alt_max_fd
10010014 g     F .text	00000104 __unpack_d
1000d000 g     F .text	0000013c _fclose_r
100069e0 g     F .text	00000030 fflush
10016a90 g     O .bss	00000004 __malloc_max_sbrked_mem
10000d9c g     F .text	00000200 KeyExpansion
1000f0fc g     F .text	00000054 __adddf3
1000eca4 g     F .text	00000054 __nesf2
1000953c g     F .text	00000148 __b2d
1000e67c g     F .text	00000628 __umoddi3
10010814 g     F .text	000000d4 lseek
10014d98 g     O .rwdata	00000004 _global_impure_ptr
10009b8c g     F .text	000005fc _realloc_r
10016e6c g       *ABS*	00000000 __bss_end
10011d60 g     F .text	000000f0 alt_iic_isr_register
100122d8 g     F .text	00000104 alt_tick
10016adc g     O .bss	00000100 __hexdig
1000e02c g     F .text	00000650 __udivdi3
10012e90 g     O .rodata	00000028 __mprec_bigtens
10008ba4 g     F .text	00000104 __s2b
1000fa78 g     F .text	0000011c __floatunsidf
100092dc g     F .text	00000058 __mcmp
10014d94 g     O .rwdata	00000004 __ctype_ptr
10006ccc g     F .text	00000018 __fp_lock_all
10011d14 g     F .text	0000004c alt_ic_irq_enabled
10012240 g     F .text	00000098 alt_alarm_stop
1000c0b4 g     F .text	00000024 strtol
10016aa8 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000cc alt_irq_handler
10013b8c g     O .rwdata	00000028 alt_dev_null
1000fc40 g     F .text	000000c8 __unpack_f
100119a8 g     F .text	0000001c alt_dcache_flush_all
10008ca8 g     F .text	00000068 __hi0bits
1000f954 g     F .text	000000c4 __fixdfsi
1000bd14 g     F .text	0000001c strtod
10014dd4 g       *ABS*	00000000 __ram_rwdata_end
10014db4 g     O .rwdata	00000008 alt_dev_list
10010c64 g     F .text	000000f0 write
100099e0 g     F .text	000000bc _putc_r
1000ecf8 g     F .text	0000005c __gtsf2
10013128 g       *ABS*	00000000 __ram_rodata_end
10010534 g     F .text	000000b0 fstat
100101e8 g     F .text	00000044 __lshrdi3
1000f824 g     F .text	0000005c __ledf2
10009054 g     F .text	0000012c __pow5mult
10016a88 g     O .bss	00000004 __nlocale_changed
10001584 g     F .text	00000008 __umodsi3
10001718 g     F .text	0000002c _scanf_r
10016e6c g       *ABS*	00000000 end
10010270 g     F .text	0000012c __pack_f
10010f6c g     F .text	000000c0 altera_avalon_jtag_uart_init
10012a48 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000fb94 g     F .text	000000ac __clzsi2
10011648 g     F .text	00000220 altera_avalon_jtag_uart_write
10006cbc g     F .text	00000004 __sfp_lock_acquire
100084f0 g     F .text	000000f8 memchr
10001804 g     F .text	00001e7c ___vfprintf_internal_r
1000a524 g     F .text	00000058 _sprintf_r
100070b4 g     F .text	000002d0 _free_r
10000790 g     F .text	00000228 MixColumns
1001286c g     F .text	000001a0 __call_exitprocs
10016a84 g     O .bss	00000004 __mlocale_changed
10014da4 g     O .rwdata	00000004 __malloc_sbrk_base
100001b8 g     F .text	0000003c _start
10016aac g     O .bss	00000004 _alt_tick_rate
1000c0d8 g     F .text	00000330 _strtoll_r
10009180 g     F .text	0000015c __lshift
10016ab0 g     O .bss	00000004 _alt_nticks
100109f0 g     F .text	000000f4 read
10010dc0 g     F .text	00000048 alt_sys_init
1001273c g     F .text	00000130 __register_exitproc
10008dfc g     F .text	00000258 __multiply
100112d4 g     F .text	00000068 altera_avalon_jtag_uart_close
1000158c g     F .text	00000028 __mulsi3
10013128 g       *ABS*	00000000 __ram_rwdata_start
10012a48 g       *ABS*	00000000 __ram_rodata_start
10016ab4 g     O .bss	00000028 __malloc_current_mallinfo
10009684 g     F .text	00000144 __d2b
10010e08 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000c408 g     F .text	000002a4 _strtoul_r
100125a0 g     F .text	000000d4 alt_get_fd
10010118 g     F .text	000000d0 __fpcmp_parts_d
1000cf9c g     F .text	00000064 _close_r
100126c0 g     F .text	0000007c memcmp
10010ec8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100001f4 g     F .text	00000260 AES
10016e6c g       *ABS*	00000000 __alt_stack_base
10010f18 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004e2c g     F .text	00000174 __swsetup_r
1000f494 g     F .text	000001b4 __divdf3
10006bc0 g     F .text	000000fc __sfp
100098e0 g     F .text	0000007c __copybits
1001375c g     O .rwdata	00000408 __malloc_av_
10006cc8 g     F .text	00000004 __sinit_lock_release
1000f1b0 g     F .text	000002e4 __muldf3
1000a5e8 g     F .text	00000054 __sread
10006f38 g     F .text	00000040 fread
1001248c g     F .text	00000114 alt_find_file
10011a14 g     F .text	000000a0 alt_dev_llist_insert
10010960 g     F .text	00000020 __malloc_lock
10010b64 g     F .text	000000b0 sbrk
100067f8 g     F .text	000001e8 _fflush_r
100005bc g     F .text	000000a4 SubBytes
1000ced0 g     F .text	000000cc _calloc_r
100009b8 g     F .text	000000b0 xtime
10016a80 g       *ABS*	00000000 __bss_start
100088b4 g     F .text	000000dc memset
10000f9c g     F .text	000004c0 main
10016aa4 g     O .bss	00000004 alt_envp
10016a8c g     O .bss	00000004 __malloc_max_total_mem
10010e68 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000ce48 g     F .text	0000001c __swbuf
1000ed54 g     F .text	00000054 __ltsf2
10006cfc g     F .text	0000023c _fread_r
1000a720 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000d13c g     F .text	00000014 fclose
1000be50 g     F .text	00000264 _strtol_r
1000fa18 g     F .text	00000060 __truncdfsf2
10016cdc g     O .bss	00000190 _atexit0
100051dc g     F .text	0000161c _dtoa_r
10007c84 g     F .text	00000784 _malloc_r
10014dc0 g     O .rwdata	00000004 alt_errno
1000ca64 g     F .text	000000f0 __submore
10007868 g     F .text	000000a8 _fwalk
100084ac g     F .text	00000044 _mbtowc_r
10009a9c g     F .text	000000f0 putc
100014d0 g     F .text	00000050 __divsi3
10012fe0 g     O .rodata	00000014 __thenan_df
10006f78 g     F .text	0000013c _malloc_trim_r
10012a48 g       *ABS*	00000000 __CTOR_END__
1000a728 g     F .text	000000a4 strcmp
10012a48 g       *ABS*	00000000 __flash_rodata_start
10012a48 g       *ABS*	00000000 __DTOR_LIST__
1000f6a4 g     F .text	0000005c __nedf2
10010d8c g     F .text	00000034 alt_irq_init
10010ae4 g     F .text	00000080 alt_release_fd
1000a57c g     F .text	0000006c sprintf
10012ff4 g     O .rodata	00000100 __clz_tab
10016a80 g     O .bss	00000004 _PathLocale
1000bd30 g     F .text	00000120 strtof
10012674 g     F .text	00000014 atexit
1000ce64 g     F .text	0000006c _write_r
10007ab4 g     F .text	0000001c setlocale
100016d8 g     F .text	00000040 scanf
1000a51c g     F .text	00000008 nanf
10014d9c g     O .rwdata	00000004 _impure_ptr
10016a9c g     O .bss	00000004 alt_argc
10008408 g     F .text	00000064 _mbrtowc_r
10011b10 g     F .text	0000005c _do_dtors
1000a1a4 g     F .text	000001ec __srefill_r
10000020 g       .exceptions	00000000 alt_irq_entry
100094dc g     F .text	00000060 __ulp
1000a390 g     F .text	00000038 __isinfd
10006ce4 g     F .text	00000018 __fp_unlock_all
10014dac g     O .rwdata	00000008 alt_fs_list
10013228 g     O .rwdata	00000028 Rcon
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007ad0 g     F .text	0000000c localeconv
10011b88 g     F .text	00000050 alt_ic_isr_register
1000d2c8 g     F .text	00000090 __hexdig_init
10014dd4 g       *ABS*	00000000 _edata
10016e6c g       *ABS*	00000000 _end
100001b8 g       *ABS*	00000000 __ram_exceptions_end
10004dbc g     F .text	00000070 vfscanf
1001133c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
10011c74 g     F .text	000000a0 alt_ic_irq_disable
1000a63c g     F .text	00000088 __swrite
10014da8 g     O .rwdata	00000004 __malloc_trim_threshold
100123dc g     F .text	00000020 altera_nios2_qsys_irq_init
10012688 g     F .text	00000038 exit
10007910 g     F .text	000000b8 _fwalk_reent
10009334 g     F .text	000001a8 __mdiff
10001520 g     F .text	0000005c __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006cc0 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000a458 g     F .text	000000c4 __sccl
10012b90 g     O .rodata	00000101 _ctype_
1000fd08 g     F .text	000000bc __fpcmp_parts_f
10012a0c g     F .text	0000003c _exit
1000a3c8 g     F .text	0000002c __isnand
10011868 g     F .text	00000140 alt_alarm_start
1000de98 g     F .text	00000110 __muldi3
10007adc g     F .text	000001a8 __smakebuf_r
10001744 g     F .text	0000008c strlen
100120e8 g     F .text	00000158 open
1000f764 g     F .text	00000064 __gedf2
10013128 g     O .rwdata	00000100 fbox
1000d358 g     F .text	00000778 __gethex
10011b6c g     F .text	0000001c alt_icache_flush_all
10014dc8 g     O .rwdata	00000004 alt_priority_mask
10011bd8 g     F .text	0000009c alt_ic_irq_enable
10003680 g     F .text	00000024 __vfprintf_internal
1000f150 g     F .text	00000060 __subdf3
10008d10 g     F .text	000000b0 __lo0bits
100036a4 g     F .text	000016a8 __svfscanf_r
10014dcc g     O .rwdata	00000008 alt_alarm_list
1000cb54 g     F .text	0000019c _ungetc_r
10000454 g     F .text	00000168 AddRoundKey
10011ab4 g     F .text	0000005c _do_ctors
100103ec g     F .text	000000cc close
10010744 g     F .text	00000080 alt_load
1000fdf0 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
10006cc4 g     F .text	00000004 __sinit_lock_acquire
10008a60 g     F .text	00000144 __multadd
10008a38 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406e14 	ori	at,at,440
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18daf704 	addi	r3,r3,27612
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	211af704 	addi	r4,r4,27612
1000014c:	e0bffd17 	ldw	r2,-12(fp)
10000150:	100490fa 	slli	r2,r2,3
10000154:	2085883a 	add	r2,r4,r2
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
100001a4:	e037883a 	mov	sp,fp
100001a8:	dfc00117 	ldw	ra,4(sp)
100001ac:	df000017 	ldw	fp,0(sp)
100001b0:	dec00204 	addi	sp,sp,8
100001b4:	f800283a 	ret

Disassembly of section .text:

100001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001b8:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c0:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c4:	d6b36514 	ori	gp,gp,52628
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001c8:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001cc:	109aa014 	ori	r2,r2,27264

    movhi r3, %hi(__bss_end)
100001d0:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d4:	18db9b14 	ori	r3,r3,28268

    beq r2, r3, 1f
100001d8:	10c00326 	beq	r2,r3,100001e8 <_start+0x30>

0:
    stw zero, (r2)
100001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e4:	10fffd36 	bltu	r2,r3,100001dc <__alt_data_end+0xf80001dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001e8:	00107440 	call	10010744 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001ec:	00108e80 	call	100108e8 <alt_main>

100001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f0:	003fff06 	br	100001f0 <__alt_data_end+0xf80001f0>

100001f4 <AES>:

unsigned char fbox[256] =   {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

void AES(unsigned char in[16], unsigned char out[16], unsigned long w[44])
{
100001f4:	defff004 	addi	sp,sp,-64
100001f8:	dfc00f15 	stw	ra,60(sp)
100001fc:	df000e15 	stw	fp,56(sp)
10000200:	df000e04 	addi	fp,sp,56
10000204:	e13ffd15 	stw	r4,-12(fp)
10000208:	e17ffe15 	stw	r5,-8(fp)
1000020c:	e1bfff15 	stw	r6,-4(fp)
	unsigned char state[16];
	unsigned long temp[4];
	int i, j, k;
	for (i = 0; i < 16; i++)
10000210:	e03ff215 	stw	zero,-56(fp)
10000214:	00000b06 	br	10000244 <AES+0x50>
	{
		state[i] = in[i];
10000218:	e0bff217 	ldw	r2,-56(fp)
1000021c:	e0fffd17 	ldw	r3,-12(fp)
10000220:	1885883a 	add	r2,r3,r2
10000224:	10c00003 	ldbu	r3,0(r2)
10000228:	e13ff504 	addi	r4,fp,-44
1000022c:	e0bff217 	ldw	r2,-56(fp)
10000230:	2085883a 	add	r2,r4,r2
10000234:	10c00005 	stb	r3,0(r2)
void AES(unsigned char in[16], unsigned char out[16], unsigned long w[44])
{
	unsigned char state[16];
	unsigned long temp[4];
	int i, j, k;
	for (i = 0; i < 16; i++)
10000238:	e0bff217 	ldw	r2,-56(fp)
1000023c:	10800044 	addi	r2,r2,1
10000240:	e0bff215 	stw	r2,-56(fp)
10000244:	e0bff217 	ldw	r2,-56(fp)
10000248:	10800410 	cmplti	r2,r2,16
1000024c:	103ff21e 	bne	r2,zero,10000218 <__alt_data_end+0xf8000218>
	{
		state[i] = in[i];
		//printf("%x", state[i]);
	}
	//printf("\n");
	for (i = 0; i < 4; i++)
10000250:	e03ff215 	stw	zero,-56(fp)
10000254:	00001006 	br	10000298 <AES+0xa4>
	{
	 	temp[i] = w[i];
10000258:	e0bff217 	ldw	r2,-56(fp)
1000025c:	1085883a 	add	r2,r2,r2
10000260:	1085883a 	add	r2,r2,r2
10000264:	e0ffff17 	ldw	r3,-4(fp)
10000268:	1885883a 	add	r2,r3,r2
1000026c:	10c00017 	ldw	r3,0(r2)
10000270:	e0bff217 	ldw	r2,-56(fp)
10000274:	1085883a 	add	r2,r2,r2
10000278:	1085883a 	add	r2,r2,r2
1000027c:	e13ff204 	addi	r4,fp,-56
10000280:	2085883a 	add	r2,r4,r2
10000284:	10800704 	addi	r2,r2,28
10000288:	10c00015 	stw	r3,0(r2)
	{
		state[i] = in[i];
		//printf("%x", state[i]);
	}
	//printf("\n");
	for (i = 0; i < 4; i++)
1000028c:	e0bff217 	ldw	r2,-56(fp)
10000290:	10800044 	addi	r2,r2,1
10000294:	e0bff215 	stw	r2,-56(fp)
10000298:	e0bff217 	ldw	r2,-56(fp)
1000029c:	10800110 	cmplti	r2,r2,4
100002a0:	103fed1e 	bne	r2,zero,10000258 <__alt_data_end+0xf8000258>
	{
	 	temp[i] = w[i];
	}
	AddRoundKey(state, temp);
100002a4:	e0fff504 	addi	r3,fp,-44
100002a8:	e0bff904 	addi	r2,fp,-28
100002ac:	1809883a 	mov	r4,r3
100002b0:	100b883a 	mov	r5,r2
100002b4:	00004540 	call	10000454 <AddRoundKey>
	{
		printf("%x", state[i]);
	}
	printf("\n");
	*/
	for(j = 1; j < 10; j++)
100002b8:	00800044 	movi	r2,1
100002bc:	e0bff315 	stw	r2,-52(fp)
100002c0:	00002b06 	br	10000370 <AES+0x17c>
	{
		SubBytes(state);
100002c4:	e0bff504 	addi	r2,fp,-44
100002c8:	1009883a 	mov	r4,r2
100002cc:	00005bc0 	call	100005bc <SubBytes>
				printf("%x", state[i]);
			}
			printf("\n");
		}
		*/
		ShiftRows(state);
100002d0:	e0bff504 	addi	r2,fp,-44
100002d4:	1009883a 	mov	r4,r2
100002d8:	00006600 	call	10000660 <ShiftRows>
				printf("%x", state[i]);
			}
			printf("\n");
		}
		*/
		MixColumns(state);
100002dc:	e0bff504 	addi	r2,fp,-44
100002e0:	1009883a 	mov	r4,r2
100002e4:	00007900 	call	10000790 <MixColumns>
				printf("%x", state[i]);
			}
			printf("\n");
		}
		*/
		for(k = 0; k < 4; k++)
100002e8:	e03ff415 	stw	zero,-48(fp)
100002ec:	00001506 	br	10000344 <AES+0x150>
		{
			temp[k] = w[j*4 + k];
100002f0:	e0bff317 	ldw	r2,-52(fp)
100002f4:	1085883a 	add	r2,r2,r2
100002f8:	1085883a 	add	r2,r2,r2
100002fc:	1007883a 	mov	r3,r2
10000300:	e0bff417 	ldw	r2,-48(fp)
10000304:	1885883a 	add	r2,r3,r2
10000308:	1085883a 	add	r2,r2,r2
1000030c:	1085883a 	add	r2,r2,r2
10000310:	e0ffff17 	ldw	r3,-4(fp)
10000314:	1885883a 	add	r2,r3,r2
10000318:	10c00017 	ldw	r3,0(r2)
1000031c:	e0bff417 	ldw	r2,-48(fp)
10000320:	1085883a 	add	r2,r2,r2
10000324:	1085883a 	add	r2,r2,r2
10000328:	e13ff204 	addi	r4,fp,-56
1000032c:	2085883a 	add	r2,r4,r2
10000330:	10800704 	addi	r2,r2,28
10000334:	10c00015 	stw	r3,0(r2)
				printf("%x", state[i]);
			}
			printf("\n");
		}
		*/
		for(k = 0; k < 4; k++)
10000338:	e0bff417 	ldw	r2,-48(fp)
1000033c:	10800044 	addi	r2,r2,1
10000340:	e0bff415 	stw	r2,-48(fp)
10000344:	e0bff417 	ldw	r2,-48(fp)
10000348:	10800110 	cmplti	r2,r2,4
1000034c:	103fe81e 	bne	r2,zero,100002f0 <__alt_data_end+0xf80002f0>
		{
			temp[k] = w[j*4 + k];
		}
		AddRoundKey(state, temp);
10000350:	e0fff504 	addi	r3,fp,-44
10000354:	e0bff904 	addi	r2,fp,-28
10000358:	1809883a 	mov	r4,r3
1000035c:	100b883a 	mov	r5,r2
10000360:	00004540 	call	10000454 <AddRoundKey>
	{
		printf("%x", state[i]);
	}
	printf("\n");
	*/
	for(j = 1; j < 10; j++)
10000364:	e0bff317 	ldw	r2,-52(fp)
10000368:	10800044 	addi	r2,r2,1
1000036c:	e0bff315 	stw	r2,-52(fp)
10000370:	e0bff317 	ldw	r2,-52(fp)
10000374:	10800290 	cmplti	r2,r2,10
10000378:	103fd21e 	bne	r2,zero,100002c4 <__alt_data_end+0xf80002c4>
		{
			temp[k] = w[j*4 + k];
		}
		AddRoundKey(state, temp);
	}
	SubBytes(state);
1000037c:	e0bff504 	addi	r2,fp,-44
10000380:	1009883a 	mov	r4,r2
10000384:	00005bc0 	call	100005bc <SubBytes>
	ShiftRows(state);
10000388:	e0bff504 	addi	r2,fp,-44
1000038c:	1009883a 	mov	r4,r2
10000390:	00006600 	call	10000660 <ShiftRows>
	for(k = 0; k < 4; k++)
10000394:	e03ff415 	stw	zero,-48(fp)
10000398:	00001106 	br	100003e0 <AES+0x1ec>
	{
		temp[k] = w[40 + k];
1000039c:	e0bff417 	ldw	r2,-48(fp)
100003a0:	10800a04 	addi	r2,r2,40
100003a4:	1085883a 	add	r2,r2,r2
100003a8:	1085883a 	add	r2,r2,r2
100003ac:	e0ffff17 	ldw	r3,-4(fp)
100003b0:	1885883a 	add	r2,r3,r2
100003b4:	10c00017 	ldw	r3,0(r2)
100003b8:	e0bff417 	ldw	r2,-48(fp)
100003bc:	1085883a 	add	r2,r2,r2
100003c0:	1085883a 	add	r2,r2,r2
100003c4:	e13ff204 	addi	r4,fp,-56
100003c8:	2085883a 	add	r2,r4,r2
100003cc:	10800704 	addi	r2,r2,28
100003d0:	10c00015 	stw	r3,0(r2)
		}
		AddRoundKey(state, temp);
	}
	SubBytes(state);
	ShiftRows(state);
	for(k = 0; k < 4; k++)
100003d4:	e0bff417 	ldw	r2,-48(fp)
100003d8:	10800044 	addi	r2,r2,1
100003dc:	e0bff415 	stw	r2,-48(fp)
100003e0:	e0bff417 	ldw	r2,-48(fp)
100003e4:	10800110 	cmplti	r2,r2,4
100003e8:	103fec1e 	bne	r2,zero,1000039c <__alt_data_end+0xf800039c>
	{
		temp[k] = w[40 + k];
	}
	AddRoundKey(state, temp);
100003ec:	e0fff504 	addi	r3,fp,-44
100003f0:	e0bff904 	addi	r2,fp,-28
100003f4:	1809883a 	mov	r4,r3
100003f8:	100b883a 	mov	r5,r2
100003fc:	00004540 	call	10000454 <AddRoundKey>
	for (i = 0; i < 16; i++)
10000400:	e03ff215 	stw	zero,-56(fp)
10000404:	00000b06 	br	10000434 <AES+0x240>
	{
		out[i] = state[i];
10000408:	e0bff217 	ldw	r2,-56(fp)
1000040c:	e0fffe17 	ldw	r3,-8(fp)
10000410:	1885883a 	add	r2,r3,r2
10000414:	e13ff504 	addi	r4,fp,-44
10000418:	e0fff217 	ldw	r3,-56(fp)
1000041c:	20c7883a 	add	r3,r4,r3
10000420:	18c00003 	ldbu	r3,0(r3)
10000424:	10c00005 	stb	r3,0(r2)
	for(k = 0; k < 4; k++)
	{
		temp[k] = w[40 + k];
	}
	AddRoundKey(state, temp);
	for (i = 0; i < 16; i++)
10000428:	e0bff217 	ldw	r2,-56(fp)
1000042c:	10800044 	addi	r2,r2,1
10000430:	e0bff215 	stw	r2,-56(fp)
10000434:	e0bff217 	ldw	r2,-56(fp)
10000438:	10800410 	cmplti	r2,r2,16
1000043c:	103ff21e 	bne	r2,zero,10000408 <__alt_data_end+0xf8000408>
	{
		out[i] = state[i];
	}
}
10000440:	e037883a 	mov	sp,fp
10000444:	dfc00117 	ldw	ra,4(sp)
10000448:	df000017 	ldw	fp,0(sp)
1000044c:	dec00204 	addi	sp,sp,8
10000450:	f800283a 	ret

10000454 <AddRoundKey>:

void AddRoundKey(unsigned char state[16], unsigned long key[4])
{
10000454:	defffc04 	addi	sp,sp,-16
10000458:	df000315 	stw	fp,12(sp)
1000045c:	df000304 	addi	fp,sp,12
10000460:	e13ffe15 	stw	r4,-8(fp)
10000464:	e17fff15 	stw	r5,-4(fp)
	//long : 4 bytes, char : 1 byte
	int i, j;
	unsigned char temp;

	for (i = 0; i < 4; i++)
10000468:	e03ffd15 	stw	zero,-12(fp)
1000046c:	00004c06 	br	100005a0 <AddRoundKey+0x14c>
	{
		state[i] ^= key[0] >> (24 - i * 8);
10000470:	e0bffd17 	ldw	r2,-12(fp)
10000474:	e0fffe17 	ldw	r3,-8(fp)
10000478:	1885883a 	add	r2,r3,r2
1000047c:	e0fffd17 	ldw	r3,-12(fp)
10000480:	e13ffe17 	ldw	r4,-8(fp)
10000484:	20c7883a 	add	r3,r4,r3
10000488:	19000003 	ldbu	r4,0(r3)
1000048c:	e0ffff17 	ldw	r3,-4(fp)
10000490:	19400017 	ldw	r5,0(r3)
10000494:	018000c4 	movi	r6,3
10000498:	e0fffd17 	ldw	r3,-12(fp)
1000049c:	30c7c83a 	sub	r3,r6,r3
100004a0:	180690fa 	slli	r3,r3,3
100004a4:	28c6d83a 	srl	r3,r5,r3
100004a8:	20c6f03a 	xor	r3,r4,r3
100004ac:	10c00005 	stb	r3,0(r2)
		state[4+i] ^= key[1] >> (24 - i * 8);
100004b0:	e0bffd17 	ldw	r2,-12(fp)
100004b4:	10800104 	addi	r2,r2,4
100004b8:	e0fffe17 	ldw	r3,-8(fp)
100004bc:	1885883a 	add	r2,r3,r2
100004c0:	e0fffd17 	ldw	r3,-12(fp)
100004c4:	18c00104 	addi	r3,r3,4
100004c8:	e13ffe17 	ldw	r4,-8(fp)
100004cc:	20c7883a 	add	r3,r4,r3
100004d0:	19000003 	ldbu	r4,0(r3)
100004d4:	e0ffff17 	ldw	r3,-4(fp)
100004d8:	18c00104 	addi	r3,r3,4
100004dc:	19400017 	ldw	r5,0(r3)
100004e0:	018000c4 	movi	r6,3
100004e4:	e0fffd17 	ldw	r3,-12(fp)
100004e8:	30c7c83a 	sub	r3,r6,r3
100004ec:	180690fa 	slli	r3,r3,3
100004f0:	28c6d83a 	srl	r3,r5,r3
100004f4:	20c6f03a 	xor	r3,r4,r3
100004f8:	10c00005 	stb	r3,0(r2)
		state[8+i] ^= key[2] >> (24 - i * 8);
100004fc:	e0bffd17 	ldw	r2,-12(fp)
10000500:	10800204 	addi	r2,r2,8
10000504:	e0fffe17 	ldw	r3,-8(fp)
10000508:	1885883a 	add	r2,r3,r2
1000050c:	e0fffd17 	ldw	r3,-12(fp)
10000510:	18c00204 	addi	r3,r3,8
10000514:	e13ffe17 	ldw	r4,-8(fp)
10000518:	20c7883a 	add	r3,r4,r3
1000051c:	19000003 	ldbu	r4,0(r3)
10000520:	e0ffff17 	ldw	r3,-4(fp)
10000524:	18c00204 	addi	r3,r3,8
10000528:	19400017 	ldw	r5,0(r3)
1000052c:	018000c4 	movi	r6,3
10000530:	e0fffd17 	ldw	r3,-12(fp)
10000534:	30c7c83a 	sub	r3,r6,r3
10000538:	180690fa 	slli	r3,r3,3
1000053c:	28c6d83a 	srl	r3,r5,r3
10000540:	20c6f03a 	xor	r3,r4,r3
10000544:	10c00005 	stb	r3,0(r2)
		state[12+i] ^= key[3] >> (24 - i * 8);
10000548:	e0bffd17 	ldw	r2,-12(fp)
1000054c:	10800304 	addi	r2,r2,12
10000550:	e0fffe17 	ldw	r3,-8(fp)
10000554:	1885883a 	add	r2,r3,r2
10000558:	e0fffd17 	ldw	r3,-12(fp)
1000055c:	18c00304 	addi	r3,r3,12
10000560:	e13ffe17 	ldw	r4,-8(fp)
10000564:	20c7883a 	add	r3,r4,r3
10000568:	19000003 	ldbu	r4,0(r3)
1000056c:	e0ffff17 	ldw	r3,-4(fp)
10000570:	18c00304 	addi	r3,r3,12
10000574:	19400017 	ldw	r5,0(r3)
10000578:	018000c4 	movi	r6,3
1000057c:	e0fffd17 	ldw	r3,-12(fp)
10000580:	30c7c83a 	sub	r3,r6,r3
10000584:	180690fa 	slli	r3,r3,3
10000588:	28c6d83a 	srl	r3,r5,r3
1000058c:	20c6f03a 	xor	r3,r4,r3
10000590:	10c00005 	stb	r3,0(r2)
{
	//long : 4 bytes, char : 1 byte
	int i, j;
	unsigned char temp;

	for (i = 0; i < 4; i++)
10000594:	e0bffd17 	ldw	r2,-12(fp)
10000598:	10800044 	addi	r2,r2,1
1000059c:	e0bffd15 	stw	r2,-12(fp)
100005a0:	e0bffd17 	ldw	r2,-12(fp)
100005a4:	10800110 	cmplti	r2,r2,4
100005a8:	103fb11e 	bne	r2,zero,10000470 <__alt_data_end+0xf8000470>
		{
			temp = key[i] >> (24 - j*8);
			state[j*4+i] = state [j*4+i] ^ temp;
		}
	} */
}
100005ac:	e037883a 	mov	sp,fp
100005b0:	df000017 	ldw	fp,0(sp)
100005b4:	dec00104 	addi	sp,sp,4
100005b8:	f800283a 	ret

100005bc <SubBytes>:

void SubBytes(unsigned char state[16])
{
100005bc:	defffc04 	addi	sp,sp,-16
100005c0:	df000315 	stw	fp,12(sp)
100005c4:	df000304 	addi	fp,sp,12
100005c8:	e13fff15 	stw	r4,-4(fp)
	//length 16 array of byte chars
	//hex values of byte -> row & column
	//unsigned char temp[16] = state;
	unsigned char x, y;
	int i;
	for(i = 0; i < 16; i++)
100005cc:	e03ffd15 	stw	zero,-12(fp)
100005d0:	00001c06 	br	10000644 <SubBytes+0x88>
	{
		y = (state[i]>> 4);
100005d4:	e0bffd17 	ldw	r2,-12(fp)
100005d8:	e0ffff17 	ldw	r3,-4(fp)
100005dc:	1885883a 	add	r2,r3,r2
100005e0:	10800003 	ldbu	r2,0(r2)
100005e4:	10803fcc 	andi	r2,r2,255
100005e8:	1004d13a 	srli	r2,r2,4
100005ec:	e0bffe05 	stb	r2,-8(fp)
		x = state[i] & 0x0F;
100005f0:	e0bffd17 	ldw	r2,-12(fp)
100005f4:	e0ffff17 	ldw	r3,-4(fp)
100005f8:	1885883a 	add	r2,r3,r2
100005fc:	10800003 	ldbu	r2,0(r2)
10000600:	108003cc 	andi	r2,r2,15
10000604:	e0bffe45 	stb	r2,-7(fp)
		state[i] = fbox[y*16 + x];
10000608:	e0bffd17 	ldw	r2,-12(fp)
1000060c:	e0ffff17 	ldw	r3,-4(fp)
10000610:	1885883a 	add	r2,r3,r2
10000614:	e0fffe03 	ldbu	r3,-8(fp)
10000618:	1808913a 	slli	r4,r3,4
1000061c:	e0fffe43 	ldbu	r3,-7(fp)
10000620:	20c7883a 	add	r3,r4,r3
10000624:	01040074 	movhi	r4,4097
10000628:	210c4a04 	addi	r4,r4,12584
1000062c:	20c7883a 	add	r3,r4,r3
10000630:	18c00003 	ldbu	r3,0(r3)
10000634:	10c00005 	stb	r3,0(r2)
	//length 16 array of byte chars
	//hex values of byte -> row & column
	//unsigned char temp[16] = state;
	unsigned char x, y;
	int i;
	for(i = 0; i < 16; i++)
10000638:	e0bffd17 	ldw	r2,-12(fp)
1000063c:	10800044 	addi	r2,r2,1
10000640:	e0bffd15 	stw	r2,-12(fp)
10000644:	e0bffd17 	ldw	r2,-12(fp)
10000648:	10800410 	cmplti	r2,r2,16
1000064c:	103fe11e 	bne	r2,zero,100005d4 <__alt_data_end+0xf80005d4>
	{
		y = (state[i]>> 4);
		x = state[i] & 0x0F;
		state[i] = fbox[y*16 + x];
	}
}
10000650:	e037883a 	mov	sp,fp
10000654:	df000017 	ldw	fp,0(sp)
10000658:	dec00104 	addi	sp,sp,4
1000065c:	f800283a 	ret

10000660 <ShiftRows>:

void ShiftRows(unsigned char state[16])
{
10000660:	defffd04 	addi	sp,sp,-12
10000664:	df000215 	stw	fp,8(sp)
10000668:	df000204 	addi	fp,sp,8
1000066c:	e13fff15 	stw	r4,-4(fp)
	unsigned char temp;
	unsigned char temp2;
	//1 shift
	temp = state[1];
10000670:	e0bfff17 	ldw	r2,-4(fp)
10000674:	10800043 	ldbu	r2,1(r2)
10000678:	e0bffe05 	stb	r2,-8(fp)
	state[1] = state[5];
1000067c:	e0bfff17 	ldw	r2,-4(fp)
10000680:	10800044 	addi	r2,r2,1
10000684:	e0ffff17 	ldw	r3,-4(fp)
10000688:	18c00143 	ldbu	r3,5(r3)
1000068c:	10c00005 	stb	r3,0(r2)
	state[5] = state[9];
10000690:	e0bfff17 	ldw	r2,-4(fp)
10000694:	10800144 	addi	r2,r2,5
10000698:	e0ffff17 	ldw	r3,-4(fp)
1000069c:	18c00243 	ldbu	r3,9(r3)
100006a0:	10c00005 	stb	r3,0(r2)
	state[9] = state[13];
100006a4:	e0bfff17 	ldw	r2,-4(fp)
100006a8:	10800244 	addi	r2,r2,9
100006ac:	e0ffff17 	ldw	r3,-4(fp)
100006b0:	18c00343 	ldbu	r3,13(r3)
100006b4:	10c00005 	stb	r3,0(r2)
	state[13] = temp;
100006b8:	e0bfff17 	ldw	r2,-4(fp)
100006bc:	10800344 	addi	r2,r2,13
100006c0:	e0fffe03 	ldbu	r3,-8(fp)
100006c4:	10c00005 	stb	r3,0(r2)
	//2 shift
	temp = state[2];
100006c8:	e0bfff17 	ldw	r2,-4(fp)
100006cc:	10800083 	ldbu	r2,2(r2)
100006d0:	e0bffe05 	stb	r2,-8(fp)
	temp2 = state[6];
100006d4:	e0bfff17 	ldw	r2,-4(fp)
100006d8:	10800183 	ldbu	r2,6(r2)
100006dc:	e0bffe45 	stb	r2,-7(fp)
	state[2] = state[10];
100006e0:	e0bfff17 	ldw	r2,-4(fp)
100006e4:	10800084 	addi	r2,r2,2
100006e8:	e0ffff17 	ldw	r3,-4(fp)
100006ec:	18c00283 	ldbu	r3,10(r3)
100006f0:	10c00005 	stb	r3,0(r2)
	state[6] = state[14];
100006f4:	e0bfff17 	ldw	r2,-4(fp)
100006f8:	10800184 	addi	r2,r2,6
100006fc:	e0ffff17 	ldw	r3,-4(fp)
10000700:	18c00383 	ldbu	r3,14(r3)
10000704:	10c00005 	stb	r3,0(r2)
	state[10] = temp;
10000708:	e0bfff17 	ldw	r2,-4(fp)
1000070c:	10800284 	addi	r2,r2,10
10000710:	e0fffe03 	ldbu	r3,-8(fp)
10000714:	10c00005 	stb	r3,0(r2)
	state[14] = temp2;
10000718:	e0bfff17 	ldw	r2,-4(fp)
1000071c:	10800384 	addi	r2,r2,14
10000720:	e0fffe43 	ldbu	r3,-7(fp)
10000724:	10c00005 	stb	r3,0(r2)
	//3 shift
	temp = state[15];
10000728:	e0bfff17 	ldw	r2,-4(fp)
1000072c:	108003c3 	ldbu	r2,15(r2)
10000730:	e0bffe05 	stb	r2,-8(fp)
	state[15] = state[11];
10000734:	e0bfff17 	ldw	r2,-4(fp)
10000738:	108003c4 	addi	r2,r2,15
1000073c:	e0ffff17 	ldw	r3,-4(fp)
10000740:	18c002c3 	ldbu	r3,11(r3)
10000744:	10c00005 	stb	r3,0(r2)
	state[11] = state[7];
10000748:	e0bfff17 	ldw	r2,-4(fp)
1000074c:	108002c4 	addi	r2,r2,11
10000750:	e0ffff17 	ldw	r3,-4(fp)
10000754:	18c001c3 	ldbu	r3,7(r3)
10000758:	10c00005 	stb	r3,0(r2)
	state[7] = state[3];
1000075c:	e0bfff17 	ldw	r2,-4(fp)
10000760:	108001c4 	addi	r2,r2,7
10000764:	e0ffff17 	ldw	r3,-4(fp)
10000768:	18c000c3 	ldbu	r3,3(r3)
1000076c:	10c00005 	stb	r3,0(r2)
	state[3] = temp;
10000770:	e0bfff17 	ldw	r2,-4(fp)
10000774:	108000c4 	addi	r2,r2,3
10000778:	e0fffe03 	ldbu	r3,-8(fp)
1000077c:	10c00005 	stb	r3,0(r2)
}
10000780:	e037883a 	mov	sp,fp
10000784:	df000017 	ldw	fp,0(sp)
10000788:	dec00104 	addi	sp,sp,4
1000078c:	f800283a 	ret

10000790 <MixColumns>:

void MixColumns(unsigned char state[16])
{
10000790:	defff904 	addi	sp,sp,-28
10000794:	dfc00615 	stw	ra,24(sp)
10000798:	df000515 	stw	fp,20(sp)
1000079c:	dc400415 	stw	r17,16(sp)
100007a0:	dc000315 	stw	r16,12(sp)
100007a4:	df000304 	addi	fp,sp,12
100007a8:	e13fff15 	stw	r4,-4(fp)
	unsigned char a[4];
	unsigned char c;
	unsigned char i;
	for(i = 0; i < 4; i++) {
100007ac:	e03ffd45 	stb	zero,-11(fp)
100007b0:	00007706 	br	10000990 <MixColumns+0x200>
		for(c=0;c<4;c++) {
100007b4:	e03ffd05 	stb	zero,-12(fp)
100007b8:	00001006 	br	100007fc <MixColumns+0x6c>
			a[c] = state[i*4+c];
100007bc:	e13ffd03 	ldbu	r4,-12(fp)
100007c0:	e0bffd43 	ldbu	r2,-11(fp)
100007c4:	1085883a 	add	r2,r2,r2
100007c8:	1085883a 	add	r2,r2,r2
100007cc:	1007883a 	mov	r3,r2
100007d0:	e0bffd03 	ldbu	r2,-12(fp)
100007d4:	1885883a 	add	r2,r3,r2
100007d8:	e0ffff17 	ldw	r3,-4(fp)
100007dc:	1885883a 	add	r2,r3,r2
100007e0:	10c00003 	ldbu	r3,0(r2)
100007e4:	e0bffd84 	addi	r2,fp,-10
100007e8:	1105883a 	add	r2,r2,r4
100007ec:	10c00005 	stb	r3,0(r2)
{
	unsigned char a[4];
	unsigned char c;
	unsigned char i;
	for(i = 0; i < 4; i++) {
		for(c=0;c<4;c++) {
100007f0:	e0bffd03 	ldbu	r2,-12(fp)
100007f4:	10800044 	addi	r2,r2,1
100007f8:	e0bffd05 	stb	r2,-12(fp)
100007fc:	e0bffd03 	ldbu	r2,-12(fp)
10000800:	10800130 	cmpltui	r2,r2,4
10000804:	103fed1e 	bne	r2,zero,100007bc <__alt_data_end+0xf80007bc>
			a[c] = state[i*4+c];
		}
		state[i*4] = xtime(a[0],2) ^ a[3] ^ a[2] ^ xtime(a[1],3);
10000808:	e0bffd43 	ldbu	r2,-11(fp)
1000080c:	1085883a 	add	r2,r2,r2
10000810:	1085883a 	add	r2,r2,r2
10000814:	e0ffff17 	ldw	r3,-4(fp)
10000818:	18a1883a 	add	r16,r3,r2
1000081c:	e0bffd83 	ldbu	r2,-10(fp)
10000820:	10803fcc 	andi	r2,r2,255
10000824:	1009883a 	mov	r4,r2
10000828:	01400084 	movi	r5,2
1000082c:	00009b80 	call	100009b8 <xtime>
10000830:	e0fffe43 	ldbu	r3,-7(fp)
10000834:	10c4f03a 	xor	r2,r2,r3
10000838:	1007883a 	mov	r3,r2
1000083c:	e0bffe03 	ldbu	r2,-8(fp)
10000840:	1884f03a 	xor	r2,r3,r2
10000844:	1023883a 	mov	r17,r2
10000848:	e0bffdc3 	ldbu	r2,-9(fp)
1000084c:	10803fcc 	andi	r2,r2,255
10000850:	1009883a 	mov	r4,r2
10000854:	014000c4 	movi	r5,3
10000858:	00009b80 	call	100009b8 <xtime>
1000085c:	8884f03a 	xor	r2,r17,r2
10000860:	80800005 	stb	r2,0(r16)
		state[i*4+1] = xtime(a[1],2) ^ a[0] ^ a[3] ^ xtime(a[2],3);
10000864:	e0bffd43 	ldbu	r2,-11(fp)
10000868:	1085883a 	add	r2,r2,r2
1000086c:	1085883a 	add	r2,r2,r2
10000870:	10800044 	addi	r2,r2,1
10000874:	e0ffff17 	ldw	r3,-4(fp)
10000878:	18a1883a 	add	r16,r3,r2
1000087c:	e0bffdc3 	ldbu	r2,-9(fp)
10000880:	10803fcc 	andi	r2,r2,255
10000884:	1009883a 	mov	r4,r2
10000888:	01400084 	movi	r5,2
1000088c:	00009b80 	call	100009b8 <xtime>
10000890:	e0fffd83 	ldbu	r3,-10(fp)
10000894:	10c4f03a 	xor	r2,r2,r3
10000898:	1007883a 	mov	r3,r2
1000089c:	e0bffe43 	ldbu	r2,-7(fp)
100008a0:	1884f03a 	xor	r2,r3,r2
100008a4:	1023883a 	mov	r17,r2
100008a8:	e0bffe03 	ldbu	r2,-8(fp)
100008ac:	10803fcc 	andi	r2,r2,255
100008b0:	1009883a 	mov	r4,r2
100008b4:	014000c4 	movi	r5,3
100008b8:	00009b80 	call	100009b8 <xtime>
100008bc:	8884f03a 	xor	r2,r17,r2
100008c0:	80800005 	stb	r2,0(r16)
		state[i*4+2] = xtime(a[2],2) ^ a[1] ^ a[0] ^ xtime(a[3],3);
100008c4:	e0bffd43 	ldbu	r2,-11(fp)
100008c8:	1085883a 	add	r2,r2,r2
100008cc:	1085883a 	add	r2,r2,r2
100008d0:	10800084 	addi	r2,r2,2
100008d4:	e0ffff17 	ldw	r3,-4(fp)
100008d8:	18a1883a 	add	r16,r3,r2
100008dc:	e0bffe03 	ldbu	r2,-8(fp)
100008e0:	10803fcc 	andi	r2,r2,255
100008e4:	1009883a 	mov	r4,r2
100008e8:	01400084 	movi	r5,2
100008ec:	00009b80 	call	100009b8 <xtime>
100008f0:	e0fffdc3 	ldbu	r3,-9(fp)
100008f4:	10c4f03a 	xor	r2,r2,r3
100008f8:	1007883a 	mov	r3,r2
100008fc:	e0bffd83 	ldbu	r2,-10(fp)
10000900:	1884f03a 	xor	r2,r3,r2
10000904:	1023883a 	mov	r17,r2
10000908:	e0bffe43 	ldbu	r2,-7(fp)
1000090c:	10803fcc 	andi	r2,r2,255
10000910:	1009883a 	mov	r4,r2
10000914:	014000c4 	movi	r5,3
10000918:	00009b80 	call	100009b8 <xtime>
1000091c:	8884f03a 	xor	r2,r17,r2
10000920:	80800005 	stb	r2,0(r16)
		state[i*4+3] = xtime(a[3],2) ^a[2] ^ a[1] ^ xtime(a[0],3);
10000924:	e0bffd43 	ldbu	r2,-11(fp)
10000928:	1085883a 	add	r2,r2,r2
1000092c:	1085883a 	add	r2,r2,r2
10000930:	108000c4 	addi	r2,r2,3
10000934:	e0ffff17 	ldw	r3,-4(fp)
10000938:	18a1883a 	add	r16,r3,r2
1000093c:	e0bffe43 	ldbu	r2,-7(fp)
10000940:	10803fcc 	andi	r2,r2,255
10000944:	1009883a 	mov	r4,r2
10000948:	01400084 	movi	r5,2
1000094c:	00009b80 	call	100009b8 <xtime>
10000950:	e0fffe03 	ldbu	r3,-8(fp)
10000954:	10c4f03a 	xor	r2,r2,r3
10000958:	1007883a 	mov	r3,r2
1000095c:	e0bffdc3 	ldbu	r2,-9(fp)
10000960:	1884f03a 	xor	r2,r3,r2
10000964:	1023883a 	mov	r17,r2
10000968:	e0bffd83 	ldbu	r2,-10(fp)
1000096c:	10803fcc 	andi	r2,r2,255
10000970:	1009883a 	mov	r4,r2
10000974:	014000c4 	movi	r5,3
10000978:	00009b80 	call	100009b8 <xtime>
1000097c:	8884f03a 	xor	r2,r17,r2
10000980:	80800005 	stb	r2,0(r16)
void MixColumns(unsigned char state[16])
{
	unsigned char a[4];
	unsigned char c;
	unsigned char i;
	for(i = 0; i < 4; i++) {
10000984:	e0bffd43 	ldbu	r2,-11(fp)
10000988:	10800044 	addi	r2,r2,1
1000098c:	e0bffd45 	stb	r2,-11(fp)
10000990:	e0bffd43 	ldbu	r2,-11(fp)
10000994:	10800130 	cmpltui	r2,r2,4
10000998:	103f861e 	bne	r2,zero,100007b4 <__alt_data_end+0xf80007b4>
		state[i*4+1] = xtime(a[1],2) ^ a[0] ^ a[3] ^ xtime(a[2],3);
		state[i*4+2] = xtime(a[2],2) ^ a[1] ^ a[0] ^ xtime(a[3],3);
		state[i*4+3] = xtime(a[3],2) ^a[2] ^ a[1] ^ xtime(a[0],3);
	}

}
1000099c:	e037883a 	mov	sp,fp
100009a0:	dfc00317 	ldw	ra,12(sp)
100009a4:	df000217 	ldw	fp,8(sp)
100009a8:	dc400117 	ldw	r17,4(sp)
100009ac:	dc000017 	ldw	r16,0(sp)
100009b0:	dec00404 	addi	sp,sp,16
100009b4:	f800283a 	ret

100009b8 <xtime>:

unsigned char xtime(unsigned char a, unsigned char b) {
100009b8:	defffc04 	addi	sp,sp,-16
100009bc:	df000315 	stw	fp,12(sp)
100009c0:	df000304 	addi	fp,sp,12
100009c4:	2007883a 	mov	r3,r4
100009c8:	2805883a 	mov	r2,r5
100009cc:	e0fffe05 	stb	r3,-8(fp)
100009d0:	e0bfff05 	stb	r2,-4(fp)
	unsigned char p = 0;
100009d4:	e03ffd05 	stb	zero,-12(fp)
	unsigned char i;
	unsigned char hi_bit_set;
	for (i = 0; i < 8; i++) {
100009d8:	e03ffd45 	stb	zero,-11(fp)
100009dc:	00001a06 	br	10000a48 <xtime+0x90>
		if ((b & 1))
100009e0:	e0bfff03 	ldbu	r2,-4(fp)
100009e4:	1080004c 	andi	r2,r2,1
100009e8:	10000426 	beq	r2,zero,100009fc <xtime+0x44>
			p ^= a;
100009ec:	e0fffd03 	ldbu	r3,-12(fp)
100009f0:	e0bffe03 	ldbu	r2,-8(fp)
100009f4:	1884f03a 	xor	r2,r3,r2
100009f8:	e0bffd05 	stb	r2,-12(fp)
		hi_bit_set = (a & 0x80);
100009fc:	e0fffe03 	ldbu	r3,-8(fp)
10000a00:	00bfe004 	movi	r2,-128
10000a04:	1884703a 	and	r2,r3,r2
10000a08:	e0bffd85 	stb	r2,-10(fp)
		a <<= 1;
10000a0c:	e0bffe03 	ldbu	r2,-8(fp)
10000a10:	1085883a 	add	r2,r2,r2
10000a14:	e0bffe05 	stb	r2,-8(fp)
		if (hi_bit_set == 0x80)
10000a18:	e0bffd83 	ldbu	r2,-10(fp)
10000a1c:	10802018 	cmpnei	r2,r2,128
10000a20:	1000031e 	bne	r2,zero,10000a30 <xtime+0x78>
			a ^= 0x1b;
10000a24:	e0bffe03 	ldbu	r2,-8(fp)
10000a28:	108006dc 	xori	r2,r2,27
10000a2c:	e0bffe05 	stb	r2,-8(fp)
		b >>= 1;
10000a30:	e0bfff03 	ldbu	r2,-4(fp)
10000a34:	1004d07a 	srli	r2,r2,1
10000a38:	e0bfff05 	stb	r2,-4(fp)

unsigned char xtime(unsigned char a, unsigned char b) {
	unsigned char p = 0;
	unsigned char i;
	unsigned char hi_bit_set;
	for (i = 0; i < 8; i++) {
10000a3c:	e0bffd43 	ldbu	r2,-11(fp)
10000a40:	10800044 	addi	r2,r2,1
10000a44:	e0bffd45 	stb	r2,-11(fp)
10000a48:	e0bffd43 	ldbu	r2,-11(fp)
10000a4c:	10800230 	cmpltui	r2,r2,8
10000a50:	103fe31e 	bne	r2,zero,100009e0 <__alt_data_end+0xf80009e0>
		a <<= 1;
		if (hi_bit_set == 0x80)
			a ^= 0x1b;
		b >>= 1;
	}
	return p;
10000a54:	e0bffd03 	ldbu	r2,-12(fp)
}
10000a58:	e037883a 	mov	sp,fp
10000a5c:	df000017 	ldw	fp,0(sp)
10000a60:	dec00104 	addi	sp,sp,4
10000a64:	f800283a 	ret

10000a68 <charToHex>:

char charToHex(char c)
{
10000a68:	defffd04 	addi	sp,sp,-12
10000a6c:	df000215 	stw	fp,8(sp)
10000a70:	df000204 	addi	fp,sp,8
10000a74:	2005883a 	mov	r2,r4
10000a78:	e0bfff05 	stb	r2,-4(fp)
	char hex = c;
10000a7c:	e0bfff03 	ldbu	r2,-4(fp)
10000a80:	e0bffe05 	stb	r2,-8(fp)

	if (hex >= '0' && hex <= '9')
10000a84:	e0bffe07 	ldb	r2,-8(fp)
10000a88:	10800c10 	cmplti	r2,r2,48
10000a8c:	1000071e 	bne	r2,zero,10000aac <charToHex+0x44>
10000a90:	e0bffe07 	ldb	r2,-8(fp)
10000a94:	10800e88 	cmpgei	r2,r2,58
10000a98:	1000041e 	bne	r2,zero,10000aac <charToHex+0x44>
		hex -= '0';
10000a9c:	e0bffe03 	ldbu	r2,-8(fp)
10000aa0:	10bff404 	addi	r2,r2,-48
10000aa4:	e0bffe05 	stb	r2,-8(fp)
10000aa8:	00001906 	br	10000b10 <charToHex+0xa8>
	else if (hex >= 'A' && hex <= 'F')
10000aac:	e0bffe07 	ldb	r2,-8(fp)
10000ab0:	10801050 	cmplti	r2,r2,65
10000ab4:	10000a1e 	bne	r2,zero,10000ae0 <charToHex+0x78>
10000ab8:	e0bffe07 	ldb	r2,-8(fp)
10000abc:	108011c8 	cmpgei	r2,r2,71
10000ac0:	1000071e 	bne	r2,zero,10000ae0 <charToHex+0x78>
	{
		hex -= 'A';
10000ac4:	e0bffe03 	ldbu	r2,-8(fp)
10000ac8:	10bfefc4 	addi	r2,r2,-65
10000acc:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000ad0:	e0bffe03 	ldbu	r2,-8(fp)
10000ad4:	10800284 	addi	r2,r2,10
10000ad8:	e0bffe05 	stb	r2,-8(fp)
10000adc:	00000c06 	br	10000b10 <charToHex+0xa8>
	}
	else if (hex >= 'a' && hex <= 'f')
10000ae0:	e0bffe07 	ldb	r2,-8(fp)
10000ae4:	10801850 	cmplti	r2,r2,97
10000ae8:	1000091e 	bne	r2,zero,10000b10 <charToHex+0xa8>
10000aec:	e0bffe07 	ldb	r2,-8(fp)
10000af0:	108019c8 	cmpgei	r2,r2,103
10000af4:	1000061e 	bne	r2,zero,10000b10 <charToHex+0xa8>
	{
		hex -= 'a';
10000af8:	e0bffe03 	ldbu	r2,-8(fp)
10000afc:	10bfe7c4 	addi	r2,r2,-97
10000b00:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000b04:	e0bffe03 	ldbu	r2,-8(fp)
10000b08:	10800284 	addi	r2,r2,10
10000b0c:	e0bffe05 	stb	r2,-8(fp)
	}
	return hex;
10000b10:	e0bffe03 	ldbu	r2,-8(fp)
}
10000b14:	e037883a 	mov	sp,fp
10000b18:	df000017 	ldw	fp,0(sp)
10000b1c:	dec00104 	addi	sp,sp,4
10000b20:	f800283a 	ret

10000b24 <charsToHex>:

char charsToHex(char c1, char c2)
{
10000b24:	defffb04 	addi	sp,sp,-20
10000b28:	dfc00415 	stw	ra,16(sp)
10000b2c:	df000315 	stw	fp,12(sp)
10000b30:	df000304 	addi	fp,sp,12
10000b34:	2007883a 	mov	r3,r4
10000b38:	2805883a 	mov	r2,r5
10000b3c:	e0fffe05 	stb	r3,-8(fp)
10000b40:	e0bfff05 	stb	r2,-4(fp)
	char hex1 = charToHex(c1);
10000b44:	e0bffe07 	ldb	r2,-8(fp)
10000b48:	1009883a 	mov	r4,r2
10000b4c:	0000a680 	call	10000a68 <charToHex>
10000b50:	e0bffd05 	stb	r2,-12(fp)
	char hex2 = charToHex(c2);
10000b54:	e0bfff07 	ldb	r2,-4(fp)
10000b58:	1009883a 	mov	r4,r2
10000b5c:	0000a680 	call	10000a68 <charToHex>
10000b60:	e0bffd45 	stb	r2,-11(fp)
	return (hex1 << 4) + hex2;
10000b64:	e0bffd03 	ldbu	r2,-12(fp)
10000b68:	1004913a 	slli	r2,r2,4
10000b6c:	1007883a 	mov	r3,r2
10000b70:	e0bffd43 	ldbu	r2,-11(fp)
10000b74:	1885883a 	add	r2,r3,r2
}
10000b78:	e037883a 	mov	sp,fp
10000b7c:	dfc00117 	ldw	ra,4(sp)
10000b80:	df000017 	ldw	fp,0(sp)
10000b84:	dec00204 	addi	sp,sp,8
10000b88:	f800283a 	ret

10000b8c <SubWord>:
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

unsigned long SubWord(unsigned long word) {
10000b8c:	defff604 	addi	sp,sp,-40
10000b90:	df000915 	stw	fp,36(sp)
10000b94:	df000904 	addi	fp,sp,36
10000b98:	e13fff15 	stw	r4,-4(fp)
	unsigned long x, y;
	unsigned long bite;
	unsigned long result;
	unsigned long firstbyte, secondbyte, thirdbyte, fourthbyte;

	bite = word >> 24;
10000b9c:	e0bfff17 	ldw	r2,-4(fp)
10000ba0:	1004d63a 	srli	r2,r2,24
10000ba4:	e0bff715 	stw	r2,-36(fp)
	y = (bite >> 4);
10000ba8:	e0bff717 	ldw	r2,-36(fp)
10000bac:	1004d13a 	srli	r2,r2,4
10000bb0:	e0bff815 	stw	r2,-32(fp)
	x = bite & 0x0F;
10000bb4:	e0bff717 	ldw	r2,-36(fp)
10000bb8:	108003cc 	andi	r2,r2,15
10000bbc:	e0bff915 	stw	r2,-28(fp)
	firstbyte = sbox[y*16 + x];
10000bc0:	e0bff817 	ldw	r2,-32(fp)
10000bc4:	1006913a 	slli	r3,r2,4
10000bc8:	e0bff917 	ldw	r2,-28(fp)
10000bcc:	1885883a 	add	r2,r3,r2
10000bd0:	00c40074 	movhi	r3,4097
10000bd4:	18cc9404 	addi	r3,r3,12880
10000bd8:	1885883a 	add	r2,r3,r2
10000bdc:	10800003 	ldbu	r2,0(r2)
10000be0:	10803fcc 	andi	r2,r2,255
10000be4:	e0bffa15 	stw	r2,-24(fp)

	bite = (word >> 16) & 0x00FF;
10000be8:	e0bfff17 	ldw	r2,-4(fp)
10000bec:	1004d43a 	srli	r2,r2,16
10000bf0:	10803fcc 	andi	r2,r2,255
10000bf4:	e0bff715 	stw	r2,-36(fp)
	y = (bite >> 4);
10000bf8:	e0bff717 	ldw	r2,-36(fp)
10000bfc:	1004d13a 	srli	r2,r2,4
10000c00:	e0bff815 	stw	r2,-32(fp)
	x = bite & 0x0F;
10000c04:	e0bff717 	ldw	r2,-36(fp)
10000c08:	108003cc 	andi	r2,r2,15
10000c0c:	e0bff915 	stw	r2,-28(fp)
	secondbyte = sbox[y*16 + x];
10000c10:	e0bff817 	ldw	r2,-32(fp)
10000c14:	1006913a 	slli	r3,r2,4
10000c18:	e0bff917 	ldw	r2,-28(fp)
10000c1c:	1885883a 	add	r2,r3,r2
10000c20:	00c40074 	movhi	r3,4097
10000c24:	18cc9404 	addi	r3,r3,12880
10000c28:	1885883a 	add	r2,r3,r2
10000c2c:	10800003 	ldbu	r2,0(r2)
10000c30:	10803fcc 	andi	r2,r2,255
10000c34:	e0bffb15 	stw	r2,-20(fp)

	bite = (word >> 8) & 0x0000FF;
10000c38:	e0bfff17 	ldw	r2,-4(fp)
10000c3c:	1004d23a 	srli	r2,r2,8
10000c40:	10803fcc 	andi	r2,r2,255
10000c44:	e0bff715 	stw	r2,-36(fp)
	y = (bite >> 4);
10000c48:	e0bff717 	ldw	r2,-36(fp)
10000c4c:	1004d13a 	srli	r2,r2,4
10000c50:	e0bff815 	stw	r2,-32(fp)
	x = bite & 0x0F;
10000c54:	e0bff717 	ldw	r2,-36(fp)
10000c58:	108003cc 	andi	r2,r2,15
10000c5c:	e0bff915 	stw	r2,-28(fp)
	thirdbyte = sbox[y*16 + x];
10000c60:	e0bff817 	ldw	r2,-32(fp)
10000c64:	1006913a 	slli	r3,r2,4
10000c68:	e0bff917 	ldw	r2,-28(fp)
10000c6c:	1885883a 	add	r2,r3,r2
10000c70:	00c40074 	movhi	r3,4097
10000c74:	18cc9404 	addi	r3,r3,12880
10000c78:	1885883a 	add	r2,r3,r2
10000c7c:	10800003 	ldbu	r2,0(r2)
10000c80:	10803fcc 	andi	r2,r2,255
10000c84:	e0bffc15 	stw	r2,-16(fp)

	bite = word & 0x000000FF;
10000c88:	e0bfff17 	ldw	r2,-4(fp)
10000c8c:	10803fcc 	andi	r2,r2,255
10000c90:	e0bff715 	stw	r2,-36(fp)
	y = (bite >> 4);
10000c94:	e0bff717 	ldw	r2,-36(fp)
10000c98:	1004d13a 	srli	r2,r2,4
10000c9c:	e0bff815 	stw	r2,-32(fp)
	x = bite & 0x0F;
10000ca0:	e0bff717 	ldw	r2,-36(fp)
10000ca4:	108003cc 	andi	r2,r2,15
10000ca8:	e0bff915 	stw	r2,-28(fp)
	fourthbyte = sbox[y*16 + x];
10000cac:	e0bff817 	ldw	r2,-32(fp)
10000cb0:	1006913a 	slli	r3,r2,4
10000cb4:	e0bff917 	ldw	r2,-28(fp)
10000cb8:	1885883a 	add	r2,r3,r2
10000cbc:	00c40074 	movhi	r3,4097
10000cc0:	18cc9404 	addi	r3,r3,12880
10000cc4:	1885883a 	add	r2,r3,r2
10000cc8:	10800003 	ldbu	r2,0(r2)
10000ccc:	10803fcc 	andi	r2,r2,255
10000cd0:	e0bffd15 	stw	r2,-12(fp)

	result = (firstbyte << 24) + (secondbyte << 16) + (thirdbyte << 8) + fourthbyte;
10000cd4:	e0bffa17 	ldw	r2,-24(fp)
10000cd8:	1006963a 	slli	r3,r2,24
10000cdc:	e0bffb17 	ldw	r2,-20(fp)
10000ce0:	1004943a 	slli	r2,r2,16
10000ce4:	1887883a 	add	r3,r3,r2
10000ce8:	e0bffc17 	ldw	r2,-16(fp)
10000cec:	1004923a 	slli	r2,r2,8
10000cf0:	1887883a 	add	r3,r3,r2
10000cf4:	e0bffd17 	ldw	r2,-12(fp)
10000cf8:	1885883a 	add	r2,r3,r2
10000cfc:	e0bffe15 	stw	r2,-8(fp)
	return result;
10000d00:	e0bffe17 	ldw	r2,-8(fp)

}
10000d04:	e037883a 	mov	sp,fp
10000d08:	df000017 	ldw	fp,0(sp)
10000d0c:	dec00104 	addi	sp,sp,4
10000d10:	f800283a 	ret

10000d14 <RotWord>:

unsigned long RotWord(unsigned long word) {
10000d14:	defff904 	addi	sp,sp,-28
10000d18:	df000615 	stw	fp,24(sp)
10000d1c:	df000604 	addi	fp,sp,24
10000d20:	e13fff15 	stw	r4,-4(fp)
	unsigned long result;
	unsigned long firstbyte, secondbyte, thirdbyte, fourthbyte;
	firstbyte = word >> 24;
10000d24:	e0bfff17 	ldw	r2,-4(fp)
10000d28:	1004d63a 	srli	r2,r2,24
10000d2c:	e0bffa15 	stw	r2,-24(fp)
	secondbyte = (word >> 16) & 0x00FF;
10000d30:	e0bfff17 	ldw	r2,-4(fp)
10000d34:	1004d43a 	srli	r2,r2,16
10000d38:	10803fcc 	andi	r2,r2,255
10000d3c:	e0bffb15 	stw	r2,-20(fp)
	thirdbyte = (word >> 8) & 0x0000FF;
10000d40:	e0bfff17 	ldw	r2,-4(fp)
10000d44:	1004d23a 	srli	r2,r2,8
10000d48:	10803fcc 	andi	r2,r2,255
10000d4c:	e0bffc15 	stw	r2,-16(fp)
	fourthbyte = word & 0x000000FF;
10000d50:	e0bfff17 	ldw	r2,-4(fp)
10000d54:	10803fcc 	andi	r2,r2,255
10000d58:	e0bffd15 	stw	r2,-12(fp)
	result = (secondbyte << 24) + (thirdbyte << 16) + (fourthbyte << 8) + firstbyte;
10000d5c:	e0bffb17 	ldw	r2,-20(fp)
10000d60:	1006963a 	slli	r3,r2,24
10000d64:	e0bffc17 	ldw	r2,-16(fp)
10000d68:	1004943a 	slli	r2,r2,16
10000d6c:	1887883a 	add	r3,r3,r2
10000d70:	e0bffd17 	ldw	r2,-12(fp)
10000d74:	1004923a 	slli	r2,r2,8
10000d78:	1887883a 	add	r3,r3,r2
10000d7c:	e0bffa17 	ldw	r2,-24(fp)
10000d80:	1885883a 	add	r2,r3,r2
10000d84:	e0bffe15 	stw	r2,-8(fp)
	return result;
10000d88:	e0bffe17 	ldw	r2,-8(fp)
}
10000d8c:	e037883a 	mov	sp,fp
10000d90:	df000017 	ldw	fp,0(sp)
10000d94:	dec00104 	addi	sp,sp,4
10000d98:	f800283a 	ret

10000d9c <KeyExpansion>:

void KeyExpansion(unsigned char key[16], unsigned long w[44], int Nk)
{
10000d9c:	defff604 	addi	sp,sp,-40
10000da0:	dfc00915 	stw	ra,36(sp)
10000da4:	df000815 	stw	fp,32(sp)
10000da8:	dc000715 	stw	r16,28(sp)
10000dac:	df000704 	addi	fp,sp,28
10000db0:	e13ffd15 	stw	r4,-12(fp)
10000db4:	e17ffe15 	stw	r5,-8(fp)
10000db8:	e1bfff15 	stw	r6,-4(fp)
	int Nb = 4;
10000dbc:	00800104 	movi	r2,4
10000dc0:	e0bffb15 	stw	r2,-20(fp)
	int Nr = 10;
10000dc4:	00800284 	movi	r2,10
10000dc8:	e0bffc15 	stw	r2,-16(fp)
	unsigned long temp;
	int i = 0;
10000dcc:	e03ffa15 	stw	zero,-24(fp)

	while (i < Nk)
10000dd0:	00002e06 	br	10000e8c <KeyExpansion+0xf0>
	{
		w[i] = (key[4*i] << 24) + (key[4*i+1] << 16) + (key[4*i+2] << 8) + key[4*i+3];
10000dd4:	e0bffa17 	ldw	r2,-24(fp)
10000dd8:	1085883a 	add	r2,r2,r2
10000ddc:	1085883a 	add	r2,r2,r2
10000de0:	e0fffe17 	ldw	r3,-8(fp)
10000de4:	1887883a 	add	r3,r3,r2
10000de8:	e0bffa17 	ldw	r2,-24(fp)
10000dec:	1085883a 	add	r2,r2,r2
10000df0:	1085883a 	add	r2,r2,r2
10000df4:	e13ffd17 	ldw	r4,-12(fp)
10000df8:	2085883a 	add	r2,r4,r2
10000dfc:	10800003 	ldbu	r2,0(r2)
10000e00:	10803fcc 	andi	r2,r2,255
10000e04:	1008963a 	slli	r4,r2,24
10000e08:	e0bffa17 	ldw	r2,-24(fp)
10000e0c:	1085883a 	add	r2,r2,r2
10000e10:	1085883a 	add	r2,r2,r2
10000e14:	10800044 	addi	r2,r2,1
10000e18:	e17ffd17 	ldw	r5,-12(fp)
10000e1c:	2885883a 	add	r2,r5,r2
10000e20:	10800003 	ldbu	r2,0(r2)
10000e24:	10803fcc 	andi	r2,r2,255
10000e28:	1004943a 	slli	r2,r2,16
10000e2c:	2089883a 	add	r4,r4,r2
10000e30:	e0bffa17 	ldw	r2,-24(fp)
10000e34:	1085883a 	add	r2,r2,r2
10000e38:	1085883a 	add	r2,r2,r2
10000e3c:	10800084 	addi	r2,r2,2
10000e40:	e17ffd17 	ldw	r5,-12(fp)
10000e44:	2885883a 	add	r2,r5,r2
10000e48:	10800003 	ldbu	r2,0(r2)
10000e4c:	10803fcc 	andi	r2,r2,255
10000e50:	1004923a 	slli	r2,r2,8
10000e54:	2089883a 	add	r4,r4,r2
10000e58:	e0bffa17 	ldw	r2,-24(fp)
10000e5c:	1085883a 	add	r2,r2,r2
10000e60:	1085883a 	add	r2,r2,r2
10000e64:	108000c4 	addi	r2,r2,3
10000e68:	e17ffd17 	ldw	r5,-12(fp)
10000e6c:	2885883a 	add	r2,r5,r2
10000e70:	10800003 	ldbu	r2,0(r2)
10000e74:	10803fcc 	andi	r2,r2,255
10000e78:	2085883a 	add	r2,r4,r2
10000e7c:	18800015 	stw	r2,0(r3)
		i++;
10000e80:	e0bffa17 	ldw	r2,-24(fp)
10000e84:	10800044 	addi	r2,r2,1
10000e88:	e0bffa15 	stw	r2,-24(fp)
	int Nb = 4;
	int Nr = 10;
	unsigned long temp;
	int i = 0;

	while (i < Nk)
10000e8c:	e0fffa17 	ldw	r3,-24(fp)
10000e90:	e0bfff17 	ldw	r2,-4(fp)
10000e94:	18bfcf16 	blt	r3,r2,10000dd4 <__alt_data_end+0xf8000dd4>
	{
		w[i] = (key[4*i] << 24) + (key[4*i+1] << 16) + (key[4*i+2] << 8) + key[4*i+3];
		i++;
	}
	i = Nk;
10000e98:	e0bfff17 	ldw	r2,-4(fp)
10000e9c:	e0bffa15 	stw	r2,-24(fp)
	while (i < Nb * (Nr + 1))
10000ea0:	00003106 	br	10000f68 <KeyExpansion+0x1cc>
	{
		temp = w[i-1];
10000ea4:	e0bffa17 	ldw	r2,-24(fp)
10000ea8:	10bfffc4 	addi	r2,r2,-1
10000eac:	1085883a 	add	r2,r2,r2
10000eb0:	1085883a 	add	r2,r2,r2
10000eb4:	e0fffe17 	ldw	r3,-8(fp)
10000eb8:	1885883a 	add	r2,r3,r2
10000ebc:	10800017 	ldw	r2,0(r2)
10000ec0:	e0bff915 	stw	r2,-28(fp)
		if ((i % Nk) == 0)
10000ec4:	e0bffa17 	ldw	r2,-24(fp)
10000ec8:	1009883a 	mov	r4,r2
10000ecc:	e17fff17 	ldw	r5,-4(fp)
10000ed0:	00015200 	call	10001520 <__modsi3>
10000ed4:	1000111e 	bne	r2,zero,10000f1c <KeyExpansion+0x180>
		{
			temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk - 1];
10000ed8:	e13ff917 	ldw	r4,-28(fp)
10000edc:	0000d140 	call	10000d14 <RotWord>
10000ee0:	1009883a 	mov	r4,r2
10000ee4:	0000b8c0 	call	10000b8c <SubWord>
10000ee8:	1021883a 	mov	r16,r2
10000eec:	e13ffa17 	ldw	r4,-24(fp)
10000ef0:	e17fff17 	ldw	r5,-4(fp)
10000ef4:	00014d00 	call	100014d0 <__divsi3>
10000ef8:	10bfffc4 	addi	r2,r2,-1
10000efc:	00c40074 	movhi	r3,4097
10000f00:	18cc8a04 	addi	r3,r3,12840
10000f04:	1085883a 	add	r2,r2,r2
10000f08:	1085883a 	add	r2,r2,r2
10000f0c:	1885883a 	add	r2,r3,r2
10000f10:	10800017 	ldw	r2,0(r2)
10000f14:	8084f03a 	xor	r2,r16,r2
10000f18:	e0bff915 	stw	r2,-28(fp)
		}
		w[i] = w[i-Nk] ^ temp;
10000f1c:	e0bffa17 	ldw	r2,-24(fp)
10000f20:	1085883a 	add	r2,r2,r2
10000f24:	1085883a 	add	r2,r2,r2
10000f28:	e0fffe17 	ldw	r3,-8(fp)
10000f2c:	1887883a 	add	r3,r3,r2
10000f30:	e13ffa17 	ldw	r4,-24(fp)
10000f34:	e0bfff17 	ldw	r2,-4(fp)
10000f38:	2085c83a 	sub	r2,r4,r2
10000f3c:	1085883a 	add	r2,r2,r2
10000f40:	1085883a 	add	r2,r2,r2
10000f44:	e13ffe17 	ldw	r4,-8(fp)
10000f48:	2085883a 	add	r2,r4,r2
10000f4c:	11000017 	ldw	r4,0(r2)
10000f50:	e0bff917 	ldw	r2,-28(fp)
10000f54:	2084f03a 	xor	r2,r4,r2
10000f58:	18800015 	stw	r2,0(r3)
		i++;
10000f5c:	e0bffa17 	ldw	r2,-24(fp)
10000f60:	10800044 	addi	r2,r2,1
10000f64:	e0bffa15 	stw	r2,-24(fp)
	{
		w[i] = (key[4*i] << 24) + (key[4*i+1] << 16) + (key[4*i+2] << 8) + key[4*i+3];
		i++;
	}
	i = Nk;
	while (i < Nb * (Nr + 1))
10000f68:	e0bffc17 	ldw	r2,-16(fp)
10000f6c:	10800044 	addi	r2,r2,1
10000f70:	1009883a 	mov	r4,r2
10000f74:	e17ffb17 	ldw	r5,-20(fp)
10000f78:	000158c0 	call	1000158c <__mulsi3>
10000f7c:	e0fffa17 	ldw	r3,-24(fp)
10000f80:	18bfc816 	blt	r3,r2,10000ea4 <__alt_data_end+0xf8000ea4>
			temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk - 1];
		}
		w[i] = w[i-Nk] ^ temp;
		i++;
	}
};
10000f84:	e037883a 	mov	sp,fp
10000f88:	dfc00217 	ldw	ra,8(sp)
10000f8c:	df000117 	ldw	fp,4(sp)
10000f90:	dc000017 	ldw	r16,0(sp)
10000f94:	dec00304 	addi	sp,sp,12
10000f98:	f800283a 	ret

10000f9c <main>:
#define to_sw_sig (char*) 0x00000020 // actual address here

// TODO: AES Encryption related function calls

int main()
{
10000f9c:	deffb004 	addi	sp,sp,-320
10000fa0:	dfc04f15 	stw	ra,316(sp)
10000fa4:	df004e15 	stw	fp,312(sp)
10000fa8:	df004e04 	addi	fp,sp,312
	int i;
	int Nk = 4;
10000fac:	00800104 	movi	r2,4
10000fb0:	e0bfb315 	stw	r2,-308(fp)
	unsigned char pairs_hex[16];
	unsigned char key_pairs_hex[16];
	unsigned long key_expansion[44];

	// Start with pressing reset
	*to_hw_sig = 0;
10000fb4:	00801004 	movi	r2,64
10000fb8:	10000005 	stb	zero,0(r2)
	*to_hw_port = 0;
10000fbc:	00801404 	movi	r2,80
10000fc0:	10000005 	stb	zero,0(r2)
	printf("Press reset!\n");
10000fc4:	01040074 	movhi	r4,4097
10000fc8:	210a9204 	addi	r4,r4,10824
10000fcc:	00016c40 	call	100016c4 <puts>
	while (*to_sw_sig != 3);
10000fd0:	0001883a 	nop
10000fd4:	00800804 	movi	r2,32
10000fd8:	10800003 	ldbu	r2,0(r2)
10000fdc:	10803fcc 	andi	r2,r2,255
10000fe0:	1080201c 	xori	r2,r2,128
10000fe4:	10bfe004 	addi	r2,r2,-128
10000fe8:	108000d8 	cmpnei	r2,r2,3
10000fec:	103ff91e 	bne	r2,zero,10000fd4 <__alt_data_end+0xf8000fd4>

	while (1)
	{
		*to_hw_sig = 0;
10000ff0:	00801004 	movi	r2,64
10000ff4:	10000005 	stb	zero,0(r2)
		printf("\n");
10000ff8:	01000284 	movi	r4,10
10000ffc:	00016240 	call	10001624 <putchar>

		printf("\nEnter plain text:\n");
10001000:	01040074 	movhi	r4,4097
10001004:	210a9604 	addi	r4,r4,10840
10001008:	00016c40 	call	100016c4 <puts>
		scanf ("%s", plaintext);
1000100c:	e0bfb404 	addi	r2,fp,-304
10001010:	01040074 	movhi	r4,4097
10001014:	210a9b04 	addi	r4,r4,10860
10001018:	100b883a 	mov	r5,r2
1000101c:	00016d80 	call	100016d8 <scanf>
		printf ("\n");
10001020:	01000284 	movi	r4,10
10001024:	00016240 	call	10001624 <putchar>
		printf("\nEnter key:\n");
10001028:	01040074 	movhi	r4,4097
1000102c:	210a9c04 	addi	r4,r4,10864
10001030:	00016c40 	call	100016c4 <puts>
		scanf ("%s", key);
10001034:	e0bfbc04 	addi	r2,fp,-272
10001038:	01040074 	movhi	r4,4097
1000103c:	210a9b04 	addi	r4,r4,10860
10001040:	100b883a 	mov	r5,r2
10001044:	00016d80 	call	100016d8 <scanf>
		printf ("\n");
10001048:	01000284 	movi	r4,10
1000104c:	00016240 	call	10001624 <putchar>

		// TODO: Key Expansion and AES encryption using week 1's AES algorithm.

		for (i = 0; i < 16; i++)
10001050:	e03fb215 	stw	zero,-312(fp)
10001054:	00001c06 	br	100010c8 <main+0x12c>
		{
			pairs_hex[i] = charsToHex(plaintext[2 * i], plaintext[2 * i + 1]);
10001058:	e0bfb217 	ldw	r2,-312(fp)
1000105c:	1085883a 	add	r2,r2,r2
10001060:	e0ffb404 	addi	r3,fp,-304
10001064:	1885883a 	add	r2,r3,r2
10001068:	10800003 	ldbu	r2,0(r2)
1000106c:	10c03fcc 	andi	r3,r2,255
10001070:	18c0201c 	xori	r3,r3,128
10001074:	18ffe004 	addi	r3,r3,-128
10001078:	e0bfb217 	ldw	r2,-312(fp)
1000107c:	1085883a 	add	r2,r2,r2
10001080:	10800044 	addi	r2,r2,1
10001084:	e13fb404 	addi	r4,fp,-304
10001088:	2085883a 	add	r2,r4,r2
1000108c:	10800003 	ldbu	r2,0(r2)
10001090:	10803fcc 	andi	r2,r2,255
10001094:	1080201c 	xori	r2,r2,128
10001098:	10bfe004 	addi	r2,r2,-128
1000109c:	1809883a 	mov	r4,r3
100010a0:	100b883a 	mov	r5,r2
100010a4:	0000b240 	call	10000b24 <charsToHex>
100010a8:	1007883a 	mov	r3,r2
100010ac:	e13fcc04 	addi	r4,fp,-208
100010b0:	e0bfb217 	ldw	r2,-312(fp)
100010b4:	2085883a 	add	r2,r4,r2
100010b8:	10c00005 	stb	r3,0(r2)
		scanf ("%s", key);
		printf ("\n");

		// TODO: Key Expansion and AES encryption using week 1's AES algorithm.

		for (i = 0; i < 16; i++)
100010bc:	e0bfb217 	ldw	r2,-312(fp)
100010c0:	10800044 	addi	r2,r2,1
100010c4:	e0bfb215 	stw	r2,-312(fp)
100010c8:	e0bfb217 	ldw	r2,-312(fp)
100010cc:	10800410 	cmplti	r2,r2,16
100010d0:	103fe11e 	bne	r2,zero,10001058 <__alt_data_end+0xf8001058>
		{
			pairs_hex[i] = charsToHex(plaintext[2 * i], plaintext[2 * i + 1]);
		}

		for (i = 0; i < 16; i++)
100010d4:	e03fb215 	stw	zero,-312(fp)
100010d8:	00001c06 	br	1000114c <main+0x1b0>
		{
			key_pairs_hex[i] = charsToHex(key[2 * i], key[2 * i + 1]);
100010dc:	e0bfb217 	ldw	r2,-312(fp)
100010e0:	1085883a 	add	r2,r2,r2
100010e4:	e0ffbc04 	addi	r3,fp,-272
100010e8:	1885883a 	add	r2,r3,r2
100010ec:	10800003 	ldbu	r2,0(r2)
100010f0:	10c03fcc 	andi	r3,r2,255
100010f4:	18c0201c 	xori	r3,r3,128
100010f8:	18ffe004 	addi	r3,r3,-128
100010fc:	e0bfb217 	ldw	r2,-312(fp)
10001100:	1085883a 	add	r2,r2,r2
10001104:	10800044 	addi	r2,r2,1
10001108:	e13fbc04 	addi	r4,fp,-272
1000110c:	2085883a 	add	r2,r4,r2
10001110:	10800003 	ldbu	r2,0(r2)
10001114:	10803fcc 	andi	r2,r2,255
10001118:	1080201c 	xori	r2,r2,128
1000111c:	10bfe004 	addi	r2,r2,-128
10001120:	1809883a 	mov	r4,r3
10001124:	100b883a 	mov	r5,r2
10001128:	0000b240 	call	10000b24 <charsToHex>
1000112c:	1007883a 	mov	r3,r2
10001130:	e13fd004 	addi	r4,fp,-192
10001134:	e0bfb217 	ldw	r2,-312(fp)
10001138:	2085883a 	add	r2,r4,r2
1000113c:	10c00005 	stb	r3,0(r2)
		for (i = 0; i < 16; i++)
		{
			pairs_hex[i] = charsToHex(plaintext[2 * i], plaintext[2 * i + 1]);
		}

		for (i = 0; i < 16; i++)
10001140:	e0bfb217 	ldw	r2,-312(fp)
10001144:	10800044 	addi	r2,r2,1
10001148:	e0bfb215 	stw	r2,-312(fp)
1000114c:	e0bfb217 	ldw	r2,-312(fp)
10001150:	10800410 	cmplti	r2,r2,16
10001154:	103fe11e 	bne	r2,zero,100010dc <__alt_data_end+0xf80010dc>
		{
			key_pairs_hex[i] = charsToHex(key[2 * i], key[2 * i + 1]);
		}

		KeyExpansion(key_pairs_hex, key_expansion, Nk);
10001158:	e0ffd004 	addi	r3,fp,-192
1000115c:	e0bfd404 	addi	r2,fp,-176
10001160:	1809883a 	mov	r4,r3
10001164:	100b883a 	mov	r5,r2
10001168:	e1bfb317 	ldw	r6,-308(fp)
1000116c:	0000d9c0 	call	10000d9c <KeyExpansion>

		AES(pairs_hex, encrypted_message, key_expansion);
10001170:	e13fcc04 	addi	r4,fp,-208
10001174:	e0ffc804 	addi	r3,fp,-224
10001178:	e0bfd404 	addi	r2,fp,-176
1000117c:	180b883a 	mov	r5,r3
10001180:	100d883a 	mov	r6,r2
10001184:	00001f40 	call	100001f4 <AES>
		
		// TODO: display the encrypted message.
		printf("\nEncrypted message is\n");
10001188:	01040074 	movhi	r4,4097
1000118c:	210a9f04 	addi	r4,r4,10876
10001190:	00016c40 	call	100016c4 <puts>

		for (i = 0; i < 16; i++)
10001194:	e03fb215 	stw	zero,-312(fp)
10001198:	00000c06 	br	100011cc <main+0x230>
		{
			printf("%02x", encrypted_message[i]);
1000119c:	e0ffc804 	addi	r3,fp,-224
100011a0:	e0bfb217 	ldw	r2,-312(fp)
100011a4:	1885883a 	add	r2,r3,r2
100011a8:	10800003 	ldbu	r2,0(r2)
100011ac:	10803fcc 	andi	r2,r2,255
100011b0:	01040074 	movhi	r4,4097
100011b4:	210aa504 	addi	r4,r4,10900
100011b8:	100b883a 	mov	r5,r2
100011bc:	00015e00 	call	100015e0 <printf>
		AES(pairs_hex, encrypted_message, key_expansion);
		
		// TODO: display the encrypted message.
		printf("\nEncrypted message is\n");

		for (i = 0; i < 16; i++)
100011c0:	e0bfb217 	ldw	r2,-312(fp)
100011c4:	10800044 	addi	r2,r2,1
100011c8:	e0bfb215 	stw	r2,-312(fp)
100011cc:	e0bfb217 	ldw	r2,-312(fp)
100011d0:	10800410 	cmplti	r2,r2,16
100011d4:	103ff11e 	bne	r2,zero,1000119c <__alt_data_end+0xf800119c>
		{
			printf("%02x", encrypted_message[i]);
		}
		printf("\n");
100011d8:	01000284 	movi	r4,10
100011dc:	00016240 	call	10001624 <putchar>
		
		// Transmit encrypted message to hardware side for decryption. 
		printf("\nTransmitting message...\n");
100011e0:	01040074 	movhi	r4,4097
100011e4:	210aa704 	addi	r4,r4,10908
100011e8:	00016c40 	call	100016c4 <puts>

		for (i = 0; i < 16; i++)
100011ec:	e03fb215 	stw	zero,-312(fp)
100011f0:	00001e06 	br	1000126c <main+0x2d0>
		{
			*to_hw_sig = 1;
100011f4:	00801004 	movi	r2,64
100011f8:	00c00044 	movi	r3,1
100011fc:	10c00005 	stb	r3,0(r2)
			*to_hw_port = encrypted_message[i]; // encryptedMsg is your encrypted message
10001200:	00801404 	movi	r2,80
10001204:	e13fc804 	addi	r4,fp,-224
10001208:	e0ffb217 	ldw	r3,-312(fp)
1000120c:	20c7883a 	add	r3,r4,r3
10001210:	18c00003 	ldbu	r3,0(r3)
10001214:	10c00005 	stb	r3,0(r2)
			// Consider to use charToHex() if your encrypted message is a string. 
			while (*to_sw_sig != 1);
10001218:	0001883a 	nop
1000121c:	00800804 	movi	r2,32
10001220:	10800003 	ldbu	r2,0(r2)
10001224:	10803fcc 	andi	r2,r2,255
10001228:	1080201c 	xori	r2,r2,128
1000122c:	10bfe004 	addi	r2,r2,-128
10001230:	10800058 	cmpnei	r2,r2,1
10001234:	103ff91e 	bne	r2,zero,1000121c <__alt_data_end+0xf800121c>
			*to_hw_sig = 2;
10001238:	00801004 	movi	r2,64
1000123c:	00c00084 	movi	r3,2
10001240:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 0);
10001244:	0001883a 	nop
10001248:	00800804 	movi	r2,32
1000124c:	10800003 	ldbu	r2,0(r2)
10001250:	10803fcc 	andi	r2,r2,255
10001254:	1080201c 	xori	r2,r2,128
10001258:	10bfe004 	addi	r2,r2,-128
1000125c:	103ffa1e 	bne	r2,zero,10001248 <__alt_data_end+0xf8001248>
		printf("\n");
		
		// Transmit encrypted message to hardware side for decryption. 
		printf("\nTransmitting message...\n");

		for (i = 0; i < 16; i++)
10001260:	e0bfb217 	ldw	r2,-312(fp)
10001264:	10800044 	addi	r2,r2,1
10001268:	e0bfb215 	stw	r2,-312(fp)
1000126c:	e0bfb217 	ldw	r2,-312(fp)
10001270:	10800410 	cmplti	r2,r2,16
10001274:	103fdf1e 	bne	r2,zero,100011f4 <__alt_data_end+0xf80011f4>
			// Consider to use charToHex() if your encrypted message is a string. 
			while (*to_sw_sig != 1);
			*to_hw_sig = 2;
			while (*to_sw_sig != 0);
		}
		*to_hw_sig = 0;
10001278:	00801004 	movi	r2,64
1000127c:	10000005 	stb	zero,0(r2)
		
		// Transmit encrypted message to hardware side for decryption. 
		printf("\nTransmitting key...\n");
10001280:	01040074 	movhi	r4,4097
10001284:	210aae04 	addi	r4,r4,10936
10001288:	00016c40 	call	100016c4 <puts>

		for (i = 0; i < 16; i++)
1000128c:	e03fb215 	stw	zero,-312(fp)
10001290:	00001e06 	br	1000130c <main+0x370>
		{
			*to_hw_sig = 1;
10001294:	00801004 	movi	r2,64
10001298:	00c00044 	movi	r3,1
1000129c:	10c00005 	stb	r3,0(r2)
			*to_hw_port = key_pairs_hex[i]; // encryptedMsg is your encrypted message
100012a0:	00801404 	movi	r2,80
100012a4:	e13fd004 	addi	r4,fp,-192
100012a8:	e0ffb217 	ldw	r3,-312(fp)
100012ac:	20c7883a 	add	r3,r4,r3
100012b0:	18c00003 	ldbu	r3,0(r3)
100012b4:	10c00005 	stb	r3,0(r2)
			// Consider to use charToHex() if your encrypted message is a string. 
			while (*to_sw_sig != 1);
100012b8:	0001883a 	nop
100012bc:	00800804 	movi	r2,32
100012c0:	10800003 	ldbu	r2,0(r2)
100012c4:	10803fcc 	andi	r2,r2,255
100012c8:	1080201c 	xori	r2,r2,128
100012cc:	10bfe004 	addi	r2,r2,-128
100012d0:	10800058 	cmpnei	r2,r2,1
100012d4:	103ff91e 	bne	r2,zero,100012bc <__alt_data_end+0xf80012bc>
			*to_hw_sig = 2;
100012d8:	00801004 	movi	r2,64
100012dc:	00c00084 	movi	r3,2
100012e0:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 0);
100012e4:	0001883a 	nop
100012e8:	00800804 	movi	r2,32
100012ec:	10800003 	ldbu	r2,0(r2)
100012f0:	10803fcc 	andi	r2,r2,255
100012f4:	1080201c 	xori	r2,r2,128
100012f8:	10bfe004 	addi	r2,r2,-128
100012fc:	103ffa1e 	bne	r2,zero,100012e8 <__alt_data_end+0xf80012e8>
		*to_hw_sig = 0;
		
		// Transmit encrypted message to hardware side for decryption. 
		printf("\nTransmitting key...\n");

		for (i = 0; i < 16; i++)
10001300:	e0bfb217 	ldw	r2,-312(fp)
10001304:	10800044 	addi	r2,r2,1
10001308:	e0bfb215 	stw	r2,-312(fp)
1000130c:	e0bfb217 	ldw	r2,-312(fp)
10001310:	10800410 	cmplti	r2,r2,16
10001314:	103fdf1e 	bne	r2,zero,10001294 <__alt_data_end+0xf8001294>
			// Consider to use charToHex() if your encrypted message is a string. 
			while (*to_sw_sig != 1);
			*to_hw_sig = 2;
			while (*to_sw_sig != 0);
		}
		*to_hw_sig = 0;
10001318:	00801004 	movi	r2,64
1000131c:	10000005 	stb	zero,0(r2)
		//TODO: Transmit key

		printf("\n\n");
10001320:	01040074 	movhi	r4,4097
10001324:	210ab404 	addi	r4,r4,10960
10001328:	00016c40 	call	100016c4 <puts>

		*to_hw_sig = 3;
1000132c:	00801004 	movi	r2,64
10001330:	00c000c4 	movi	r3,3
10001334:	10c00005 	stb	r3,0(r2)
		while (*to_sw_sig != 2);
10001338:	0001883a 	nop
1000133c:	00800804 	movi	r2,32
10001340:	10800003 	ldbu	r2,0(r2)
10001344:	10803fcc 	andi	r2,r2,255
10001348:	1080201c 	xori	r2,r2,128
1000134c:	10bfe004 	addi	r2,r2,-128
10001350:	10800098 	cmpnei	r2,r2,2
10001354:	103ff91e 	bne	r2,zero,1000133c <__alt_data_end+0xf800133c>
		printf("\nRetrieving message...\n");
10001358:	01040074 	movhi	r4,4097
1000135c:	210ab504 	addi	r4,r4,10964
10001360:	00016c40 	call	100016c4 <puts>
		for (i = 0; i < 16; ++i)
10001364:	e03fb215 	stw	zero,-312(fp)
10001368:	00001f06 	br	100013e8 <main+0x44c>
		{
			*to_hw_sig = 1;
1000136c:	00801004 	movi	r2,64
10001370:	00c00044 	movi	r3,1
10001374:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 1);
10001378:	0001883a 	nop
1000137c:	00800804 	movi	r2,32
10001380:	10800003 	ldbu	r2,0(r2)
10001384:	10803fcc 	andi	r2,r2,255
10001388:	1080201c 	xori	r2,r2,128
1000138c:	10bfe004 	addi	r2,r2,-128
10001390:	10800058 	cmpnei	r2,r2,1
10001394:	103ff91e 	bne	r2,zero,1000137c <__alt_data_end+0xf800137c>
			str[i] = *to_sw_port;
10001398:	00800c04 	movi	r2,48
1000139c:	10800003 	ldbu	r2,0(r2)
100013a0:	1007883a 	mov	r3,r2
100013a4:	e13fc404 	addi	r4,fp,-240
100013a8:	e0bfb217 	ldw	r2,-312(fp)
100013ac:	2085883a 	add	r2,r4,r2
100013b0:	10c00005 	stb	r3,0(r2)
			*to_hw_sig = 2;
100013b4:	00801004 	movi	r2,64
100013b8:	00c00084 	movi	r3,2
100013bc:	10c00005 	stb	r3,0(r2)
			while (*to_sw_sig != 0);
100013c0:	0001883a 	nop
100013c4:	00800804 	movi	r2,32
100013c8:	10800003 	ldbu	r2,0(r2)
100013cc:	10803fcc 	andi	r2,r2,255
100013d0:	1080201c 	xori	r2,r2,128
100013d4:	10bfe004 	addi	r2,r2,-128
100013d8:	103ffa1e 	bne	r2,zero,100013c4 <__alt_data_end+0xf80013c4>
		printf("\n\n");

		*to_hw_sig = 3;
		while (*to_sw_sig != 2);
		printf("\nRetrieving message...\n");
		for (i = 0; i < 16; ++i)
100013dc:	e0bfb217 	ldw	r2,-312(fp)
100013e0:	10800044 	addi	r2,r2,1
100013e4:	e0bfb215 	stw	r2,-312(fp)
100013e8:	e0bfb217 	ldw	r2,-312(fp)
100013ec:	10800410 	cmplti	r2,r2,16
100013f0:	103fde1e 	bne	r2,zero,1000136c <__alt_data_end+0xf800136c>
			str[i] = *to_sw_port;
			*to_hw_sig = 2;
			while (*to_sw_sig != 0);
		}

		printf("\n\n");
100013f4:	01040074 	movhi	r4,4097
100013f8:	210ab404 	addi	r4,r4,10960
100013fc:	00016c40 	call	100016c4 <puts>

		printf("Decoded message:\n");
10001400:	01040074 	movhi	r4,4097
10001404:	210abb04 	addi	r4,r4,10988
10001408:	00016c40 	call	100016c4 <puts>

		for (i = 0; i < 16; i++)
1000140c:	e03fb215 	stw	zero,-312(fp)
10001410:	00000c06 	br	10001444 <main+0x4a8>
		{
			printf("%02x", str[i]);
10001414:	e0ffc404 	addi	r3,fp,-240
10001418:	e0bfb217 	ldw	r2,-312(fp)
1000141c:	1885883a 	add	r2,r3,r2
10001420:	10800003 	ldbu	r2,0(r2)
10001424:	10803fcc 	andi	r2,r2,255
10001428:	01040074 	movhi	r4,4097
1000142c:	210aa504 	addi	r4,r4,10900
10001430:	100b883a 	mov	r5,r2
10001434:	00015e00 	call	100015e0 <printf>

		printf("\n\n");

		printf("Decoded message:\n");

		for (i = 0; i < 16; i++)
10001438:	e0bfb217 	ldw	r2,-312(fp)
1000143c:	10800044 	addi	r2,r2,1
10001440:	e0bfb215 	stw	r2,-312(fp)
10001444:	e0bfb217 	ldw	r2,-312(fp)
10001448:	10800410 	cmplti	r2,r2,16
1000144c:	103ff11e 	bne	r2,zero,10001414 <__alt_data_end+0xf8001414>
		{
			printf("%02x", str[i]);
		}
		printf("\n");
10001450:	01000284 	movi	r4,10
10001454:	00016240 	call	10001624 <putchar>
		// TODO: print decoded message
	}
10001458:	003ee506 	br	10000ff0 <__alt_data_end+0xf8000ff0>

1000145c <udivmodsi4>:
1000145c:	2005883a 	mov	r2,r4
10001460:	2900182e 	bgeu	r5,r4,100014c4 <udivmodsi4+0x68>
10001464:	28001716 	blt	r5,zero,100014c4 <udivmodsi4+0x68>
10001468:	01000804 	movi	r4,32
1000146c:	00c00044 	movi	r3,1
10001470:	00000206 	br	1000147c <udivmodsi4+0x20>
10001474:	20001126 	beq	r4,zero,100014bc <udivmodsi4+0x60>
10001478:	28000516 	blt	r5,zero,10001490 <udivmodsi4+0x34>
1000147c:	294b883a 	add	r5,r5,r5
10001480:	213fffc4 	addi	r4,r4,-1
10001484:	18c7883a 	add	r3,r3,r3
10001488:	28bffa36 	bltu	r5,r2,10001474 <__alt_data_end+0xf8001474>
1000148c:	18000b26 	beq	r3,zero,100014bc <udivmodsi4+0x60>
10001490:	0009883a 	mov	r4,zero
10001494:	11400236 	bltu	r2,r5,100014a0 <udivmodsi4+0x44>
10001498:	1145c83a 	sub	r2,r2,r5
1000149c:	20c8b03a 	or	r4,r4,r3
100014a0:	1806d07a 	srli	r3,r3,1
100014a4:	280ad07a 	srli	r5,r5,1
100014a8:	183ffa1e 	bne	r3,zero,10001494 <__alt_data_end+0xf8001494>
100014ac:	3000021e 	bne	r6,zero,100014b8 <udivmodsi4+0x5c>
100014b0:	2005883a 	mov	r2,r4
100014b4:	f800283a 	ret
100014b8:	f800283a 	ret
100014bc:	0009883a 	mov	r4,zero
100014c0:	003ffa06 	br	100014ac <__alt_data_end+0xf80014ac>
100014c4:	00c00044 	movi	r3,1
100014c8:	0009883a 	mov	r4,zero
100014cc:	003ff106 	br	10001494 <__alt_data_end+0xf8001494>

100014d0 <__divsi3>:
100014d0:	defffe04 	addi	sp,sp,-8
100014d4:	dfc00115 	stw	ra,4(sp)
100014d8:	dc000015 	stw	r16,0(sp)
100014dc:	20000a16 	blt	r4,zero,10001508 <__divsi3+0x38>
100014e0:	0021883a 	mov	r16,zero
100014e4:	28000b16 	blt	r5,zero,10001514 <__divsi3+0x44>
100014e8:	000d883a 	mov	r6,zero
100014ec:	000145c0 	call	1000145c <udivmodsi4>
100014f0:	80000126 	beq	r16,zero,100014f8 <__divsi3+0x28>
100014f4:	0085c83a 	sub	r2,zero,r2
100014f8:	dfc00117 	ldw	ra,4(sp)
100014fc:	dc000017 	ldw	r16,0(sp)
10001500:	dec00204 	addi	sp,sp,8
10001504:	f800283a 	ret
10001508:	0109c83a 	sub	r4,zero,r4
1000150c:	04000044 	movi	r16,1
10001510:	283ff50e 	bge	r5,zero,100014e8 <__alt_data_end+0xf80014e8>
10001514:	014bc83a 	sub	r5,zero,r5
10001518:	8400005c 	xori	r16,r16,1
1000151c:	003ff206 	br	100014e8 <__alt_data_end+0xf80014e8>

10001520 <__modsi3>:
10001520:	deffff04 	addi	sp,sp,-4
10001524:	dfc00015 	stw	ra,0(sp)
10001528:	20000516 	blt	r4,zero,10001540 <__modsi3+0x20>
1000152c:	28000c16 	blt	r5,zero,10001560 <__modsi3+0x40>
10001530:	01800044 	movi	r6,1
10001534:	dfc00017 	ldw	ra,0(sp)
10001538:	dec00104 	addi	sp,sp,4
1000153c:	000145c1 	jmpi	1000145c <udivmodsi4>
10001540:	0109c83a 	sub	r4,zero,r4
10001544:	28000b16 	blt	r5,zero,10001574 <__modsi3+0x54>
10001548:	01800044 	movi	r6,1
1000154c:	000145c0 	call	1000145c <udivmodsi4>
10001550:	0085c83a 	sub	r2,zero,r2
10001554:	dfc00017 	ldw	ra,0(sp)
10001558:	dec00104 	addi	sp,sp,4
1000155c:	f800283a 	ret
10001560:	014bc83a 	sub	r5,zero,r5
10001564:	01800044 	movi	r6,1
10001568:	dfc00017 	ldw	ra,0(sp)
1000156c:	dec00104 	addi	sp,sp,4
10001570:	000145c1 	jmpi	1000145c <udivmodsi4>
10001574:	014bc83a 	sub	r5,zero,r5
10001578:	003ff306 	br	10001548 <__alt_data_end+0xf8001548>

1000157c <__udivsi3>:
1000157c:	000d883a 	mov	r6,zero
10001580:	000145c1 	jmpi	1000145c <udivmodsi4>

10001584 <__umodsi3>:
10001584:	01800044 	movi	r6,1
10001588:	000145c1 	jmpi	1000145c <udivmodsi4>

1000158c <__mulsi3>:
1000158c:	0005883a 	mov	r2,zero
10001590:	20000726 	beq	r4,zero,100015b0 <__mulsi3+0x24>
10001594:	20c0004c 	andi	r3,r4,1
10001598:	2008d07a 	srli	r4,r4,1
1000159c:	18000126 	beq	r3,zero,100015a4 <__mulsi3+0x18>
100015a0:	1145883a 	add	r2,r2,r5
100015a4:	294b883a 	add	r5,r5,r5
100015a8:	203ffa1e 	bne	r4,zero,10001594 <__alt_data_end+0xf8001594>
100015ac:	f800283a 	ret
100015b0:	f800283a 	ret

100015b4 <_printf_r>:
100015b4:	defffd04 	addi	sp,sp,-12
100015b8:	dfc00015 	stw	ra,0(sp)
100015bc:	d9800115 	stw	r6,4(sp)
100015c0:	d9c00215 	stw	r7,8(sp)
100015c4:	280d883a 	mov	r6,r5
100015c8:	21400217 	ldw	r5,8(r4)
100015cc:	d9c00104 	addi	r7,sp,4
100015d0:	00018040 	call	10001804 <___vfprintf_internal_r>
100015d4:	dfc00017 	ldw	ra,0(sp)
100015d8:	dec00304 	addi	sp,sp,12
100015dc:	f800283a 	ret

100015e0 <printf>:
100015e0:	defffc04 	addi	sp,sp,-16
100015e4:	dfc00015 	stw	ra,0(sp)
100015e8:	d9400115 	stw	r5,4(sp)
100015ec:	d9800215 	stw	r6,8(sp)
100015f0:	d9c00315 	stw	r7,12(sp)
100015f4:	00840074 	movhi	r2,4097
100015f8:	10936704 	addi	r2,r2,19868
100015fc:	10800017 	ldw	r2,0(r2)
10001600:	200b883a 	mov	r5,r4
10001604:	d9800104 	addi	r6,sp,4
10001608:	11000217 	ldw	r4,8(r2)
1000160c:	00036800 	call	10003680 <__vfprintf_internal>
10001610:	dfc00017 	ldw	ra,0(sp)
10001614:	dec00404 	addi	sp,sp,16
10001618:	f800283a 	ret

1000161c <_putchar_r>:
1000161c:	21800217 	ldw	r6,8(r4)
10001620:	00099e01 	jmpi	100099e0 <_putc_r>

10001624 <putchar>:
10001624:	00840074 	movhi	r2,4097
10001628:	10936704 	addi	r2,r2,19868
1000162c:	10800017 	ldw	r2,0(r2)
10001630:	200b883a 	mov	r5,r4
10001634:	11800217 	ldw	r6,8(r2)
10001638:	1009883a 	mov	r4,r2
1000163c:	00099e01 	jmpi	100099e0 <_putc_r>

10001640 <_puts_r>:
10001640:	defff604 	addi	sp,sp,-40
10001644:	dc400815 	stw	r17,32(sp)
10001648:	2023883a 	mov	r17,r4
1000164c:	2809883a 	mov	r4,r5
10001650:	dc000715 	stw	r16,28(sp)
10001654:	dfc00915 	stw	ra,36(sp)
10001658:	2821883a 	mov	r16,r5
1000165c:	00017440 	call	10001744 <strlen>
10001660:	10c00044 	addi	r3,r2,1
10001664:	d8800115 	stw	r2,4(sp)
10001668:	89400217 	ldw	r5,8(r17)
1000166c:	00840074 	movhi	r2,4097
10001670:	108ac004 	addi	r2,r2,11008
10001674:	d8800215 	stw	r2,8(sp)
10001678:	00800044 	movi	r2,1
1000167c:	d8800315 	stw	r2,12(sp)
10001680:	8809883a 	mov	r4,r17
10001684:	00800084 	movi	r2,2
10001688:	d9800404 	addi	r6,sp,16
1000168c:	dc000015 	stw	r16,0(sp)
10001690:	d8c00615 	stw	r3,24(sp)
10001694:	dec00415 	stw	sp,16(sp)
10001698:	d8800515 	stw	r2,20(sp)
1000169c:	00073840 	call	10007384 <__sfvwrite_r>
100016a0:	1000061e 	bne	r2,zero,100016bc <_puts_r+0x7c>
100016a4:	00800284 	movi	r2,10
100016a8:	dfc00917 	ldw	ra,36(sp)
100016ac:	dc400817 	ldw	r17,32(sp)
100016b0:	dc000717 	ldw	r16,28(sp)
100016b4:	dec00a04 	addi	sp,sp,40
100016b8:	f800283a 	ret
100016bc:	00bfffc4 	movi	r2,-1
100016c0:	003ff906 	br	100016a8 <__alt_data_end+0xf80016a8>

100016c4 <puts>:
100016c4:	00840074 	movhi	r2,4097
100016c8:	10936704 	addi	r2,r2,19868
100016cc:	200b883a 	mov	r5,r4
100016d0:	11000017 	ldw	r4,0(r2)
100016d4:	00016401 	jmpi	10001640 <_puts_r>

100016d8 <scanf>:
100016d8:	defffc04 	addi	sp,sp,-16
100016dc:	dfc00015 	stw	ra,0(sp)
100016e0:	d9400115 	stw	r5,4(sp)
100016e4:	d9800215 	stw	r6,8(sp)
100016e8:	d9c00315 	stw	r7,12(sp)
100016ec:	00840074 	movhi	r2,4097
100016f0:	10936704 	addi	r2,r2,19868
100016f4:	10800017 	ldw	r2,0(r2)
100016f8:	200d883a 	mov	r6,r4
100016fc:	d9c00104 	addi	r7,sp,4
10001700:	11400117 	ldw	r5,4(r2)
10001704:	1009883a 	mov	r4,r2
10001708:	00036a40 	call	100036a4 <__svfscanf_r>
1000170c:	dfc00017 	ldw	ra,0(sp)
10001710:	dec00404 	addi	sp,sp,16
10001714:	f800283a 	ret

10001718 <_scanf_r>:
10001718:	defffd04 	addi	sp,sp,-12
1000171c:	dfc00015 	stw	ra,0(sp)
10001720:	d9800115 	stw	r6,4(sp)
10001724:	d9c00215 	stw	r7,8(sp)
10001728:	280d883a 	mov	r6,r5
1000172c:	21400117 	ldw	r5,4(r4)
10001730:	d9c00104 	addi	r7,sp,4
10001734:	00036a40 	call	100036a4 <__svfscanf_r>
10001738:	dfc00017 	ldw	ra,0(sp)
1000173c:	dec00304 	addi	sp,sp,12
10001740:	f800283a 	ret

10001744 <strlen>:
10001744:	208000cc 	andi	r2,r4,3
10001748:	10001f1e 	bne	r2,zero,100017c8 <strlen+0x84>
1000174c:	20800017 	ldw	r2,0(r4)
10001750:	01ffbff4 	movhi	r7,65279
10001754:	39ffbfc4 	addi	r7,r7,-257
10001758:	01a02074 	movhi	r6,32897
1000175c:	31a02004 	addi	r6,r6,-32640
10001760:	11c7883a 	add	r3,r2,r7
10001764:	0084303a 	nor	r2,zero,r2
10001768:	1886703a 	and	r3,r3,r2
1000176c:	1986703a 	and	r3,r3,r6
10001770:	2005883a 	mov	r2,r4
10001774:	1800101e 	bne	r3,zero,100017b8 <strlen+0x74>
10001778:	10800104 	addi	r2,r2,4
1000177c:	10c00017 	ldw	r3,0(r2)
10001780:	19cb883a 	add	r5,r3,r7
10001784:	00c6303a 	nor	r3,zero,r3
10001788:	28c6703a 	and	r3,r5,r3
1000178c:	1986703a 	and	r3,r3,r6
10001790:	1800091e 	bne	r3,zero,100017b8 <strlen+0x74>
10001794:	10800104 	addi	r2,r2,4
10001798:	10c00017 	ldw	r3,0(r2)
1000179c:	19cb883a 	add	r5,r3,r7
100017a0:	00c6303a 	nor	r3,zero,r3
100017a4:	28c6703a 	and	r3,r5,r3
100017a8:	1986703a 	and	r3,r3,r6
100017ac:	183ff226 	beq	r3,zero,10001778 <__alt_data_end+0xf8001778>
100017b0:	00000106 	br	100017b8 <strlen+0x74>
100017b4:	10800044 	addi	r2,r2,1
100017b8:	10c00007 	ldb	r3,0(r2)
100017bc:	183ffd1e 	bne	r3,zero,100017b4 <__alt_data_end+0xf80017b4>
100017c0:	1105c83a 	sub	r2,r2,r4
100017c4:	f800283a 	ret
100017c8:	2005883a 	mov	r2,r4
100017cc:	003ffa06 	br	100017b8 <__alt_data_end+0xf80017b8>

100017d0 <__sprint_r>:
100017d0:	30800217 	ldw	r2,8(r6)
100017d4:	defffe04 	addi	sp,sp,-8
100017d8:	dc000015 	stw	r16,0(sp)
100017dc:	dfc00115 	stw	ra,4(sp)
100017e0:	3021883a 	mov	r16,r6
100017e4:	10000226 	beq	r2,zero,100017f0 <__sprint_r+0x20>
100017e8:	00073840 	call	10007384 <__sfvwrite_r>
100017ec:	80000215 	stw	zero,8(r16)
100017f0:	80000115 	stw	zero,4(r16)
100017f4:	dfc00117 	ldw	ra,4(sp)
100017f8:	dc000017 	ldw	r16,0(sp)
100017fc:	dec00204 	addi	sp,sp,8
10001800:	f800283a 	ret

10001804 <___vfprintf_internal_r>:
10001804:	defeb904 	addi	sp,sp,-1308
10001808:	dc013d15 	stw	r16,1268(sp)
1000180c:	d9013015 	stw	r4,1216(sp)
10001810:	dfc14615 	stw	ra,1304(sp)
10001814:	df014515 	stw	fp,1300(sp)
10001818:	ddc14415 	stw	r23,1296(sp)
1000181c:	dd814315 	stw	r22,1292(sp)
10001820:	dd414215 	stw	r21,1288(sp)
10001824:	dd014115 	stw	r20,1284(sp)
10001828:	dcc14015 	stw	r19,1280(sp)
1000182c:	dc813f15 	stw	r18,1276(sp)
10001830:	dc413e15 	stw	r17,1272(sp)
10001834:	d9412915 	stw	r5,1188(sp)
10001838:	3021883a 	mov	r16,r6
1000183c:	d9c12d15 	stw	r7,1204(sp)
10001840:	0007aa80 	call	10007aa8 <_localeconv_r>
10001844:	10800017 	ldw	r2,0(r2)
10001848:	d9013017 	ldw	r4,1216(sp)
1000184c:	d8013315 	stw	zero,1228(sp)
10001850:	d8813715 	stw	r2,1244(sp)
10001854:	d8013415 	stw	zero,1232(sp)
10001858:	20000226 	beq	r4,zero,10001864 <___vfprintf_internal_r+0x60>
1000185c:	20800e17 	ldw	r2,56(r4)
10001860:	10014b26 	beq	r2,zero,10001d90 <___vfprintf_internal_r+0x58c>
10001864:	d8c12917 	ldw	r3,1188(sp)
10001868:	1880030b 	ldhu	r2,12(r3)
1000186c:	10c0020c 	andi	r3,r2,8
10001870:	18ffffcc 	andi	r3,r3,65535
10001874:	18e0001c 	xori	r3,r3,32768
10001878:	18e00004 	addi	r3,r3,-32768
1000187c:	1800ed26 	beq	r3,zero,10001c34 <___vfprintf_internal_r+0x430>
10001880:	d9012917 	ldw	r4,1188(sp)
10001884:	20c00417 	ldw	r3,16(r4)
10001888:	1800ea26 	beq	r3,zero,10001c34 <___vfprintf_internal_r+0x430>
1000188c:	1100068c 	andi	r4,r2,26
10001890:	00c00284 	movi	r3,10
10001894:	20c0f026 	beq	r4,r3,10001c58 <___vfprintf_internal_r+0x454>
10001898:	d9010dc4 	addi	r4,sp,1079
1000189c:	d8810e04 	addi	r2,sp,1080
100018a0:	dc413017 	ldw	r17,1216(sp)
100018a4:	d8c00404 	addi	r3,sp,16
100018a8:	d9012615 	stw	r4,1176(sp)
100018ac:	1109c83a 	sub	r4,r2,r4
100018b0:	d8812715 	stw	r2,1180(sp)
100018b4:	d8c11b15 	stw	r3,1132(sp)
100018b8:	d8011d15 	stw	zero,1140(sp)
100018bc:	d8011c15 	stw	zero,1136(sp)
100018c0:	802b883a 	mov	r21,r16
100018c4:	d8013215 	stw	zero,1224(sp)
100018c8:	d8013615 	stw	zero,1240(sp)
100018cc:	d8013515 	stw	zero,1236(sp)
100018d0:	d8012c15 	stw	zero,1200(sp)
100018d4:	1813883a 	mov	r9,r3
100018d8:	d9013915 	stw	r4,1252(sp)
100018dc:	a8800007 	ldb	r2,0(r21)
100018e0:	1002f326 	beq	r2,zero,100024b0 <___vfprintf_internal_r+0xcac>
100018e4:	00c00944 	movi	r3,37
100018e8:	a825883a 	mov	r18,r21
100018ec:	10c0021e 	bne	r2,r3,100018f8 <___vfprintf_internal_r+0xf4>
100018f0:	00001406 	br	10001944 <___vfprintf_internal_r+0x140>
100018f4:	10c00326 	beq	r2,r3,10001904 <___vfprintf_internal_r+0x100>
100018f8:	94800044 	addi	r18,r18,1
100018fc:	90800007 	ldb	r2,0(r18)
10001900:	103ffc1e 	bne	r2,zero,100018f4 <__alt_data_end+0xf80018f4>
10001904:	9561c83a 	sub	r16,r18,r21
10001908:	80000e26 	beq	r16,zero,10001944 <___vfprintf_internal_r+0x140>
1000190c:	da011d17 	ldw	r8,1140(sp)
10001910:	d8c11c17 	ldw	r3,1136(sp)
10001914:	4d400015 	stw	r21,0(r9)
10001918:	4c000115 	stw	r16,4(r9)
1000191c:	4411883a 	add	r8,r8,r16
10001920:	18c00044 	addi	r3,r3,1
10001924:	da011d15 	stw	r8,1140(sp)
10001928:	d8c11c15 	stw	r3,1136(sp)
1000192c:	008001c4 	movi	r2,7
10001930:	10c11016 	blt	r2,r3,10001d74 <___vfprintf_internal_r+0x570>
10001934:	4a400204 	addi	r9,r9,8
10001938:	d8812c17 	ldw	r2,1200(sp)
1000193c:	1405883a 	add	r2,r2,r16
10001940:	d8812c15 	stw	r2,1200(sp)
10001944:	90800007 	ldb	r2,0(r18)
10001948:	1000ee26 	beq	r2,zero,10001d04 <___vfprintf_internal_r+0x500>
1000194c:	95400044 	addi	r21,r18,1
10001950:	94800047 	ldb	r18,1(r18)
10001954:	073fffc4 	movi	fp,-1
10001958:	e007883a 	mov	r3,fp
1000195c:	d8012585 	stb	zero,1174(sp)
10001960:	d8012e15 	stw	zero,1208(sp)
10001964:	0021883a 	mov	r16,zero
10001968:	05001604 	movi	r20,88
1000196c:	04c00244 	movi	r19,9
10001970:	4839883a 	mov	fp,r9
10001974:	ad400044 	addi	r21,r21,1
10001978:	90bff804 	addi	r2,r18,-32
1000197c:	a080462e 	bgeu	r20,r2,10001a98 <___vfprintf_internal_r+0x294>
10001980:	e013883a 	mov	r9,fp
10001984:	9000df26 	beq	r18,zero,10001d04 <___vfprintf_internal_r+0x500>
10001988:	00c00044 	movi	r3,1
1000198c:	d8c12815 	stw	r3,1184(sp)
10001990:	dc810405 	stb	r18,1040(sp)
10001994:	d8012585 	stb	zero,1174(sp)
10001998:	d8c12b15 	stw	r3,1196(sp)
1000199c:	dcc10404 	addi	r19,sp,1040
100019a0:	d8013115 	stw	zero,1220(sp)
100019a4:	80c0008c 	andi	r3,r16,2
100019a8:	d8c12a15 	stw	r3,1192(sp)
100019ac:	18000326 	beq	r3,zero,100019bc <___vfprintf_internal_r+0x1b8>
100019b0:	d8c12817 	ldw	r3,1184(sp)
100019b4:	18c00084 	addi	r3,r3,2
100019b8:	d8c12815 	stw	r3,1184(sp)
100019bc:	80c0210c 	andi	r3,r16,132
100019c0:	d8c12f15 	stw	r3,1212(sp)
100019c4:	1802251e 	bne	r3,zero,1000225c <___vfprintf_internal_r+0xa58>
100019c8:	d9012e17 	ldw	r4,1208(sp)
100019cc:	d8c12817 	ldw	r3,1184(sp)
100019d0:	20edc83a 	sub	r22,r4,r3
100019d4:	0582210e 	bge	zero,r22,1000225c <___vfprintf_internal_r+0xa58>
100019d8:	02800404 	movi	r10,16
100019dc:	da011d17 	ldw	r8,1140(sp)
100019e0:	d8c11c17 	ldw	r3,1136(sp)
100019e4:	05c40074 	movhi	r23,4097
100019e8:	bdcad184 	addi	r23,r23,11078
100019ec:	5580200e 	bge	r10,r22,10001a70 <___vfprintf_internal_r+0x26c>
100019f0:	dc813815 	stw	r18,1248(sp)
100019f4:	5039883a 	mov	fp,r10
100019f8:	b825883a 	mov	r18,r23
100019fc:	050001c4 	movi	r20,7
10001a00:	b02f883a 	mov	r23,r22
10001a04:	802d883a 	mov	r22,r16
10001a08:	dc012917 	ldw	r16,1188(sp)
10001a0c:	00000306 	br	10001a1c <___vfprintf_internal_r+0x218>
10001a10:	bdfffc04 	addi	r23,r23,-16
10001a14:	4a400204 	addi	r9,r9,8
10001a18:	e5c0110e 	bge	fp,r23,10001a60 <___vfprintf_internal_r+0x25c>
10001a1c:	4c800015 	stw	r18,0(r9)
10001a20:	4f000115 	stw	fp,4(r9)
10001a24:	42000404 	addi	r8,r8,16
10001a28:	18c00044 	addi	r3,r3,1
10001a2c:	da011d15 	stw	r8,1140(sp)
10001a30:	d8c11c15 	stw	r3,1136(sp)
10001a34:	a0fff60e 	bge	r20,r3,10001a10 <__alt_data_end+0xf8001a10>
10001a38:	8809883a 	mov	r4,r17
10001a3c:	800b883a 	mov	r5,r16
10001a40:	d9811b04 	addi	r6,sp,1132
10001a44:	00017d00 	call	100017d0 <__sprint_r>
10001a48:	1000b41e 	bne	r2,zero,10001d1c <___vfprintf_internal_r+0x518>
10001a4c:	bdfffc04 	addi	r23,r23,-16
10001a50:	da011d17 	ldw	r8,1140(sp)
10001a54:	d8c11c17 	ldw	r3,1136(sp)
10001a58:	da400404 	addi	r9,sp,16
10001a5c:	e5ffef16 	blt	fp,r23,10001a1c <__alt_data_end+0xf8001a1c>
10001a60:	b021883a 	mov	r16,r22
10001a64:	b82d883a 	mov	r22,r23
10001a68:	902f883a 	mov	r23,r18
10001a6c:	dc813817 	ldw	r18,1248(sp)
10001a70:	4dc00015 	stw	r23,0(r9)
10001a74:	4d800115 	stw	r22,4(r9)
10001a78:	4591883a 	add	r8,r8,r22
10001a7c:	18c00044 	addi	r3,r3,1
10001a80:	da011d15 	stw	r8,1140(sp)
10001a84:	d8c11c15 	stw	r3,1136(sp)
10001a88:	008001c4 	movi	r2,7
10001a8c:	10c3fe16 	blt	r2,r3,10002a88 <___vfprintf_internal_r+0x1284>
10001a90:	4a400204 	addi	r9,r9,8
10001a94:	0001f306 	br	10002264 <___vfprintf_internal_r+0xa60>
10001a98:	1085883a 	add	r2,r2,r2
10001a9c:	1085883a 	add	r2,r2,r2
10001aa0:	01040034 	movhi	r4,4096
10001aa4:	2106ad04 	addi	r4,r4,6836
10001aa8:	1105883a 	add	r2,r2,r4
10001aac:	10800017 	ldw	r2,0(r2)
10001ab0:	1000683a 	jmp	r2
10001ab4:	10002190 	cmplti	zero,r2,134
10001ab8:	10001980 	call	11000198 <_gp+0xfe3404>
10001abc:	10001980 	call	11000198 <_gp+0xfe3404>
10001ac0:	100021a8 	cmpgeui	zero,r2,134
10001ac4:	10001980 	call	11000198 <_gp+0xfe3404>
10001ac8:	10001980 	call	11000198 <_gp+0xfe3404>
10001acc:	10001980 	call	11000198 <_gp+0xfe3404>
10001ad0:	10001980 	call	11000198 <_gp+0xfe3404>
10001ad4:	10001980 	call	11000198 <_gp+0xfe3404>
10001ad8:	10001980 	call	11000198 <_gp+0xfe3404>
10001adc:	10002060 	cmpeqi	zero,r2,129
10001ae0:	100021f4 	orhi	zero,r2,135
10001ae4:	10001980 	call	11000198 <_gp+0xfe3404>
10001ae8:	10001c28 	cmpgeui	zero,r2,112
10001aec:	10001fc8 	cmpgei	zero,r2,127
10001af0:	10001980 	call	11000198 <_gp+0xfe3404>
10001af4:	100021b4 	orhi	zero,r2,134
10001af8:	100021c0 	call	1100021c <_gp+0xfe3488>
10001afc:	100021c0 	call	1100021c <_gp+0xfe3488>
10001b00:	100021c0 	call	1100021c <_gp+0xfe3488>
10001b04:	100021c0 	call	1100021c <_gp+0xfe3488>
10001b08:	100021c0 	call	1100021c <_gp+0xfe3488>
10001b0c:	100021c0 	call	1100021c <_gp+0xfe3488>
10001b10:	100021c0 	call	1100021c <_gp+0xfe3488>
10001b14:	100021c0 	call	1100021c <_gp+0xfe3488>
10001b18:	100021c0 	call	1100021c <_gp+0xfe3488>
10001b1c:	10001980 	call	11000198 <_gp+0xfe3404>
10001b20:	10001980 	call	11000198 <_gp+0xfe3404>
10001b24:	10001980 	call	11000198 <_gp+0xfe3404>
10001b28:	10001980 	call	11000198 <_gp+0xfe3404>
10001b2c:	10001980 	call	11000198 <_gp+0xfe3404>
10001b30:	10001980 	call	11000198 <_gp+0xfe3404>
10001b34:	10001980 	call	11000198 <_gp+0xfe3404>
10001b38:	10001980 	call	11000198 <_gp+0xfe3404>
10001b3c:	10001980 	call	11000198 <_gp+0xfe3404>
10001b40:	10001980 	call	11000198 <_gp+0xfe3404>
10001b44:	10001d98 	cmpnei	zero,r2,118
10001b48:	10001e58 	cmpnei	zero,r2,121
10001b4c:	10001980 	call	11000198 <_gp+0xfe3404>
10001b50:	10001e58 	cmpnei	zero,r2,121
10001b54:	10001980 	call	11000198 <_gp+0xfe3404>
10001b58:	10001980 	call	11000198 <_gp+0xfe3404>
10001b5c:	10001980 	call	11000198 <_gp+0xfe3404>
10001b60:	10001980 	call	11000198 <_gp+0xfe3404>
10001b64:	10001eec 	andhi	zero,r2,123
10001b68:	10001980 	call	11000198 <_gp+0xfe3404>
10001b6c:	10001980 	call	11000198 <_gp+0xfe3404>
10001b70:	10001ef8 	rdprs	zero,r2,123
10001b74:	10001980 	call	11000198 <_gp+0xfe3404>
10001b78:	10001980 	call	11000198 <_gp+0xfe3404>
10001b7c:	10001980 	call	11000198 <_gp+0xfe3404>
10001b80:	10001980 	call	11000198 <_gp+0xfe3404>
10001b84:	10001980 	call	11000198 <_gp+0xfe3404>
10001b88:	10001f30 	cmpltui	zero,r2,124
10001b8c:	10001980 	call	11000198 <_gp+0xfe3404>
10001b90:	10001980 	call	11000198 <_gp+0xfe3404>
10001b94:	10001f6c 	andhi	zero,r2,125
10001b98:	10001980 	call	11000198 <_gp+0xfe3404>
10001b9c:	10001980 	call	11000198 <_gp+0xfe3404>
10001ba0:	10001980 	call	11000198 <_gp+0xfe3404>
10001ba4:	10001980 	call	11000198 <_gp+0xfe3404>
10001ba8:	10001980 	call	11000198 <_gp+0xfe3404>
10001bac:	10001980 	call	11000198 <_gp+0xfe3404>
10001bb0:	10001980 	call	11000198 <_gp+0xfe3404>
10001bb4:	10001980 	call	11000198 <_gp+0xfe3404>
10001bb8:	10001980 	call	11000198 <_gp+0xfe3404>
10001bbc:	10001980 	call	11000198 <_gp+0xfe3404>
10001bc0:	10002204 	addi	zero,r2,136
10001bc4:	10002238 	rdprs	zero,r2,136
10001bc8:	10001e58 	cmpnei	zero,r2,121
10001bcc:	10001e58 	cmpnei	zero,r2,121
10001bd0:	10001e58 	cmpnei	zero,r2,121
10001bd4:	10002184 	addi	zero,r2,134
10001bd8:	10002238 	rdprs	zero,r2,136
10001bdc:	10001980 	call	11000198 <_gp+0xfe3404>
10001be0:	10001980 	call	11000198 <_gp+0xfe3404>
10001be4:	10002010 	cmplti	zero,r2,128
10001be8:	10001980 	call	11000198 <_gp+0xfe3404>
10001bec:	10002028 	cmpgeui	zero,r2,128
10001bf0:	10002244 	addi	zero,r2,137
10001bf4:	10002088 	cmpgei	zero,r2,130
10001bf8:	100020d8 	cmpnei	zero,r2,131
10001bfc:	10001980 	call	11000198 <_gp+0xfe3404>
10001c00:	100020e4 	muli	zero,r2,131
10001c04:	10001980 	call	11000198 <_gp+0xfe3404>
10001c08:	10002250 	cmplti	zero,r2,137
10001c0c:	10001980 	call	11000198 <_gp+0xfe3404>
10001c10:	10001980 	call	11000198 <_gp+0xfe3404>
10001c14:	10002148 	cmpgei	zero,r2,133
10001c18:	d9012e17 	ldw	r4,1208(sp)
10001c1c:	d8812d15 	stw	r2,1204(sp)
10001c20:	0109c83a 	sub	r4,zero,r4
10001c24:	d9012e15 	stw	r4,1208(sp)
10001c28:	84000114 	ori	r16,r16,4
10001c2c:	ac800007 	ldb	r18,0(r21)
10001c30:	003f5006 	br	10001974 <__alt_data_end+0xf8001974>
10001c34:	d9013017 	ldw	r4,1216(sp)
10001c38:	d9412917 	ldw	r5,1188(sp)
10001c3c:	0004e2c0 	call	10004e2c <__swsetup_r>
10001c40:	10003d1e 	bne	r2,zero,10001d38 <___vfprintf_internal_r+0x534>
10001c44:	d8c12917 	ldw	r3,1188(sp)
10001c48:	1880030b 	ldhu	r2,12(r3)
10001c4c:	00c00284 	movi	r3,10
10001c50:	1100068c 	andi	r4,r2,26
10001c54:	20ff101e 	bne	r4,r3,10001898 <__alt_data_end+0xf8001898>
10001c58:	d9012917 	ldw	r4,1188(sp)
10001c5c:	20c0038b 	ldhu	r3,14(r4)
10001c60:	193fffcc 	andi	r4,r3,65535
10001c64:	2120001c 	xori	r4,r4,32768
10001c68:	21200004 	addi	r4,r4,-32768
10001c6c:	203f0a16 	blt	r4,zero,10001898 <__alt_data_end+0xf8001898>
10001c70:	d9012917 	ldw	r4,1188(sp)
10001c74:	d9c12d17 	ldw	r7,1204(sp)
10001c78:	10bfff4c 	andi	r2,r2,65533
10001c7c:	22800717 	ldw	r10,28(r4)
10001c80:	22400917 	ldw	r9,36(r4)
10001c84:	d9013017 	ldw	r4,1216(sp)
10001c88:	02010004 	movi	r8,1024
10001c8c:	d881070d 	sth	r2,1052(sp)
10001c90:	d9410404 	addi	r5,sp,1040
10001c94:	d8800404 	addi	r2,sp,16
10001c98:	800d883a 	mov	r6,r16
10001c9c:	d8c1078d 	sth	r3,1054(sp)
10001ca0:	da810b15 	stw	r10,1068(sp)
10001ca4:	da410d15 	stw	r9,1076(sp)
10001ca8:	d8810415 	stw	r2,1040(sp)
10001cac:	d8810815 	stw	r2,1056(sp)
10001cb0:	da010615 	stw	r8,1048(sp)
10001cb4:	da010915 	stw	r8,1060(sp)
10001cb8:	d8010a15 	stw	zero,1064(sp)
10001cbc:	00018040 	call	10001804 <___vfprintf_internal_r>
10001cc0:	d8812c15 	stw	r2,1200(sp)
10001cc4:	10000416 	blt	r2,zero,10001cd8 <___vfprintf_internal_r+0x4d4>
10001cc8:	d9013017 	ldw	r4,1216(sp)
10001ccc:	d9410404 	addi	r5,sp,1040
10001cd0:	00067f80 	call	100067f8 <_fflush_r>
10001cd4:	1006501e 	bne	r2,zero,10003618 <___vfprintf_internal_r+0x1e14>
10001cd8:	d881070b 	ldhu	r2,1052(sp)
10001cdc:	1080100c 	andi	r2,r2,64
10001ce0:	10bfffcc 	andi	r2,r2,65535
10001ce4:	10a0001c 	xori	r2,r2,32768
10001ce8:	10a00004 	addi	r2,r2,-32768
10001cec:	10001426 	beq	r2,zero,10001d40 <___vfprintf_internal_r+0x53c>
10001cf0:	d8c12917 	ldw	r3,1188(sp)
10001cf4:	1880030b 	ldhu	r2,12(r3)
10001cf8:	10801014 	ori	r2,r2,64
10001cfc:	1880030d 	sth	r2,12(r3)
10001d00:	00000f06 	br	10001d40 <___vfprintf_internal_r+0x53c>
10001d04:	d8811d17 	ldw	r2,1140(sp)
10001d08:	10000426 	beq	r2,zero,10001d1c <___vfprintf_internal_r+0x518>
10001d0c:	d9013017 	ldw	r4,1216(sp)
10001d10:	d9412917 	ldw	r5,1188(sp)
10001d14:	d9811b04 	addi	r6,sp,1132
10001d18:	00017d00 	call	100017d0 <__sprint_r>
10001d1c:	d8c12917 	ldw	r3,1188(sp)
10001d20:	1880030b 	ldhu	r2,12(r3)
10001d24:	1080100c 	andi	r2,r2,64
10001d28:	10bfffcc 	andi	r2,r2,65535
10001d2c:	10a0001c 	xori	r2,r2,32768
10001d30:	10a00004 	addi	r2,r2,-32768
10001d34:	10000226 	beq	r2,zero,10001d40 <___vfprintf_internal_r+0x53c>
10001d38:	00bfffc4 	movi	r2,-1
10001d3c:	d8812c15 	stw	r2,1200(sp)
10001d40:	d8812c17 	ldw	r2,1200(sp)
10001d44:	dfc14617 	ldw	ra,1304(sp)
10001d48:	df014517 	ldw	fp,1300(sp)
10001d4c:	ddc14417 	ldw	r23,1296(sp)
10001d50:	dd814317 	ldw	r22,1292(sp)
10001d54:	dd414217 	ldw	r21,1288(sp)
10001d58:	dd014117 	ldw	r20,1284(sp)
10001d5c:	dcc14017 	ldw	r19,1280(sp)
10001d60:	dc813f17 	ldw	r18,1276(sp)
10001d64:	dc413e17 	ldw	r17,1272(sp)
10001d68:	dc013d17 	ldw	r16,1268(sp)
10001d6c:	dec14704 	addi	sp,sp,1308
10001d70:	f800283a 	ret
10001d74:	d9412917 	ldw	r5,1188(sp)
10001d78:	8809883a 	mov	r4,r17
10001d7c:	d9811b04 	addi	r6,sp,1132
10001d80:	00017d00 	call	100017d0 <__sprint_r>
10001d84:	103fe51e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10001d88:	da400404 	addi	r9,sp,16
10001d8c:	003eea06 	br	10001938 <__alt_data_end+0xf8001938>
10001d90:	0006ab40 	call	10006ab4 <__sinit>
10001d94:	003eb306 	br	10001864 <__alt_data_end+0xf8001864>
10001d98:	e013883a 	mov	r9,fp
10001d9c:	84000414 	ori	r16,r16,16
10001da0:	1839883a 	mov	fp,r3
10001da4:	8080080c 	andi	r2,r16,32
10001da8:	10034426 	beq	r2,zero,10002abc <___vfprintf_internal_r+0x12b8>
10001dac:	d8c12d17 	ldw	r3,1204(sp)
10001db0:	18800117 	ldw	r2,4(r3)
10001db4:	1dc00017 	ldw	r23,0(r3)
10001db8:	18c00204 	addi	r3,r3,8
10001dbc:	d8c12d15 	stw	r3,1204(sp)
10001dc0:	102d883a 	mov	r22,r2
10001dc4:	1003020e 	bge	r2,zero,100029d0 <___vfprintf_internal_r+0x11cc>
10001dc8:	05efc83a 	sub	r23,zero,r23
10001dcc:	b804c03a 	cmpne	r2,r23,zero
10001dd0:	05adc83a 	sub	r22,zero,r22
10001dd4:	b0adc83a 	sub	r22,r22,r2
10001dd8:	00800b44 	movi	r2,45
10001ddc:	d8812585 	stb	r2,1174(sp)
10001de0:	00c00044 	movi	r3,1
10001de4:	bd84b03a 	or	r2,r23,r22
10001de8:	e0000216 	blt	fp,zero,10001df4 <___vfprintf_internal_r+0x5f0>
10001dec:	013fdfc4 	movi	r4,-129
10001df0:	8120703a 	and	r16,r16,r4
10001df4:	1001cc1e 	bne	r2,zero,10002528 <___vfprintf_internal_r+0xd24>
10001df8:	e001cb1e 	bne	fp,zero,10002528 <___vfprintf_internal_r+0xd24>
10001dfc:	18c03fcc 	andi	r3,r3,255
10001e00:	1802ca1e 	bne	r3,zero,1000292c <___vfprintf_internal_r+0x1128>
10001e04:	8080004c 	andi	r2,r16,1
10001e08:	1002c826 	beq	r2,zero,1000292c <___vfprintf_internal_r+0x1128>
10001e0c:	d8c13917 	ldw	r3,1252(sp)
10001e10:	00800c04 	movi	r2,48
10001e14:	d8810dc5 	stb	r2,1079(sp)
10001e18:	d8c12b15 	stw	r3,1196(sp)
10001e1c:	dcc10dc4 	addi	r19,sp,1079
10001e20:	d8812b17 	ldw	r2,1196(sp)
10001e24:	d8812815 	stw	r2,1184(sp)
10001e28:	1700010e 	bge	r2,fp,10001e30 <___vfprintf_internal_r+0x62c>
10001e2c:	df012815 	stw	fp,1184(sp)
10001e30:	d8812583 	ldbu	r2,1174(sp)
10001e34:	df013115 	stw	fp,1220(sp)
10001e38:	10803fcc 	andi	r2,r2,255
10001e3c:	1080201c 	xori	r2,r2,128
10001e40:	10bfe004 	addi	r2,r2,-128
10001e44:	103ed726 	beq	r2,zero,100019a4 <__alt_data_end+0xf80019a4>
10001e48:	d8c12817 	ldw	r3,1184(sp)
10001e4c:	18c00044 	addi	r3,r3,1
10001e50:	d8c12815 	stw	r3,1184(sp)
10001e54:	003ed306 	br	100019a4 <__alt_data_end+0xf80019a4>
10001e58:	8080020c 	andi	r2,r16,8
10001e5c:	e013883a 	mov	r9,fp
10001e60:	1839883a 	mov	fp,r3
10001e64:	1003a626 	beq	r2,zero,10002d00 <___vfprintf_internal_r+0x14fc>
10001e68:	d9012d17 	ldw	r4,1204(sp)
10001e6c:	25800017 	ldw	r22,0(r4)
10001e70:	25000117 	ldw	r20,4(r4)
10001e74:	21000204 	addi	r4,r4,8
10001e78:	d9012d15 	stw	r4,1204(sp)
10001e7c:	dd813315 	stw	r22,1228(sp)
10001e80:	dd013415 	stw	r20,1232(sp)
10001e84:	b009883a 	mov	r4,r22
10001e88:	a00b883a 	mov	r5,r20
10001e8c:	da413c15 	stw	r9,1264(sp)
10001e90:	000a3900 	call	1000a390 <__isinfd>
10001e94:	da413c17 	ldw	r9,1264(sp)
10001e98:	b009883a 	mov	r4,r22
10001e9c:	a00b883a 	mov	r5,r20
10001ea0:	10041d26 	beq	r2,zero,10002f18 <___vfprintf_internal_r+0x1714>
10001ea4:	000d883a 	mov	r6,zero
10001ea8:	000f883a 	mov	r7,zero
10001eac:	000f7c80 	call	1000f7c8 <__ltdf2>
10001eb0:	da413c17 	ldw	r9,1264(sp)
10001eb4:	1004da16 	blt	r2,zero,10003220 <___vfprintf_internal_r+0x1a1c>
10001eb8:	d8812583 	ldbu	r2,1174(sp)
10001ebc:	00c011c4 	movi	r3,71
10001ec0:	1c83d116 	blt	r3,r18,10002e08 <___vfprintf_internal_r+0x1604>
10001ec4:	04c40074 	movhi	r19,4097
10001ec8:	9ccac104 	addi	r19,r19,11012
10001ecc:	00c000c4 	movi	r3,3
10001ed0:	d8c12815 	stw	r3,1184(sp)
10001ed4:	00ffdfc4 	movi	r3,-129
10001ed8:	80e0703a 	and	r16,r16,r3
10001edc:	d8c12817 	ldw	r3,1184(sp)
10001ee0:	d8013115 	stw	zero,1220(sp)
10001ee4:	d8c12b15 	stw	r3,1196(sp)
10001ee8:	003fd306 	br	10001e38 <__alt_data_end+0xf8001e38>
10001eec:	84000214 	ori	r16,r16,8
10001ef0:	ac800007 	ldb	r18,0(r21)
10001ef4:	003e9f06 	br	10001974 <__alt_data_end+0xf8001974>
10001ef8:	e013883a 	mov	r9,fp
10001efc:	84000414 	ori	r16,r16,16
10001f00:	1839883a 	mov	fp,r3
10001f04:	8080080c 	andi	r2,r16,32
10001f08:	10031d26 	beq	r2,zero,10002b80 <___vfprintf_internal_r+0x137c>
10001f0c:	d8812d17 	ldw	r2,1204(sp)
10001f10:	0007883a 	mov	r3,zero
10001f14:	15c00017 	ldw	r23,0(r2)
10001f18:	15800117 	ldw	r22,4(r2)
10001f1c:	10800204 	addi	r2,r2,8
10001f20:	d8812d15 	stw	r2,1204(sp)
10001f24:	d8012585 	stb	zero,1174(sp)
10001f28:	bd84b03a 	or	r2,r23,r22
10001f2c:	003fae06 	br	10001de8 <__alt_data_end+0xf8001de8>
10001f30:	e013883a 	mov	r9,fp
10001f34:	84000414 	ori	r16,r16,16
10001f38:	1839883a 	mov	fp,r3
10001f3c:	8080080c 	andi	r2,r16,32
10001f40:	1002e726 	beq	r2,zero,10002ae0 <___vfprintf_internal_r+0x12dc>
10001f44:	d8c12d17 	ldw	r3,1204(sp)
10001f48:	d9012d17 	ldw	r4,1204(sp)
10001f4c:	1dc00017 	ldw	r23,0(r3)
10001f50:	1d800117 	ldw	r22,4(r3)
10001f54:	21000204 	addi	r4,r4,8
10001f58:	00c00044 	movi	r3,1
10001f5c:	d9012d15 	stw	r4,1204(sp)
10001f60:	bd84b03a 	or	r2,r23,r22
10001f64:	d8012585 	stb	zero,1174(sp)
10001f68:	003f9f06 	br	10001de8 <__alt_data_end+0xf8001de8>
10001f6c:	e013883a 	mov	r9,fp
10001f70:	1839883a 	mov	fp,r3
10001f74:	00c40074 	movhi	r3,4097
10001f78:	18cac504 	addi	r3,r3,11028
10001f7c:	d8c13615 	stw	r3,1240(sp)
10001f80:	8080080c 	andi	r2,r16,32
10001f84:	10007726 	beq	r2,zero,10002164 <___vfprintf_internal_r+0x960>
10001f88:	d9012d17 	ldw	r4,1204(sp)
10001f8c:	25c00017 	ldw	r23,0(r4)
10001f90:	25800117 	ldw	r22,4(r4)
10001f94:	21000204 	addi	r4,r4,8
10001f98:	d9012d15 	stw	r4,1204(sp)
10001f9c:	8080004c 	andi	r2,r16,1
10001fa0:	1002c226 	beq	r2,zero,10002aac <___vfprintf_internal_r+0x12a8>
10001fa4:	bd84b03a 	or	r2,r23,r22
10001fa8:	10035d26 	beq	r2,zero,10002d20 <___vfprintf_internal_r+0x151c>
10001fac:	00c00c04 	movi	r3,48
10001fb0:	d8c12505 	stb	r3,1172(sp)
10001fb4:	dc812545 	stb	r18,1173(sp)
10001fb8:	84000094 	ori	r16,r16,2
10001fbc:	00c00084 	movi	r3,2
10001fc0:	d8012585 	stb	zero,1174(sp)
10001fc4:	003f8806 	br	10001de8 <__alt_data_end+0xf8001de8>
10001fc8:	ac800007 	ldb	r18,0(r21)
10001fcc:	00c00a84 	movi	r3,42
10001fd0:	adc00044 	addi	r23,r21,1
10001fd4:	90c57526 	beq	r18,r3,100035ac <___vfprintf_internal_r+0x1da8>
10001fd8:	95bff404 	addi	r22,r18,-48
10001fdc:	0009883a 	mov	r4,zero
10001fe0:	9d84ff36 	bltu	r19,r22,100033e0 <___vfprintf_internal_r+0x1bdc>
10001fe4:	01400284 	movi	r5,10
10001fe8:	000158c0 	call	1000158c <__mulsi3>
10001fec:	bc800007 	ldb	r18,0(r23)
10001ff0:	b089883a 	add	r4,r22,r2
10001ff4:	bdc00044 	addi	r23,r23,1
10001ff8:	95bff404 	addi	r22,r18,-48
10001ffc:	9dbff92e 	bgeu	r19,r22,10001fe4 <__alt_data_end+0xf8001fe4>
10002000:	2007883a 	mov	r3,r4
10002004:	20044316 	blt	r4,zero,10003114 <___vfprintf_internal_r+0x1910>
10002008:	b82b883a 	mov	r21,r23
1000200c:	003e5a06 	br	10001978 <__alt_data_end+0xf8001978>
10002010:	ac800007 	ldb	r18,0(r21)
10002014:	01001b04 	movi	r4,108
10002018:	a805883a 	mov	r2,r21
1000201c:	91045526 	beq	r18,r4,10003174 <___vfprintf_internal_r+0x1970>
10002020:	84000414 	ori	r16,r16,16
10002024:	003e5306 	br	10001974 <__alt_data_end+0xf8001974>
10002028:	8080080c 	andi	r2,r16,32
1000202c:	e013883a 	mov	r9,fp
10002030:	10034026 	beq	r2,zero,10002d34 <___vfprintf_internal_r+0x1530>
10002034:	d9012d17 	ldw	r4,1204(sp)
10002038:	20800017 	ldw	r2,0(r4)
1000203c:	d9012c17 	ldw	r4,1200(sp)
10002040:	2007d7fa 	srai	r3,r4,31
10002044:	d9012d17 	ldw	r4,1204(sp)
10002048:	10c00115 	stw	r3,4(r2)
1000204c:	21000104 	addi	r4,r4,4
10002050:	d9012d15 	stw	r4,1204(sp)
10002054:	d9012c17 	ldw	r4,1200(sp)
10002058:	11000015 	stw	r4,0(r2)
1000205c:	003e1f06 	br	100018dc <__alt_data_end+0xf80018dc>
10002060:	d9012d17 	ldw	r4,1204(sp)
10002064:	21000017 	ldw	r4,0(r4)
10002068:	d9012e15 	stw	r4,1208(sp)
1000206c:	d9012d17 	ldw	r4,1204(sp)
10002070:	20800104 	addi	r2,r4,4
10002074:	d9012e17 	ldw	r4,1208(sp)
10002078:	203ee716 	blt	r4,zero,10001c18 <__alt_data_end+0xf8001c18>
1000207c:	d8812d15 	stw	r2,1204(sp)
10002080:	ac800007 	ldb	r18,0(r21)
10002084:	003e3b06 	br	10001974 <__alt_data_end+0xf8001974>
10002088:	e013883a 	mov	r9,fp
1000208c:	1839883a 	mov	fp,r3
10002090:	d8c12d17 	ldw	r3,1204(sp)
10002094:	00800c04 	movi	r2,48
10002098:	01040074 	movhi	r4,4097
1000209c:	210aca04 	addi	r4,r4,11048
100020a0:	1dc00017 	ldw	r23,0(r3)
100020a4:	18c00104 	addi	r3,r3,4
100020a8:	d8812505 	stb	r2,1172(sp)
100020ac:	00801e04 	movi	r2,120
100020b0:	d8812545 	stb	r2,1173(sp)
100020b4:	d8c12d15 	stw	r3,1204(sp)
100020b8:	002d883a 	mov	r22,zero
100020bc:	84000094 	ori	r16,r16,2
100020c0:	d9013615 	stw	r4,1240(sp)
100020c4:	00c00084 	movi	r3,2
100020c8:	04801e04 	movi	r18,120
100020cc:	b805883a 	mov	r2,r23
100020d0:	d8012585 	stb	zero,1174(sp)
100020d4:	003f4406 	br	10001de8 <__alt_data_end+0xf8001de8>
100020d8:	84000814 	ori	r16,r16,32
100020dc:	ac800007 	ldb	r18,0(r21)
100020e0:	003e2406 	br	10001974 <__alt_data_end+0xf8001974>
100020e4:	d8812d17 	ldw	r2,1204(sp)
100020e8:	d8012585 	stb	zero,1174(sp)
100020ec:	e013883a 	mov	r9,fp
100020f0:	14c00017 	ldw	r19,0(r2)
100020f4:	1839883a 	mov	fp,r3
100020f8:	15c00104 	addi	r23,r2,4
100020fc:	98045526 	beq	r19,zero,10003254 <___vfprintf_internal_r+0x1a50>
10002100:	9809883a 	mov	r4,r19
10002104:	18043116 	blt	r3,zero,100031cc <___vfprintf_internal_r+0x19c8>
10002108:	000b883a 	mov	r5,zero
1000210c:	180d883a 	mov	r6,r3
10002110:	da413c15 	stw	r9,1264(sp)
10002114:	00084f00 	call	100084f0 <memchr>
10002118:	da413c17 	ldw	r9,1264(sp)
1000211c:	10047a26 	beq	r2,zero,10003308 <___vfprintf_internal_r+0x1b04>
10002120:	14c5c83a 	sub	r2,r2,r19
10002124:	d8812b15 	stw	r2,1196(sp)
10002128:	e083d40e 	bge	fp,r2,1000307c <___vfprintf_internal_r+0x1878>
1000212c:	df012815 	stw	fp,1184(sp)
10002130:	e004e416 	blt	fp,zero,100034c4 <___vfprintf_internal_r+0x1cc0>
10002134:	d8812583 	ldbu	r2,1174(sp)
10002138:	df012b15 	stw	fp,1196(sp)
1000213c:	ddc12d15 	stw	r23,1204(sp)
10002140:	d8013115 	stw	zero,1220(sp)
10002144:	003f3c06 	br	10001e38 <__alt_data_end+0xf8001e38>
10002148:	00840074 	movhi	r2,4097
1000214c:	108aca04 	addi	r2,r2,11048
10002150:	d8813615 	stw	r2,1240(sp)
10002154:	8080080c 	andi	r2,r16,32
10002158:	e013883a 	mov	r9,fp
1000215c:	1839883a 	mov	fp,r3
10002160:	103f891e 	bne	r2,zero,10001f88 <__alt_data_end+0xf8001f88>
10002164:	8080040c 	andi	r2,r16,16
10002168:	1002c326 	beq	r2,zero,10002c78 <___vfprintf_internal_r+0x1474>
1000216c:	d8812d17 	ldw	r2,1204(sp)
10002170:	002d883a 	mov	r22,zero
10002174:	15c00017 	ldw	r23,0(r2)
10002178:	10800104 	addi	r2,r2,4
1000217c:	d8812d15 	stw	r2,1204(sp)
10002180:	003f8606 	br	10001f9c <__alt_data_end+0xf8001f9c>
10002184:	84001014 	ori	r16,r16,64
10002188:	ac800007 	ldb	r18,0(r21)
1000218c:	003df906 	br	10001974 <__alt_data_end+0xf8001974>
10002190:	d8812587 	ldb	r2,1174(sp)
10002194:	1002e51e 	bne	r2,zero,10002d2c <___vfprintf_internal_r+0x1528>
10002198:	00800804 	movi	r2,32
1000219c:	d8812585 	stb	r2,1174(sp)
100021a0:	ac800007 	ldb	r18,0(r21)
100021a4:	003df306 	br	10001974 <__alt_data_end+0xf8001974>
100021a8:	84000054 	ori	r16,r16,1
100021ac:	ac800007 	ldb	r18,0(r21)
100021b0:	003df006 	br	10001974 <__alt_data_end+0xf8001974>
100021b4:	84002014 	ori	r16,r16,128
100021b8:	ac800007 	ldb	r18,0(r21)
100021bc:	003ded06 	br	10001974 <__alt_data_end+0xf8001974>
100021c0:	0009883a 	mov	r4,zero
100021c4:	95bff404 	addi	r22,r18,-48
100021c8:	182f883a 	mov	r23,r3
100021cc:	01400284 	movi	r5,10
100021d0:	000158c0 	call	1000158c <__mulsi3>
100021d4:	ac800007 	ldb	r18,0(r21)
100021d8:	1589883a 	add	r4,r2,r22
100021dc:	ad400044 	addi	r21,r21,1
100021e0:	95bff404 	addi	r22,r18,-48
100021e4:	9dbff92e 	bgeu	r19,r22,100021cc <__alt_data_end+0xf80021cc>
100021e8:	b807883a 	mov	r3,r23
100021ec:	d9012e15 	stw	r4,1208(sp)
100021f0:	003de106 	br	10001978 <__alt_data_end+0xf8001978>
100021f4:	00800ac4 	movi	r2,43
100021f8:	d8812585 	stb	r2,1174(sp)
100021fc:	ac800007 	ldb	r18,0(r21)
10002200:	003ddc06 	br	10001974 <__alt_data_end+0xf8001974>
10002204:	d8c12d17 	ldw	r3,1204(sp)
10002208:	d9012d17 	ldw	r4,1204(sp)
1000220c:	e013883a 	mov	r9,fp
10002210:	18800017 	ldw	r2,0(r3)
10002214:	21000104 	addi	r4,r4,4
10002218:	00c00044 	movi	r3,1
1000221c:	d8c12815 	stw	r3,1184(sp)
10002220:	d8012585 	stb	zero,1174(sp)
10002224:	d8810405 	stb	r2,1040(sp)
10002228:	d9012d15 	stw	r4,1204(sp)
1000222c:	d8c12b15 	stw	r3,1196(sp)
10002230:	dcc10404 	addi	r19,sp,1040
10002234:	003dda06 	br	100019a0 <__alt_data_end+0xf80019a0>
10002238:	e013883a 	mov	r9,fp
1000223c:	1839883a 	mov	fp,r3
10002240:	003ed806 	br	10001da4 <__alt_data_end+0xf8001da4>
10002244:	e013883a 	mov	r9,fp
10002248:	1839883a 	mov	fp,r3
1000224c:	003f2d06 	br	10001f04 <__alt_data_end+0xf8001f04>
10002250:	e013883a 	mov	r9,fp
10002254:	1839883a 	mov	fp,r3
10002258:	003f3806 	br	10001f3c <__alt_data_end+0xf8001f3c>
1000225c:	da011d17 	ldw	r8,1140(sp)
10002260:	d8c11c17 	ldw	r3,1136(sp)
10002264:	d8812587 	ldb	r2,1174(sp)
10002268:	10000b26 	beq	r2,zero,10002298 <___vfprintf_internal_r+0xa94>
1000226c:	d8812584 	addi	r2,sp,1174
10002270:	48800015 	stw	r2,0(r9)
10002274:	00800044 	movi	r2,1
10002278:	48800115 	stw	r2,4(r9)
1000227c:	4091883a 	add	r8,r8,r2
10002280:	1887883a 	add	r3,r3,r2
10002284:	da011d15 	stw	r8,1140(sp)
10002288:	d8c11c15 	stw	r3,1136(sp)
1000228c:	008001c4 	movi	r2,7
10002290:	10c18e16 	blt	r2,r3,100028cc <___vfprintf_internal_r+0x10c8>
10002294:	4a400204 	addi	r9,r9,8
10002298:	d9012a17 	ldw	r4,1192(sp)
1000229c:	20000b26 	beq	r4,zero,100022cc <___vfprintf_internal_r+0xac8>
100022a0:	d8812504 	addi	r2,sp,1172
100022a4:	48800015 	stw	r2,0(r9)
100022a8:	00800084 	movi	r2,2
100022ac:	48800115 	stw	r2,4(r9)
100022b0:	4091883a 	add	r8,r8,r2
100022b4:	18c00044 	addi	r3,r3,1
100022b8:	da011d15 	stw	r8,1140(sp)
100022bc:	d8c11c15 	stw	r3,1136(sp)
100022c0:	008001c4 	movi	r2,7
100022c4:	10c17816 	blt	r2,r3,100028a8 <___vfprintf_internal_r+0x10a4>
100022c8:	4a400204 	addi	r9,r9,8
100022cc:	d9012f17 	ldw	r4,1212(sp)
100022d0:	00802004 	movi	r2,128
100022d4:	2080fc26 	beq	r4,r2,100026c8 <___vfprintf_internal_r+0xec4>
100022d8:	d8813117 	ldw	r2,1220(sp)
100022dc:	d9012b17 	ldw	r4,1196(sp)
100022e0:	112fc83a 	sub	r23,r2,r4
100022e4:	05c02a0e 	bge	zero,r23,10002390 <___vfprintf_internal_r+0xb8c>
100022e8:	07000404 	movi	fp,16
100022ec:	05040074 	movhi	r20,4097
100022f0:	a50ad584 	addi	r20,r20,11094
100022f4:	e5c01d0e 	bge	fp,r23,1000236c <___vfprintf_internal_r+0xb68>
100022f8:	dc812a15 	stw	r18,1192(sp)
100022fc:	058001c4 	movi	r22,7
10002300:	a025883a 	mov	r18,r20
10002304:	8029883a 	mov	r20,r16
10002308:	dc012917 	ldw	r16,1188(sp)
1000230c:	00000306 	br	1000231c <___vfprintf_internal_r+0xb18>
10002310:	bdfffc04 	addi	r23,r23,-16
10002314:	4a400204 	addi	r9,r9,8
10002318:	e5c0110e 	bge	fp,r23,10002360 <___vfprintf_internal_r+0xb5c>
1000231c:	4c800015 	stw	r18,0(r9)
10002320:	4f000115 	stw	fp,4(r9)
10002324:	42000404 	addi	r8,r8,16
10002328:	18c00044 	addi	r3,r3,1
1000232c:	da011d15 	stw	r8,1140(sp)
10002330:	d8c11c15 	stw	r3,1136(sp)
10002334:	b0fff60e 	bge	r22,r3,10002310 <__alt_data_end+0xf8002310>
10002338:	8809883a 	mov	r4,r17
1000233c:	800b883a 	mov	r5,r16
10002340:	d9811b04 	addi	r6,sp,1132
10002344:	00017d00 	call	100017d0 <__sprint_r>
10002348:	103e741e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
1000234c:	bdfffc04 	addi	r23,r23,-16
10002350:	da011d17 	ldw	r8,1140(sp)
10002354:	d8c11c17 	ldw	r3,1136(sp)
10002358:	da400404 	addi	r9,sp,16
1000235c:	e5ffef16 	blt	fp,r23,1000231c <__alt_data_end+0xf800231c>
10002360:	a021883a 	mov	r16,r20
10002364:	9029883a 	mov	r20,r18
10002368:	dc812a17 	ldw	r18,1192(sp)
1000236c:	4d000015 	stw	r20,0(r9)
10002370:	4dc00115 	stw	r23,4(r9)
10002374:	45d1883a 	add	r8,r8,r23
10002378:	18c00044 	addi	r3,r3,1
1000237c:	da011d15 	stw	r8,1140(sp)
10002380:	d8c11c15 	stw	r3,1136(sp)
10002384:	008001c4 	movi	r2,7
10002388:	10c13e16 	blt	r2,r3,10002884 <___vfprintf_internal_r+0x1080>
1000238c:	4a400204 	addi	r9,r9,8
10002390:	8080400c 	andi	r2,r16,256
10002394:	1000831e 	bne	r2,zero,100025a4 <___vfprintf_internal_r+0xda0>
10002398:	d8812b17 	ldw	r2,1196(sp)
1000239c:	4cc00015 	stw	r19,0(r9)
100023a0:	48800115 	stw	r2,4(r9)
100023a4:	4091883a 	add	r8,r8,r2
100023a8:	18c00044 	addi	r3,r3,1
100023ac:	da011d15 	stw	r8,1140(sp)
100023b0:	d8c11c15 	stw	r3,1136(sp)
100023b4:	008001c4 	movi	r2,7
100023b8:	10c05316 	blt	r2,r3,10002508 <___vfprintf_internal_r+0xd04>
100023bc:	4a400204 	addi	r9,r9,8
100023c0:	8400010c 	andi	r16,r16,4
100023c4:	80002e26 	beq	r16,zero,10002480 <___vfprintf_internal_r+0xc7c>
100023c8:	d8812e17 	ldw	r2,1208(sp)
100023cc:	d8c12817 	ldw	r3,1184(sp)
100023d0:	10e1c83a 	sub	r16,r2,r3
100023d4:	04002a0e 	bge	zero,r16,10002480 <___vfprintf_internal_r+0xc7c>
100023d8:	04800404 	movi	r18,16
100023dc:	d8c11c17 	ldw	r3,1136(sp)
100023e0:	05c40074 	movhi	r23,4097
100023e4:	bdcad184 	addi	r23,r23,11078
100023e8:	9400170e 	bge	r18,r16,10002448 <___vfprintf_internal_r+0xc44>
100023ec:	04c001c4 	movi	r19,7
100023f0:	dd012917 	ldw	r20,1188(sp)
100023f4:	00000306 	br	10002404 <___vfprintf_internal_r+0xc00>
100023f8:	843ffc04 	addi	r16,r16,-16
100023fc:	4a400204 	addi	r9,r9,8
10002400:	9400110e 	bge	r18,r16,10002448 <___vfprintf_internal_r+0xc44>
10002404:	4dc00015 	stw	r23,0(r9)
10002408:	4c800115 	stw	r18,4(r9)
1000240c:	42000404 	addi	r8,r8,16
10002410:	18c00044 	addi	r3,r3,1
10002414:	da011d15 	stw	r8,1140(sp)
10002418:	d8c11c15 	stw	r3,1136(sp)
1000241c:	98fff60e 	bge	r19,r3,100023f8 <__alt_data_end+0xf80023f8>
10002420:	8809883a 	mov	r4,r17
10002424:	a00b883a 	mov	r5,r20
10002428:	d9811b04 	addi	r6,sp,1132
1000242c:	00017d00 	call	100017d0 <__sprint_r>
10002430:	103e3a1e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002434:	843ffc04 	addi	r16,r16,-16
10002438:	da011d17 	ldw	r8,1140(sp)
1000243c:	d8c11c17 	ldw	r3,1136(sp)
10002440:	da400404 	addi	r9,sp,16
10002444:	943fef16 	blt	r18,r16,10002404 <__alt_data_end+0xf8002404>
10002448:	4dc00015 	stw	r23,0(r9)
1000244c:	4c000115 	stw	r16,4(r9)
10002450:	8211883a 	add	r8,r16,r8
10002454:	18c00044 	addi	r3,r3,1
10002458:	da011d15 	stw	r8,1140(sp)
1000245c:	d8c11c15 	stw	r3,1136(sp)
10002460:	008001c4 	movi	r2,7
10002464:	10c0060e 	bge	r2,r3,10002480 <___vfprintf_internal_r+0xc7c>
10002468:	d9412917 	ldw	r5,1188(sp)
1000246c:	8809883a 	mov	r4,r17
10002470:	d9811b04 	addi	r6,sp,1132
10002474:	00017d00 	call	100017d0 <__sprint_r>
10002478:	103e281e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
1000247c:	da011d17 	ldw	r8,1140(sp)
10002480:	dd012817 	ldw	r20,1184(sp)
10002484:	d9012e17 	ldw	r4,1208(sp)
10002488:	a100010e 	bge	r20,r4,10002490 <___vfprintf_internal_r+0xc8c>
1000248c:	2029883a 	mov	r20,r4
10002490:	d8812c17 	ldw	r2,1200(sp)
10002494:	1505883a 	add	r2,r2,r20
10002498:	d8812c15 	stw	r2,1200(sp)
1000249c:	4000b91e 	bne	r8,zero,10002784 <___vfprintf_internal_r+0xf80>
100024a0:	d8011c15 	stw	zero,1136(sp)
100024a4:	a8800007 	ldb	r2,0(r21)
100024a8:	da400404 	addi	r9,sp,16
100024ac:	103d0d1e 	bne	r2,zero,100018e4 <__alt_data_end+0xf80018e4>
100024b0:	a825883a 	mov	r18,r21
100024b4:	003d2306 	br	10001944 <__alt_data_end+0xf8001944>
100024b8:	d9412917 	ldw	r5,1188(sp)
100024bc:	8809883a 	mov	r4,r17
100024c0:	d9811b04 	addi	r6,sp,1132
100024c4:	00017d00 	call	100017d0 <__sprint_r>
100024c8:	103e141e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
100024cc:	da011d17 	ldw	r8,1140(sp)
100024d0:	da400404 	addi	r9,sp,16
100024d4:	8080004c 	andi	r2,r16,1
100024d8:	103fb926 	beq	r2,zero,100023c0 <__alt_data_end+0xf80023c0>
100024dc:	d8c11c17 	ldw	r3,1136(sp)
100024e0:	d9013717 	ldw	r4,1244(sp)
100024e4:	00800044 	movi	r2,1
100024e8:	48800115 	stw	r2,4(r9)
100024ec:	49000015 	stw	r4,0(r9)
100024f0:	4091883a 	add	r8,r8,r2
100024f4:	1887883a 	add	r3,r3,r2
100024f8:	da011d15 	stw	r8,1140(sp)
100024fc:	d8c11c15 	stw	r3,1136(sp)
10002500:	008001c4 	movi	r2,7
10002504:	10ffad0e 	bge	r2,r3,100023bc <__alt_data_end+0xf80023bc>
10002508:	d9412917 	ldw	r5,1188(sp)
1000250c:	8809883a 	mov	r4,r17
10002510:	d9811b04 	addi	r6,sp,1132
10002514:	00017d00 	call	100017d0 <__sprint_r>
10002518:	103e001e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
1000251c:	da400404 	addi	r9,sp,16
10002520:	da011d17 	ldw	r8,1140(sp)
10002524:	003fa606 	br	100023c0 <__alt_data_end+0xf80023c0>
10002528:	18803fcc 	andi	r2,r3,255
1000252c:	00c00044 	movi	r3,1
10002530:	10c10126 	beq	r2,r3,10002938 <___vfprintf_internal_r+0x1134>
10002534:	00c00084 	movi	r3,2
10002538:	10c0ed26 	beq	r2,r3,100028f0 <___vfprintf_internal_r+0x10ec>
1000253c:	d8c10dc4 	addi	r3,sp,1079
10002540:	b808d0fa 	srli	r4,r23,3
10002544:	b00a977a 	slli	r5,r22,29
10002548:	b02cd0fa 	srli	r22,r22,3
1000254c:	bdc001cc 	andi	r23,r23,7
10002550:	b8800c04 	addi	r2,r23,48
10002554:	292eb03a 	or	r23,r5,r4
10002558:	18800005 	stb	r2,0(r3)
1000255c:	bd88b03a 	or	r4,r23,r22
10002560:	1827883a 	mov	r19,r3
10002564:	18ffffc4 	addi	r3,r3,-1
10002568:	203ff51e 	bne	r4,zero,10002540 <__alt_data_end+0xf8002540>
1000256c:	8100004c 	andi	r4,r16,1
10002570:	980b883a 	mov	r5,r19
10002574:	20000726 	beq	r4,zero,10002594 <___vfprintf_internal_r+0xd90>
10002578:	10803fcc 	andi	r2,r2,255
1000257c:	1080201c 	xori	r2,r2,128
10002580:	10bfe004 	addi	r2,r2,-128
10002584:	01000c04 	movi	r4,48
10002588:	11000226 	beq	r2,r4,10002594 <___vfprintf_internal_r+0xd90>
1000258c:	1827883a 	mov	r19,r3
10002590:	293fffc5 	stb	r4,-1(r5)
10002594:	d8812717 	ldw	r2,1180(sp)
10002598:	14c5c83a 	sub	r2,r2,r19
1000259c:	d8812b15 	stw	r2,1196(sp)
100025a0:	003e1f06 	br	10001e20 <__alt_data_end+0xf8001e20>
100025a4:	00801944 	movi	r2,101
100025a8:	14807c0e 	bge	r2,r18,1000279c <___vfprintf_internal_r+0xf98>
100025ac:	d9013317 	ldw	r4,1228(sp)
100025b0:	d9413417 	ldw	r5,1232(sp)
100025b4:	000d883a 	mov	r6,zero
100025b8:	000f883a 	mov	r7,zero
100025bc:	d8c13b15 	stw	r3,1260(sp)
100025c0:	da013a15 	stw	r8,1256(sp)
100025c4:	da413c15 	stw	r9,1264(sp)
100025c8:	000f6a40 	call	1000f6a4 <__nedf2>
100025cc:	d8c13b17 	ldw	r3,1260(sp)
100025d0:	da013a17 	ldw	r8,1256(sp)
100025d4:	da413c17 	ldw	r9,1264(sp)
100025d8:	1001001e 	bne	r2,zero,100029dc <___vfprintf_internal_r+0x11d8>
100025dc:	00840074 	movhi	r2,4097
100025e0:	108ad104 	addi	r2,r2,11076
100025e4:	48800015 	stw	r2,0(r9)
100025e8:	00800044 	movi	r2,1
100025ec:	48800115 	stw	r2,4(r9)
100025f0:	4091883a 	add	r8,r8,r2
100025f4:	1887883a 	add	r3,r3,r2
100025f8:	da011d15 	stw	r8,1140(sp)
100025fc:	d8c11c15 	stw	r3,1136(sp)
10002600:	008001c4 	movi	r2,7
10002604:	10c20316 	blt	r2,r3,10002e14 <___vfprintf_internal_r+0x1610>
10002608:	4a400204 	addi	r9,r9,8
1000260c:	d8812417 	ldw	r2,1168(sp)
10002610:	d8c13217 	ldw	r3,1224(sp)
10002614:	10c00216 	blt	r2,r3,10002620 <___vfprintf_internal_r+0xe1c>
10002618:	8080004c 	andi	r2,r16,1
1000261c:	103f6826 	beq	r2,zero,100023c0 <__alt_data_end+0xf80023c0>
10002620:	d8c11c17 	ldw	r3,1136(sp)
10002624:	d9013717 	ldw	r4,1244(sp)
10002628:	00800044 	movi	r2,1
1000262c:	48800115 	stw	r2,4(r9)
10002630:	49000015 	stw	r4,0(r9)
10002634:	4091883a 	add	r8,r8,r2
10002638:	1887883a 	add	r3,r3,r2
1000263c:	da011d15 	stw	r8,1140(sp)
10002640:	d8c11c15 	stw	r3,1136(sp)
10002644:	008001c4 	movi	r2,7
10002648:	10c2ce16 	blt	r2,r3,10003184 <___vfprintf_internal_r+0x1980>
1000264c:	4a400204 	addi	r9,r9,8
10002650:	d8813217 	ldw	r2,1224(sp)
10002654:	14bfffc4 	addi	r18,r2,-1
10002658:	04bf590e 	bge	zero,r18,100023c0 <__alt_data_end+0xf80023c0>
1000265c:	04c00404 	movi	r19,16
10002660:	d8c11c17 	ldw	r3,1136(sp)
10002664:	05040074 	movhi	r20,4097
10002668:	a50ad584 	addi	r20,r20,11094
1000266c:	9c818a0e 	bge	r19,r18,10002c98 <___vfprintf_internal_r+0x1494>
10002670:	058001c4 	movi	r22,7
10002674:	ddc12917 	ldw	r23,1188(sp)
10002678:	00000306 	br	10002688 <___vfprintf_internal_r+0xe84>
1000267c:	4a400204 	addi	r9,r9,8
10002680:	94bffc04 	addi	r18,r18,-16
10002684:	9c81840e 	bge	r19,r18,10002c98 <___vfprintf_internal_r+0x1494>
10002688:	4d000015 	stw	r20,0(r9)
1000268c:	4cc00115 	stw	r19,4(r9)
10002690:	42000404 	addi	r8,r8,16
10002694:	18c00044 	addi	r3,r3,1
10002698:	da011d15 	stw	r8,1140(sp)
1000269c:	d8c11c15 	stw	r3,1136(sp)
100026a0:	b0fff60e 	bge	r22,r3,1000267c <__alt_data_end+0xf800267c>
100026a4:	8809883a 	mov	r4,r17
100026a8:	b80b883a 	mov	r5,r23
100026ac:	d9811b04 	addi	r6,sp,1132
100026b0:	00017d00 	call	100017d0 <__sprint_r>
100026b4:	103d991e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
100026b8:	da011d17 	ldw	r8,1140(sp)
100026bc:	d8c11c17 	ldw	r3,1136(sp)
100026c0:	da400404 	addi	r9,sp,16
100026c4:	003fee06 	br	10002680 <__alt_data_end+0xf8002680>
100026c8:	d8812e17 	ldw	r2,1208(sp)
100026cc:	d9012817 	ldw	r4,1184(sp)
100026d0:	112fc83a 	sub	r23,r2,r4
100026d4:	05ff000e 	bge	zero,r23,100022d8 <__alt_data_end+0xf80022d8>
100026d8:	07000404 	movi	fp,16
100026dc:	05040074 	movhi	r20,4097
100026e0:	a50ad584 	addi	r20,r20,11094
100026e4:	e5c01d0e 	bge	fp,r23,1000275c <___vfprintf_internal_r+0xf58>
100026e8:	dc812a15 	stw	r18,1192(sp)
100026ec:	058001c4 	movi	r22,7
100026f0:	a025883a 	mov	r18,r20
100026f4:	8029883a 	mov	r20,r16
100026f8:	dc012917 	ldw	r16,1188(sp)
100026fc:	00000306 	br	1000270c <___vfprintf_internal_r+0xf08>
10002700:	bdfffc04 	addi	r23,r23,-16
10002704:	4a400204 	addi	r9,r9,8
10002708:	e5c0110e 	bge	fp,r23,10002750 <___vfprintf_internal_r+0xf4c>
1000270c:	4c800015 	stw	r18,0(r9)
10002710:	4f000115 	stw	fp,4(r9)
10002714:	42000404 	addi	r8,r8,16
10002718:	18c00044 	addi	r3,r3,1
1000271c:	da011d15 	stw	r8,1140(sp)
10002720:	d8c11c15 	stw	r3,1136(sp)
10002724:	b0fff60e 	bge	r22,r3,10002700 <__alt_data_end+0xf8002700>
10002728:	8809883a 	mov	r4,r17
1000272c:	800b883a 	mov	r5,r16
10002730:	d9811b04 	addi	r6,sp,1132
10002734:	00017d00 	call	100017d0 <__sprint_r>
10002738:	103d781e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
1000273c:	bdfffc04 	addi	r23,r23,-16
10002740:	da011d17 	ldw	r8,1140(sp)
10002744:	d8c11c17 	ldw	r3,1136(sp)
10002748:	da400404 	addi	r9,sp,16
1000274c:	e5ffef16 	blt	fp,r23,1000270c <__alt_data_end+0xf800270c>
10002750:	a021883a 	mov	r16,r20
10002754:	9029883a 	mov	r20,r18
10002758:	dc812a17 	ldw	r18,1192(sp)
1000275c:	4d000015 	stw	r20,0(r9)
10002760:	4dc00115 	stw	r23,4(r9)
10002764:	45d1883a 	add	r8,r8,r23
10002768:	18c00044 	addi	r3,r3,1
1000276c:	da011d15 	stw	r8,1140(sp)
10002770:	d8c11c15 	stw	r3,1136(sp)
10002774:	008001c4 	movi	r2,7
10002778:	10c13616 	blt	r2,r3,10002c54 <___vfprintf_internal_r+0x1450>
1000277c:	4a400204 	addi	r9,r9,8
10002780:	003ed506 	br	100022d8 <__alt_data_end+0xf80022d8>
10002784:	d9412917 	ldw	r5,1188(sp)
10002788:	8809883a 	mov	r4,r17
1000278c:	d9811b04 	addi	r6,sp,1132
10002790:	00017d00 	call	100017d0 <__sprint_r>
10002794:	103f4226 	beq	r2,zero,100024a0 <__alt_data_end+0xf80024a0>
10002798:	003d6006 	br	10001d1c <__alt_data_end+0xf8001d1c>
1000279c:	d9013217 	ldw	r4,1224(sp)
100027a0:	00800044 	movi	r2,1
100027a4:	4cc00015 	stw	r19,0(r9)
100027a8:	1101000e 	bge	r2,r4,10002bac <___vfprintf_internal_r+0x13a8>
100027ac:	00800044 	movi	r2,1
100027b0:	48800115 	stw	r2,4(r9)
100027b4:	4091883a 	add	r8,r8,r2
100027b8:	1887883a 	add	r3,r3,r2
100027bc:	da011d15 	stw	r8,1140(sp)
100027c0:	d8c11c15 	stw	r3,1136(sp)
100027c4:	008001c4 	movi	r2,7
100027c8:	10c10c16 	blt	r2,r3,10002bfc <___vfprintf_internal_r+0x13f8>
100027cc:	4a400204 	addi	r9,r9,8
100027d0:	d8813717 	ldw	r2,1244(sp)
100027d4:	48800015 	stw	r2,0(r9)
100027d8:	00800044 	movi	r2,1
100027dc:	48800115 	stw	r2,4(r9)
100027e0:	4091883a 	add	r8,r8,r2
100027e4:	1887883a 	add	r3,r3,r2
100027e8:	da011d15 	stw	r8,1140(sp)
100027ec:	d8c11c15 	stw	r3,1136(sp)
100027f0:	008001c4 	movi	r2,7
100027f4:	10c10a16 	blt	r2,r3,10002c20 <___vfprintf_internal_r+0x141c>
100027f8:	4c800204 	addi	r18,r9,8
100027fc:	d9013317 	ldw	r4,1228(sp)
10002800:	d9413417 	ldw	r5,1232(sp)
10002804:	000d883a 	mov	r6,zero
10002808:	000f883a 	mov	r7,zero
1000280c:	d8c13b15 	stw	r3,1260(sp)
10002810:	da013a15 	stw	r8,1256(sp)
10002814:	000f6480 	call	1000f648 <__eqdf2>
10002818:	d8c13b17 	ldw	r3,1260(sp)
1000281c:	da013a17 	ldw	r8,1256(sp)
10002820:	1000ba26 	beq	r2,zero,10002b0c <___vfprintf_internal_r+0x1308>
10002824:	d9013217 	ldw	r4,1224(sp)
10002828:	9cc00044 	addi	r19,r19,1
1000282c:	94c00015 	stw	r19,0(r18)
10002830:	20bfffc4 	addi	r2,r4,-1
10002834:	90800115 	stw	r2,4(r18)
10002838:	4091883a 	add	r8,r8,r2
1000283c:	18c00044 	addi	r3,r3,1
10002840:	da011d15 	stw	r8,1140(sp)
10002844:	d8c11c15 	stw	r3,1136(sp)
10002848:	008001c4 	movi	r2,7
1000284c:	10c0e216 	blt	r2,r3,10002bd8 <___vfprintf_internal_r+0x13d4>
10002850:	94800204 	addi	r18,r18,8
10002854:	d9013517 	ldw	r4,1236(sp)
10002858:	d8811fc4 	addi	r2,sp,1151
1000285c:	90800015 	stw	r2,0(r18)
10002860:	91000115 	stw	r4,4(r18)
10002864:	4111883a 	add	r8,r8,r4
10002868:	18c00044 	addi	r3,r3,1
1000286c:	da011d15 	stw	r8,1140(sp)
10002870:	d8c11c15 	stw	r3,1136(sp)
10002874:	008001c4 	movi	r2,7
10002878:	10ff2316 	blt	r2,r3,10002508 <__alt_data_end+0xf8002508>
1000287c:	92400204 	addi	r9,r18,8
10002880:	003ecf06 	br	100023c0 <__alt_data_end+0xf80023c0>
10002884:	d9412917 	ldw	r5,1188(sp)
10002888:	8809883a 	mov	r4,r17
1000288c:	d9811b04 	addi	r6,sp,1132
10002890:	00017d00 	call	100017d0 <__sprint_r>
10002894:	103d211e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002898:	da011d17 	ldw	r8,1140(sp)
1000289c:	d8c11c17 	ldw	r3,1136(sp)
100028a0:	da400404 	addi	r9,sp,16
100028a4:	003eba06 	br	10002390 <__alt_data_end+0xf8002390>
100028a8:	d9412917 	ldw	r5,1188(sp)
100028ac:	8809883a 	mov	r4,r17
100028b0:	d9811b04 	addi	r6,sp,1132
100028b4:	00017d00 	call	100017d0 <__sprint_r>
100028b8:	103d181e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
100028bc:	da011d17 	ldw	r8,1140(sp)
100028c0:	d8c11c17 	ldw	r3,1136(sp)
100028c4:	da400404 	addi	r9,sp,16
100028c8:	003e8006 	br	100022cc <__alt_data_end+0xf80022cc>
100028cc:	d9412917 	ldw	r5,1188(sp)
100028d0:	8809883a 	mov	r4,r17
100028d4:	d9811b04 	addi	r6,sp,1132
100028d8:	00017d00 	call	100017d0 <__sprint_r>
100028dc:	103d0f1e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
100028e0:	da011d17 	ldw	r8,1140(sp)
100028e4:	d8c11c17 	ldw	r3,1136(sp)
100028e8:	da400404 	addi	r9,sp,16
100028ec:	003e6a06 	br	10002298 <__alt_data_end+0xf8002298>
100028f0:	d9413617 	ldw	r5,1240(sp)
100028f4:	d8810dc4 	addi	r2,sp,1079
100028f8:	b8c003cc 	andi	r3,r23,15
100028fc:	b008973a 	slli	r4,r22,28
10002900:	28c7883a 	add	r3,r5,r3
10002904:	b82ed13a 	srli	r23,r23,4
10002908:	18c00003 	ldbu	r3,0(r3)
1000290c:	b02cd13a 	srli	r22,r22,4
10002910:	25eeb03a 	or	r23,r4,r23
10002914:	10c00005 	stb	r3,0(r2)
10002918:	bd86b03a 	or	r3,r23,r22
1000291c:	1027883a 	mov	r19,r2
10002920:	10bfffc4 	addi	r2,r2,-1
10002924:	183ff41e 	bne	r3,zero,100028f8 <__alt_data_end+0xf80028f8>
10002928:	003f1a06 	br	10002594 <__alt_data_end+0xf8002594>
1000292c:	d8012b15 	stw	zero,1196(sp)
10002930:	dcc10e04 	addi	r19,sp,1080
10002934:	003d3a06 	br	10001e20 <__alt_data_end+0xf8001e20>
10002938:	b0025426 	beq	r22,zero,1000328c <___vfprintf_internal_r+0x1a88>
1000293c:	b807883a 	mov	r3,r23
10002940:	d8810dc4 	addi	r2,sp,1079
10002944:	882f883a 	mov	r23,r17
10002948:	04c00244 	movi	r19,9
1000294c:	8023883a 	mov	r17,r16
10002950:	da412815 	stw	r9,1184(sp)
10002954:	1821883a 	mov	r16,r3
10002958:	8009883a 	mov	r4,r16
1000295c:	b00b883a 	mov	r5,r22
10002960:	01800284 	movi	r6,10
10002964:	000f883a 	mov	r7,zero
10002968:	1029883a 	mov	r20,r2
1000296c:	000e67c0 	call	1000e67c <__umoddi3>
10002970:	10800c04 	addi	r2,r2,48
10002974:	8009883a 	mov	r4,r16
10002978:	b00b883a 	mov	r5,r22
1000297c:	a0800005 	stb	r2,0(r20)
10002980:	01800284 	movi	r6,10
10002984:	000f883a 	mov	r7,zero
10002988:	000e02c0 	call	1000e02c <__udivdi3>
1000298c:	1021883a 	mov	r16,r2
10002990:	182d883a 	mov	r22,r3
10002994:	a0bfffc4 	addi	r2,r20,-1
10002998:	183fef1e 	bne	r3,zero,10002958 <__alt_data_end+0xf8002958>
1000299c:	9c3fee36 	bltu	r19,r16,10002958 <__alt_data_end+0xf8002958>
100029a0:	da412817 	ldw	r9,1184(sp)
100029a4:	8005883a 	mov	r2,r16
100029a8:	8821883a 	mov	r16,r17
100029ac:	b823883a 	mov	r17,r23
100029b0:	102f883a 	mov	r23,r2
100029b4:	d8812717 	ldw	r2,1180(sp)
100029b8:	a4ffffc4 	addi	r19,r20,-1
100029bc:	bdc00c04 	addi	r23,r23,48
100029c0:	14c5c83a 	sub	r2,r2,r19
100029c4:	a5ffffc5 	stb	r23,-1(r20)
100029c8:	d8812b15 	stw	r2,1196(sp)
100029cc:	003d1406 	br	10001e20 <__alt_data_end+0xf8001e20>
100029d0:	00c00044 	movi	r3,1
100029d4:	bd84b03a 	or	r2,r23,r22
100029d8:	003d0306 	br	10001de8 <__alt_data_end+0xf8001de8>
100029dc:	dc812417 	ldw	r18,1168(sp)
100029e0:	0481140e 	bge	zero,r18,10002e34 <___vfprintf_internal_r+0x1630>
100029e4:	d9013217 	ldw	r4,1224(sp)
100029e8:	4cc00015 	stw	r19,0(r9)
100029ec:	9100ec16 	blt	r18,r4,10002da0 <___vfprintf_internal_r+0x159c>
100029f0:	49000115 	stw	r4,4(r9)
100029f4:	4111883a 	add	r8,r8,r4
100029f8:	18c00044 	addi	r3,r3,1
100029fc:	da011d15 	stw	r8,1140(sp)
10002a00:	d8c11c15 	stw	r3,1136(sp)
10002a04:	008001c4 	movi	r2,7
10002a08:	10c23616 	blt	r2,r3,100032e4 <___vfprintf_internal_r+0x1ae0>
10002a0c:	4a400204 	addi	r9,r9,8
10002a10:	d8813217 	ldw	r2,1224(sp)
10002a14:	90a5c83a 	sub	r18,r18,r2
10002a18:	04beae0e 	bge	zero,r18,100024d4 <__alt_data_end+0xf80024d4>
10002a1c:	04c00404 	movi	r19,16
10002a20:	d8c11c17 	ldw	r3,1136(sp)
10002a24:	05040074 	movhi	r20,4097
10002a28:	a50ad584 	addi	r20,r20,11094
10002a2c:	9c81dd0e 	bge	r19,r18,100031a4 <___vfprintf_internal_r+0x19a0>
10002a30:	058001c4 	movi	r22,7
10002a34:	ddc12917 	ldw	r23,1188(sp)
10002a38:	00000306 	br	10002a48 <___vfprintf_internal_r+0x1244>
10002a3c:	4a400204 	addi	r9,r9,8
10002a40:	94bffc04 	addi	r18,r18,-16
10002a44:	9c81d70e 	bge	r19,r18,100031a4 <___vfprintf_internal_r+0x19a0>
10002a48:	4d000015 	stw	r20,0(r9)
10002a4c:	4cc00115 	stw	r19,4(r9)
10002a50:	42000404 	addi	r8,r8,16
10002a54:	18c00044 	addi	r3,r3,1
10002a58:	da011d15 	stw	r8,1140(sp)
10002a5c:	d8c11c15 	stw	r3,1136(sp)
10002a60:	b0fff60e 	bge	r22,r3,10002a3c <__alt_data_end+0xf8002a3c>
10002a64:	8809883a 	mov	r4,r17
10002a68:	b80b883a 	mov	r5,r23
10002a6c:	d9811b04 	addi	r6,sp,1132
10002a70:	00017d00 	call	100017d0 <__sprint_r>
10002a74:	103ca91e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002a78:	da011d17 	ldw	r8,1140(sp)
10002a7c:	d8c11c17 	ldw	r3,1136(sp)
10002a80:	da400404 	addi	r9,sp,16
10002a84:	003fee06 	br	10002a40 <__alt_data_end+0xf8002a40>
10002a88:	d9412917 	ldw	r5,1188(sp)
10002a8c:	8809883a 	mov	r4,r17
10002a90:	d9811b04 	addi	r6,sp,1132
10002a94:	00017d00 	call	100017d0 <__sprint_r>
10002a98:	103ca01e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002a9c:	da011d17 	ldw	r8,1140(sp)
10002aa0:	d8c11c17 	ldw	r3,1136(sp)
10002aa4:	da400404 	addi	r9,sp,16
10002aa8:	003dee06 	br	10002264 <__alt_data_end+0xf8002264>
10002aac:	00c00084 	movi	r3,2
10002ab0:	bd84b03a 	or	r2,r23,r22
10002ab4:	d8012585 	stb	zero,1174(sp)
10002ab8:	003ccb06 	br	10001de8 <__alt_data_end+0xf8001de8>
10002abc:	8080040c 	andi	r2,r16,16
10002ac0:	1000ae26 	beq	r2,zero,10002d7c <___vfprintf_internal_r+0x1578>
10002ac4:	d9012d17 	ldw	r4,1204(sp)
10002ac8:	25c00017 	ldw	r23,0(r4)
10002acc:	21000104 	addi	r4,r4,4
10002ad0:	d9012d15 	stw	r4,1204(sp)
10002ad4:	b82dd7fa 	srai	r22,r23,31
10002ad8:	b005883a 	mov	r2,r22
10002adc:	003cb906 	br	10001dc4 <__alt_data_end+0xf8001dc4>
10002ae0:	8080040c 	andi	r2,r16,16
10002ae4:	10007026 	beq	r2,zero,10002ca8 <___vfprintf_internal_r+0x14a4>
10002ae8:	d8812d17 	ldw	r2,1204(sp)
10002aec:	002d883a 	mov	r22,zero
10002af0:	00c00044 	movi	r3,1
10002af4:	15c00017 	ldw	r23,0(r2)
10002af8:	10800104 	addi	r2,r2,4
10002afc:	d8812d15 	stw	r2,1204(sp)
10002b00:	d8012585 	stb	zero,1174(sp)
10002b04:	b805883a 	mov	r2,r23
10002b08:	003cb706 	br	10001de8 <__alt_data_end+0xf8001de8>
10002b0c:	d8813217 	ldw	r2,1224(sp)
10002b10:	14ffffc4 	addi	r19,r2,-1
10002b14:	04ff4f0e 	bge	zero,r19,10002854 <__alt_data_end+0xf8002854>
10002b18:	05800404 	movi	r22,16
10002b1c:	05040074 	movhi	r20,4097
10002b20:	a50ad584 	addi	r20,r20,11094
10002b24:	b4c0470e 	bge	r22,r19,10002c44 <___vfprintf_internal_r+0x1440>
10002b28:	05c001c4 	movi	r23,7
10002b2c:	df012917 	ldw	fp,1188(sp)
10002b30:	00000306 	br	10002b40 <___vfprintf_internal_r+0x133c>
10002b34:	94800204 	addi	r18,r18,8
10002b38:	9cfffc04 	addi	r19,r19,-16
10002b3c:	b4c0410e 	bge	r22,r19,10002c44 <___vfprintf_internal_r+0x1440>
10002b40:	95000015 	stw	r20,0(r18)
10002b44:	95800115 	stw	r22,4(r18)
10002b48:	42000404 	addi	r8,r8,16
10002b4c:	18c00044 	addi	r3,r3,1
10002b50:	da011d15 	stw	r8,1140(sp)
10002b54:	d8c11c15 	stw	r3,1136(sp)
10002b58:	b8fff60e 	bge	r23,r3,10002b34 <__alt_data_end+0xf8002b34>
10002b5c:	8809883a 	mov	r4,r17
10002b60:	e00b883a 	mov	r5,fp
10002b64:	d9811b04 	addi	r6,sp,1132
10002b68:	00017d00 	call	100017d0 <__sprint_r>
10002b6c:	103c6b1e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002b70:	da011d17 	ldw	r8,1140(sp)
10002b74:	d8c11c17 	ldw	r3,1136(sp)
10002b78:	dc800404 	addi	r18,sp,16
10002b7c:	003fee06 	br	10002b38 <__alt_data_end+0xf8002b38>
10002b80:	8080040c 	andi	r2,r16,16
10002b84:	10005326 	beq	r2,zero,10002cd4 <___vfprintf_internal_r+0x14d0>
10002b88:	d8c12d17 	ldw	r3,1204(sp)
10002b8c:	002d883a 	mov	r22,zero
10002b90:	1dc00017 	ldw	r23,0(r3)
10002b94:	18c00104 	addi	r3,r3,4
10002b98:	d8c12d15 	stw	r3,1204(sp)
10002b9c:	b805883a 	mov	r2,r23
10002ba0:	0007883a 	mov	r3,zero
10002ba4:	d8012585 	stb	zero,1174(sp)
10002ba8:	003c8f06 	br	10001de8 <__alt_data_end+0xf8001de8>
10002bac:	8088703a 	and	r4,r16,r2
10002bb0:	203efe1e 	bne	r4,zero,100027ac <__alt_data_end+0xf80027ac>
10002bb4:	48800115 	stw	r2,4(r9)
10002bb8:	42000044 	addi	r8,r8,1
10002bbc:	18c00044 	addi	r3,r3,1
10002bc0:	da011d15 	stw	r8,1140(sp)
10002bc4:	d8c11c15 	stw	r3,1136(sp)
10002bc8:	008001c4 	movi	r2,7
10002bcc:	10c00216 	blt	r2,r3,10002bd8 <___vfprintf_internal_r+0x13d4>
10002bd0:	4c800204 	addi	r18,r9,8
10002bd4:	003f1f06 	br	10002854 <__alt_data_end+0xf8002854>
10002bd8:	d9412917 	ldw	r5,1188(sp)
10002bdc:	8809883a 	mov	r4,r17
10002be0:	d9811b04 	addi	r6,sp,1132
10002be4:	00017d00 	call	100017d0 <__sprint_r>
10002be8:	103c4c1e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002bec:	dc800404 	addi	r18,sp,16
10002bf0:	da011d17 	ldw	r8,1140(sp)
10002bf4:	d8c11c17 	ldw	r3,1136(sp)
10002bf8:	003f1606 	br	10002854 <__alt_data_end+0xf8002854>
10002bfc:	d9412917 	ldw	r5,1188(sp)
10002c00:	8809883a 	mov	r4,r17
10002c04:	d9811b04 	addi	r6,sp,1132
10002c08:	00017d00 	call	100017d0 <__sprint_r>
10002c0c:	103c431e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002c10:	da011d17 	ldw	r8,1140(sp)
10002c14:	d8c11c17 	ldw	r3,1136(sp)
10002c18:	da400404 	addi	r9,sp,16
10002c1c:	003eec06 	br	100027d0 <__alt_data_end+0xf80027d0>
10002c20:	d9412917 	ldw	r5,1188(sp)
10002c24:	8809883a 	mov	r4,r17
10002c28:	d9811b04 	addi	r6,sp,1132
10002c2c:	00017d00 	call	100017d0 <__sprint_r>
10002c30:	103c3a1e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002c34:	da011d17 	ldw	r8,1140(sp)
10002c38:	d8c11c17 	ldw	r3,1136(sp)
10002c3c:	dc800404 	addi	r18,sp,16
10002c40:	003eee06 	br	100027fc <__alt_data_end+0xf80027fc>
10002c44:	95000015 	stw	r20,0(r18)
10002c48:	94c00115 	stw	r19,4(r18)
10002c4c:	44d1883a 	add	r8,r8,r19
10002c50:	003efa06 	br	1000283c <__alt_data_end+0xf800283c>
10002c54:	d9412917 	ldw	r5,1188(sp)
10002c58:	8809883a 	mov	r4,r17
10002c5c:	d9811b04 	addi	r6,sp,1132
10002c60:	00017d00 	call	100017d0 <__sprint_r>
10002c64:	103c2d1e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002c68:	da011d17 	ldw	r8,1140(sp)
10002c6c:	d8c11c17 	ldw	r3,1136(sp)
10002c70:	da400404 	addi	r9,sp,16
10002c74:	003d9806 	br	100022d8 <__alt_data_end+0xf80022d8>
10002c78:	8080100c 	andi	r2,r16,64
10002c7c:	10011626 	beq	r2,zero,100030d8 <___vfprintf_internal_r+0x18d4>
10002c80:	d8c12d17 	ldw	r3,1204(sp)
10002c84:	002d883a 	mov	r22,zero
10002c88:	1dc0000b 	ldhu	r23,0(r3)
10002c8c:	18c00104 	addi	r3,r3,4
10002c90:	d8c12d15 	stw	r3,1204(sp)
10002c94:	003cc106 	br	10001f9c <__alt_data_end+0xf8001f9c>
10002c98:	4d000015 	stw	r20,0(r9)
10002c9c:	4c800115 	stw	r18,4(r9)
10002ca0:	4491883a 	add	r8,r8,r18
10002ca4:	003dc006 	br	100023a8 <__alt_data_end+0xf80023a8>
10002ca8:	8080100c 	andi	r2,r16,64
10002cac:	10010126 	beq	r2,zero,100030b4 <___vfprintf_internal_r+0x18b0>
10002cb0:	d8c12d17 	ldw	r3,1204(sp)
10002cb4:	002d883a 	mov	r22,zero
10002cb8:	1dc0000b 	ldhu	r23,0(r3)
10002cbc:	18c00104 	addi	r3,r3,4
10002cc0:	d8c12d15 	stw	r3,1204(sp)
10002cc4:	b805883a 	mov	r2,r23
10002cc8:	00c00044 	movi	r3,1
10002ccc:	d8012585 	stb	zero,1174(sp)
10002cd0:	003c4506 	br	10001de8 <__alt_data_end+0xf8001de8>
10002cd4:	8080100c 	andi	r2,r16,64
10002cd8:	10010526 	beq	r2,zero,100030f0 <___vfprintf_internal_r+0x18ec>
10002cdc:	d9012d17 	ldw	r4,1204(sp)
10002ce0:	002d883a 	mov	r22,zero
10002ce4:	0007883a 	mov	r3,zero
10002ce8:	25c0000b 	ldhu	r23,0(r4)
10002cec:	21000104 	addi	r4,r4,4
10002cf0:	d9012d15 	stw	r4,1204(sp)
10002cf4:	b805883a 	mov	r2,r23
10002cf8:	d8012585 	stb	zero,1174(sp)
10002cfc:	003c3a06 	br	10001de8 <__alt_data_end+0xf8001de8>
10002d00:	d8812d17 	ldw	r2,1204(sp)
10002d04:	15800017 	ldw	r22,0(r2)
10002d08:	15000117 	ldw	r20,4(r2)
10002d0c:	10800204 	addi	r2,r2,8
10002d10:	d8812d15 	stw	r2,1204(sp)
10002d14:	dd813315 	stw	r22,1228(sp)
10002d18:	dd013415 	stw	r20,1232(sp)
10002d1c:	003c5906 	br	10001e84 <__alt_data_end+0xf8001e84>
10002d20:	00c00084 	movi	r3,2
10002d24:	d8012585 	stb	zero,1174(sp)
10002d28:	003c2f06 	br	10001de8 <__alt_data_end+0xf8001de8>
10002d2c:	ac800007 	ldb	r18,0(r21)
10002d30:	003b1006 	br	10001974 <__alt_data_end+0xf8001974>
10002d34:	8080040c 	andi	r2,r16,16
10002d38:	1000091e 	bne	r2,zero,10002d60 <___vfprintf_internal_r+0x155c>
10002d3c:	8400100c 	andi	r16,r16,64
10002d40:	80000726 	beq	r16,zero,10002d60 <___vfprintf_internal_r+0x155c>
10002d44:	d8c12d17 	ldw	r3,1204(sp)
10002d48:	d9012c17 	ldw	r4,1200(sp)
10002d4c:	18800017 	ldw	r2,0(r3)
10002d50:	18c00104 	addi	r3,r3,4
10002d54:	d8c12d15 	stw	r3,1204(sp)
10002d58:	1100000d 	sth	r4,0(r2)
10002d5c:	003adf06 	br	100018dc <__alt_data_end+0xf80018dc>
10002d60:	d8c12d17 	ldw	r3,1204(sp)
10002d64:	d9012c17 	ldw	r4,1200(sp)
10002d68:	18800017 	ldw	r2,0(r3)
10002d6c:	18c00104 	addi	r3,r3,4
10002d70:	d8c12d15 	stw	r3,1204(sp)
10002d74:	11000015 	stw	r4,0(r2)
10002d78:	003ad806 	br	100018dc <__alt_data_end+0xf80018dc>
10002d7c:	8080100c 	andi	r2,r16,64
10002d80:	1000c526 	beq	r2,zero,10003098 <___vfprintf_internal_r+0x1894>
10002d84:	d8812d17 	ldw	r2,1204(sp)
10002d88:	15c0000f 	ldh	r23,0(r2)
10002d8c:	10800104 	addi	r2,r2,4
10002d90:	d8812d15 	stw	r2,1204(sp)
10002d94:	b82dd7fa 	srai	r22,r23,31
10002d98:	b005883a 	mov	r2,r22
10002d9c:	003c0906 	br	10001dc4 <__alt_data_end+0xf8001dc4>
10002da0:	4c800115 	stw	r18,4(r9)
10002da4:	9211883a 	add	r8,r18,r8
10002da8:	18c00044 	addi	r3,r3,1
10002dac:	da011d15 	stw	r8,1140(sp)
10002db0:	d8c11c15 	stw	r3,1136(sp)
10002db4:	008001c4 	movi	r2,7
10002db8:	10c14016 	blt	r2,r3,100032bc <___vfprintf_internal_r+0x1ab8>
10002dbc:	4a400204 	addi	r9,r9,8
10002dc0:	d8813717 	ldw	r2,1244(sp)
10002dc4:	9ca7883a 	add	r19,r19,r18
10002dc8:	48800015 	stw	r2,0(r9)
10002dcc:	00800044 	movi	r2,1
10002dd0:	48800115 	stw	r2,4(r9)
10002dd4:	4091883a 	add	r8,r8,r2
10002dd8:	1887883a 	add	r3,r3,r2
10002ddc:	da011d15 	stw	r8,1140(sp)
10002de0:	d8c11c15 	stw	r3,1136(sp)
10002de4:	008001c4 	movi	r2,7
10002de8:	10c12c16 	blt	r2,r3,1000329c <___vfprintf_internal_r+0x1a98>
10002dec:	4a400204 	addi	r9,r9,8
10002df0:	d9013217 	ldw	r4,1224(sp)
10002df4:	da011d17 	ldw	r8,1140(sp)
10002df8:	d8c11c17 	ldw	r3,1136(sp)
10002dfc:	24a5c83a 	sub	r18,r4,r18
10002e00:	4cc00015 	stw	r19,0(r9)
10002e04:	003fa506 	br	10002c9c <__alt_data_end+0xf8002c9c>
10002e08:	04c40074 	movhi	r19,4097
10002e0c:	9ccac204 	addi	r19,r19,11016
10002e10:	003c2e06 	br	10001ecc <__alt_data_end+0xf8001ecc>
10002e14:	d9412917 	ldw	r5,1188(sp)
10002e18:	8809883a 	mov	r4,r17
10002e1c:	d9811b04 	addi	r6,sp,1132
10002e20:	00017d00 	call	100017d0 <__sprint_r>
10002e24:	103bbd1e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002e28:	da011d17 	ldw	r8,1140(sp)
10002e2c:	da400404 	addi	r9,sp,16
10002e30:	003df606 	br	1000260c <__alt_data_end+0xf800260c>
10002e34:	00840074 	movhi	r2,4097
10002e38:	108ad104 	addi	r2,r2,11076
10002e3c:	48800015 	stw	r2,0(r9)
10002e40:	00800044 	movi	r2,1
10002e44:	48800115 	stw	r2,4(r9)
10002e48:	4091883a 	add	r8,r8,r2
10002e4c:	1887883a 	add	r3,r3,r2
10002e50:	da011d15 	stw	r8,1140(sp)
10002e54:	d8c11c15 	stw	r3,1136(sp)
10002e58:	008001c4 	movi	r2,7
10002e5c:	10c0bc16 	blt	r2,r3,10003150 <___vfprintf_internal_r+0x194c>
10002e60:	4a400204 	addi	r9,r9,8
10002e64:	9000041e 	bne	r18,zero,10002e78 <___vfprintf_internal_r+0x1674>
10002e68:	d8c13217 	ldw	r3,1224(sp)
10002e6c:	1800021e 	bne	r3,zero,10002e78 <___vfprintf_internal_r+0x1674>
10002e70:	8080004c 	andi	r2,r16,1
10002e74:	103d5226 	beq	r2,zero,100023c0 <__alt_data_end+0xf80023c0>
10002e78:	d8c11c17 	ldw	r3,1136(sp)
10002e7c:	d9013717 	ldw	r4,1244(sp)
10002e80:	00800044 	movi	r2,1
10002e84:	48800115 	stw	r2,4(r9)
10002e88:	49000015 	stw	r4,0(r9)
10002e8c:	4091883a 	add	r8,r8,r2
10002e90:	1887883a 	add	r3,r3,r2
10002e94:	da011d15 	stw	r8,1140(sp)
10002e98:	d8c11c15 	stw	r3,1136(sp)
10002e9c:	008001c4 	movi	r2,7
10002ea0:	10c14516 	blt	r2,r3,100033b8 <___vfprintf_internal_r+0x1bb4>
10002ea4:	4a400204 	addi	r9,r9,8
10002ea8:	04a5c83a 	sub	r18,zero,r18
10002eac:	0480d70e 	bge	zero,r18,1000320c <___vfprintf_internal_r+0x1a08>
10002eb0:	05800404 	movi	r22,16
10002eb4:	05040074 	movhi	r20,4097
10002eb8:	a50ad584 	addi	r20,r20,11094
10002ebc:	b480db0e 	bge	r22,r18,1000322c <___vfprintf_internal_r+0x1a28>
10002ec0:	05c001c4 	movi	r23,7
10002ec4:	df012917 	ldw	fp,1188(sp)
10002ec8:	00000306 	br	10002ed8 <___vfprintf_internal_r+0x16d4>
10002ecc:	4a400204 	addi	r9,r9,8
10002ed0:	94bffc04 	addi	r18,r18,-16
10002ed4:	b480d50e 	bge	r22,r18,1000322c <___vfprintf_internal_r+0x1a28>
10002ed8:	4d000015 	stw	r20,0(r9)
10002edc:	4d800115 	stw	r22,4(r9)
10002ee0:	42000404 	addi	r8,r8,16
10002ee4:	18c00044 	addi	r3,r3,1
10002ee8:	da011d15 	stw	r8,1140(sp)
10002eec:	d8c11c15 	stw	r3,1136(sp)
10002ef0:	b8fff60e 	bge	r23,r3,10002ecc <__alt_data_end+0xf8002ecc>
10002ef4:	8809883a 	mov	r4,r17
10002ef8:	e00b883a 	mov	r5,fp
10002efc:	d9811b04 	addi	r6,sp,1132
10002f00:	00017d00 	call	100017d0 <__sprint_r>
10002f04:	103b851e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10002f08:	da011d17 	ldw	r8,1140(sp)
10002f0c:	d8c11c17 	ldw	r3,1136(sp)
10002f10:	da400404 	addi	r9,sp,16
10002f14:	003fee06 	br	10002ed0 <__alt_data_end+0xf8002ed0>
10002f18:	da413c15 	stw	r9,1264(sp)
10002f1c:	000a3c80 	call	1000a3c8 <__isnand>
10002f20:	da413c17 	ldw	r9,1264(sp)
10002f24:	10007e1e 	bne	r2,zero,10003120 <___vfprintf_internal_r+0x191c>
10002f28:	00bfffc4 	movi	r2,-1
10002f2c:	e0816a26 	beq	fp,r2,100034d8 <___vfprintf_internal_r+0x1cd4>
10002f30:	008019c4 	movi	r2,103
10002f34:	90816526 	beq	r18,r2,100034cc <___vfprintf_internal_r+0x1cc8>
10002f38:	008011c4 	movi	r2,71
10002f3c:	90816326 	beq	r18,r2,100034cc <___vfprintf_internal_r+0x1cc8>
10002f40:	80c04014 	ori	r3,r16,256
10002f44:	d8c12a15 	stw	r3,1192(sp)
10002f48:	a0016516 	blt	r20,zero,100034e0 <___vfprintf_internal_r+0x1cdc>
10002f4c:	d8012f05 	stb	zero,1212(sp)
10002f50:	00801984 	movi	r2,102
10002f54:	9080f226 	beq	r18,r2,10003320 <___vfprintf_internal_r+0x1b1c>
10002f58:	00801184 	movi	r2,70
10002f5c:	9080f026 	beq	r18,r2,10003320 <___vfprintf_internal_r+0x1b1c>
10002f60:	00801944 	movi	r2,101
10002f64:	90818d26 	beq	r18,r2,1000359c <___vfprintf_internal_r+0x1d98>
10002f68:	00801144 	movi	r2,69
10002f6c:	90818b26 	beq	r18,r2,1000359c <___vfprintf_internal_r+0x1d98>
10002f70:	e02f883a 	mov	r23,fp
10002f74:	d8812404 	addi	r2,sp,1168
10002f78:	d8800115 	stw	r2,4(sp)
10002f7c:	d8812304 	addi	r2,sp,1164
10002f80:	d8800215 	stw	r2,8(sp)
10002f84:	d8812204 	addi	r2,sp,1160
10002f88:	ddc00015 	stw	r23,0(sp)
10002f8c:	d8800315 	stw	r2,12(sp)
10002f90:	8809883a 	mov	r4,r17
10002f94:	b00b883a 	mov	r5,r22
10002f98:	a00d883a 	mov	r6,r20
10002f9c:	01c00084 	movi	r7,2
10002fa0:	da413c15 	stw	r9,1264(sp)
10002fa4:	00051dc0 	call	100051dc <_dtoa_r>
10002fa8:	1027883a 	mov	r19,r2
10002fac:	008019c4 	movi	r2,103
10002fb0:	da413c17 	ldw	r9,1264(sp)
10002fb4:	9081951e 	bne	r18,r2,1000360c <___vfprintf_internal_r+0x1e08>
10002fb8:	8080004c 	andi	r2,r16,1
10002fbc:	10017926 	beq	r2,zero,100035a4 <___vfprintf_internal_r+0x1da0>
10002fc0:	00801184 	movi	r2,70
10002fc4:	9dc7883a 	add	r3,r19,r23
10002fc8:	9080e626 	beq	r18,r2,10003364 <___vfprintf_internal_r+0x1b60>
10002fcc:	b009883a 	mov	r4,r22
10002fd0:	a00b883a 	mov	r5,r20
10002fd4:	000d883a 	mov	r6,zero
10002fd8:	000f883a 	mov	r7,zero
10002fdc:	d8c13b15 	stw	r3,1260(sp)
10002fe0:	da413c15 	stw	r9,1264(sp)
10002fe4:	000f6480 	call	1000f648 <__eqdf2>
10002fe8:	d8c13b17 	ldw	r3,1260(sp)
10002fec:	da413c17 	ldw	r9,1264(sp)
10002ff0:	10000726 	beq	r2,zero,10003010 <___vfprintf_internal_r+0x180c>
10002ff4:	d8812217 	ldw	r2,1160(sp)
10002ff8:	10c18a2e 	bgeu	r2,r3,10003624 <___vfprintf_internal_r+0x1e20>
10002ffc:	01000c04 	movi	r4,48
10003000:	11000005 	stb	r4,0(r2)
10003004:	10800044 	addi	r2,r2,1
10003008:	d8812215 	stw	r2,1160(sp)
1000300c:	10fffc1e 	bne	r2,r3,10003000 <__alt_data_end+0xf8003000>
10003010:	1cc7c83a 	sub	r3,r3,r19
10003014:	d8c13215 	stw	r3,1224(sp)
10003018:	008019c4 	movi	r2,103
1000301c:	9080fa26 	beq	r18,r2,10003408 <___vfprintf_internal_r+0x1c04>
10003020:	008011c4 	movi	r2,71
10003024:	9080f826 	beq	r18,r2,10003408 <___vfprintf_internal_r+0x1c04>
10003028:	00801984 	movi	r2,102
1000302c:	90818e1e 	bne	r18,r2,10003668 <___vfprintf_internal_r+0x1e64>
10003030:	d8812417 	ldw	r2,1168(sp)
10003034:	d8812b15 	stw	r2,1196(sp)
10003038:	00817c0e 	bge	zero,r2,1000362c <___vfprintf_internal_r+0x1e28>
1000303c:	e000021e 	bne	fp,zero,10003048 <___vfprintf_internal_r+0x1844>
10003040:	8400004c 	andi	r16,r16,1
10003044:	80000426 	beq	r16,zero,10003058 <___vfprintf_internal_r+0x1854>
10003048:	d8812b17 	ldw	r2,1196(sp)
1000304c:	e2000044 	addi	r8,fp,1
10003050:	1205883a 	add	r2,r2,r8
10003054:	d8812b15 	stw	r2,1196(sp)
10003058:	d8812815 	stw	r2,1184(sp)
1000305c:	10010b16 	blt	r2,zero,1000348c <___vfprintf_internal_r+0x1c88>
10003060:	ddc12f07 	ldb	r23,1212(sp)
10003064:	b800e426 	beq	r23,zero,100033f8 <___vfprintf_internal_r+0x1bf4>
10003068:	00800b44 	movi	r2,45
1000306c:	d8812585 	stb	r2,1174(sp)
10003070:	dc012a17 	ldw	r16,1192(sp)
10003074:	d8013115 	stw	zero,1220(sp)
10003078:	003b7306 	br	10001e48 <__alt_data_end+0xf8001e48>
1000307c:	d8812b17 	ldw	r2,1196(sp)
10003080:	d8812815 	stw	r2,1184(sp)
10003084:	10005716 	blt	r2,zero,100031e4 <___vfprintf_internal_r+0x19e0>
10003088:	d8812583 	ldbu	r2,1174(sp)
1000308c:	ddc12d15 	stw	r23,1204(sp)
10003090:	d8013115 	stw	zero,1220(sp)
10003094:	003b6806 	br	10001e38 <__alt_data_end+0xf8001e38>
10003098:	d8c12d17 	ldw	r3,1204(sp)
1000309c:	1dc00017 	ldw	r23,0(r3)
100030a0:	18c00104 	addi	r3,r3,4
100030a4:	d8c12d15 	stw	r3,1204(sp)
100030a8:	b82dd7fa 	srai	r22,r23,31
100030ac:	b005883a 	mov	r2,r22
100030b0:	003b4406 	br	10001dc4 <__alt_data_end+0xf8001dc4>
100030b4:	d9012d17 	ldw	r4,1204(sp)
100030b8:	002d883a 	mov	r22,zero
100030bc:	00c00044 	movi	r3,1
100030c0:	25c00017 	ldw	r23,0(r4)
100030c4:	21000104 	addi	r4,r4,4
100030c8:	d9012d15 	stw	r4,1204(sp)
100030cc:	b805883a 	mov	r2,r23
100030d0:	d8012585 	stb	zero,1174(sp)
100030d4:	003b4406 	br	10001de8 <__alt_data_end+0xf8001de8>
100030d8:	d9012d17 	ldw	r4,1204(sp)
100030dc:	002d883a 	mov	r22,zero
100030e0:	25c00017 	ldw	r23,0(r4)
100030e4:	21000104 	addi	r4,r4,4
100030e8:	d9012d15 	stw	r4,1204(sp)
100030ec:	003bab06 	br	10001f9c <__alt_data_end+0xf8001f9c>
100030f0:	d8812d17 	ldw	r2,1204(sp)
100030f4:	002d883a 	mov	r22,zero
100030f8:	0007883a 	mov	r3,zero
100030fc:	15c00017 	ldw	r23,0(r2)
10003100:	10800104 	addi	r2,r2,4
10003104:	d8812d15 	stw	r2,1204(sp)
10003108:	d8012585 	stb	zero,1174(sp)
1000310c:	b805883a 	mov	r2,r23
10003110:	003b3506 	br	10001de8 <__alt_data_end+0xf8001de8>
10003114:	00ffffc4 	movi	r3,-1
10003118:	b82b883a 	mov	r21,r23
1000311c:	003a1606 	br	10001978 <__alt_data_end+0xf8001978>
10003120:	008011c4 	movi	r2,71
10003124:	1480b116 	blt	r2,r18,100033ec <___vfprintf_internal_r+0x1be8>
10003128:	04c40074 	movhi	r19,4097
1000312c:	9ccac304 	addi	r19,r19,11020
10003130:	00c000c4 	movi	r3,3
10003134:	00bfdfc4 	movi	r2,-129
10003138:	80a0703a 	and	r16,r16,r2
1000313c:	d8c12815 	stw	r3,1184(sp)
10003140:	d8812583 	ldbu	r2,1174(sp)
10003144:	d8c12b15 	stw	r3,1196(sp)
10003148:	d8013115 	stw	zero,1220(sp)
1000314c:	003b3a06 	br	10001e38 <__alt_data_end+0xf8001e38>
10003150:	d9412917 	ldw	r5,1188(sp)
10003154:	8809883a 	mov	r4,r17
10003158:	d9811b04 	addi	r6,sp,1132
1000315c:	00017d00 	call	100017d0 <__sprint_r>
10003160:	103aee1e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10003164:	dc812417 	ldw	r18,1168(sp)
10003168:	da011d17 	ldw	r8,1140(sp)
1000316c:	da400404 	addi	r9,sp,16
10003170:	003f3c06 	br	10002e64 <__alt_data_end+0xf8002e64>
10003174:	ad400044 	addi	r21,r21,1
10003178:	84000814 	ori	r16,r16,32
1000317c:	14800047 	ldb	r18,1(r2)
10003180:	0039fc06 	br	10001974 <__alt_data_end+0xf8001974>
10003184:	d9412917 	ldw	r5,1188(sp)
10003188:	8809883a 	mov	r4,r17
1000318c:	d9811b04 	addi	r6,sp,1132
10003190:	00017d00 	call	100017d0 <__sprint_r>
10003194:	103ae11e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10003198:	da011d17 	ldw	r8,1140(sp)
1000319c:	da400404 	addi	r9,sp,16
100031a0:	003d2b06 	br	10002650 <__alt_data_end+0xf8002650>
100031a4:	4d000015 	stw	r20,0(r9)
100031a8:	4c800115 	stw	r18,4(r9)
100031ac:	4491883a 	add	r8,r8,r18
100031b0:	18c00044 	addi	r3,r3,1
100031b4:	da011d15 	stw	r8,1140(sp)
100031b8:	d8c11c15 	stw	r3,1136(sp)
100031bc:	008001c4 	movi	r2,7
100031c0:	10fcbd16 	blt	r2,r3,100024b8 <__alt_data_end+0xf80024b8>
100031c4:	4a400204 	addi	r9,r9,8
100031c8:	003cc206 	br	100024d4 <__alt_data_end+0xf80024d4>
100031cc:	da413c15 	stw	r9,1264(sp)
100031d0:	00017440 	call	10001744 <strlen>
100031d4:	d8812b15 	stw	r2,1196(sp)
100031d8:	d8812815 	stw	r2,1184(sp)
100031dc:	da413c17 	ldw	r9,1264(sp)
100031e0:	103fa90e 	bge	r2,zero,10003088 <__alt_data_end+0xf8003088>
100031e4:	d8012815 	stw	zero,1184(sp)
100031e8:	003fa706 	br	10003088 <__alt_data_end+0xf8003088>
100031ec:	d9412917 	ldw	r5,1188(sp)
100031f0:	8809883a 	mov	r4,r17
100031f4:	d9811b04 	addi	r6,sp,1132
100031f8:	00017d00 	call	100017d0 <__sprint_r>
100031fc:	103ac71e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
10003200:	da011d17 	ldw	r8,1140(sp)
10003204:	d8c11c17 	ldw	r3,1136(sp)
10003208:	da400404 	addi	r9,sp,16
1000320c:	d8813217 	ldw	r2,1224(sp)
10003210:	4cc00015 	stw	r19,0(r9)
10003214:	48800115 	stw	r2,4(r9)
10003218:	4091883a 	add	r8,r8,r2
1000321c:	003c6206 	br	100023a8 <__alt_data_end+0xf80023a8>
10003220:	00800b44 	movi	r2,45
10003224:	d8812585 	stb	r2,1174(sp)
10003228:	003b2406 	br	10001ebc <__alt_data_end+0xf8001ebc>
1000322c:	4d000015 	stw	r20,0(r9)
10003230:	4c800115 	stw	r18,4(r9)
10003234:	4491883a 	add	r8,r8,r18
10003238:	18c00044 	addi	r3,r3,1
1000323c:	da011d15 	stw	r8,1140(sp)
10003240:	d8c11c15 	stw	r3,1136(sp)
10003244:	008001c4 	movi	r2,7
10003248:	10ffe816 	blt	r2,r3,100031ec <__alt_data_end+0xf80031ec>
1000324c:	4a400204 	addi	r9,r9,8
10003250:	003fee06 	br	1000320c <__alt_data_end+0xf800320c>
10003254:	d8c12b15 	stw	r3,1196(sp)
10003258:	00800184 	movi	r2,6
1000325c:	10c0062e 	bgeu	r2,r3,10003278 <___vfprintf_internal_r+0x1a74>
10003260:	d8812b15 	stw	r2,1196(sp)
10003264:	d8812815 	stw	r2,1184(sp)
10003268:	ddc12d15 	stw	r23,1204(sp)
1000326c:	04c40074 	movhi	r19,4097
10003270:	9ccacf04 	addi	r19,r19,11068
10003274:	0039ca06 	br	100019a0 <__alt_data_end+0xf80019a0>
10003278:	d8812b17 	ldw	r2,1196(sp)
1000327c:	d8812815 	stw	r2,1184(sp)
10003280:	103ff90e 	bge	r2,zero,10003268 <__alt_data_end+0xf8003268>
10003284:	d8012815 	stw	zero,1184(sp)
10003288:	003ff706 	br	10003268 <__alt_data_end+0xf8003268>
1000328c:	00800244 	movi	r2,9
10003290:	15fdaa36 	bltu	r2,r23,1000293c <__alt_data_end+0xf800293c>
10003294:	dd010e04 	addi	r20,sp,1080
10003298:	003dc606 	br	100029b4 <__alt_data_end+0xf80029b4>
1000329c:	d9412917 	ldw	r5,1188(sp)
100032a0:	8809883a 	mov	r4,r17
100032a4:	d9811b04 	addi	r6,sp,1132
100032a8:	00017d00 	call	100017d0 <__sprint_r>
100032ac:	103a9b1e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
100032b0:	dc812417 	ldw	r18,1168(sp)
100032b4:	da400404 	addi	r9,sp,16
100032b8:	003ecd06 	br	10002df0 <__alt_data_end+0xf8002df0>
100032bc:	d9412917 	ldw	r5,1188(sp)
100032c0:	8809883a 	mov	r4,r17
100032c4:	d9811b04 	addi	r6,sp,1132
100032c8:	00017d00 	call	100017d0 <__sprint_r>
100032cc:	103a931e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
100032d0:	dc812417 	ldw	r18,1168(sp)
100032d4:	da011d17 	ldw	r8,1140(sp)
100032d8:	d8c11c17 	ldw	r3,1136(sp)
100032dc:	da400404 	addi	r9,sp,16
100032e0:	003eb706 	br	10002dc0 <__alt_data_end+0xf8002dc0>
100032e4:	d9412917 	ldw	r5,1188(sp)
100032e8:	8809883a 	mov	r4,r17
100032ec:	d9811b04 	addi	r6,sp,1132
100032f0:	00017d00 	call	100017d0 <__sprint_r>
100032f4:	103a891e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
100032f8:	dc812417 	ldw	r18,1168(sp)
100032fc:	da011d17 	ldw	r8,1140(sp)
10003300:	da400404 	addi	r9,sp,16
10003304:	003dc206 	br	10002a10 <__alt_data_end+0xf8002a10>
10003308:	df012815 	stw	fp,1184(sp)
1000330c:	d8812583 	ldbu	r2,1174(sp)
10003310:	df012b15 	stw	fp,1196(sp)
10003314:	ddc12d15 	stw	r23,1204(sp)
10003318:	d8013115 	stw	zero,1220(sp)
1000331c:	003ac606 	br	10001e38 <__alt_data_end+0xf8001e38>
10003320:	d8812404 	addi	r2,sp,1168
10003324:	d8800115 	stw	r2,4(sp)
10003328:	d8812304 	addi	r2,sp,1164
1000332c:	d8800215 	stw	r2,8(sp)
10003330:	d8812204 	addi	r2,sp,1160
10003334:	df000015 	stw	fp,0(sp)
10003338:	d8800315 	stw	r2,12(sp)
1000333c:	8809883a 	mov	r4,r17
10003340:	b00b883a 	mov	r5,r22
10003344:	a00d883a 	mov	r6,r20
10003348:	01c000c4 	movi	r7,3
1000334c:	da413c15 	stw	r9,1264(sp)
10003350:	00051dc0 	call	100051dc <_dtoa_r>
10003354:	da413c17 	ldw	r9,1264(sp)
10003358:	1027883a 	mov	r19,r2
1000335c:	1707883a 	add	r3,r2,fp
10003360:	e02f883a 	mov	r23,fp
10003364:	99000007 	ldb	r4,0(r19)
10003368:	00800c04 	movi	r2,48
1000336c:	20800326 	beq	r4,r2,1000337c <___vfprintf_internal_r+0x1b78>
10003370:	da812417 	ldw	r10,1168(sp)
10003374:	1a87883a 	add	r3,r3,r10
10003378:	003f1406 	br	10002fcc <__alt_data_end+0xf8002fcc>
1000337c:	b009883a 	mov	r4,r22
10003380:	a00b883a 	mov	r5,r20
10003384:	000d883a 	mov	r6,zero
10003388:	000f883a 	mov	r7,zero
1000338c:	d8c13b15 	stw	r3,1260(sp)
10003390:	da413c15 	stw	r9,1264(sp)
10003394:	000f6a40 	call	1000f6a4 <__nedf2>
10003398:	d8c13b17 	ldw	r3,1260(sp)
1000339c:	da413c17 	ldw	r9,1264(sp)
100033a0:	103ff326 	beq	r2,zero,10003370 <__alt_data_end+0xf8003370>
100033a4:	00800044 	movi	r2,1
100033a8:	15d5c83a 	sub	r10,r2,r23
100033ac:	da812415 	stw	r10,1168(sp)
100033b0:	1a87883a 	add	r3,r3,r10
100033b4:	003f0506 	br	10002fcc <__alt_data_end+0xf8002fcc>
100033b8:	d9412917 	ldw	r5,1188(sp)
100033bc:	8809883a 	mov	r4,r17
100033c0:	d9811b04 	addi	r6,sp,1132
100033c4:	00017d00 	call	100017d0 <__sprint_r>
100033c8:	103a541e 	bne	r2,zero,10001d1c <__alt_data_end+0xf8001d1c>
100033cc:	dc812417 	ldw	r18,1168(sp)
100033d0:	da011d17 	ldw	r8,1140(sp)
100033d4:	d8c11c17 	ldw	r3,1136(sp)
100033d8:	da400404 	addi	r9,sp,16
100033dc:	003eb206 	br	10002ea8 <__alt_data_end+0xf8002ea8>
100033e0:	b82b883a 	mov	r21,r23
100033e4:	0007883a 	mov	r3,zero
100033e8:	00396306 	br	10001978 <__alt_data_end+0xf8001978>
100033ec:	04c40074 	movhi	r19,4097
100033f0:	9ccac404 	addi	r19,r19,11024
100033f4:	003f4e06 	br	10003130 <__alt_data_end+0xf8003130>
100033f8:	d8812583 	ldbu	r2,1174(sp)
100033fc:	dc012a17 	ldw	r16,1192(sp)
10003400:	d8013115 	stw	zero,1220(sp)
10003404:	003a8c06 	br	10001e38 <__alt_data_end+0xf8001e38>
10003408:	d8812417 	ldw	r2,1168(sp)
1000340c:	d8812b15 	stw	r2,1196(sp)
10003410:	1029883a 	mov	r20,r2
10003414:	00bfff44 	movi	r2,-3
10003418:	a0800116 	blt	r20,r2,10003420 <___vfprintf_internal_r+0x1c1c>
1000341c:	e5001d0e 	bge	fp,r20,10003494 <___vfprintf_internal_r+0x1c90>
10003420:	94bfff84 	addi	r18,r18,-2
10003424:	a53fffc4 	addi	r20,r20,-1
10003428:	dd012415 	stw	r20,1168(sp)
1000342c:	dc811fc5 	stb	r18,1151(sp)
10003430:	a0007216 	blt	r20,zero,100035fc <___vfprintf_internal_r+0x1df8>
10003434:	00800ac4 	movi	r2,43
10003438:	d8812005 	stb	r2,1152(sp)
1000343c:	00800244 	movi	r2,9
10003440:	15003516 	blt	r2,r20,10003518 <___vfprintf_internal_r+0x1d14>
10003444:	00800c04 	movi	r2,48
10003448:	a5000c04 	addi	r20,r20,48
1000344c:	d8812045 	stb	r2,1153(sp)
10003450:	dd012085 	stb	r20,1154(sp)
10003454:	d8c120c4 	addi	r3,sp,1155
10003458:	d8811fc4 	addi	r2,sp,1151
1000345c:	1885c83a 	sub	r2,r3,r2
10003460:	d8c13217 	ldw	r3,1224(sp)
10003464:	d8813515 	stw	r2,1236(sp)
10003468:	1885883a 	add	r2,r3,r2
1000346c:	d8812b15 	stw	r2,1196(sp)
10003470:	00800044 	movi	r2,1
10003474:	10c0580e 	bge	r2,r3,100035d8 <___vfprintf_internal_r+0x1dd4>
10003478:	d8812b17 	ldw	r2,1196(sp)
1000347c:	10800044 	addi	r2,r2,1
10003480:	d8812b15 	stw	r2,1196(sp)
10003484:	d8812815 	stw	r2,1184(sp)
10003488:	103ef50e 	bge	r2,zero,10003060 <__alt_data_end+0xf8003060>
1000348c:	d8012815 	stw	zero,1184(sp)
10003490:	003ef306 	br	10003060 <__alt_data_end+0xf8003060>
10003494:	d8812b17 	ldw	r2,1196(sp)
10003498:	d8c13217 	ldw	r3,1224(sp)
1000349c:	10c01416 	blt	r2,r3,100034f0 <___vfprintf_internal_r+0x1cec>
100034a0:	8400004c 	andi	r16,r16,1
100034a4:	80000326 	beq	r16,zero,100034b4 <___vfprintf_internal_r+0x1cb0>
100034a8:	d8812b17 	ldw	r2,1196(sp)
100034ac:	10800044 	addi	r2,r2,1
100034b0:	d8812b15 	stw	r2,1196(sp)
100034b4:	d8812815 	stw	r2,1184(sp)
100034b8:	10001416 	blt	r2,zero,1000350c <___vfprintf_internal_r+0x1d08>
100034bc:	048019c4 	movi	r18,103
100034c0:	003ee706 	br	10003060 <__alt_data_end+0xf8003060>
100034c4:	d8012815 	stw	zero,1184(sp)
100034c8:	003b1a06 	br	10002134 <__alt_data_end+0xf8002134>
100034cc:	e03e9c1e 	bne	fp,zero,10002f40 <__alt_data_end+0xf8002f40>
100034d0:	07000044 	movi	fp,1
100034d4:	003e9a06 	br	10002f40 <__alt_data_end+0xf8002f40>
100034d8:	07000184 	movi	fp,6
100034dc:	003e9806 	br	10002f40 <__alt_data_end+0xf8002f40>
100034e0:	00c00b44 	movi	r3,45
100034e4:	a520003c 	xorhi	r20,r20,32768
100034e8:	d8c12f05 	stb	r3,1212(sp)
100034ec:	003e9806 	br	10002f50 <__alt_data_end+0xf8002f50>
100034f0:	05003f0e 	bge	zero,r20,100035f0 <___vfprintf_internal_r+0x1dec>
100034f4:	05000044 	movi	r20,1
100034f8:	d8c13217 	ldw	r3,1224(sp)
100034fc:	a0e9883a 	add	r20,r20,r3
10003500:	dd012b15 	stw	r20,1196(sp)
10003504:	dd012815 	stw	r20,1184(sp)
10003508:	a03fec0e 	bge	r20,zero,100034bc <__alt_data_end+0xf80034bc>
1000350c:	d8012815 	stw	zero,1184(sp)
10003510:	048019c4 	movi	r18,103
10003514:	003ed206 	br	10003060 <__alt_data_end+0xf8003060>
10003518:	d8c11f84 	addi	r3,sp,1150
1000351c:	102f883a 	mov	r23,r2
10003520:	4839883a 	mov	fp,r9
10003524:	a009883a 	mov	r4,r20
10003528:	01400284 	movi	r5,10
1000352c:	182d883a 	mov	r22,r3
10003530:	00015200 	call	10001520 <__modsi3>
10003534:	10800c04 	addi	r2,r2,48
10003538:	a009883a 	mov	r4,r20
1000353c:	b0800005 	stb	r2,0(r22)
10003540:	01400284 	movi	r5,10
10003544:	00014d00 	call	100014d0 <__divsi3>
10003548:	1029883a 	mov	r20,r2
1000354c:	b0ffffc4 	addi	r3,r22,-1
10003550:	b8bff416 	blt	r23,r2,10003524 <__alt_data_end+0xf8003524>
10003554:	11400c04 	addi	r5,r2,48
10003558:	b17fffc5 	stb	r5,-1(r22)
1000355c:	d8811fc4 	addi	r2,sp,1151
10003560:	e013883a 	mov	r9,fp
10003564:	18803e2e 	bgeu	r3,r2,10003660 <___vfprintf_internal_r+0x1e5c>
10003568:	b007883a 	mov	r3,r22
1000356c:	d9012044 	addi	r4,sp,1153
10003570:	00000206 	br	1000357c <___vfprintf_internal_r+0x1d78>
10003574:	19400003 	ldbu	r5,0(r3)
10003578:	18c00044 	addi	r3,r3,1
1000357c:	21400005 	stb	r5,0(r4)
10003580:	21000044 	addi	r4,r4,1
10003584:	10fffb1e 	bne	r2,r3,10003574 <__alt_data_end+0xf8003574>
10003588:	d8c12004 	addi	r3,sp,1152
1000358c:	1d87c83a 	sub	r3,r3,r22
10003590:	d9012044 	addi	r4,sp,1153
10003594:	20c7883a 	add	r3,r4,r3
10003598:	003fb006 	br	1000345c <__alt_data_end+0xf800345c>
1000359c:	e5c00044 	addi	r23,fp,1
100035a0:	003e7406 	br	10002f74 <__alt_data_end+0xf8002f74>
100035a4:	d8c12217 	ldw	r3,1160(sp)
100035a8:	003e9906 	br	10003010 <__alt_data_end+0xf8003010>
100035ac:	d9012d17 	ldw	r4,1204(sp)
100035b0:	ac800043 	ldbu	r18,1(r21)
100035b4:	b82b883a 	mov	r21,r23
100035b8:	20c00017 	ldw	r3,0(r4)
100035bc:	20800104 	addi	r2,r4,4
100035c0:	d8812d15 	stw	r2,1204(sp)
100035c4:	18002116 	blt	r3,zero,1000364c <___vfprintf_internal_r+0x1e48>
100035c8:	94803fcc 	andi	r18,r18,255
100035cc:	9480201c 	xori	r18,r18,128
100035d0:	94bfe004 	addi	r18,r18,-128
100035d4:	0038e706 	br	10001974 <__alt_data_end+0xf8001974>
100035d8:	80a0703a 	and	r16,r16,r2
100035dc:	803fa61e 	bne	r16,zero,10003478 <__alt_data_end+0xf8003478>
100035e0:	d8812b17 	ldw	r2,1196(sp)
100035e4:	d8812815 	stw	r2,1184(sp)
100035e8:	103e9d0e 	bge	r2,zero,10003060 <__alt_data_end+0xf8003060>
100035ec:	003fa706 	br	1000348c <__alt_data_end+0xf800348c>
100035f0:	00800084 	movi	r2,2
100035f4:	1529c83a 	sub	r20,r2,r20
100035f8:	003fbf06 	br	100034f8 <__alt_data_end+0xf80034f8>
100035fc:	00800b44 	movi	r2,45
10003600:	0529c83a 	sub	r20,zero,r20
10003604:	d8812005 	stb	r2,1152(sp)
10003608:	003f8c06 	br	1000343c <__alt_data_end+0xf800343c>
1000360c:	008011c4 	movi	r2,71
10003610:	90be6926 	beq	r18,r2,10002fb8 <__alt_data_end+0xf8002fb8>
10003614:	003e6a06 	br	10002fc0 <__alt_data_end+0xf8002fc0>
10003618:	00bfffc4 	movi	r2,-1
1000361c:	d8812c15 	stw	r2,1200(sp)
10003620:	0039ad06 	br	10001cd8 <__alt_data_end+0xf8001cd8>
10003624:	1007883a 	mov	r3,r2
10003628:	003e7906 	br	10003010 <__alt_data_end+0xf8003010>
1000362c:	e000021e 	bne	fp,zero,10003638 <___vfprintf_internal_r+0x1e34>
10003630:	8400004c 	andi	r16,r16,1
10003634:	80000e26 	beq	r16,zero,10003670 <___vfprintf_internal_r+0x1e6c>
10003638:	e7000084 	addi	fp,fp,2
1000363c:	df012b15 	stw	fp,1196(sp)
10003640:	df012815 	stw	fp,1184(sp)
10003644:	e03e860e 	bge	fp,zero,10003060 <__alt_data_end+0xf8003060>
10003648:	003f9006 	br	1000348c <__alt_data_end+0xf800348c>
1000364c:	94803fcc 	andi	r18,r18,255
10003650:	9480201c 	xori	r18,r18,128
10003654:	00ffffc4 	movi	r3,-1
10003658:	94bfe004 	addi	r18,r18,-128
1000365c:	0038c506 	br	10001974 <__alt_data_end+0xf8001974>
10003660:	d8c12044 	addi	r3,sp,1153
10003664:	003f7d06 	br	1000345c <__alt_data_end+0xf800345c>
10003668:	dd012417 	ldw	r20,1168(sp)
1000366c:	003f6d06 	br	10003424 <__alt_data_end+0xf8003424>
10003670:	00c00044 	movi	r3,1
10003674:	d8c12815 	stw	r3,1184(sp)
10003678:	d8c12b15 	stw	r3,1196(sp)
1000367c:	003e7806 	br	10003060 <__alt_data_end+0xf8003060>

10003680 <__vfprintf_internal>:
10003680:	00840074 	movhi	r2,4097
10003684:	10936704 	addi	r2,r2,19868
10003688:	2007883a 	mov	r3,r4
1000368c:	11000017 	ldw	r4,0(r2)
10003690:	2805883a 	mov	r2,r5
10003694:	300f883a 	mov	r7,r6
10003698:	180b883a 	mov	r5,r3
1000369c:	100d883a 	mov	r6,r2
100036a0:	00018041 	jmpi	10001804 <___vfprintf_internal_r>

100036a4 <__svfscanf_r>:
100036a4:	deff4c04 	addi	sp,sp,-720
100036a8:	ddc0b115 	stw	r23,708(sp)
100036ac:	dd00ae15 	stw	r20,696(sp)
100036b0:	dcc0ad15 	stw	r19,692(sp)
100036b4:	dc80ac15 	stw	r18,688(sp)
100036b8:	dc40ab15 	stw	r17,684(sp)
100036bc:	dc00aa15 	stw	r16,680(sp)
100036c0:	dfc0b315 	stw	ra,716(sp)
100036c4:	df00b215 	stw	fp,712(sp)
100036c8:	dd80b015 	stw	r22,704(sp)
100036cc:	dd40af15 	stw	r21,700(sp)
100036d0:	30800007 	ldb	r2,0(r6)
100036d4:	002f883a 	mov	r23,zero
100036d8:	d9c09c15 	stw	r7,624(sp)
100036dc:	d800a015 	stw	zero,640(sp)
100036e0:	d8009f15 	stw	zero,636(sp)
100036e4:	d8009e15 	stw	zero,632(sp)
100036e8:	d8809b15 	stw	r2,620(sp)
100036ec:	2023883a 	mov	r17,r4
100036f0:	04840074 	movhi	r18,4097
100036f4:	94936504 	addi	r18,r18,19860
100036f8:	b829883a 	mov	r20,r23
100036fc:	2827883a 	mov	r19,r5
10003700:	34000044 	addi	r16,r6,1
10003704:	10002426 	beq	r2,zero,10003798 <__svfscanf_r+0xf4>
10003708:	95400017 	ldw	r21,0(r18)
1000370c:	a887883a 	add	r3,r21,r2
10003710:	18c00003 	ldbu	r3,0(r3)
10003714:	18c0020c 	andi	r3,r3,8
10003718:	18c03fcc 	andi	r3,r3,255
1000371c:	18c0201c 	xori	r3,r3,128
10003720:	18ffe004 	addi	r3,r3,-128
10003724:	18002926 	beq	r3,zero,100037cc <__svfscanf_r+0x128>
10003728:	98800117 	ldw	r2,4(r19)
1000372c:	0080110e 	bge	zero,r2,10003774 <__svfscanf_r+0xd0>
10003730:	98c00017 	ldw	r3,0(r19)
10003734:	91000017 	ldw	r4,0(r18)
10003738:	18800003 	ldbu	r2,0(r3)
1000373c:	2085883a 	add	r2,r4,r2
10003740:	10800003 	ldbu	r2,0(r2)
10003744:	1080020c 	andi	r2,r2,8
10003748:	10803fcc 	andi	r2,r2,255
1000374c:	1080201c 	xori	r2,r2,128
10003750:	10bfe004 	addi	r2,r2,-128
10003754:	10000b26 	beq	r2,zero,10003784 <__svfscanf_r+0xe0>
10003758:	98800117 	ldw	r2,4(r19)
1000375c:	18c00044 	addi	r3,r3,1
10003760:	98c00015 	stw	r3,0(r19)
10003764:	10bfffc4 	addi	r2,r2,-1
10003768:	98800115 	stw	r2,4(r19)
1000376c:	a5000044 	addi	r20,r20,1
10003770:	00bfef16 	blt	zero,r2,10003730 <__alt_data_end+0xf8003730>
10003774:	8809883a 	mov	r4,r17
10003778:	980b883a 	mov	r5,r19
1000377c:	000a1a40 	call	1000a1a4 <__srefill_r>
10003780:	103feb26 	beq	r2,zero,10003730 <__alt_data_end+0xf8003730>
10003784:	800d883a 	mov	r6,r16
10003788:	30800007 	ldb	r2,0(r6)
1000378c:	34000044 	addi	r16,r6,1
10003790:	d8809b15 	stw	r2,620(sp)
10003794:	103fdc1e 	bne	r2,zero,10003708 <__alt_data_end+0xf8003708>
10003798:	d8809e17 	ldw	r2,632(sp)
1000379c:	dfc0b317 	ldw	ra,716(sp)
100037a0:	df00b217 	ldw	fp,712(sp)
100037a4:	ddc0b117 	ldw	r23,708(sp)
100037a8:	dd80b017 	ldw	r22,704(sp)
100037ac:	dd40af17 	ldw	r21,700(sp)
100037b0:	dd00ae17 	ldw	r20,696(sp)
100037b4:	dcc0ad17 	ldw	r19,692(sp)
100037b8:	dc80ac17 	ldw	r18,688(sp)
100037bc:	dc40ab17 	ldw	r17,684(sp)
100037c0:	dc00aa17 	ldw	r16,680(sp)
100037c4:	dec0b404 	addi	sp,sp,720
100037c8:	f800283a 	ret
100037cc:	00c00944 	movi	r3,37
100037d0:	10c00e26 	beq	r2,r3,1000380c <__svfscanf_r+0x168>
100037d4:	98800117 	ldw	r2,4(r19)
100037d8:	0080e40e 	bge	zero,r2,10003b6c <__svfscanf_r+0x4c8>
100037dc:	98800017 	ldw	r2,0(r19)
100037e0:	80ffffc7 	ldb	r3,-1(r16)
100037e4:	11000003 	ldbu	r4,0(r2)
100037e8:	20ffeb1e 	bne	r4,r3,10003798 <__alt_data_end+0xf8003798>
100037ec:	98c00117 	ldw	r3,4(r19)
100037f0:	10800044 	addi	r2,r2,1
100037f4:	98800015 	stw	r2,0(r19)
100037f8:	18bfffc4 	addi	r2,r3,-1
100037fc:	98800115 	stw	r2,4(r19)
10003800:	a5000044 	addi	r20,r20,1
10003804:	800d883a 	mov	r6,r16
10003808:	003fdf06 	br	10003788 <__alt_data_end+0xf8003788>
1000380c:	0039883a 	mov	fp,zero
10003810:	35c00043 	ldbu	r23,1(r6)
10003814:	002d883a 	mov	r22,zero
10003818:	00c01e04 	movi	r3,120
1000381c:	01801b04 	movi	r6,108
10003820:	e009883a 	mov	r4,fp
10003824:	b8803fcc 	andi	r2,r23,255
10003828:	87000044 	addi	fp,r16,1
1000382c:	18804f2e 	bgeu	r3,r2,1000396c <__svfscanf_r+0x2c8>
10003830:	bdc03fcc 	andi	r23,r23,255
10003834:	bdc0201c 	xori	r23,r23,128
10003838:	bdffe004 	addi	r23,r23,-128
1000383c:	adeb883a 	add	r21,r21,r23
10003840:	a8800003 	ldbu	r2,0(r21)
10003844:	df009d15 	stw	fp,628(sp)
10003848:	2039883a 	mov	fp,r4
1000384c:	1080004c 	andi	r2,r2,1
10003850:	1002d926 	beq	r2,zero,100043b8 <__svfscanf_r+0xd14>
10003854:	b5800054 	ori	r22,r22,1
10003858:	00840074 	movhi	r2,4097
1000385c:	10af9404 	addi	r2,r2,-16816
10003860:	00c00284 	movi	r3,10
10003864:	d880a015 	stw	r2,640(sp)
10003868:	d8c09f15 	stw	r3,636(sp)
1000386c:	040000c4 	movi	r16,3
10003870:	98800117 	ldw	r2,4(r19)
10003874:	0081bd0e 	bge	zero,r2,10003f6c <__svfscanf_r+0x8c8>
10003878:	b080100c 	andi	r2,r22,64
1000387c:	1000ce26 	beq	r2,zero,10003bb8 <__svfscanf_r+0x514>
10003880:	00800084 	movi	r2,2
10003884:	80818426 	beq	r16,r2,10003e98 <__svfscanf_r+0x7f4>
10003888:	1400f716 	blt	r2,r16,10003c68 <__svfscanf_r+0x5c4>
1000388c:	00800044 	movi	r2,1
10003890:	8080dc26 	beq	r16,r2,10003c04 <__svfscanf_r+0x560>
10003894:	e000011e 	bne	fp,zero,1000389c <__svfscanf_r+0x1f8>
10003898:	07000044 	movi	fp,1
1000389c:	b080004c 	andi	r2,r22,1
100038a0:	10022826 	beq	r2,zero,10004144 <__svfscanf_r+0xaa0>
100038a4:	b5c0040c 	andi	r23,r22,16
100038a8:	b804601e 	bne	r23,zero,10004a2c <__svfscanf_r+0x1388>
100038ac:	d8c09c17 	ldw	r3,624(sp)
100038b0:	1d800017 	ldw	r22,0(r3)
100038b4:	18c00104 	addi	r3,r3,4
100038b8:	d8c09c15 	stw	r3,624(sp)
100038bc:	0021883a 	mov	r16,zero
100038c0:	dd409904 	addi	r21,sp,612
100038c4:	01040074 	movhi	r4,4097
100038c8:	21136804 	addi	r4,r4,19872
100038cc:	20800017 	ldw	r2,0(r4)
100038d0:	8080aa26 	beq	r16,r2,10003b7c <__svfscanf_r+0x4d8>
100038d4:	98800017 	ldw	r2,0(r19)
100038d8:	9a000117 	ldw	r8,4(r19)
100038dc:	d9400104 	addi	r5,sp,4
100038e0:	11c00003 	ldbu	r7,0(r2)
100038e4:	423fffc4 	addi	r8,r8,-1
100038e8:	10800044 	addi	r2,r2,1
100038ec:	2c07883a 	add	r3,r5,r16
100038f0:	a809883a 	mov	r4,r21
100038f4:	000b883a 	mov	r5,zero
100038f8:	01800204 	movi	r6,8
100038fc:	9a000115 	stw	r8,4(r19)
10003900:	98800015 	stw	r2,0(r19)
10003904:	19c00005 	stb	r7,0(r3)
10003908:	84000044 	addi	r16,r16,1
1000390c:	00088b40 	call	100088b4 <memset>
10003910:	8809883a 	mov	r4,r17
10003914:	dd400015 	stw	r21,0(sp)
10003918:	b00b883a 	mov	r5,r22
1000391c:	d9800104 	addi	r6,sp,4
10003920:	800f883a 	mov	r7,r16
10003924:	00084080 	call	10008408 <_mbrtowc_r>
10003928:	00ffffc4 	movi	r3,-1
1000392c:	10c09326 	beq	r2,r3,10003b7c <__svfscanf_r+0x4d8>
10003930:	1003281e 	bne	r2,zero,100045d4 <__svfscanf_r+0xf30>
10003934:	b800011e 	bne	r23,zero,1000393c <__svfscanf_r+0x298>
10003938:	b0000015 	stw	zero,0(r22)
1000393c:	a429883a 	add	r20,r20,r16
10003940:	e73fffc4 	addi	fp,fp,-1
10003944:	b803281e 	bne	r23,zero,100045e8 <__svfscanf_r+0xf44>
10003948:	b5800104 	addi	r22,r22,4
1000394c:	0021883a 	mov	r16,zero
10003950:	98800117 	ldw	r2,4(r19)
10003954:	00820b0e 	bge	zero,r2,10004184 <__svfscanf_r+0xae0>
10003958:	e03fda1e 	bne	fp,zero,100038c4 <__alt_data_end+0xf80038c4>
1000395c:	b8012226 	beq	r23,zero,10003de8 <__svfscanf_r+0x744>
10003960:	dc009d17 	ldw	r16,628(sp)
10003964:	800d883a 	mov	r6,r16
10003968:	003f8706 	br	10003788 <__alt_data_end+0xf8003788>
1000396c:	1085883a 	add	r2,r2,r2
10003970:	1085883a 	add	r2,r2,r2
10003974:	01440034 	movhi	r5,4096
10003978:	294e6204 	addi	r5,r5,14728
1000397c:	1145883a 	add	r2,r2,r5
10003980:	10800017 	ldw	r2,0(r2)
10003984:	1000683a 	jmp	r2
10003988:	10003b9c 	xori	zero,r2,238
1000398c:	10003830 	cmpltui	zero,r2,224
10003990:	10003830 	cmpltui	zero,r2,224
10003994:	10003830 	cmpltui	zero,r2,224
10003998:	10003830 	cmpltui	zero,r2,224
1000399c:	10003830 	cmpltui	zero,r2,224
100039a0:	10003830 	cmpltui	zero,r2,224
100039a4:	10003830 	cmpltui	zero,r2,224
100039a8:	10003830 	cmpltui	zero,r2,224
100039ac:	10003830 	cmpltui	zero,r2,224
100039b0:	10003830 	cmpltui	zero,r2,224
100039b4:	10003830 	cmpltui	zero,r2,224
100039b8:	10003830 	cmpltui	zero,r2,224
100039bc:	10003830 	cmpltui	zero,r2,224
100039c0:	10003830 	cmpltui	zero,r2,224
100039c4:	10003830 	cmpltui	zero,r2,224
100039c8:	10003830 	cmpltui	zero,r2,224
100039cc:	10003830 	cmpltui	zero,r2,224
100039d0:	10003830 	cmpltui	zero,r2,224
100039d4:	10003830 	cmpltui	zero,r2,224
100039d8:	10003830 	cmpltui	zero,r2,224
100039dc:	10003830 	cmpltui	zero,r2,224
100039e0:	10003830 	cmpltui	zero,r2,224
100039e4:	10003830 	cmpltui	zero,r2,224
100039e8:	10003830 	cmpltui	zero,r2,224
100039ec:	10003830 	cmpltui	zero,r2,224
100039f0:	10003830 	cmpltui	zero,r2,224
100039f4:	10003830 	cmpltui	zero,r2,224
100039f8:	10003830 	cmpltui	zero,r2,224
100039fc:	10003830 	cmpltui	zero,r2,224
10003a00:	10003830 	cmpltui	zero,r2,224
10003a04:	10003830 	cmpltui	zero,r2,224
10003a08:	10003830 	cmpltui	zero,r2,224
10003a0c:	10003830 	cmpltui	zero,r2,224
10003a10:	10003830 	cmpltui	zero,r2,224
10003a14:	10003830 	cmpltui	zero,r2,224
10003a18:	10003830 	cmpltui	zero,r2,224
10003a1c:	1000446c 	andhi	zero,r2,273
10003a20:	10003830 	cmpltui	zero,r2,224
10003a24:	10003830 	cmpltui	zero,r2,224
10003a28:	10003830 	cmpltui	zero,r2,224
10003a2c:	10003830 	cmpltui	zero,r2,224
10003a30:	10004478 	rdprs	zero,r2,273
10003a34:	10003830 	cmpltui	zero,r2,224
10003a38:	10003830 	cmpltui	zero,r2,224
10003a3c:	10003830 	cmpltui	zero,r2,224
10003a40:	10003830 	cmpltui	zero,r2,224
10003a44:	10003830 	cmpltui	zero,r2,224
10003a48:	10004408 	cmpgei	zero,r2,272
10003a4c:	10004408 	cmpgei	zero,r2,272
10003a50:	10004408 	cmpgei	zero,r2,272
10003a54:	10004408 	cmpgei	zero,r2,272
10003a58:	10004408 	cmpgei	zero,r2,272
10003a5c:	10004408 	cmpgei	zero,r2,272
10003a60:	10004408 	cmpgei	zero,r2,272
10003a64:	10004408 	cmpgei	zero,r2,272
10003a68:	10004408 	cmpgei	zero,r2,272
10003a6c:	10004408 	cmpgei	zero,r2,272
10003a70:	10003830 	cmpltui	zero,r2,224
10003a74:	10003830 	cmpltui	zero,r2,224
10003a78:	10003830 	cmpltui	zero,r2,224
10003a7c:	10003830 	cmpltui	zero,r2,224
10003a80:	10003830 	cmpltui	zero,r2,224
10003a84:	10003830 	cmpltui	zero,r2,224
10003a88:	10003830 	cmpltui	zero,r2,224
10003a8c:	10003830 	cmpltui	zero,r2,224
10003a90:	10003830 	cmpltui	zero,r2,224
10003a94:	10003830 	cmpltui	zero,r2,224
10003a98:	10004440 	call	11000444 <_gp+0xfe36b0>
10003a9c:	1000444c 	andi	zero,r2,273
10003aa0:	10003830 	cmpltui	zero,r2,224
10003aa4:	1000444c 	andi	zero,r2,273
10003aa8:	10003830 	cmpltui	zero,r2,224
10003aac:	10003830 	cmpltui	zero,r2,224
10003ab0:	10003830 	cmpltui	zero,r2,224
10003ab4:	10003830 	cmpltui	zero,r2,224
10003ab8:	1000445c 	xori	zero,r2,273
10003abc:	10003830 	cmpltui	zero,r2,224
10003ac0:	10003830 	cmpltui	zero,r2,224
10003ac4:	10004488 	cmpgei	zero,r2,274
10003ac8:	10003830 	cmpltui	zero,r2,224
10003acc:	10003830 	cmpltui	zero,r2,224
10003ad0:	10003830 	cmpltui	zero,r2,224
10003ad4:	10003830 	cmpltui	zero,r2,224
10003ad8:	10003830 	cmpltui	zero,r2,224
10003adc:	10003830 	cmpltui	zero,r2,224
10003ae0:	10003830 	cmpltui	zero,r2,224
10003ae4:	10003830 	cmpltui	zero,r2,224
10003ae8:	100044b0 	cmpltui	zero,r2,274
10003aec:	10003830 	cmpltui	zero,r2,224
10003af0:	10003830 	cmpltui	zero,r2,224
10003af4:	100044d8 	cmpnei	zero,r2,275
10003af8:	10003830 	cmpltui	zero,r2,224
10003afc:	10003830 	cmpltui	zero,r2,224
10003b00:	10003830 	cmpltui	zero,r2,224
10003b04:	10003830 	cmpltui	zero,r2,224
10003b08:	10003830 	cmpltui	zero,r2,224
10003b0c:	10003830 	cmpltui	zero,r2,224
10003b10:	10003830 	cmpltui	zero,r2,224
10003b14:	100044fc 	xorhi	zero,r2,275
10003b18:	10004510 	cmplti	zero,r2,276
10003b1c:	1000444c 	andi	zero,r2,273
10003b20:	1000444c 	andi	zero,r2,273
10003b24:	1000444c 	andi	zero,r2,273
10003b28:	1000451c 	xori	zero,r2,276
10003b2c:	1000452c 	andhi	zero,r2,276
10003b30:	10003830 	cmpltui	zero,r2,224
10003b34:	10003830 	cmpltui	zero,r2,224
10003b38:	1000454c 	andi	zero,r2,277
10003b3c:	10003830 	cmpltui	zero,r2,224
10003b40:	1000456c 	andhi	zero,r2,277
10003b44:	100045a0 	cmpeqi	zero,r2,278
10003b48:	100045ac 	andhi	zero,r2,278
10003b4c:	10003830 	cmpltui	zero,r2,224
10003b50:	10003830 	cmpltui	zero,r2,224
10003b54:	100043d4 	ori	zero,r2,271
10003b58:	10003830 	cmpltui	zero,r2,224
10003b5c:	100043e4 	muli	zero,r2,271
10003b60:	10003830 	cmpltui	zero,r2,224
10003b64:	10003830 	cmpltui	zero,r2,224
10003b68:	100044b0 	cmpltui	zero,r2,274
10003b6c:	8809883a 	mov	r4,r17
10003b70:	980b883a 	mov	r5,r19
10003b74:	000a1a40 	call	1000a1a4 <__srefill_r>
10003b78:	103f1826 	beq	r2,zero,100037dc <__alt_data_end+0xf80037dc>
10003b7c:	d8809e17 	ldw	r2,632(sp)
10003b80:	10000626 	beq	r2,zero,10003b9c <__svfscanf_r+0x4f8>
10003b84:	9880030b 	ldhu	r2,12(r19)
10003b88:	1080100c 	andi	r2,r2,64
10003b8c:	10bfffcc 	andi	r2,r2,65535
10003b90:	10a0001c 	xori	r2,r2,32768
10003b94:	10a00004 	addi	r2,r2,-32768
10003b98:	103eff26 	beq	r2,zero,10003798 <__alt_data_end+0xf8003798>
10003b9c:	00bfffc4 	movi	r2,-1
10003ba0:	d8809e15 	stw	r2,632(sp)
10003ba4:	003efc06 	br	10003798 <__alt_data_end+0xf8003798>
10003ba8:	8809883a 	mov	r4,r17
10003bac:	980b883a 	mov	r5,r19
10003bb0:	000a1a40 	call	1000a1a4 <__srefill_r>
10003bb4:	103ff11e 	bne	r2,zero,10003b7c <__alt_data_end+0xf8003b7c>
10003bb8:	91400017 	ldw	r5,0(r18)
10003bbc:	98800017 	ldw	r2,0(r19)
10003bc0:	00000206 	br	10003bcc <__svfscanf_r+0x528>
10003bc4:	10800044 	addi	r2,r2,1
10003bc8:	98800015 	stw	r2,0(r19)
10003bcc:	10c00003 	ldbu	r3,0(r2)
10003bd0:	28c7883a 	add	r3,r5,r3
10003bd4:	18c00003 	ldbu	r3,0(r3)
10003bd8:	18c0020c 	andi	r3,r3,8
10003bdc:	18c03fcc 	andi	r3,r3,255
10003be0:	18c0201c 	xori	r3,r3,128
10003be4:	18ffe004 	addi	r3,r3,-128
10003be8:	183f2526 	beq	r3,zero,10003880 <__alt_data_end+0xf8003880>
10003bec:	98c00117 	ldw	r3,4(r19)
10003bf0:	a5000044 	addi	r20,r20,1
10003bf4:	18ffffc4 	addi	r3,r3,-1
10003bf8:	98c00115 	stw	r3,4(r19)
10003bfc:	00fff116 	blt	zero,r3,10003bc4 <__alt_data_end+0xf8003bc4>
10003c00:	003fe906 	br	10003ba8 <__alt_data_end+0xf8003ba8>
10003c04:	e000011e 	bne	fp,zero,10003c0c <__svfscanf_r+0x568>
10003c08:	073fffc4 	movi	fp,-1
10003c0c:	b580040c 	andi	r22,r22,16
10003c10:	b0016826 	beq	r22,zero,100041b4 <__svfscanf_r+0xb10>
10003c14:	98800017 	ldw	r2,0(r19)
10003c18:	0021883a 	mov	r16,zero
10003c1c:	dd805884 	addi	r22,sp,354
10003c20:	10c00003 	ldbu	r3,0(r2)
10003c24:	b0c7883a 	add	r3,r22,r3
10003c28:	18c00007 	ldb	r3,0(r3)
10003c2c:	18039726 	beq	r3,zero,10004a8c <__svfscanf_r+0x13e8>
10003c30:	98c00117 	ldw	r3,4(r19)
10003c34:	10800044 	addi	r2,r2,1
10003c38:	84000044 	addi	r16,r16,1
10003c3c:	18ffffc4 	addi	r3,r3,-1
10003c40:	98c00115 	stw	r3,4(r19)
10003c44:	98800015 	stw	r2,0(r19)
10003c48:	e4008f26 	beq	fp,r16,10003e88 <__svfscanf_r+0x7e4>
10003c4c:	00fff416 	blt	zero,r3,10003c20 <__alt_data_end+0xf8003c20>
10003c50:	8809883a 	mov	r4,r17
10003c54:	980b883a 	mov	r5,r19
10003c58:	000a1a40 	call	1000a1a4 <__srefill_r>
10003c5c:	10008a1e 	bne	r2,zero,10003e88 <__svfscanf_r+0x7e4>
10003c60:	98800017 	ldw	r2,0(r19)
10003c64:	003fee06 	br	10003c20 <__alt_data_end+0xf8003c20>
10003c68:	008000c4 	movi	r2,3
10003c6c:	80806426 	beq	r16,r2,10003e00 <__svfscanf_r+0x75c>
10003c70:	00800104 	movi	r2,4
10003c74:	80bf071e 	bne	r16,r2,10003894 <__alt_data_end+0xf8003894>
10003c78:	e0bfffc4 	addi	r2,fp,-1
10003c7c:	01005704 	movi	r4,348
10003c80:	20814736 	bltu	r4,r2,100041a0 <__svfscanf_r+0xafc>
10003c84:	0017883a 	mov	r11,zero
10003c88:	b581e014 	ori	r22,r22,1920
10003c8c:	0021883a 	mov	r16,zero
10003c90:	d800a115 	stw	zero,644(sp)
10003c94:	d800a315 	stw	zero,652(sp)
10003c98:	002b883a 	mov	r21,zero
10003c9c:	d800a215 	stw	zero,648(sp)
10003ca0:	ddc00104 	addi	r23,sp,4
10003ca4:	000d883a 	mov	r6,zero
10003ca8:	00c01384 	movi	r3,78
10003cac:	03810004 	movi	r14,1024
10003cb0:	033e1fc4 	movi	r12,-1921
10003cb4:	03ff5fc4 	movi	r15,-641
10003cb8:	99c00017 	ldw	r7,0(r19)
10003cbc:	39400003 	ldbu	r5,0(r7)
10003cc0:	28bff544 	addi	r2,r5,-43
10003cc4:	10803fcc 	andi	r2,r2,255
10003cc8:	1880c82e 	bgeu	r3,r2,10003fec <__svfscanf_r+0x948>
10003ccc:	a8000226 	beq	r21,zero,10003cd8 <__svfscanf_r+0x634>
10003cd0:	00bfbfc4 	movi	r2,-257
10003cd4:	b0ac703a 	and	r22,r22,r2
10003cd8:	31bfffc4 	addi	r6,r6,-1
10003cdc:	00800044 	movi	r2,1
10003ce0:	1184092e 	bgeu	r2,r6,10004d08 <__svfscanf_r+0x1664>
10003ce4:	80803fcc 	andi	r2,r16,255
10003ce8:	1080201c 	xori	r2,r2,128
10003cec:	10bfe004 	addi	r2,r2,-128
10003cf0:	10ffffc4 	addi	r3,r2,-1
10003cf4:	01000184 	movi	r4,6
10003cf8:	20c01036 	bltu	r4,r3,10003d3c <__svfscanf_r+0x698>
10003cfc:	00c00084 	movi	r3,2
10003d00:	1883f50e 	bge	r3,r2,10004cd8 <__svfscanf_r+0x1634>
10003d04:	00c000c4 	movi	r3,3
10003d08:	10c00c26 	beq	r2,r3,10003d3c <__svfscanf_r+0x698>
10003d0c:	843fff04 	addi	r16,r16,-4
10003d10:	84003fcc 	andi	r16,r16,255
10003d14:	0438303a 	nor	fp,zero,r16
10003d18:	bf39883a 	add	fp,r23,fp
10003d1c:	bdffffc4 	addi	r23,r23,-1
10003d20:	b9400007 	ldb	r5,0(r23)
10003d24:	8809883a 	mov	r4,r17
10003d28:	980d883a 	mov	r6,r19
10003d2c:	000cb540 	call	1000cb54 <_ungetc_r>
10003d30:	bf3ffa1e 	bne	r23,fp,10003d1c <__alt_data_end+0xf8003d1c>
10003d34:	a27fffc4 	addi	r9,r20,-1
10003d38:	4c29c83a 	sub	r20,r9,r16
10003d3c:	b080400c 	andi	r2,r22,256
10003d40:	10001326 	beq	r2,zero,10003d90 <__svfscanf_r+0x6ec>
10003d44:	b081000c 	andi	r2,r22,1024
10003d48:	1003d21e 	bne	r2,zero,10004c94 <__svfscanf_r+0x15f0>
10003d4c:	b97fffc7 	ldb	r5,-1(r23)
10003d50:	00801944 	movi	r2,101
10003d54:	bc3fffc4 	addi	r16,r23,-1
10003d58:	a53fffc4 	addi	r20,r20,-1
10003d5c:	28800826 	beq	r5,r2,10003d80 <__svfscanf_r+0x6dc>
10003d60:	00801144 	movi	r2,69
10003d64:	28800626 	beq	r5,r2,10003d80 <__svfscanf_r+0x6dc>
10003d68:	8809883a 	mov	r4,r17
10003d6c:	980d883a 	mov	r6,r19
10003d70:	000cb540 	call	1000cb54 <_ungetc_r>
10003d74:	b97fff87 	ldb	r5,-2(r23)
10003d78:	bc3fff84 	addi	r16,r23,-2
10003d7c:	a53fffc4 	addi	r20,r20,-1
10003d80:	8809883a 	mov	r4,r17
10003d84:	980d883a 	mov	r6,r19
10003d88:	000cb540 	call	1000cb54 <_ungetc_r>
10003d8c:	802f883a 	mov	r23,r16
10003d90:	b080040c 	andi	r2,r22,16
10003d94:	103ef21e 	bne	r2,zero,10003960 <__alt_data_end+0xf8003960>
10003d98:	b8000005 	stb	zero,0(r23)
10003d9c:	b0c1800c 	andi	r3,r22,1536
10003da0:	00810004 	movi	r2,1024
10003da4:	18837726 	beq	r3,r2,10004b84 <__svfscanf_r+0x14e0>
10003da8:	d8c0a317 	ldw	r3,652(sp)
10003dac:	1803601e 	bne	r3,zero,10004b30 <__svfscanf_r+0x148c>
10003db0:	8809883a 	mov	r4,r17
10003db4:	d9400104 	addi	r5,sp,4
10003db8:	000d883a 	mov	r6,zero
10003dbc:	000a7cc0 	call	1000a7cc <_strtod_r>
10003dc0:	102b883a 	mov	r21,r2
10003dc4:	b080004c 	andi	r2,r22,1
10003dc8:	182f883a 	mov	r23,r3
10003dcc:	10031f26 	beq	r2,zero,10004a4c <__svfscanf_r+0x13a8>
10003dd0:	d9409c17 	ldw	r5,624(sp)
10003dd4:	28800017 	ldw	r2,0(r5)
10003dd8:	29400104 	addi	r5,r5,4
10003ddc:	d9409c15 	stw	r5,624(sp)
10003de0:	15400015 	stw	r21,0(r2)
10003de4:	10c00115 	stw	r3,4(r2)
10003de8:	d8809e17 	ldw	r2,632(sp)
10003dec:	dc009d17 	ldw	r16,628(sp)
10003df0:	10800044 	addi	r2,r2,1
10003df4:	d8809e15 	stw	r2,632(sp)
10003df8:	800d883a 	mov	r6,r16
10003dfc:	003e6206 	br	10003788 <__alt_data_end+0xf8003788>
10003e00:	e0bfffc4 	addi	r2,fp,-1
10003e04:	01005704 	movi	r4,348
10003e08:	2080e82e 	bgeu	r4,r2,100041ac <__svfscanf_r+0xb08>
10003e0c:	e0ffa8c4 	addi	r3,fp,-349
10003e10:	07005744 	movi	fp,349
10003e14:	da409f17 	ldw	r9,636(sp)
10003e18:	b5836014 	ori	r22,r22,3456
10003e1c:	0021883a 	mov	r16,zero
10003e20:	dd400104 	addi	r21,sp,4
10003e24:	05c01344 	movi	r23,77
10003e28:	01c08004 	movi	r7,512
10003e2c:	01bf7fc4 	movi	r6,-513
10003e30:	9a000017 	ldw	r8,0(r19)
10003e34:	41400003 	ldbu	r5,0(r8)
10003e38:	28bff544 	addi	r2,r5,-43
10003e3c:	10803fcc 	andi	r2,r2,255
10003e40:	b881eb2e 	bgeu	r23,r2,100045f0 <__svfscanf_r+0xf4c>
10003e44:	da409f15 	stw	r9,636(sp)
10003e48:	b080400c 	andi	r2,r22,256
10003e4c:	10000926 	beq	r2,zero,10003e74 <__svfscanf_r+0x7d0>
10003e50:	d9400104 	addi	r5,sp,4
10003e54:	2d40052e 	bgeu	r5,r21,10003e6c <__svfscanf_r+0x7c8>
10003e58:	a97fffc7 	ldb	r5,-1(r21)
10003e5c:	8809883a 	mov	r4,r17
10003e60:	980d883a 	mov	r6,r19
10003e64:	ad7fffc4 	addi	r21,r21,-1
10003e68:	000cb540 	call	1000cb54 <_ungetc_r>
10003e6c:	d8800104 	addi	r2,sp,4
10003e70:	157e4926 	beq	r2,r21,10003798 <__alt_data_end+0xf8003798>
10003e74:	b080040c 	andi	r2,r22,16
10003e78:	1002ac26 	beq	r2,zero,1000492c <__svfscanf_r+0x1288>
10003e7c:	d8c00104 	addi	r3,sp,4
10003e80:	a8ebc83a 	sub	r21,r21,r3
10003e84:	ac21883a 	add	r16,r21,r16
10003e88:	a429883a 	add	r20,r20,r16
10003e8c:	dc009d17 	ldw	r16,628(sp)
10003e90:	800d883a 	mov	r6,r16
10003e94:	003e3c06 	br	10003788 <__alt_data_end+0xf8003788>
10003e98:	e000011e 	bne	fp,zero,10003ea0 <__svfscanf_r+0x7fc>
10003e9c:	073fffc4 	movi	fp,-1
10003ea0:	b080004c 	andi	r2,r22,1
10003ea4:	b580040c 	andi	r22,r22,16
10003ea8:	10003526 	beq	r2,zero,10003f80 <__svfscanf_r+0x8dc>
10003eac:	b002dd1e 	bne	r22,zero,10004a24 <__svfscanf_r+0x1380>
10003eb0:	d8c09c17 	ldw	r3,624(sp)
10003eb4:	1d400017 	ldw	r21,0(r3)
10003eb8:	18c00104 	addi	r3,r3,4
10003ebc:	d8c09c15 	stw	r3,624(sp)
10003ec0:	0021883a 	mov	r16,zero
10003ec4:	ddc09904 	addi	r23,sp,612
10003ec8:	98c00017 	ldw	r3,0(r19)
10003ecc:	91400017 	ldw	r5,0(r18)
10003ed0:	18800003 	ldbu	r2,0(r3)
10003ed4:	11003fcc 	andi	r4,r2,255
10003ed8:	2909883a 	add	r4,r5,r4
10003edc:	21000003 	ldbu	r4,0(r4)
10003ee0:	2100020c 	andi	r4,r4,8
10003ee4:	21003fcc 	andi	r4,r4,255
10003ee8:	2100201c 	xori	r4,r4,128
10003eec:	213fe004 	addi	r4,r4,-128
10003ef0:	2002731e 	bne	r4,zero,100048c0 <__svfscanf_r+0x121c>
10003ef4:	e0027226 	beq	fp,zero,100048c0 <__svfscanf_r+0x121c>
10003ef8:	01440074 	movhi	r5,4097
10003efc:	29536804 	addi	r5,r5,19872
10003f00:	29000017 	ldw	r4,0(r5)
10003f04:	813f1d26 	beq	r16,r4,10003b7c <__alt_data_end+0xf8003b7c>
10003f08:	9a000117 	ldw	r8,4(r19)
10003f0c:	18c00044 	addi	r3,r3,1
10003f10:	d9000104 	addi	r4,sp,4
10003f14:	423fffc4 	addi	r8,r8,-1
10003f18:	240f883a 	add	r7,r4,r16
10003f1c:	000b883a 	mov	r5,zero
10003f20:	b809883a 	mov	r4,r23
10003f24:	01800204 	movi	r6,8
10003f28:	9a000115 	stw	r8,4(r19)
10003f2c:	98c00015 	stw	r3,0(r19)
10003f30:	38800005 	stb	r2,0(r7)
10003f34:	84000044 	addi	r16,r16,1
10003f38:	00088b40 	call	100088b4 <memset>
10003f3c:	a80b883a 	mov	r5,r21
10003f40:	8809883a 	mov	r4,r17
10003f44:	ddc00015 	stw	r23,0(sp)
10003f48:	d9800104 	addi	r6,sp,4
10003f4c:	800f883a 	mov	r7,r16
10003f50:	00084080 	call	10008408 <_mbrtowc_r>
10003f54:	017fffc4 	movi	r5,-1
10003f58:	117f0826 	beq	r2,r5,10003b7c <__alt_data_end+0xf8003b7c>
10003f5c:	1002de1e 	bne	r2,zero,10004ad8 <__svfscanf_r+0x1434>
10003f60:	a8000015 	stw	zero,0(r21)
10003f64:	0009883a 	mov	r4,zero
10003f68:	0002de06 	br	10004ae4 <__svfscanf_r+0x1440>
10003f6c:	8809883a 	mov	r4,r17
10003f70:	980b883a 	mov	r5,r19
10003f74:	000a1a40 	call	1000a1a4 <__srefill_r>
10003f78:	103e3f26 	beq	r2,zero,10003878 <__alt_data_end+0xf8003878>
10003f7c:	003eff06 	br	10003b7c <__alt_data_end+0xf8003b7c>
10003f80:	b0027e26 	beq	r22,zero,1000497c <__svfscanf_r+0x12d8>
10003f84:	91400017 	ldw	r5,0(r18)
10003f88:	98800017 	ldw	r2,0(r19)
10003f8c:	0021883a 	mov	r16,zero
10003f90:	10c00003 	ldbu	r3,0(r2)
10003f94:	28c7883a 	add	r3,r5,r3
10003f98:	18c00003 	ldbu	r3,0(r3)
10003f9c:	18c0020c 	andi	r3,r3,8
10003fa0:	18c03fcc 	andi	r3,r3,255
10003fa4:	18c0201c 	xori	r3,r3,128
10003fa8:	18ffe004 	addi	r3,r3,-128
10003fac:	183fb61e 	bne	r3,zero,10003e88 <__alt_data_end+0xf8003e88>
10003fb0:	98c00117 	ldw	r3,4(r19)
10003fb4:	10800044 	addi	r2,r2,1
10003fb8:	84000044 	addi	r16,r16,1
10003fbc:	18ffffc4 	addi	r3,r3,-1
10003fc0:	98c00115 	stw	r3,4(r19)
10003fc4:	98800015 	stw	r2,0(r19)
10003fc8:	e43faf26 	beq	fp,r16,10003e88 <__alt_data_end+0xf8003e88>
10003fcc:	00fff016 	blt	zero,r3,10003f90 <__alt_data_end+0xf8003f90>
10003fd0:	8809883a 	mov	r4,r17
10003fd4:	980b883a 	mov	r5,r19
10003fd8:	000a1a40 	call	1000a1a4 <__srefill_r>
10003fdc:	103faa1e 	bne	r2,zero,10003e88 <__alt_data_end+0xf8003e88>
10003fe0:	91400017 	ldw	r5,0(r18)
10003fe4:	98800017 	ldw	r2,0(r19)
10003fe8:	003fe906 	br	10003f90 <__alt_data_end+0xf8003f90>
10003fec:	1085883a 	add	r2,r2,r2
10003ff0:	1085883a 	add	r2,r2,r2
10003ff4:	01040034 	movhi	r4,4096
10003ff8:	21100204 	addi	r4,r4,16392
10003ffc:	1105883a 	add	r2,r2,r4
10004000:	10800017 	ldw	r2,0(r2)
10004004:	1000683a 	jmp	r2
10004008:	100042a8 	cmpgeui	zero,r2,266
1000400c:	10003ccc 	andi	zero,r2,243
10004010:	100042a8 	cmpgeui	zero,r2,266
10004014:	10004294 	ori	zero,r2,266
10004018:	10003ccc 	andi	zero,r2,243
1000401c:	10004270 	cmpltui	zero,r2,265
10004020:	10004224 	muli	zero,r2,264
10004024:	10004224 	muli	zero,r2,264
10004028:	10004224 	muli	zero,r2,264
1000402c:	10004224 	muli	zero,r2,264
10004030:	10004224 	muli	zero,r2,264
10004034:	10004224 	muli	zero,r2,264
10004038:	10004224 	muli	zero,r2,264
1000403c:	10004224 	muli	zero,r2,264
10004040:	10004224 	muli	zero,r2,264
10004044:	10003ccc 	andi	zero,r2,243
10004048:	10003ccc 	andi	zero,r2,243
1000404c:	10003ccc 	andi	zero,r2,243
10004050:	10003ccc 	andi	zero,r2,243
10004054:	10003ccc 	andi	zero,r2,243
10004058:	10003ccc 	andi	zero,r2,243
1000405c:	10003ccc 	andi	zero,r2,243
10004060:	1000438c 	andi	zero,r2,270
10004064:	10003ccc 	andi	zero,r2,243
10004068:	10003ccc 	andi	zero,r2,243
1000406c:	10003ccc 	andi	zero,r2,243
10004070:	10004350 	cmplti	zero,r2,269
10004074:	1000439c 	xori	zero,r2,270
10004078:	10003ccc 	andi	zero,r2,243
1000407c:	10003ccc 	andi	zero,r2,243
10004080:	10004328 	cmpgeui	zero,r2,268
10004084:	10003ccc 	andi	zero,r2,243
10004088:	10003ccc 	andi	zero,r2,243
1000408c:	10003ccc 	andi	zero,r2,243
10004090:	10003ccc 	andi	zero,r2,243
10004094:	100042f4 	orhi	zero,r2,267
10004098:	10003ccc 	andi	zero,r2,243
1000409c:	10003ccc 	andi	zero,r2,243
100040a0:	10003ccc 	andi	zero,r2,243
100040a4:	10003ccc 	andi	zero,r2,243
100040a8:	10003ccc 	andi	zero,r2,243
100040ac:	100042d8 	cmpnei	zero,r2,267
100040b0:	10003ccc 	andi	zero,r2,243
100040b4:	10003ccc 	andi	zero,r2,243
100040b8:	10003ccc 	andi	zero,r2,243
100040bc:	10003ccc 	andi	zero,r2,243
100040c0:	100042bc 	xorhi	zero,r2,266
100040c4:	10003ccc 	andi	zero,r2,243
100040c8:	10003ccc 	andi	zero,r2,243
100040cc:	10003ccc 	andi	zero,r2,243
100040d0:	10003ccc 	andi	zero,r2,243
100040d4:	10003ccc 	andi	zero,r2,243
100040d8:	10003ccc 	andi	zero,r2,243
100040dc:	10003ccc 	andi	zero,r2,243
100040e0:	1000438c 	andi	zero,r2,270
100040e4:	10003ccc 	andi	zero,r2,243
100040e8:	10003ccc 	andi	zero,r2,243
100040ec:	10003ccc 	andi	zero,r2,243
100040f0:	10004350 	cmplti	zero,r2,269
100040f4:	1000439c 	xori	zero,r2,270
100040f8:	10003ccc 	andi	zero,r2,243
100040fc:	10003ccc 	andi	zero,r2,243
10004100:	10004328 	cmpgeui	zero,r2,268
10004104:	10003ccc 	andi	zero,r2,243
10004108:	10003ccc 	andi	zero,r2,243
1000410c:	10003ccc 	andi	zero,r2,243
10004110:	10003ccc 	andi	zero,r2,243
10004114:	100042f4 	orhi	zero,r2,267
10004118:	10003ccc 	andi	zero,r2,243
1000411c:	10003ccc 	andi	zero,r2,243
10004120:	10003ccc 	andi	zero,r2,243
10004124:	10003ccc 	andi	zero,r2,243
10004128:	10003ccc 	andi	zero,r2,243
1000412c:	100042d8 	cmpnei	zero,r2,267
10004130:	10003ccc 	andi	zero,r2,243
10004134:	10003ccc 	andi	zero,r2,243
10004138:	10003ccc 	andi	zero,r2,243
1000413c:	10003ccc 	andi	zero,r2,243
10004140:	100042bc 	xorhi	zero,r2,266
10004144:	b580040c 	andi	r22,r22,16
10004148:	b0025226 	beq	r22,zero,10004a94 <__svfscanf_r+0x13f0>
1000414c:	0021883a 	mov	r16,zero
10004150:	98800117 	ldw	r2,4(r19)
10004154:	17026f0e 	bge	r2,fp,10004b14 <__svfscanf_r+0x1470>
10004158:	98c00017 	ldw	r3,0(r19)
1000415c:	8809883a 	mov	r4,r17
10004160:	980b883a 	mov	r5,r19
10004164:	1887883a 	add	r3,r3,r2
10004168:	98c00015 	stw	r3,0(r19)
1000416c:	80a1883a 	add	r16,r16,r2
10004170:	e0b9c83a 	sub	fp,fp,r2
10004174:	000a1a40 	call	1000a1a4 <__srefill_r>
10004178:	103ff526 	beq	r2,zero,10004150 <__alt_data_end+0xf8004150>
1000417c:	803f421e 	bne	r16,zero,10003e88 <__alt_data_end+0xf8003e88>
10004180:	003e7e06 	br	10003b7c <__alt_data_end+0xf8003b7c>
10004184:	8809883a 	mov	r4,r17
10004188:	980b883a 	mov	r5,r19
1000418c:	000a1a40 	call	1000a1a4 <__srefill_r>
10004190:	103df126 	beq	r2,zero,10003958 <__alt_data_end+0xf8003958>
10004194:	803e791e 	bne	r16,zero,10003b7c <__alt_data_end+0xf8003b7c>
10004198:	b83f1326 	beq	r23,zero,10003de8 <__alt_data_end+0xf8003de8>
1000419c:	003df006 	br	10003960 <__alt_data_end+0xf8003960>
100041a0:	e2ffa8c4 	addi	r11,fp,-349
100041a4:	07005744 	movi	fp,349
100041a8:	003eb706 	br	10003c88 <__alt_data_end+0xf8003c88>
100041ac:	0007883a 	mov	r3,zero
100041b0:	003f1806 	br	10003e14 <__alt_data_end+0xf8003e14>
100041b4:	d8c09c17 	ldw	r3,624(sp)
100041b8:	98800017 	ldw	r2,0(r19)
100041bc:	dd805884 	addi	r22,sp,354
100041c0:	1c000017 	ldw	r16,0(r3)
100041c4:	1dc00104 	addi	r23,r3,4
100041c8:	802b883a 	mov	r21,r16
100041cc:	10c00003 	ldbu	r3,0(r2)
100041d0:	b0c7883a 	add	r3,r22,r3
100041d4:	18c00007 	ldb	r3,0(r3)
100041d8:	1801c226 	beq	r3,zero,100048e4 <__svfscanf_r+0x1240>
100041dc:	98c00117 	ldw	r3,4(r19)
100041e0:	10800044 	addi	r2,r2,1
100041e4:	ad400044 	addi	r21,r21,1
100041e8:	18ffffc4 	addi	r3,r3,-1
100041ec:	98c00115 	stw	r3,4(r19)
100041f0:	10ffffc3 	ldbu	r3,-1(r2)
100041f4:	e73fffc4 	addi	fp,fp,-1
100041f8:	a8ffffc5 	stb	r3,-1(r21)
100041fc:	98800015 	stw	r2,0(r19)
10004200:	e001b826 	beq	fp,zero,100048e4 <__svfscanf_r+0x1240>
10004204:	98c00117 	ldw	r3,4(r19)
10004208:	00fff016 	blt	zero,r3,100041cc <__alt_data_end+0xf80041cc>
1000420c:	8809883a 	mov	r4,r17
10004210:	980b883a 	mov	r5,r19
10004214:	000a1a40 	call	1000a1a4 <__srefill_r>
10004218:	1001b11e 	bne	r2,zero,100048e0 <__svfscanf_r+0x123c>
1000421c:	98800017 	ldw	r2,0(r19)
10004220:	003fea06 	br	100041cc <__alt_data_end+0xf80041cc>
10004224:	80803fcc 	andi	r2,r16,255
10004228:	1080201c 	xori	r2,r2,128
1000422c:	10bfe004 	addi	r2,r2,-128
10004230:	3085883a 	add	r2,r6,r2
10004234:	103ea51e 	bne	r2,zero,10003ccc <__alt_data_end+0xf8003ccc>
10004238:	00bf9fc4 	movi	r2,-385
1000423c:	b0ac703a 	and	r22,r22,r2
10004240:	b9400005 	stb	r5,0(r23)
10004244:	bdc00044 	addi	r23,r23,1
10004248:	98800117 	ldw	r2,4(r19)
1000424c:	e73fffc4 	addi	fp,fp,-1
10004250:	a5000044 	addi	r20,r20,1
10004254:	10bfffc4 	addi	r2,r2,-1
10004258:	98800115 	stw	r2,4(r19)
1000425c:	00816d0e 	bge	zero,r2,10004814 <__svfscanf_r+0x1170>
10004260:	39c00044 	addi	r7,r7,1
10004264:	99c00015 	stw	r7,0(r19)
10004268:	e03e931e 	bne	fp,zero,10003cb8 <__alt_data_end+0xf8003cb8>
1000426c:	003e9706 	br	10003ccc <__alt_data_end+0xf8003ccc>
10004270:	b080400c 	andi	r2,r22,256
10004274:	103feb26 	beq	r2,zero,10004224 <__alt_data_end+0xf8004224>
10004278:	00bfdfc4 	movi	r2,-129
1000427c:	b0ac703a 	and	r22,r22,r2
10004280:	ad400044 	addi	r21,r21,1
10004284:	583ff026 	beq	r11,zero,10004248 <__alt_data_end+0xf8004248>
10004288:	5affffc4 	addi	r11,r11,-1
1000428c:	e7000044 	addi	fp,fp,1
10004290:	003fed06 	br	10004248 <__alt_data_end+0xf8004248>
10004294:	b080800c 	andi	r2,r22,512
10004298:	103e8c26 	beq	r2,zero,10003ccc <__alt_data_end+0xf8003ccc>
1000429c:	b3ec703a 	and	r22,r22,r15
100042a0:	dd40a215 	stw	r21,648(sp)
100042a4:	003fe606 	br	10004240 <__alt_data_end+0xf8004240>
100042a8:	b080200c 	andi	r2,r22,128
100042ac:	103e8726 	beq	r2,zero,10003ccc <__alt_data_end+0xf8003ccc>
100042b0:	00bfdfc4 	movi	r2,-129
100042b4:	b0ac703a 	and	r22,r22,r2
100042b8:	003fe106 	br	10004240 <__alt_data_end+0xf8004240>
100042bc:	81003fcc 	andi	r4,r16,255
100042c0:	2100201c 	xori	r4,r4,128
100042c4:	213fe004 	addi	r4,r4,-128
100042c8:	008001c4 	movi	r2,7
100042cc:	20be7f1e 	bne	r4,r2,10003ccc <__alt_data_end+0xf8003ccc>
100042d0:	04000204 	movi	r16,8
100042d4:	003fda06 	br	10004240 <__alt_data_end+0xf8004240>
100042d8:	81003fcc 	andi	r4,r16,255
100042dc:	2100201c 	xori	r4,r4,128
100042e0:	213fe004 	addi	r4,r4,-128
100042e4:	00800184 	movi	r2,6
100042e8:	20be781e 	bne	r4,r2,10003ccc <__alt_data_end+0xf8003ccc>
100042ec:	040001c4 	movi	r16,7
100042f0:	003fd306 	br	10004240 <__alt_data_end+0xf8004240>
100042f4:	3001891e 	bne	r6,zero,1000491c <__svfscanf_r+0x1278>
100042f8:	b101c00c 	andi	r4,r22,1792
100042fc:	0081c004 	movi	r2,1792
10004300:	20821d26 	beq	r4,r2,10004b78 <__svfscanf_r+0x14d4>
10004304:	80803fcc 	andi	r2,r16,255
10004308:	1080201c 	xori	r2,r2,128
1000430c:	10bfe004 	addi	r2,r2,-128
10004310:	01000044 	movi	r4,1
10004314:	11000226 	beq	r2,r4,10004320 <__svfscanf_r+0xc7c>
10004318:	01000104 	movi	r4,4
1000431c:	113e6b1e 	bne	r2,r4,10003ccc <__alt_data_end+0xf8003ccc>
10004320:	84000044 	addi	r16,r16,1
10004324:	003fc606 	br	10004240 <__alt_data_end+0xf8004240>
10004328:	80803fcc 	andi	r2,r16,255
1000432c:	1080201c 	xori	r2,r2,128
10004330:	10bfe004 	addi	r2,r2,-128
10004334:	1001731e 	bne	r2,zero,10004904 <__svfscanf_r+0x1260>
10004338:	b101c00c 	andi	r4,r22,1792
1000433c:	0081c004 	movi	r2,1792
10004340:	20be621e 	bne	r4,r2,10003ccc <__alt_data_end+0xf8003ccc>
10004344:	b32c703a 	and	r22,r22,r12
10004348:	04000044 	movi	r16,1
1000434c:	003fbc06 	br	10004240 <__alt_data_end+0xf8004240>
10004350:	b081400c 	andi	r2,r22,1280
10004354:	13800326 	beq	r2,r14,10004364 <__svfscanf_r+0xcc0>
10004358:	b081000c 	andi	r2,r22,1024
1000435c:	103e5b26 	beq	r2,zero,10003ccc <__alt_data_end+0xf8003ccc>
10004360:	a83e5d26 	beq	r21,zero,10003cd8 <__alt_data_end+0xf8003cd8>
10004364:	b080800c 	andi	r2,r22,512
10004368:	1000041e 	bne	r2,zero,1000437c <__svfscanf_r+0xcd8>
1000436c:	d880a217 	ldw	r2,648(sp)
10004370:	ddc0a115 	stw	r23,644(sp)
10004374:	a8abc83a 	sub	r21,r21,r2
10004378:	dd40a315 	stw	r21,652(sp)
1000437c:	b32c703a 	and	r22,r22,r12
10004380:	b5806014 	ori	r22,r22,384
10004384:	002b883a 	mov	r21,zero
10004388:	003fad06 	br	10004240 <__alt_data_end+0xf8004240>
1000438c:	00800044 	movi	r2,1
10004390:	30be4e1e 	bne	r6,r2,10003ccc <__alt_data_end+0xf8003ccc>
10004394:	01800084 	movi	r6,2
10004398:	003fa906 	br	10004240 <__alt_data_end+0xf8004240>
1000439c:	81003fcc 	andi	r4,r16,255
100043a0:	2100201c 	xori	r4,r4,128
100043a4:	213fe004 	addi	r4,r4,-128
100043a8:	00800084 	movi	r2,2
100043ac:	20be471e 	bne	r4,r2,10003ccc <__alt_data_end+0xf8003ccc>
100043b0:	040000c4 	movi	r16,3
100043b4:	003fa206 	br	10004240 <__alt_data_end+0xf8004240>
100043b8:	01440074 	movhi	r5,4097
100043bc:	296f9404 	addi	r5,r5,-16816
100043c0:	00800284 	movi	r2,10
100043c4:	d940a015 	stw	r5,640(sp)
100043c8:	d8809f15 	stw	r2,636(sp)
100043cc:	040000c4 	movi	r16,3
100043d0:	003d2706 	br	10003870 <__alt_data_end+0xf8003870>
100043d4:	df009d15 	stw	fp,628(sp)
100043d8:	04000084 	movi	r16,2
100043dc:	2039883a 	mov	fp,r4
100043e0:	003d2306 	br	10003870 <__alt_data_end+0xf8003870>
100043e4:	00840074 	movhi	r2,4097
100043e8:	10b10204 	addi	r2,r2,-15352
100043ec:	00c00284 	movi	r3,10
100043f0:	df009d15 	stw	fp,628(sp)
100043f4:	d880a015 	stw	r2,640(sp)
100043f8:	2039883a 	mov	fp,r4
100043fc:	d8c09f15 	stw	r3,636(sp)
10004400:	040000c4 	movi	r16,3
10004404:	003d1a06 	br	10003870 <__alt_data_end+0xf8003870>
10004408:	bdc03fcc 	andi	r23,r23,255
1000440c:	01400284 	movi	r5,10
10004410:	bdc0201c 	xori	r23,r23,128
10004414:	d8c0a815 	stw	r3,672(sp)
10004418:	d980a915 	stw	r6,676(sp)
1000441c:	bdffe004 	addi	r23,r23,-128
10004420:	000158c0 	call	1000158c <__mulsi3>
10004424:	15c5883a 	add	r2,r2,r23
10004428:	113ff404 	addi	r4,r2,-48
1000442c:	85c00043 	ldbu	r23,1(r16)
10004430:	d8c0a817 	ldw	r3,672(sp)
10004434:	e021883a 	mov	r16,fp
10004438:	d980a917 	ldw	r6,676(sp)
1000443c:	003cf906 	br	10003824 <__alt_data_end+0xf8003824>
10004440:	df009d15 	stw	fp,628(sp)
10004444:	2039883a 	mov	fp,r4
10004448:	003d0206 	br	10003854 <__alt_data_end+0xf8003854>
1000444c:	df009d15 	stw	fp,628(sp)
10004450:	04000104 	movi	r16,4
10004454:	2039883a 	mov	fp,r4
10004458:	003d0506 	br	10003870 <__alt_data_end+0xf8003870>
1000445c:	85c00043 	ldbu	r23,1(r16)
10004460:	b5800094 	ori	r22,r22,2
10004464:	e021883a 	mov	r16,fp
10004468:	003cee06 	br	10003824 <__alt_data_end+0xf8003824>
1000446c:	df009d15 	stw	fp,628(sp)
10004470:	e021883a 	mov	r16,fp
10004474:	003cd706 	br	100037d4 <__alt_data_end+0xf80037d4>
10004478:	85c00043 	ldbu	r23,1(r16)
1000447c:	b5800414 	ori	r22,r22,16
10004480:	e021883a 	mov	r16,fp
10004484:	003ce706 	br	10003824 <__alt_data_end+0xf8003824>
10004488:	df009d15 	stw	fp,628(sp)
1000448c:	b5800054 	ori	r22,r22,1
10004490:	2039883a 	mov	fp,r4
10004494:	01040074 	movhi	r4,4097
10004498:	21310204 	addi	r4,r4,-15352
1000449c:	01400204 	movi	r5,8
100044a0:	d900a015 	stw	r4,640(sp)
100044a4:	d9409f15 	stw	r5,636(sp)
100044a8:	040000c4 	movi	r16,3
100044ac:	003cf006 	br	10003870 <__alt_data_end+0xf8003870>
100044b0:	df009d15 	stw	fp,628(sp)
100044b4:	01400404 	movi	r5,16
100044b8:	2039883a 	mov	fp,r4
100044bc:	01040074 	movhi	r4,4097
100044c0:	21310204 	addi	r4,r4,-15352
100044c4:	b5808014 	ori	r22,r22,512
100044c8:	d900a015 	stw	r4,640(sp)
100044cc:	d9409f15 	stw	r5,636(sp)
100044d0:	040000c4 	movi	r16,3
100044d4:	003ce606 	br	10003870 <__alt_data_end+0xf8003870>
100044d8:	df009d15 	stw	fp,628(sp)
100044dc:	d9409d17 	ldw	r5,628(sp)
100044e0:	2039883a 	mov	fp,r4
100044e4:	d9005884 	addi	r4,sp,354
100044e8:	000a4580 	call	1000a458 <__sccl>
100044ec:	d8809d15 	stw	r2,628(sp)
100044f0:	b5801014 	ori	r22,r22,64
100044f4:	04000044 	movi	r16,1
100044f8:	003cdd06 	br	10003870 <__alt_data_end+0xf8003870>
100044fc:	df009d15 	stw	fp,628(sp)
10004500:	b5801014 	ori	r22,r22,64
10004504:	2039883a 	mov	fp,r4
10004508:	0021883a 	mov	r16,zero
1000450c:	003cd806 	br	10003870 <__alt_data_end+0xf8003870>
10004510:	df009d15 	stw	fp,628(sp)
10004514:	2039883a 	mov	fp,r4
10004518:	003ccf06 	br	10003858 <__alt_data_end+0xf8003858>
1000451c:	85c00043 	ldbu	r23,1(r16)
10004520:	b5800114 	ori	r22,r22,4
10004524:	e021883a 	mov	r16,fp
10004528:	003cbe06 	br	10003824 <__alt_data_end+0xf8003824>
1000452c:	df009d15 	stw	fp,628(sp)
10004530:	2039883a 	mov	fp,r4
10004534:	01040074 	movhi	r4,4097
10004538:	212f9404 	addi	r4,r4,-16816
1000453c:	d900a015 	stw	r4,640(sp)
10004540:	d8009f15 	stw	zero,636(sp)
10004544:	040000c4 	movi	r16,3
10004548:	003cc906 	br	10003870 <__alt_data_end+0xf8003870>
1000454c:	85c00043 	ldbu	r23,1(r16)
10004550:	b8803fcc 	andi	r2,r23,255
10004554:	1080201c 	xori	r2,r2,128
10004558:	10bfe004 	addi	r2,r2,-128
1000455c:	11818f26 	beq	r2,r6,10004b9c <__svfscanf_r+0x14f8>
10004560:	b5800054 	ori	r22,r22,1
10004564:	e021883a 	mov	r16,fp
10004568:	003cae06 	br	10003824 <__alt_data_end+0xf8003824>
1000456c:	df009d15 	stw	fp,628(sp)
10004570:	b080040c 	andi	r2,r22,16
10004574:	103cfa1e 	bne	r2,zero,10003960 <__alt_data_end+0xf8003960>
10004578:	b080010c 	andi	r2,r22,4
1000457c:	10018b26 	beq	r2,zero,10004bac <__svfscanf_r+0x1508>
10004580:	d9009c17 	ldw	r4,624(sp)
10004584:	e021883a 	mov	r16,fp
10004588:	800d883a 	mov	r6,r16
1000458c:	20800017 	ldw	r2,0(r4)
10004590:	21000104 	addi	r4,r4,4
10004594:	d9009c15 	stw	r4,624(sp)
10004598:	1500000d 	sth	r20,0(r2)
1000459c:	003c7a06 	br	10003788 <__alt_data_end+0xf8003788>
100045a0:	df009d15 	stw	fp,628(sp)
100045a4:	2039883a 	mov	fp,r4
100045a8:	003fba06 	br	10004494 <__alt_data_end+0xf8004494>
100045ac:	00840074 	movhi	r2,4097
100045b0:	10b10204 	addi	r2,r2,-15352
100045b4:	00c00404 	movi	r3,16
100045b8:	df009d15 	stw	fp,628(sp)
100045bc:	b5808814 	ori	r22,r22,544
100045c0:	2039883a 	mov	fp,r4
100045c4:	d880a015 	stw	r2,640(sp)
100045c8:	d8c09f15 	stw	r3,636(sp)
100045cc:	040000c4 	movi	r16,3
100045d0:	003ca706 	br	10003870 <__alt_data_end+0xf8003870>
100045d4:	013fff84 	movi	r4,-2
100045d8:	113cdd26 	beq	r2,r4,10003950 <__alt_data_end+0xf8003950>
100045dc:	a429883a 	add	r20,r20,r16
100045e0:	e73fffc4 	addi	fp,fp,-1
100045e4:	b83cd826 	beq	r23,zero,10003948 <__alt_data_end+0xf8003948>
100045e8:	0021883a 	mov	r16,zero
100045ec:	003cd806 	br	10003950 <__alt_data_end+0xf8003950>
100045f0:	1085883a 	add	r2,r2,r2
100045f4:	1085883a 	add	r2,r2,r2
100045f8:	01040034 	movhi	r4,4096
100045fc:	21118304 	addi	r4,r4,17932
10004600:	1105883a 	add	r2,r2,r4
10004604:	10800017 	ldw	r2,0(r2)
10004608:	1000683a 	jmp	r2
1000460c:	10004800 	call	11000480 <_gp+0xfe36ec>
10004610:	10003e44 	addi	zero,r2,249
10004614:	10004800 	call	11000480 <_gp+0xfe36ec>
10004618:	10003e44 	addi	zero,r2,249
1000461c:	10003e44 	addi	zero,r2,249
10004620:	100047d8 	cmpnei	zero,r2,287
10004624:	100047b8 	rdprs	zero,r2,286
10004628:	100047b8 	rdprs	zero,r2,286
1000462c:	100047b8 	rdprs	zero,r2,286
10004630:	100047b8 	rdprs	zero,r2,286
10004634:	100047b8 	rdprs	zero,r2,286
10004638:	100047b8 	rdprs	zero,r2,286
1000463c:	100047b8 	rdprs	zero,r2,286
10004640:	10004798 	cmpnei	zero,r2,286
10004644:	10004798 	cmpnei	zero,r2,286
10004648:	10003e44 	addi	zero,r2,249
1000464c:	10003e44 	addi	zero,r2,249
10004650:	10003e44 	addi	zero,r2,249
10004654:	10003e44 	addi	zero,r2,249
10004658:	10003e44 	addi	zero,r2,249
1000465c:	10003e44 	addi	zero,r2,249
10004660:	10003e44 	addi	zero,r2,249
10004664:	10004784 	addi	zero,r2,286
10004668:	10004784 	addi	zero,r2,286
1000466c:	10004784 	addi	zero,r2,286
10004670:	10004784 	addi	zero,r2,286
10004674:	10004784 	addi	zero,r2,286
10004678:	10004784 	addi	zero,r2,286
1000467c:	10003e44 	addi	zero,r2,249
10004680:	10003e44 	addi	zero,r2,249
10004684:	10003e44 	addi	zero,r2,249
10004688:	10003e44 	addi	zero,r2,249
1000468c:	10003e44 	addi	zero,r2,249
10004690:	10003e44 	addi	zero,r2,249
10004694:	10003e44 	addi	zero,r2,249
10004698:	10003e44 	addi	zero,r2,249
1000469c:	10003e44 	addi	zero,r2,249
100046a0:	10003e44 	addi	zero,r2,249
100046a4:	10003e44 	addi	zero,r2,249
100046a8:	10003e44 	addi	zero,r2,249
100046ac:	10003e44 	addi	zero,r2,249
100046b0:	10003e44 	addi	zero,r2,249
100046b4:	10003e44 	addi	zero,r2,249
100046b8:	10003e44 	addi	zero,r2,249
100046bc:	10003e44 	addi	zero,r2,249
100046c0:	10004744 	addi	zero,r2,285
100046c4:	10003e44 	addi	zero,r2,249
100046c8:	10003e44 	addi	zero,r2,249
100046cc:	10003e44 	addi	zero,r2,249
100046d0:	10003e44 	addi	zero,r2,249
100046d4:	10003e44 	addi	zero,r2,249
100046d8:	10003e44 	addi	zero,r2,249
100046dc:	10003e44 	addi	zero,r2,249
100046e0:	10003e44 	addi	zero,r2,249
100046e4:	10004784 	addi	zero,r2,286
100046e8:	10004784 	addi	zero,r2,286
100046ec:	10004784 	addi	zero,r2,286
100046f0:	10004784 	addi	zero,r2,286
100046f4:	10004784 	addi	zero,r2,286
100046f8:	10004784 	addi	zero,r2,286
100046fc:	10003e44 	addi	zero,r2,249
10004700:	10003e44 	addi	zero,r2,249
10004704:	10003e44 	addi	zero,r2,249
10004708:	10003e44 	addi	zero,r2,249
1000470c:	10003e44 	addi	zero,r2,249
10004710:	10003e44 	addi	zero,r2,249
10004714:	10003e44 	addi	zero,r2,249
10004718:	10003e44 	addi	zero,r2,249
1000471c:	10003e44 	addi	zero,r2,249
10004720:	10003e44 	addi	zero,r2,249
10004724:	10003e44 	addi	zero,r2,249
10004728:	10003e44 	addi	zero,r2,249
1000472c:	10003e44 	addi	zero,r2,249
10004730:	10003e44 	addi	zero,r2,249
10004734:	10003e44 	addi	zero,r2,249
10004738:	10003e44 	addi	zero,r2,249
1000473c:	10003e44 	addi	zero,r2,249
10004740:	10004744 	addi	zero,r2,285
10004744:	b081800c 	andi	r2,r22,1536
10004748:	11fdbe1e 	bne	r2,r7,10003e44 <__alt_data_end+0xf8003e44>
1000474c:	b1ac703a 	and	r22,r22,r6
10004750:	b5814014 	ori	r22,r22,1280
10004754:	02400404 	movi	r9,16
10004758:	a9400005 	stb	r5,0(r21)
1000475c:	ad400044 	addi	r21,r21,1
10004760:	98800117 	ldw	r2,4(r19)
10004764:	10bfffc4 	addi	r2,r2,-1
10004768:	98800115 	stw	r2,4(r19)
1000476c:	00803b0e 	bge	zero,r2,1000485c <__svfscanf_r+0x11b8>
10004770:	42000044 	addi	r8,r8,1
10004774:	9a000015 	stw	r8,0(r19)
10004778:	e73fffc4 	addi	fp,fp,-1
1000477c:	e03dac1e 	bne	fp,zero,10003e30 <__alt_data_end+0xf8003e30>
10004780:	003db006 	br	10003e44 <__alt_data_end+0xf8003e44>
10004784:	00800284 	movi	r2,10
10004788:	127dae0e 	bge	r2,r9,10003e44 <__alt_data_end+0xf8003e44>
1000478c:	00bd1fc4 	movi	r2,-2945
10004790:	b0ac703a 	and	r22,r22,r2
10004794:	003ff006 	br	10004758 <__alt_data_end+0xf8004758>
10004798:	4a53883a 	add	r9,r9,r9
1000479c:	01040074 	movhi	r4,4097
100047a0:	210adb84 	addi	r4,r4,11118
100047a4:	2245883a 	add	r2,r4,r9
100047a8:	1240000f 	ldh	r9,0(r2)
100047ac:	00800204 	movi	r2,8
100047b0:	127ff616 	blt	r2,r9,1000478c <__alt_data_end+0xf800478c>
100047b4:	003da306 	br	10003e44 <__alt_data_end+0xf8003e44>
100047b8:	4a53883a 	add	r9,r9,r9
100047bc:	01040074 	movhi	r4,4097
100047c0:	210adb84 	addi	r4,r4,11118
100047c4:	2245883a 	add	r2,r4,r9
100047c8:	1240000f 	ldh	r9,0(r2)
100047cc:	00bd1fc4 	movi	r2,-2945
100047d0:	b0ac703a 	and	r22,r22,r2
100047d4:	003fe006 	br	10004758 <__alt_data_end+0xf8004758>
100047d8:	b082000c 	andi	r2,r22,2048
100047dc:	103fde26 	beq	r2,zero,10004758 <__alt_data_end+0xf8004758>
100047e0:	4800021e 	bne	r9,zero,100047ec <__svfscanf_r+0x1148>
100047e4:	b5808014 	ori	r22,r22,512
100047e8:	02400204 	movi	r9,8
100047ec:	b081000c 	andi	r2,r22,1024
100047f0:	10009f26 	beq	r2,zero,10004a70 <__svfscanf_r+0x13cc>
100047f4:	00be9fc4 	movi	r2,-1409
100047f8:	b0ac703a 	and	r22,r22,r2
100047fc:	003fd606 	br	10004758 <__alt_data_end+0xf8004758>
10004800:	b080200c 	andi	r2,r22,128
10004804:	103d8f26 	beq	r2,zero,10003e44 <__alt_data_end+0xf8003e44>
10004808:	00bfdfc4 	movi	r2,-129
1000480c:	b0ac703a 	and	r22,r22,r2
10004810:	003fd106 	br	10004758 <__alt_data_end+0xf8004758>
10004814:	8809883a 	mov	r4,r17
10004818:	980b883a 	mov	r5,r19
1000481c:	d8c0a815 	stw	r3,672(sp)
10004820:	d980a915 	stw	r6,676(sp)
10004824:	dac0a715 	stw	r11,668(sp)
10004828:	db00a515 	stw	r12,660(sp)
1000482c:	db80a415 	stw	r14,656(sp)
10004830:	dbc0a615 	stw	r15,664(sp)
10004834:	000a1a40 	call	1000a1a4 <__srefill_r>
10004838:	d8c0a817 	ldw	r3,672(sp)
1000483c:	d980a917 	ldw	r6,676(sp)
10004840:	dac0a717 	ldw	r11,668(sp)
10004844:	db00a517 	ldw	r12,660(sp)
10004848:	db80a417 	ldw	r14,656(sp)
1000484c:	dbc0a617 	ldw	r15,664(sp)
10004850:	103d1e1e 	bne	r2,zero,10003ccc <__alt_data_end+0xf8003ccc>
10004854:	e03d181e 	bne	fp,zero,10003cb8 <__alt_data_end+0xf8003cb8>
10004858:	003d1c06 	br	10003ccc <__alt_data_end+0xf8003ccc>
1000485c:	8809883a 	mov	r4,r17
10004860:	980b883a 	mov	r5,r19
10004864:	d8c0a815 	stw	r3,672(sp)
10004868:	d980a915 	stw	r6,676(sp)
1000486c:	d9c0a415 	stw	r7,656(sp)
10004870:	da40a515 	stw	r9,660(sp)
10004874:	000a1a40 	call	1000a1a4 <__srefill_r>
10004878:	d8c0a817 	ldw	r3,672(sp)
1000487c:	d980a917 	ldw	r6,676(sp)
10004880:	d9c0a417 	ldw	r7,656(sp)
10004884:	da40a517 	ldw	r9,660(sp)
10004888:	103fbb26 	beq	r2,zero,10004778 <__alt_data_end+0xf8004778>
1000488c:	003d6d06 	br	10003e44 <__alt_data_end+0xf8003e44>
10004890:	a429883a 	add	r20,r20,r16
10004894:	e73fffc4 	addi	fp,fp,-1
10004898:	b000fc1e 	bne	r22,zero,10004c8c <__svfscanf_r+0x15e8>
1000489c:	ad400104 	addi	r21,r21,4
100048a0:	0021883a 	mov	r16,zero
100048a4:	98800117 	ldw	r2,4(r19)
100048a8:	00bd8716 	blt	zero,r2,10003ec8 <__alt_data_end+0xf8003ec8>
100048ac:	8809883a 	mov	r4,r17
100048b0:	980b883a 	mov	r5,r19
100048b4:	000a1a40 	call	1000a1a4 <__srefill_r>
100048b8:	103d8326 	beq	r2,zero,10003ec8 <__alt_data_end+0xf8003ec8>
100048bc:	803caf1e 	bne	r16,zero,10003b7c <__alt_data_end+0xf8003b7c>
100048c0:	b03c271e 	bne	r22,zero,10003960 <__alt_data_end+0xf8003960>
100048c4:	d8809e17 	ldw	r2,632(sp)
100048c8:	dc009d17 	ldw	r16,628(sp)
100048cc:	a8000015 	stw	zero,0(r21)
100048d0:	10800044 	addi	r2,r2,1
100048d4:	d8809e15 	stw	r2,632(sp)
100048d8:	800d883a 	mov	r6,r16
100048dc:	003baa06 	br	10003788 <__alt_data_end+0xf8003788>
100048e0:	857ca626 	beq	r16,r21,10003b7c <__alt_data_end+0xf8003b7c>
100048e4:	ac21c83a 	sub	r16,r21,r16
100048e8:	803bab26 	beq	r16,zero,10003798 <__alt_data_end+0xf8003798>
100048ec:	d8809e17 	ldw	r2,632(sp)
100048f0:	a8000005 	stb	zero,0(r21)
100048f4:	ddc09c15 	stw	r23,624(sp)
100048f8:	10800044 	addi	r2,r2,1
100048fc:	d8809e15 	stw	r2,632(sp)
10004900:	003d6106 	br	10003e88 <__alt_data_end+0xf8003e88>
10004904:	010000c4 	movi	r4,3
10004908:	113e8526 	beq	r2,r4,10004320 <__alt_data_end+0xf8004320>
1000490c:	01000144 	movi	r4,5
10004910:	113cee1e 	bne	r2,r4,10003ccc <__alt_data_end+0xf8003ccc>
10004914:	84000044 	addi	r16,r16,1
10004918:	003e4906 	br	10004240 <__alt_data_end+0xf8004240>
1000491c:	00800084 	movi	r2,2
10004920:	30be781e 	bne	r6,r2,10004304 <__alt_data_end+0xf8004304>
10004924:	018000c4 	movi	r6,3
10004928:	003e4506 	br	10004240 <__alt_data_end+0xf8004240>
1000492c:	d8c0a017 	ldw	r3,640(sp)
10004930:	d9c09f17 	ldw	r7,636(sp)
10004934:	8809883a 	mov	r4,r17
10004938:	d9400104 	addi	r5,sp,4
1000493c:	000d883a 	mov	r6,zero
10004940:	a8000005 	stb	zero,0(r21)
10004944:	183ee83a 	callr	r3
10004948:	b0c0080c 	andi	r3,r22,32
1000494c:	1800391e 	bne	r3,zero,10004a34 <__svfscanf_r+0x1390>
10004950:	b0c0010c 	andi	r3,r22,4
10004954:	1800ac26 	beq	r3,zero,10004c08 <__svfscanf_r+0x1564>
10004958:	d9409c17 	ldw	r5,624(sp)
1000495c:	28c00017 	ldw	r3,0(r5)
10004960:	29400104 	addi	r5,r5,4
10004964:	d9409c15 	stw	r5,624(sp)
10004968:	1880000d 	sth	r2,0(r3)
1000496c:	d8809e17 	ldw	r2,632(sp)
10004970:	10800044 	addi	r2,r2,1
10004974:	d8809e15 	stw	r2,632(sp)
10004978:	003d4006 	br	10003e7c <__alt_data_end+0xf8003e7c>
1000497c:	d8c09c17 	ldw	r3,624(sp)
10004980:	98800017 	ldw	r2,0(r19)
10004984:	1d400017 	ldw	r21,0(r3)
10004988:	1d800104 	addi	r22,r3,4
1000498c:	a821883a 	mov	r16,r21
10004990:	10c00003 	ldbu	r3,0(r2)
10004994:	91400017 	ldw	r5,0(r18)
10004998:	28c7883a 	add	r3,r5,r3
1000499c:	18c00003 	ldbu	r3,0(r3)
100049a0:	18c0020c 	andi	r3,r3,8
100049a4:	18c03fcc 	andi	r3,r3,255
100049a8:	18c0201c 	xori	r3,r3,128
100049ac:	18ffe004 	addi	r3,r3,-128
100049b0:	1800121e 	bne	r3,zero,100049fc <__svfscanf_r+0x1358>
100049b4:	98c00117 	ldw	r3,4(r19)
100049b8:	10800044 	addi	r2,r2,1
100049bc:	84000044 	addi	r16,r16,1
100049c0:	18ffffc4 	addi	r3,r3,-1
100049c4:	98c00115 	stw	r3,4(r19)
100049c8:	10ffffc3 	ldbu	r3,-1(r2)
100049cc:	e73fffc4 	addi	fp,fp,-1
100049d0:	80ffffc5 	stb	r3,-1(r16)
100049d4:	98800015 	stw	r2,0(r19)
100049d8:	e0000826 	beq	fp,zero,100049fc <__svfscanf_r+0x1358>
100049dc:	98c00117 	ldw	r3,4(r19)
100049e0:	00ffeb16 	blt	zero,r3,10004990 <__alt_data_end+0xf8004990>
100049e4:	8809883a 	mov	r4,r17
100049e8:	980b883a 	mov	r5,r19
100049ec:	000a1a40 	call	1000a1a4 <__srefill_r>
100049f0:	1000021e 	bne	r2,zero,100049fc <__svfscanf_r+0x1358>
100049f4:	98800017 	ldw	r2,0(r19)
100049f8:	003fe506 	br	10004990 <__alt_data_end+0xf8004990>
100049fc:	d8809e17 	ldw	r2,632(sp)
10004a00:	856bc83a 	sub	r21,r16,r21
10004a04:	80000005 	stb	zero,0(r16)
10004a08:	dc009d17 	ldw	r16,628(sp)
10004a0c:	10800044 	addi	r2,r2,1
10004a10:	a569883a 	add	r20,r20,r21
10004a14:	d8809e15 	stw	r2,632(sp)
10004a18:	dd809c15 	stw	r22,624(sp)
10004a1c:	800d883a 	mov	r6,r16
10004a20:	003b5906 	br	10003788 <__alt_data_end+0xf8003788>
10004a24:	dd409b04 	addi	r21,sp,620
10004a28:	003d2506 	br	10003ec0 <__alt_data_end+0xf8003ec0>
10004a2c:	002d883a 	mov	r22,zero
10004a30:	003ba206 	br	100038bc <__alt_data_end+0xf80038bc>
10004a34:	d9009c17 	ldw	r4,624(sp)
10004a38:	20c00017 	ldw	r3,0(r4)
10004a3c:	21000104 	addi	r4,r4,4
10004a40:	d9009c15 	stw	r4,624(sp)
10004a44:	18800015 	stw	r2,0(r3)
10004a48:	003fc806 	br	1000496c <__alt_data_end+0xf800496c>
10004a4c:	b280008c 	andi	r10,r22,2
10004a50:	50008126 	beq	r10,zero,10004c58 <__svfscanf_r+0x15b4>
10004a54:	d8c09c17 	ldw	r3,624(sp)
10004a58:	18800017 	ldw	r2,0(r3)
10004a5c:	18c00104 	addi	r3,r3,4
10004a60:	d8c09c15 	stw	r3,624(sp)
10004a64:	15400015 	stw	r21,0(r2)
10004a68:	15c00115 	stw	r23,4(r2)
10004a6c:	003cde06 	br	10003de8 <__alt_data_end+0xf8003de8>
10004a70:	00bf1fc4 	movi	r2,-897
10004a74:	b0ac703a 	and	r22,r22,r2
10004a78:	18000226 	beq	r3,zero,10004a84 <__svfscanf_r+0x13e0>
10004a7c:	18ffffc4 	addi	r3,r3,-1
10004a80:	e7000044 	addi	fp,fp,1
10004a84:	84000044 	addi	r16,r16,1
10004a88:	003f3506 	br	10004760 <__alt_data_end+0xf8004760>
10004a8c:	803cfe1e 	bne	r16,zero,10003e88 <__alt_data_end+0xf8003e88>
10004a90:	003b4106 	br	10003798 <__alt_data_end+0xf8003798>
10004a94:	d8c09c17 	ldw	r3,624(sp)
10004a98:	01400044 	movi	r5,1
10004a9c:	e00d883a 	mov	r6,fp
10004aa0:	19000017 	ldw	r4,0(r3)
10004aa4:	980f883a 	mov	r7,r19
10004aa8:	0006f380 	call	10006f38 <fread>
10004aac:	d9009c17 	ldw	r4,624(sp)
10004ab0:	20c00104 	addi	r3,r4,4
10004ab4:	103c3126 	beq	r2,zero,10003b7c <__alt_data_end+0xf8003b7c>
10004ab8:	1529883a 	add	r20,r2,r20
10004abc:	d8809e17 	ldw	r2,632(sp)
10004ac0:	dc009d17 	ldw	r16,628(sp)
10004ac4:	d8c09c15 	stw	r3,624(sp)
10004ac8:	10800044 	addi	r2,r2,1
10004acc:	d8809e15 	stw	r2,632(sp)
10004ad0:	800d883a 	mov	r6,r16
10004ad4:	003b2c06 	br	10003788 <__alt_data_end+0xf8003788>
10004ad8:	00ffff84 	movi	r3,-2
10004adc:	10ff7126 	beq	r2,r3,100048a4 <__alt_data_end+0xf80048a4>
10004ae0:	a9000017 	ldw	r4,0(r21)
10004ae4:	00079c80 	call	100079c8 <iswspace>
10004ae8:	103f6926 	beq	r2,zero,10004890 <__alt_data_end+0xf8004890>
10004aec:	803f7426 	beq	r16,zero,100048c0 <__alt_data_end+0xf80048c0>
10004af0:	843fffc4 	addi	r16,r16,-1
10004af4:	d9000104 	addi	r4,sp,4
10004af8:	2405883a 	add	r2,r4,r16
10004afc:	11400003 	ldbu	r5,0(r2)
10004b00:	8809883a 	mov	r4,r17
10004b04:	980d883a 	mov	r6,r19
10004b08:	000cb540 	call	1000cb54 <_ungetc_r>
10004b0c:	803ff81e 	bne	r16,zero,10004af0 <__alt_data_end+0xf8004af0>
10004b10:	003f6b06 	br	100048c0 <__alt_data_end+0xf80048c0>
10004b14:	99000017 	ldw	r4,0(r19)
10004b18:	1705c83a 	sub	r2,r2,fp
10004b1c:	8721883a 	add	r16,r16,fp
10004b20:	2707883a 	add	r3,r4,fp
10004b24:	98800115 	stw	r2,4(r19)
10004b28:	98c00015 	stw	r3,0(r19)
10004b2c:	003cd606 	br	10003e88 <__alt_data_end+0xf8003e88>
10004b30:	d880a117 	ldw	r2,644(sp)
10004b34:	000d883a 	mov	r6,zero
10004b38:	8809883a 	mov	r4,r17
10004b3c:	11400044 	addi	r5,r2,1
10004b40:	01c00284 	movi	r7,10
10004b44:	000be500 	call	1000be50 <_strtol_r>
10004b48:	d8c0a317 	ldw	r3,652(sp)
10004b4c:	10cdc83a 	sub	r6,r2,r3
10004b50:	d900a117 	ldw	r4,644(sp)
10004b54:	d88055c4 	addi	r2,sp,343
10004b58:	20800236 	bltu	r4,r2,10004b64 <__svfscanf_r+0x14c0>
10004b5c:	d9005584 	addi	r4,sp,342
10004b60:	d900a115 	stw	r4,644(sp)
10004b64:	d900a117 	ldw	r4,644(sp)
10004b68:	01440074 	movhi	r5,4097
10004b6c:	294ada04 	addi	r5,r5,11112
10004b70:	000a57c0 	call	1000a57c <sprintf>
10004b74:	003c8e06 	br	10003db0 <__alt_data_end+0xf8003db0>
10004b78:	b32c703a 	and	r22,r22,r12
10004b7c:	01800044 	movi	r6,1
10004b80:	003daf06 	br	10004240 <__alt_data_end+0xf8004240>
10004b84:	d8c0a217 	ldw	r3,648(sp)
10004b88:	a8ebc83a 	sub	r21,r21,r3
10004b8c:	054dc83a 	sub	r6,zero,r21
10004b90:	a83c8726 	beq	r21,zero,10003db0 <__alt_data_end+0xf8003db0>
10004b94:	ddc0a115 	stw	r23,644(sp)
10004b98:	003fed06 	br	10004b50 <__alt_data_end+0xf8004b50>
10004b9c:	85c00083 	ldbu	r23,2(r16)
10004ba0:	b5800094 	ori	r22,r22,2
10004ba4:	84000084 	addi	r16,r16,2
10004ba8:	003b1e06 	br	10003824 <__alt_data_end+0xf8003824>
10004bac:	b080004c 	andi	r2,r22,1
10004bb0:	10000d1e 	bne	r2,zero,10004be8 <__svfscanf_r+0x1544>
10004bb4:	b580008c 	andi	r22,r22,2
10004bb8:	b0000b26 	beq	r22,zero,10004be8 <__svfscanf_r+0x1544>
10004bbc:	d8c09c17 	ldw	r3,624(sp)
10004bc0:	d9009c17 	ldw	r4,624(sp)
10004bc4:	dc009d17 	ldw	r16,628(sp)
10004bc8:	18800017 	ldw	r2,0(r3)
10004bcc:	a007d7fa 	srai	r3,r20,31
10004bd0:	21000104 	addi	r4,r4,4
10004bd4:	15000015 	stw	r20,0(r2)
10004bd8:	10c00115 	stw	r3,4(r2)
10004bdc:	d9009c15 	stw	r4,624(sp)
10004be0:	800d883a 	mov	r6,r16
10004be4:	003ae806 	br	10003788 <__alt_data_end+0xf8003788>
10004be8:	d9409c17 	ldw	r5,624(sp)
10004bec:	dc009d17 	ldw	r16,628(sp)
10004bf0:	28800017 	ldw	r2,0(r5)
10004bf4:	29400104 	addi	r5,r5,4
10004bf8:	d9409c15 	stw	r5,624(sp)
10004bfc:	15000015 	stw	r20,0(r2)
10004c00:	800d883a 	mov	r6,r16
10004c04:	003ae006 	br	10003788 <__alt_data_end+0xf8003788>
10004c08:	b0c0004c 	andi	r3,r22,1
10004c0c:	183f891e 	bne	r3,zero,10004a34 <__alt_data_end+0xf8004a34>
10004c10:	b580008c 	andi	r22,r22,2
10004c14:	b03f8726 	beq	r22,zero,10004a34 <__alt_data_end+0xf8004a34>
10004c18:	d940a017 	ldw	r5,640(sp)
10004c1c:	00840074 	movhi	r2,4097
10004c20:	10b10204 	addi	r2,r2,-15352
10004c24:	8809883a 	mov	r4,r17
10004c28:	28802626 	beq	r5,r2,10004cc4 <__svfscanf_r+0x1620>
10004c2c:	d9c09f17 	ldw	r7,636(sp)
10004c30:	d9400104 	addi	r5,sp,4
10004c34:	000d883a 	mov	r6,zero
10004c38:	000c0d80 	call	1000c0d8 <_strtoll_r>
10004c3c:	d9409c17 	ldw	r5,624(sp)
10004c40:	29000017 	ldw	r4,0(r5)
10004c44:	29400104 	addi	r5,r5,4
10004c48:	d9409c15 	stw	r5,624(sp)
10004c4c:	20800015 	stw	r2,0(r4)
10004c50:	20c00115 	stw	r3,4(r4)
10004c54:	003f4506 	br	1000496c <__alt_data_end+0xf800496c>
10004c58:	d8809c17 	ldw	r2,624(sp)
10004c5c:	a809883a 	mov	r4,r21
10004c60:	180b883a 	mov	r5,r3
10004c64:	14000104 	addi	r16,r2,4
10004c68:	15800017 	ldw	r22,0(r2)
10004c6c:	000a3c80 	call	1000a3c8 <__isnand>
10004c70:	1000311e 	bne	r2,zero,10004d38 <__svfscanf_r+0x1694>
10004c74:	a809883a 	mov	r4,r21
10004c78:	b80b883a 	mov	r5,r23
10004c7c:	000fa180 	call	1000fa18 <__truncdfsf2>
10004c80:	b0800015 	stw	r2,0(r22)
10004c84:	dc009c15 	stw	r16,624(sp)
10004c88:	003c5706 	br	10003de8 <__alt_data_end+0xf8003de8>
10004c8c:	0021883a 	mov	r16,zero
10004c90:	003f0406 	br	100048a4 <__alt_data_end+0xf80048a4>
10004c94:	d9400104 	addi	r5,sp,4
10004c98:	9821883a 	mov	r16,r19
10004c9c:	2dfabe2e 	bgeu	r5,r23,10003798 <__alt_data_end+0xf8003798>
10004ca0:	bcbfffc4 	addi	r18,r23,-1
10004ca4:	dcc000c4 	addi	r19,sp,3
10004ca8:	91400007 	ldb	r5,0(r18)
10004cac:	8809883a 	mov	r4,r17
10004cb0:	94bfffc4 	addi	r18,r18,-1
10004cb4:	800d883a 	mov	r6,r16
10004cb8:	000cb540 	call	1000cb54 <_ungetc_r>
10004cbc:	94fffa1e 	bne	r18,r19,10004ca8 <__alt_data_end+0xf8004ca8>
10004cc0:	003ab506 	br	10003798 <__alt_data_end+0xf8003798>
10004cc4:	d9c09f17 	ldw	r7,636(sp)
10004cc8:	d9400104 	addi	r5,sp,4
10004ccc:	000d883a 	mov	r6,zero
10004cd0:	000c6d00 	call	1000c6d0 <_strtoull_r>
10004cd4:	003fd906 	br	10004c3c <__alt_data_end+0xf8004c3c>
10004cd8:	d9000104 	addi	r4,sp,4
10004cdc:	9821883a 	mov	r16,r19
10004ce0:	25faad2e 	bgeu	r4,r23,10003798 <__alt_data_end+0xf8003798>
10004ce4:	bcbfffc4 	addi	r18,r23,-1
10004ce8:	dcc000c4 	addi	r19,sp,3
10004cec:	91400007 	ldb	r5,0(r18)
10004cf0:	8809883a 	mov	r4,r17
10004cf4:	94bfffc4 	addi	r18,r18,-1
10004cf8:	800d883a 	mov	r6,r16
10004cfc:	000cb540 	call	1000cb54 <_ungetc_r>
10004d00:	94fffa1e 	bne	r18,r19,10004cec <__alt_data_end+0xf8004cec>
10004d04:	003aa406 	br	10003798 <__alt_data_end+0xf8003798>
10004d08:	d8c00104 	addi	r3,sp,4
10004d0c:	9821883a 	mov	r16,r19
10004d10:	1dfaa12e 	bgeu	r3,r23,10003798 <__alt_data_end+0xf8003798>
10004d14:	bcbfffc4 	addi	r18,r23,-1
10004d18:	dcc000c4 	addi	r19,sp,3
10004d1c:	91400007 	ldb	r5,0(r18)
10004d20:	8809883a 	mov	r4,r17
10004d24:	94bfffc4 	addi	r18,r18,-1
10004d28:	800d883a 	mov	r6,r16
10004d2c:	000cb540 	call	1000cb54 <_ungetc_r>
10004d30:	94fffa1e 	bne	r18,r19,10004d1c <__alt_data_end+0xf8004d1c>
10004d34:	003a9806 	br	10003798 <__alt_data_end+0xf8003798>
10004d38:	0009883a 	mov	r4,zero
10004d3c:	000a51c0 	call	1000a51c <nanf>
10004d40:	b0800015 	stw	r2,0(r22)
10004d44:	dc009c15 	stw	r16,624(sp)
10004d48:	003c2706 	br	10003de8 <__alt_data_end+0xf8003de8>

10004d4c <_vfscanf_r>:
10004d4c:	defffb04 	addi	sp,sp,-20
10004d50:	dc000315 	stw	r16,12(sp)
10004d54:	dfc00415 	stw	ra,16(sp)
10004d58:	2021883a 	mov	r16,r4
10004d5c:	20000926 	beq	r4,zero,10004d84 <_vfscanf_r+0x38>
10004d60:	20800e17 	ldw	r2,56(r4)
10004d64:	1000071e 	bne	r2,zero,10004d84 <_vfscanf_r+0x38>
10004d68:	d9400015 	stw	r5,0(sp)
10004d6c:	d9800115 	stw	r6,4(sp)
10004d70:	d9c00215 	stw	r7,8(sp)
10004d74:	0006ab40 	call	10006ab4 <__sinit>
10004d78:	d9c00217 	ldw	r7,8(sp)
10004d7c:	d9800117 	ldw	r6,4(sp)
10004d80:	d9400017 	ldw	r5,0(sp)
10004d84:	8009883a 	mov	r4,r16
10004d88:	dfc00417 	ldw	ra,16(sp)
10004d8c:	dc000317 	ldw	r16,12(sp)
10004d90:	dec00504 	addi	sp,sp,20
10004d94:	00036a41 	jmpi	100036a4 <__svfscanf_r>

10004d98 <__svfscanf>:
10004d98:	00840074 	movhi	r2,4097
10004d9c:	10936704 	addi	r2,r2,19868
10004da0:	2007883a 	mov	r3,r4
10004da4:	11000017 	ldw	r4,0(r2)
10004da8:	2805883a 	mov	r2,r5
10004dac:	300f883a 	mov	r7,r6
10004db0:	180b883a 	mov	r5,r3
10004db4:	100d883a 	mov	r6,r2
10004db8:	00036a41 	jmpi	100036a4 <__svfscanf_r>

10004dbc <vfscanf>:
10004dbc:	defffb04 	addi	sp,sp,-20
10004dc0:	dc000115 	stw	r16,4(sp)
10004dc4:	04040074 	movhi	r16,4097
10004dc8:	84136704 	addi	r16,r16,19868
10004dcc:	80800017 	ldw	r2,0(r16)
10004dd0:	dc800315 	stw	r18,12(sp)
10004dd4:	dc400215 	stw	r17,8(sp)
10004dd8:	dfc00415 	stw	ra,16(sp)
10004ddc:	2025883a 	mov	r18,r4
10004de0:	2823883a 	mov	r17,r5
10004de4:	300f883a 	mov	r7,r6
10004de8:	10000726 	beq	r2,zero,10004e08 <vfscanf+0x4c>
10004dec:	10c00e17 	ldw	r3,56(r2)
10004df0:	1800051e 	bne	r3,zero,10004e08 <vfscanf+0x4c>
10004df4:	1009883a 	mov	r4,r2
10004df8:	d9800015 	stw	r6,0(sp)
10004dfc:	0006ab40 	call	10006ab4 <__sinit>
10004e00:	80800017 	ldw	r2,0(r16)
10004e04:	d9c00017 	ldw	r7,0(sp)
10004e08:	1009883a 	mov	r4,r2
10004e0c:	900b883a 	mov	r5,r18
10004e10:	880d883a 	mov	r6,r17
10004e14:	dfc00417 	ldw	ra,16(sp)
10004e18:	dc800317 	ldw	r18,12(sp)
10004e1c:	dc400217 	ldw	r17,8(sp)
10004e20:	dc000117 	ldw	r16,4(sp)
10004e24:	dec00504 	addi	sp,sp,20
10004e28:	00036a41 	jmpi	100036a4 <__svfscanf_r>

10004e2c <__swsetup_r>:
10004e2c:	00840074 	movhi	r2,4097
10004e30:	10936704 	addi	r2,r2,19868
10004e34:	10800017 	ldw	r2,0(r2)
10004e38:	defffd04 	addi	sp,sp,-12
10004e3c:	dc400115 	stw	r17,4(sp)
10004e40:	dc000015 	stw	r16,0(sp)
10004e44:	dfc00215 	stw	ra,8(sp)
10004e48:	2023883a 	mov	r17,r4
10004e4c:	2821883a 	mov	r16,r5
10004e50:	10000226 	beq	r2,zero,10004e5c <__swsetup_r+0x30>
10004e54:	10c00e17 	ldw	r3,56(r2)
10004e58:	18003d26 	beq	r3,zero,10004f50 <__swsetup_r+0x124>
10004e5c:	8080030b 	ldhu	r2,12(r16)
10004e60:	10c0020c 	andi	r3,r2,8
10004e64:	18ffffcc 	andi	r3,r3,65535
10004e68:	18e0001c 	xori	r3,r3,32768
10004e6c:	18e00004 	addi	r3,r3,-32768
10004e70:	18001226 	beq	r3,zero,10004ebc <__swsetup_r+0x90>
10004e74:	80c00417 	ldw	r3,16(r16)
10004e78:	18001f26 	beq	r3,zero,10004ef8 <__swsetup_r+0xcc>
10004e7c:	1100004c 	andi	r4,r2,1
10004e80:	2000261e 	bne	r4,zero,10004f1c <__swsetup_r+0xf0>
10004e84:	1080008c 	andi	r2,r2,2
10004e88:	10bfffcc 	andi	r2,r2,65535
10004e8c:	10a0001c 	xori	r2,r2,32768
10004e90:	10a00004 	addi	r2,r2,-32768
10004e94:	1000311e 	bne	r2,zero,10004f5c <__swsetup_r+0x130>
10004e98:	80800517 	ldw	r2,20(r16)
10004e9c:	80800215 	stw	r2,8(r16)
10004ea0:	18002326 	beq	r3,zero,10004f30 <__swsetup_r+0x104>
10004ea4:	0005883a 	mov	r2,zero
10004ea8:	dfc00217 	ldw	ra,8(sp)
10004eac:	dc400117 	ldw	r17,4(sp)
10004eb0:	dc000017 	ldw	r16,0(sp)
10004eb4:	dec00304 	addi	sp,sp,12
10004eb8:	f800283a 	ret
10004ebc:	10c0040c 	andi	r3,r2,16
10004ec0:	18ffffcc 	andi	r3,r3,65535
10004ec4:	18e0001c 	xori	r3,r3,32768
10004ec8:	18e00004 	addi	r3,r3,-32768
10004ecc:	18001e26 	beq	r3,zero,10004f48 <__swsetup_r+0x11c>
10004ed0:	10c0010c 	andi	r3,r2,4
10004ed4:	18ffffcc 	andi	r3,r3,65535
10004ed8:	18e0001c 	xori	r3,r3,32768
10004edc:	18e00004 	addi	r3,r3,-32768
10004ee0:	1800211e 	bne	r3,zero,10004f68 <__swsetup_r+0x13c>
10004ee4:	80c00417 	ldw	r3,16(r16)
10004ee8:	11400214 	ori	r5,r2,8
10004eec:	8140030d 	sth	r5,12(r16)
10004ef0:	2805883a 	mov	r2,r5
10004ef4:	183fe11e 	bne	r3,zero,10004e7c <__alt_data_end+0xf8004e7c>
10004ef8:	1140a00c 	andi	r5,r2,640
10004efc:	01008004 	movi	r4,512
10004f00:	293fde26 	beq	r5,r4,10004e7c <__alt_data_end+0xf8004e7c>
10004f04:	8809883a 	mov	r4,r17
10004f08:	800b883a 	mov	r5,r16
10004f0c:	0007adc0 	call	10007adc <__smakebuf_r>
10004f10:	8080030b 	ldhu	r2,12(r16)
10004f14:	80c00417 	ldw	r3,16(r16)
10004f18:	003fd806 	br	10004e7c <__alt_data_end+0xf8004e7c>
10004f1c:	80800517 	ldw	r2,20(r16)
10004f20:	80000215 	stw	zero,8(r16)
10004f24:	0085c83a 	sub	r2,zero,r2
10004f28:	80800615 	stw	r2,24(r16)
10004f2c:	183fdd1e 	bne	r3,zero,10004ea4 <__alt_data_end+0xf8004ea4>
10004f30:	8080030b 	ldhu	r2,12(r16)
10004f34:	1080200c 	andi	r2,r2,128
10004f38:	10bfffcc 	andi	r2,r2,65535
10004f3c:	10a0001c 	xori	r2,r2,32768
10004f40:	10a00004 	addi	r2,r2,-32768
10004f44:	103fd826 	beq	r2,zero,10004ea8 <__alt_data_end+0xf8004ea8>
10004f48:	00bfffc4 	movi	r2,-1
10004f4c:	003fd606 	br	10004ea8 <__alt_data_end+0xf8004ea8>
10004f50:	1009883a 	mov	r4,r2
10004f54:	0006ab40 	call	10006ab4 <__sinit>
10004f58:	003fc006 	br	10004e5c <__alt_data_end+0xf8004e5c>
10004f5c:	0005883a 	mov	r2,zero
10004f60:	80800215 	stw	r2,8(r16)
10004f64:	003fce06 	br	10004ea0 <__alt_data_end+0xf8004ea0>
10004f68:	81400c17 	ldw	r5,48(r16)
10004f6c:	28000626 	beq	r5,zero,10004f88 <__swsetup_r+0x15c>
10004f70:	80c01004 	addi	r3,r16,64
10004f74:	28c00326 	beq	r5,r3,10004f84 <__swsetup_r+0x158>
10004f78:	8809883a 	mov	r4,r17
10004f7c:	00070b40 	call	100070b4 <_free_r>
10004f80:	8080030b 	ldhu	r2,12(r16)
10004f84:	80000c15 	stw	zero,48(r16)
10004f88:	80c00417 	ldw	r3,16(r16)
10004f8c:	013ff6c4 	movi	r4,-37
10004f90:	2084703a 	and	r2,r4,r2
10004f94:	80000115 	stw	zero,4(r16)
10004f98:	80c00015 	stw	r3,0(r16)
10004f9c:	003fd206 	br	10004ee8 <__alt_data_end+0xf8004ee8>

10004fa0 <quorem>:
10004fa0:	defff204 	addi	sp,sp,-56
10004fa4:	dd000815 	stw	r20,32(sp)
10004fa8:	20800417 	ldw	r2,16(r4)
10004fac:	2d000417 	ldw	r20,16(r5)
10004fb0:	dcc00715 	stw	r19,28(sp)
10004fb4:	dfc00d15 	stw	ra,52(sp)
10004fb8:	df000c15 	stw	fp,48(sp)
10004fbc:	ddc00b15 	stw	r23,44(sp)
10004fc0:	dd800a15 	stw	r22,40(sp)
10004fc4:	dd400915 	stw	r21,36(sp)
10004fc8:	dc800615 	stw	r18,24(sp)
10004fcc:	dc400515 	stw	r17,20(sp)
10004fd0:	dc000415 	stw	r16,16(sp)
10004fd4:	d9400015 	stw	r5,0(sp)
10004fd8:	2027883a 	mov	r19,r4
10004fdc:	15007d16 	blt	r2,r20,100051d4 <quorem+0x234>
10004fe0:	a0800104 	addi	r2,r20,4
10004fe4:	1085883a 	add	r2,r2,r2
10004fe8:	1085883a 	add	r2,r2,r2
10004fec:	28ad883a 	add	r22,r5,r2
10004ff0:	2085883a 	add	r2,r4,r2
10004ff4:	10800017 	ldw	r2,0(r2)
10004ff8:	b1400017 	ldw	r5,0(r22)
10004ffc:	a53fffc4 	addi	r20,r20,-1
10005000:	1009883a 	mov	r4,r2
10005004:	29400044 	addi	r5,r5,1
10005008:	d8800115 	stw	r2,4(sp)
1000500c:	000157c0 	call	1000157c <__udivsi3>
10005010:	1025883a 	mov	r18,r2
10005014:	d8800017 	ldw	r2,0(sp)
10005018:	9f000504 	addi	fp,r19,20
1000501c:	14000504 	addi	r16,r2,20
10005020:	90003626 	beq	r18,zero,100050fc <quorem+0x15c>
10005024:	802b883a 	mov	r21,r16
10005028:	e023883a 	mov	r17,fp
1000502c:	0007883a 	mov	r3,zero
10005030:	002f883a 	mov	r23,zero
10005034:	a9800017 	ldw	r6,0(r21)
10005038:	900b883a 	mov	r5,r18
1000503c:	d8c00315 	stw	r3,12(sp)
10005040:	313fffcc 	andi	r4,r6,65535
10005044:	d9800215 	stw	r6,8(sp)
10005048:	000158c0 	call	1000158c <__mulsi3>
1000504c:	d9800217 	ldw	r6,8(sp)
10005050:	d8c00317 	ldw	r3,12(sp)
10005054:	900b883a 	mov	r5,r18
10005058:	3008d43a 	srli	r4,r6,16
1000505c:	1887883a 	add	r3,r3,r2
10005060:	d8c00315 	stw	r3,12(sp)
10005064:	000158c0 	call	1000158c <__mulsi3>
10005068:	89400017 	ldw	r5,0(r17)
1000506c:	d8c00317 	ldw	r3,12(sp)
10005070:	ad400104 	addi	r21,r21,4
10005074:	293fffcc 	andi	r4,r5,65535
10005078:	1810d43a 	srli	r8,r3,16
1000507c:	25c9883a 	add	r4,r4,r23
10005080:	18ffffcc 	andi	r3,r3,65535
10005084:	20c9c83a 	sub	r4,r4,r3
10005088:	280cd43a 	srli	r6,r5,16
1000508c:	4085883a 	add	r2,r8,r2
10005090:	2007d43a 	srai	r3,r4,16
10005094:	117fffcc 	andi	r5,r2,65535
10005098:	314bc83a 	sub	r5,r6,r5
1000509c:	28cb883a 	add	r5,r5,r3
100050a0:	8940008d 	sth	r5,2(r17)
100050a4:	8900000d 	sth	r4,0(r17)
100050a8:	1006d43a 	srli	r3,r2,16
100050ac:	282fd43a 	srai	r23,r5,16
100050b0:	8c400104 	addi	r17,r17,4
100050b4:	b57fdf2e 	bgeu	r22,r21,10005034 <__alt_data_end+0xf8005034>
100050b8:	d8c00117 	ldw	r3,4(sp)
100050bc:	18000f1e 	bne	r3,zero,100050fc <quorem+0x15c>
100050c0:	a0800144 	addi	r2,r20,5
100050c4:	1085883a 	add	r2,r2,r2
100050c8:	1085883a 	add	r2,r2,r2
100050cc:	9887883a 	add	r3,r19,r2
100050d0:	18bfff04 	addi	r2,r3,-4
100050d4:	e080082e 	bgeu	fp,r2,100050f8 <quorem+0x158>
100050d8:	18ffff17 	ldw	r3,-4(r3)
100050dc:	18000326 	beq	r3,zero,100050ec <quorem+0x14c>
100050e0:	00000506 	br	100050f8 <quorem+0x158>
100050e4:	10c00017 	ldw	r3,0(r2)
100050e8:	1800031e 	bne	r3,zero,100050f8 <quorem+0x158>
100050ec:	10bfff04 	addi	r2,r2,-4
100050f0:	a53fffc4 	addi	r20,r20,-1
100050f4:	e0bffb36 	bltu	fp,r2,100050e4 <__alt_data_end+0xf80050e4>
100050f8:	9d000415 	stw	r20,16(r19)
100050fc:	d9400017 	ldw	r5,0(sp)
10005100:	9809883a 	mov	r4,r19
10005104:	00092dc0 	call	100092dc <__mcmp>
10005108:	10002516 	blt	r2,zero,100051a0 <quorem+0x200>
1000510c:	94800044 	addi	r18,r18,1
10005110:	e007883a 	mov	r3,fp
10005114:	000d883a 	mov	r6,zero
10005118:	18800017 	ldw	r2,0(r3)
1000511c:	82000017 	ldw	r8,0(r16)
10005120:	84000104 	addi	r16,r16,4
10005124:	11ffffcc 	andi	r7,r2,65535
10005128:	413fffcc 	andi	r4,r8,65535
1000512c:	398d883a 	add	r6,r7,r6
10005130:	310fc83a 	sub	r7,r6,r4
10005134:	4010d43a 	srli	r8,r8,16
10005138:	100cd43a 	srli	r6,r2,16
1000513c:	3809d43a 	srai	r4,r7,16
10005140:	19c0000d 	sth	r7,0(r3)
10005144:	320dc83a 	sub	r6,r6,r8
10005148:	310d883a 	add	r6,r6,r4
1000514c:	1980008d 	sth	r6,2(r3)
10005150:	300dd43a 	srai	r6,r6,16
10005154:	18c00104 	addi	r3,r3,4
10005158:	b43fef2e 	bgeu	r22,r16,10005118 <__alt_data_end+0xf8005118>
1000515c:	a0800144 	addi	r2,r20,5
10005160:	1085883a 	add	r2,r2,r2
10005164:	1085883a 	add	r2,r2,r2
10005168:	9885883a 	add	r2,r19,r2
1000516c:	10c00017 	ldw	r3,0(r2)
10005170:	18000b1e 	bne	r3,zero,100051a0 <quorem+0x200>
10005174:	10ffff04 	addi	r3,r2,-4
10005178:	e0c0082e 	bgeu	fp,r3,1000519c <quorem+0x1fc>
1000517c:	10bfff17 	ldw	r2,-4(r2)
10005180:	10000326 	beq	r2,zero,10005190 <quorem+0x1f0>
10005184:	00000506 	br	1000519c <quorem+0x1fc>
10005188:	18800017 	ldw	r2,0(r3)
1000518c:	1000031e 	bne	r2,zero,1000519c <quorem+0x1fc>
10005190:	18ffff04 	addi	r3,r3,-4
10005194:	a53fffc4 	addi	r20,r20,-1
10005198:	e0fffb36 	bltu	fp,r3,10005188 <__alt_data_end+0xf8005188>
1000519c:	9d000415 	stw	r20,16(r19)
100051a0:	9005883a 	mov	r2,r18
100051a4:	dfc00d17 	ldw	ra,52(sp)
100051a8:	df000c17 	ldw	fp,48(sp)
100051ac:	ddc00b17 	ldw	r23,44(sp)
100051b0:	dd800a17 	ldw	r22,40(sp)
100051b4:	dd400917 	ldw	r21,36(sp)
100051b8:	dd000817 	ldw	r20,32(sp)
100051bc:	dcc00717 	ldw	r19,28(sp)
100051c0:	dc800617 	ldw	r18,24(sp)
100051c4:	dc400517 	ldw	r17,20(sp)
100051c8:	dc000417 	ldw	r16,16(sp)
100051cc:	dec00e04 	addi	sp,sp,56
100051d0:	f800283a 	ret
100051d4:	0005883a 	mov	r2,zero
100051d8:	003ff206 	br	100051a4 <__alt_data_end+0xf80051a4>

100051dc <_dtoa_r>:
100051dc:	20801017 	ldw	r2,64(r4)
100051e0:	deffdf04 	addi	sp,sp,-132
100051e4:	dcc01a15 	stw	r19,104(sp)
100051e8:	dc801915 	stw	r18,100(sp)
100051ec:	dc401815 	stw	r17,96(sp)
100051f0:	dc001715 	stw	r16,92(sp)
100051f4:	dfc02015 	stw	ra,128(sp)
100051f8:	df001f15 	stw	fp,124(sp)
100051fc:	ddc01e15 	stw	r23,120(sp)
10005200:	dd801d15 	stw	r22,116(sp)
10005204:	dd401c15 	stw	r21,112(sp)
10005208:	dd001b15 	stw	r20,108(sp)
1000520c:	d9400315 	stw	r5,12(sp)
10005210:	d9c00415 	stw	r7,16(sp)
10005214:	2021883a 	mov	r16,r4
10005218:	3025883a 	mov	r18,r6
1000521c:	dcc02317 	ldw	r19,140(sp)
10005220:	3023883a 	mov	r17,r6
10005224:	10000826 	beq	r2,zero,10005248 <_dtoa_r+0x6c>
10005228:	20c01117 	ldw	r3,68(r4)
1000522c:	01800044 	movi	r6,1
10005230:	100b883a 	mov	r5,r2
10005234:	30cc983a 	sll	r6,r6,r3
10005238:	10c00115 	stw	r3,4(r2)
1000523c:	11800215 	stw	r6,8(r2)
10005240:	0008a380 	call	10008a38 <_Bfree>
10005244:	80001015 	stw	zero,64(r16)
10005248:	90002f16 	blt	r18,zero,10005308 <_dtoa_r+0x12c>
1000524c:	98000015 	stw	zero,0(r19)
10005250:	90dffc2c 	andhi	r3,r18,32752
10005254:	009ffc34 	movhi	r2,32752
10005258:	18801c26 	beq	r3,r2,100052cc <_dtoa_r+0xf0>
1000525c:	d9000317 	ldw	r4,12(sp)
10005260:	880b883a 	mov	r5,r17
10005264:	000d883a 	mov	r6,zero
10005268:	000f883a 	mov	r7,zero
1000526c:	000f6a40 	call	1000f6a4 <__nedf2>
10005270:	10002c1e 	bne	r2,zero,10005324 <_dtoa_r+0x148>
10005274:	d9002217 	ldw	r4,136(sp)
10005278:	d9c02417 	ldw	r7,144(sp)
1000527c:	00800044 	movi	r2,1
10005280:	20800015 	stw	r2,0(r4)
10005284:	38019426 	beq	r7,zero,100058d8 <_dtoa_r+0x6fc>
10005288:	00840074 	movhi	r2,4097
1000528c:	108ad144 	addi	r2,r2,11077
10005290:	38800015 	stw	r2,0(r7)
10005294:	15ffffc4 	addi	r23,r2,-1
10005298:	b805883a 	mov	r2,r23
1000529c:	dfc02017 	ldw	ra,128(sp)
100052a0:	df001f17 	ldw	fp,124(sp)
100052a4:	ddc01e17 	ldw	r23,120(sp)
100052a8:	dd801d17 	ldw	r22,116(sp)
100052ac:	dd401c17 	ldw	r21,112(sp)
100052b0:	dd001b17 	ldw	r20,108(sp)
100052b4:	dcc01a17 	ldw	r19,104(sp)
100052b8:	dc801917 	ldw	r18,100(sp)
100052bc:	dc401817 	ldw	r17,96(sp)
100052c0:	dc001717 	ldw	r16,92(sp)
100052c4:	dec02104 	addi	sp,sp,132
100052c8:	f800283a 	ret
100052cc:	d8c02217 	ldw	r3,136(sp)
100052d0:	d9000317 	ldw	r4,12(sp)
100052d4:	0089c3c4 	movi	r2,9999
100052d8:	18800015 	stw	r2,0(r3)
100052dc:	20016c26 	beq	r4,zero,10005890 <_dtoa_r+0x6b4>
100052e0:	05c40074 	movhi	r23,4097
100052e4:	bdcb8804 	addi	r23,r23,11808
100052e8:	d9c02417 	ldw	r7,144(sp)
100052ec:	383fea26 	beq	r7,zero,10005298 <__alt_data_end+0xf8005298>
100052f0:	b88000c7 	ldb	r2,3(r23)
100052f4:	10016d1e 	bne	r2,zero,100058ac <_dtoa_r+0x6d0>
100052f8:	b88000c4 	addi	r2,r23,3
100052fc:	d8c02417 	ldw	r3,144(sp)
10005300:	18800015 	stw	r2,0(r3)
10005304:	003fe406 	br	10005298 <__alt_data_end+0xf8005298>
10005308:	04600034 	movhi	r17,32768
1000530c:	8c7fffc4 	addi	r17,r17,-1
10005310:	9462703a 	and	r17,r18,r17
10005314:	00800044 	movi	r2,1
10005318:	98800015 	stw	r2,0(r19)
1000531c:	8825883a 	mov	r18,r17
10005320:	003fcb06 	br	10005250 <__alt_data_end+0xf8005250>
10005324:	d9400317 	ldw	r5,12(sp)
10005328:	9028d53a 	srli	r20,r18,20
1000532c:	d8800204 	addi	r2,sp,8
10005330:	d8800015 	stw	r2,0(sp)
10005334:	8009883a 	mov	r4,r16
10005338:	880d883a 	mov	r6,r17
1000533c:	d9c00104 	addi	r7,sp,4
10005340:	00096840 	call	10009684 <__d2b>
10005344:	a501ffcc 	andi	r20,r20,2047
10005348:	1039883a 	mov	fp,r2
1000534c:	a001591e 	bne	r20,zero,100058b4 <_dtoa_r+0x6d8>
10005350:	dd400217 	ldw	r21,8(sp)
10005354:	dd000117 	ldw	r20,4(sp)
10005358:	00befbc4 	movi	r2,-1041
1000535c:	ad29883a 	add	r20,r21,r20
10005360:	a082d216 	blt	r20,r2,10005eac <_dtoa_r+0xcd0>
10005364:	d8c00317 	ldw	r3,12(sp)
10005368:	013f0384 	movi	r4,-1010
1000536c:	2509c83a 	sub	r4,r4,r20
10005370:	a0810484 	addi	r2,r20,1042
10005374:	9124983a 	sll	r18,r18,r4
10005378:	1884d83a 	srl	r2,r3,r2
1000537c:	9088b03a 	or	r4,r18,r2
10005380:	000fa780 	call	1000fa78 <__floatunsidf>
10005384:	1009883a 	mov	r4,r2
10005388:	017f8434 	movhi	r5,65040
1000538c:	00800044 	movi	r2,1
10005390:	194b883a 	add	r5,r3,r5
10005394:	a53fffc4 	addi	r20,r20,-1
10005398:	d8800f15 	stw	r2,60(sp)
1000539c:	000d883a 	mov	r6,zero
100053a0:	01cffe34 	movhi	r7,16376
100053a4:	000f1500 	call	1000f150 <__subdf3>
100053a8:	1009883a 	mov	r4,r2
100053ac:	180b883a 	mov	r5,r3
100053b0:	0198dbf4 	movhi	r6,25455
100053b4:	3190d844 	addi	r6,r6,17249
100053b8:	01cff4f4 	movhi	r7,16339
100053bc:	39e1e9c4 	addi	r7,r7,-30809
100053c0:	000f1b00 	call	1000f1b0 <__muldf3>
100053c4:	180b883a 	mov	r5,r3
100053c8:	01a2d874 	movhi	r6,35681
100053cc:	31b22cc4 	addi	r6,r6,-14157
100053d0:	01cff1f4 	movhi	r7,16327
100053d4:	39e28a04 	addi	r7,r7,-30168
100053d8:	1009883a 	mov	r4,r2
100053dc:	000f0fc0 	call	1000f0fc <__adddf3>
100053e0:	a009883a 	mov	r4,r20
100053e4:	1027883a 	mov	r19,r2
100053e8:	1825883a 	mov	r18,r3
100053ec:	000f8800 	call	1000f880 <__floatsidf>
100053f0:	1009883a 	mov	r4,r2
100053f4:	180b883a 	mov	r5,r3
100053f8:	019427f4 	movhi	r6,20639
100053fc:	319e7ec4 	addi	r6,r6,31227
10005400:	01cff4f4 	movhi	r7,16339
10005404:	39d104c4 	addi	r7,r7,17427
10005408:	000f1b00 	call	1000f1b0 <__muldf3>
1000540c:	9809883a 	mov	r4,r19
10005410:	900b883a 	mov	r5,r18
10005414:	100d883a 	mov	r6,r2
10005418:	180f883a 	mov	r7,r3
1000541c:	000f0fc0 	call	1000f0fc <__adddf3>
10005420:	1009883a 	mov	r4,r2
10005424:	180b883a 	mov	r5,r3
10005428:	1027883a 	mov	r19,r2
1000542c:	1825883a 	mov	r18,r3
10005430:	000f9540 	call	1000f954 <__fixdfsi>
10005434:	9809883a 	mov	r4,r19
10005438:	900b883a 	mov	r5,r18
1000543c:	000d883a 	mov	r6,zero
10005440:	000f883a 	mov	r7,zero
10005444:	d8800615 	stw	r2,24(sp)
10005448:	000f7c80 	call	1000f7c8 <__ltdf2>
1000544c:	10027e16 	blt	r2,zero,10005e48 <_dtoa_r+0xc6c>
10005450:	d8c00617 	ldw	r3,24(sp)
10005454:	00800584 	movi	r2,22
10005458:	10c26c36 	bltu	r2,r3,10005e0c <_dtoa_r+0xc30>
1000545c:	180490fa 	slli	r2,r3,3
10005460:	00c40074 	movhi	r3,4097
10005464:	18cbae04 	addi	r3,r3,11960
10005468:	d9800317 	ldw	r6,12(sp)
1000546c:	1885883a 	add	r2,r3,r2
10005470:	11000017 	ldw	r4,0(r2)
10005474:	11400117 	ldw	r5,4(r2)
10005478:	880f883a 	mov	r7,r17
1000547c:	000f7000 	call	1000f700 <__gtdf2>
10005480:	00828f0e 	bge	zero,r2,10005ec0 <_dtoa_r+0xce4>
10005484:	d8800617 	ldw	r2,24(sp)
10005488:	d8000d15 	stw	zero,52(sp)
1000548c:	10bfffc4 	addi	r2,r2,-1
10005490:	d8800615 	stw	r2,24(sp)
10005494:	ad29c83a 	sub	r20,r21,r20
10005498:	a53fffc4 	addi	r20,r20,-1
1000549c:	a0026616 	blt	r20,zero,10005e38 <_dtoa_r+0xc5c>
100054a0:	dd000715 	stw	r20,28(sp)
100054a4:	d8000815 	stw	zero,32(sp)
100054a8:	d8800617 	ldw	r2,24(sp)
100054ac:	10025a16 	blt	r2,zero,10005e18 <_dtoa_r+0xc3c>
100054b0:	d8c00717 	ldw	r3,28(sp)
100054b4:	d8800b15 	stw	r2,44(sp)
100054b8:	d8000a15 	stw	zero,40(sp)
100054bc:	1887883a 	add	r3,r3,r2
100054c0:	d8c00715 	stw	r3,28(sp)
100054c4:	d9c00417 	ldw	r7,16(sp)
100054c8:	00800244 	movi	r2,9
100054cc:	11c10536 	bltu	r2,r7,100058e4 <_dtoa_r+0x708>
100054d0:	00800144 	movi	r2,5
100054d4:	11c4c60e 	bge	r2,r7,100067f0 <_dtoa_r+0x1614>
100054d8:	39ffff04 	addi	r7,r7,-4
100054dc:	d9c00415 	stw	r7,16(sp)
100054e0:	0027883a 	mov	r19,zero
100054e4:	d9c00417 	ldw	r7,16(sp)
100054e8:	008000c4 	movi	r2,3
100054ec:	3883a226 	beq	r7,r2,10006378 <_dtoa_r+0x119c>
100054f0:	11c2bc16 	blt	r2,r7,10005fe4 <_dtoa_r+0xe08>
100054f4:	00800084 	movi	r2,2
100054f8:	3880fb1e 	bne	r7,r2,100058e8 <_dtoa_r+0x70c>
100054fc:	d8000c15 	stw	zero,48(sp)
10005500:	d9002117 	ldw	r4,132(sp)
10005504:	0103ae0e 	bge	zero,r4,100063c0 <_dtoa_r+0x11e4>
10005508:	2025883a 	mov	r18,r4
1000550c:	d9000e15 	stw	r4,56(sp)
10005510:	d9000915 	stw	r4,36(sp)
10005514:	80001115 	stw	zero,68(r16)
10005518:	008005c4 	movi	r2,23
1000551c:	1484b22e 	bgeu	r2,r18,100067e8 <_dtoa_r+0x160c>
10005520:	00c00044 	movi	r3,1
10005524:	00800104 	movi	r2,4
10005528:	1085883a 	add	r2,r2,r2
1000552c:	11000504 	addi	r4,r2,20
10005530:	180b883a 	mov	r5,r3
10005534:	18c00044 	addi	r3,r3,1
10005538:	913ffb2e 	bgeu	r18,r4,10005528 <__alt_data_end+0xf8005528>
1000553c:	81401115 	stw	r5,68(r16)
10005540:	8009883a 	mov	r4,r16
10005544:	00089900 	call	10008990 <_Balloc>
10005548:	102f883a 	mov	r23,r2
1000554c:	80801015 	stw	r2,64(r16)
10005550:	00800384 	movi	r2,14
10005554:	1480f036 	bltu	r2,r18,10005918 <_dtoa_r+0x73c>
10005558:	9800ef26 	beq	r19,zero,10005918 <_dtoa_r+0x73c>
1000555c:	d8800617 	ldw	r2,24(sp)
10005560:	00839c0e 	bge	zero,r2,100063d4 <_dtoa_r+0x11f8>
10005564:	d8c00617 	ldw	r3,24(sp)
10005568:	108003cc 	andi	r2,r2,15
1000556c:	100490fa 	slli	r2,r2,3
10005570:	182bd13a 	srai	r21,r3,4
10005574:	00c40074 	movhi	r3,4097
10005578:	18cbae04 	addi	r3,r3,11960
1000557c:	1885883a 	add	r2,r3,r2
10005580:	a8c0040c 	andi	r3,r21,16
10005584:	12800017 	ldw	r10,0(r2)
10005588:	15800117 	ldw	r22,4(r2)
1000558c:	18038726 	beq	r3,zero,100063ac <_dtoa_r+0x11d0>
10005590:	00840074 	movhi	r2,4097
10005594:	108ba404 	addi	r2,r2,11920
10005598:	11800817 	ldw	r6,32(r2)
1000559c:	11c00917 	ldw	r7,36(r2)
100055a0:	d9000317 	ldw	r4,12(sp)
100055a4:	880b883a 	mov	r5,r17
100055a8:	da801515 	stw	r10,84(sp)
100055ac:	000f4940 	call	1000f494 <__divdf3>
100055b0:	da801517 	ldw	r10,84(sp)
100055b4:	d8801015 	stw	r2,64(sp)
100055b8:	1829883a 	mov	r20,r3
100055bc:	ad4003cc 	andi	r21,r21,15
100055c0:	048000c4 	movi	r18,3
100055c4:	a8001126 	beq	r21,zero,1000560c <_dtoa_r+0x430>
100055c8:	04c40074 	movhi	r19,4097
100055cc:	9ccba404 	addi	r19,r19,11920
100055d0:	5005883a 	mov	r2,r10
100055d4:	b007883a 	mov	r3,r22
100055d8:	a980004c 	andi	r6,r21,1
100055dc:	1009883a 	mov	r4,r2
100055e0:	a82bd07a 	srai	r21,r21,1
100055e4:	180b883a 	mov	r5,r3
100055e8:	30000426 	beq	r6,zero,100055fc <_dtoa_r+0x420>
100055ec:	99800017 	ldw	r6,0(r19)
100055f0:	99c00117 	ldw	r7,4(r19)
100055f4:	94800044 	addi	r18,r18,1
100055f8:	000f1b00 	call	1000f1b0 <__muldf3>
100055fc:	9cc00204 	addi	r19,r19,8
10005600:	a83ff51e 	bne	r21,zero,100055d8 <__alt_data_end+0xf80055d8>
10005604:	1015883a 	mov	r10,r2
10005608:	182d883a 	mov	r22,r3
1000560c:	d9001017 	ldw	r4,64(sp)
10005610:	a00b883a 	mov	r5,r20
10005614:	500d883a 	mov	r6,r10
10005618:	b00f883a 	mov	r7,r22
1000561c:	000f4940 	call	1000f494 <__divdf3>
10005620:	1027883a 	mov	r19,r2
10005624:	1829883a 	mov	r20,r3
10005628:	d8c00d17 	ldw	r3,52(sp)
1000562c:	18000626 	beq	r3,zero,10005648 <_dtoa_r+0x46c>
10005630:	9809883a 	mov	r4,r19
10005634:	a00b883a 	mov	r5,r20
10005638:	000d883a 	mov	r6,zero
1000563c:	01cffc34 	movhi	r7,16368
10005640:	000f7c80 	call	1000f7c8 <__ltdf2>
10005644:	10040e16 	blt	r2,zero,10006680 <_dtoa_r+0x14a4>
10005648:	9009883a 	mov	r4,r18
1000564c:	000f8800 	call	1000f880 <__floatsidf>
10005650:	1009883a 	mov	r4,r2
10005654:	180b883a 	mov	r5,r3
10005658:	980d883a 	mov	r6,r19
1000565c:	a00f883a 	mov	r7,r20
10005660:	000f1b00 	call	1000f1b0 <__muldf3>
10005664:	1009883a 	mov	r4,r2
10005668:	180b883a 	mov	r5,r3
1000566c:	000d883a 	mov	r6,zero
10005670:	01d00734 	movhi	r7,16412
10005674:	000f0fc0 	call	1000f0fc <__adddf3>
10005678:	057f3034 	movhi	r21,64704
1000567c:	1d6b883a 	add	r21,r3,r21
10005680:	d8c00917 	ldw	r3,36(sp)
10005684:	1025883a 	mov	r18,r2
10005688:	18031f26 	beq	r3,zero,10006308 <_dtoa_r+0x112c>
1000568c:	d8800617 	ldw	r2,24(sp)
10005690:	dac00917 	ldw	r11,36(sp)
10005694:	d8801315 	stw	r2,76(sp)
10005698:	d8c00c17 	ldw	r3,48(sp)
1000569c:	18039026 	beq	r3,zero,100064e0 <_dtoa_r+0x1304>
100056a0:	58bfffc4 	addi	r2,r11,-1
100056a4:	100490fa 	slli	r2,r2,3
100056a8:	00c40074 	movhi	r3,4097
100056ac:	18cbae04 	addi	r3,r3,11960
100056b0:	0009883a 	mov	r4,zero
100056b4:	1885883a 	add	r2,r3,r2
100056b8:	11800017 	ldw	r6,0(r2)
100056bc:	11c00117 	ldw	r7,4(r2)
100056c0:	014ff834 	movhi	r5,16352
100056c4:	dac01615 	stw	r11,88(sp)
100056c8:	000f4940 	call	1000f494 <__divdf3>
100056cc:	900d883a 	mov	r6,r18
100056d0:	a80f883a 	mov	r7,r21
100056d4:	1009883a 	mov	r4,r2
100056d8:	180b883a 	mov	r5,r3
100056dc:	000f1500 	call	1000f150 <__subdf3>
100056e0:	a00b883a 	mov	r5,r20
100056e4:	9809883a 	mov	r4,r19
100056e8:	182b883a 	mov	r21,r3
100056ec:	d8801015 	stw	r2,64(sp)
100056f0:	000f9540 	call	1000f954 <__fixdfsi>
100056f4:	1009883a 	mov	r4,r2
100056f8:	d8801515 	stw	r2,84(sp)
100056fc:	000f8800 	call	1000f880 <__floatsidf>
10005700:	9809883a 	mov	r4,r19
10005704:	a00b883a 	mov	r5,r20
10005708:	100d883a 	mov	r6,r2
1000570c:	180f883a 	mov	r7,r3
10005710:	000f1500 	call	1000f150 <__subdf3>
10005714:	da401517 	ldw	r9,84(sp)
10005718:	d9001017 	ldw	r4,64(sp)
1000571c:	a80b883a 	mov	r5,r21
10005720:	4d000c04 	addi	r20,r9,48
10005724:	bd000005 	stb	r20,0(r23)
10005728:	100d883a 	mov	r6,r2
1000572c:	180f883a 	mov	r7,r3
10005730:	bd800044 	addi	r22,r23,1
10005734:	1025883a 	mov	r18,r2
10005738:	1827883a 	mov	r19,r3
1000573c:	000f7000 	call	1000f700 <__gtdf2>
10005740:	00842216 	blt	zero,r2,100067cc <_dtoa_r+0x15f0>
10005744:	0009883a 	mov	r4,zero
10005748:	014ffc34 	movhi	r5,16368
1000574c:	900d883a 	mov	r6,r18
10005750:	980f883a 	mov	r7,r19
10005754:	000f1500 	call	1000f150 <__subdf3>
10005758:	d9001017 	ldw	r4,64(sp)
1000575c:	a80b883a 	mov	r5,r21
10005760:	100d883a 	mov	r6,r2
10005764:	180f883a 	mov	r7,r3
10005768:	000f7000 	call	1000f700 <__gtdf2>
1000576c:	dac01617 	ldw	r11,88(sp)
10005770:	00841316 	blt	zero,r2,100067c0 <_dtoa_r+0x15e4>
10005774:	00800044 	movi	r2,1
10005778:	12c0670e 	bge	r2,r11,10005918 <_dtoa_r+0x73c>
1000577c:	bad7883a 	add	r11,r23,r11
10005780:	df001115 	stw	fp,68(sp)
10005784:	dc401215 	stw	r17,72(sp)
10005788:	5839883a 	mov	fp,r11
1000578c:	dc401017 	ldw	r17,64(sp)
10005790:	00000806 	br	100057b4 <_dtoa_r+0x5d8>
10005794:	000f1500 	call	1000f150 <__subdf3>
10005798:	1009883a 	mov	r4,r2
1000579c:	180b883a 	mov	r5,r3
100057a0:	880d883a 	mov	r6,r17
100057a4:	a80f883a 	mov	r7,r21
100057a8:	000f7c80 	call	1000f7c8 <__ltdf2>
100057ac:	1003ee16 	blt	r2,zero,10006768 <_dtoa_r+0x158c>
100057b0:	b703f126 	beq	r22,fp,10006778 <_dtoa_r+0x159c>
100057b4:	8809883a 	mov	r4,r17
100057b8:	a80b883a 	mov	r5,r21
100057bc:	000d883a 	mov	r6,zero
100057c0:	01d00934 	movhi	r7,16420
100057c4:	000f1b00 	call	1000f1b0 <__muldf3>
100057c8:	000d883a 	mov	r6,zero
100057cc:	01d00934 	movhi	r7,16420
100057d0:	9009883a 	mov	r4,r18
100057d4:	980b883a 	mov	r5,r19
100057d8:	1023883a 	mov	r17,r2
100057dc:	182b883a 	mov	r21,r3
100057e0:	000f1b00 	call	1000f1b0 <__muldf3>
100057e4:	180b883a 	mov	r5,r3
100057e8:	1009883a 	mov	r4,r2
100057ec:	1825883a 	mov	r18,r3
100057f0:	1027883a 	mov	r19,r2
100057f4:	000f9540 	call	1000f954 <__fixdfsi>
100057f8:	1009883a 	mov	r4,r2
100057fc:	1029883a 	mov	r20,r2
10005800:	000f8800 	call	1000f880 <__floatsidf>
10005804:	9809883a 	mov	r4,r19
10005808:	900b883a 	mov	r5,r18
1000580c:	100d883a 	mov	r6,r2
10005810:	180f883a 	mov	r7,r3
10005814:	000f1500 	call	1000f150 <__subdf3>
10005818:	a5000c04 	addi	r20,r20,48
1000581c:	b5000005 	stb	r20,0(r22)
10005820:	1009883a 	mov	r4,r2
10005824:	180b883a 	mov	r5,r3
10005828:	880d883a 	mov	r6,r17
1000582c:	a80f883a 	mov	r7,r21
10005830:	1025883a 	mov	r18,r2
10005834:	1827883a 	mov	r19,r3
10005838:	000f7c80 	call	1000f7c8 <__ltdf2>
1000583c:	b5800044 	addi	r22,r22,1
10005840:	0009883a 	mov	r4,zero
10005844:	014ffc34 	movhi	r5,16368
10005848:	900d883a 	mov	r6,r18
1000584c:	980f883a 	mov	r7,r19
10005850:	103fd00e 	bge	r2,zero,10005794 <__alt_data_end+0xf8005794>
10005854:	d9001317 	ldw	r4,76(sp)
10005858:	df001117 	ldw	fp,68(sp)
1000585c:	d9000615 	stw	r4,24(sp)
10005860:	8009883a 	mov	r4,r16
10005864:	e00b883a 	mov	r5,fp
10005868:	0008a380 	call	10008a38 <_Bfree>
1000586c:	d9c00617 	ldw	r7,24(sp)
10005870:	d8c02217 	ldw	r3,136(sp)
10005874:	d9002417 	ldw	r4,144(sp)
10005878:	b0000005 	stb	zero,0(r22)
1000587c:	38800044 	addi	r2,r7,1
10005880:	18800015 	stw	r2,0(r3)
10005884:	203e8426 	beq	r4,zero,10005298 <__alt_data_end+0xf8005298>
10005888:	25800015 	stw	r22,0(r4)
1000588c:	003e8206 	br	10005298 <__alt_data_end+0xf8005298>
10005890:	00800434 	movhi	r2,16
10005894:	10bfffc4 	addi	r2,r2,-1
10005898:	90a4703a 	and	r18,r18,r2
1000589c:	903e901e 	bne	r18,zero,100052e0 <__alt_data_end+0xf80052e0>
100058a0:	05c40074 	movhi	r23,4097
100058a4:	bdcb8504 	addi	r23,r23,11796
100058a8:	003e8f06 	br	100052e8 <__alt_data_end+0xf80052e8>
100058ac:	b8800204 	addi	r2,r23,8
100058b0:	003e9206 	br	100052fc <__alt_data_end+0xf80052fc>
100058b4:	01400434 	movhi	r5,16
100058b8:	297fffc4 	addi	r5,r5,-1
100058bc:	894a703a 	and	r5,r17,r5
100058c0:	d9000317 	ldw	r4,12(sp)
100058c4:	294ffc34 	orhi	r5,r5,16368
100058c8:	a53f0044 	addi	r20,r20,-1023
100058cc:	dd400217 	ldw	r21,8(sp)
100058d0:	d8000f15 	stw	zero,60(sp)
100058d4:	003eb106 	br	1000539c <__alt_data_end+0xf800539c>
100058d8:	05c40074 	movhi	r23,4097
100058dc:	bdcad104 	addi	r23,r23,11076
100058e0:	003e6d06 	br	10005298 <__alt_data_end+0xf8005298>
100058e4:	d8000415 	stw	zero,16(sp)
100058e8:	80001115 	stw	zero,68(r16)
100058ec:	8009883a 	mov	r4,r16
100058f0:	000b883a 	mov	r5,zero
100058f4:	00089900 	call	10008990 <_Balloc>
100058f8:	01ffffc4 	movi	r7,-1
100058fc:	102f883a 	mov	r23,r2
10005900:	80801015 	stw	r2,64(r16)
10005904:	00800044 	movi	r2,1
10005908:	d9c00915 	stw	r7,36(sp)
1000590c:	d8002115 	stw	zero,132(sp)
10005910:	d9c00e15 	stw	r7,56(sp)
10005914:	d8800c15 	stw	r2,48(sp)
10005918:	d8800117 	ldw	r2,4(sp)
1000591c:	10008b16 	blt	r2,zero,10005b4c <_dtoa_r+0x970>
10005920:	d9000617 	ldw	r4,24(sp)
10005924:	00c00384 	movi	r3,14
10005928:	19008816 	blt	r3,r4,10005b4c <_dtoa_r+0x970>
1000592c:	200490fa 	slli	r2,r4,3
10005930:	d9c02117 	ldw	r7,132(sp)
10005934:	00c40074 	movhi	r3,4097
10005938:	18cbae04 	addi	r3,r3,11960
1000593c:	1885883a 	add	r2,r3,r2
10005940:	14800017 	ldw	r18,0(r2)
10005944:	14c00117 	ldw	r19,4(r2)
10005948:	3801c916 	blt	r7,zero,10006070 <_dtoa_r+0xe94>
1000594c:	d9000317 	ldw	r4,12(sp)
10005950:	900d883a 	mov	r6,r18
10005954:	980f883a 	mov	r7,r19
10005958:	880b883a 	mov	r5,r17
1000595c:	000f4940 	call	1000f494 <__divdf3>
10005960:	180b883a 	mov	r5,r3
10005964:	1009883a 	mov	r4,r2
10005968:	000f9540 	call	1000f954 <__fixdfsi>
1000596c:	1009883a 	mov	r4,r2
10005970:	102b883a 	mov	r21,r2
10005974:	000f8800 	call	1000f880 <__floatsidf>
10005978:	1009883a 	mov	r4,r2
1000597c:	180b883a 	mov	r5,r3
10005980:	900d883a 	mov	r6,r18
10005984:	980f883a 	mov	r7,r19
10005988:	000f1b00 	call	1000f1b0 <__muldf3>
1000598c:	d9000317 	ldw	r4,12(sp)
10005990:	880b883a 	mov	r5,r17
10005994:	100d883a 	mov	r6,r2
10005998:	180f883a 	mov	r7,r3
1000599c:	000f1500 	call	1000f150 <__subdf3>
100059a0:	d9c00917 	ldw	r7,36(sp)
100059a4:	1009883a 	mov	r4,r2
100059a8:	a8800c04 	addi	r2,r21,48
100059ac:	b8800005 	stb	r2,0(r23)
100059b0:	01800044 	movi	r6,1
100059b4:	180b883a 	mov	r5,r3
100059b8:	2005883a 	mov	r2,r4
100059bc:	bd800044 	addi	r22,r23,1
100059c0:	39803726 	beq	r7,r6,10005aa0 <_dtoa_r+0x8c4>
100059c4:	000d883a 	mov	r6,zero
100059c8:	01d00934 	movhi	r7,16420
100059cc:	000f1b00 	call	1000f1b0 <__muldf3>
100059d0:	1009883a 	mov	r4,r2
100059d4:	180b883a 	mov	r5,r3
100059d8:	000d883a 	mov	r6,zero
100059dc:	000f883a 	mov	r7,zero
100059e0:	1029883a 	mov	r20,r2
100059e4:	1823883a 	mov	r17,r3
100059e8:	000f6480 	call	1000f648 <__eqdf2>
100059ec:	103f9c26 	beq	r2,zero,10005860 <__alt_data_end+0xf8005860>
100059f0:	dd400917 	ldw	r21,36(sp)
100059f4:	dc000415 	stw	r16,16(sp)
100059f8:	00000906 	br	10005a20 <_dtoa_r+0x844>
100059fc:	000f1b00 	call	1000f1b0 <__muldf3>
10005a00:	1009883a 	mov	r4,r2
10005a04:	180b883a 	mov	r5,r3
10005a08:	000d883a 	mov	r6,zero
10005a0c:	000f883a 	mov	r7,zero
10005a10:	1029883a 	mov	r20,r2
10005a14:	1823883a 	mov	r17,r3
10005a18:	000f6480 	call	1000f648 <__eqdf2>
10005a1c:	10022926 	beq	r2,zero,100062c4 <_dtoa_r+0x10e8>
10005a20:	900d883a 	mov	r6,r18
10005a24:	980f883a 	mov	r7,r19
10005a28:	a009883a 	mov	r4,r20
10005a2c:	880b883a 	mov	r5,r17
10005a30:	000f4940 	call	1000f494 <__divdf3>
10005a34:	180b883a 	mov	r5,r3
10005a38:	1009883a 	mov	r4,r2
10005a3c:	000f9540 	call	1000f954 <__fixdfsi>
10005a40:	1009883a 	mov	r4,r2
10005a44:	1021883a 	mov	r16,r2
10005a48:	000f8800 	call	1000f880 <__floatsidf>
10005a4c:	1009883a 	mov	r4,r2
10005a50:	180b883a 	mov	r5,r3
10005a54:	900d883a 	mov	r6,r18
10005a58:	980f883a 	mov	r7,r19
10005a5c:	000f1b00 	call	1000f1b0 <__muldf3>
10005a60:	a009883a 	mov	r4,r20
10005a64:	880b883a 	mov	r5,r17
10005a68:	100d883a 	mov	r6,r2
10005a6c:	180f883a 	mov	r7,r3
10005a70:	000f1500 	call	1000f150 <__subdf3>
10005a74:	82400c04 	addi	r9,r16,48
10005a78:	b2400005 	stb	r9,0(r22)
10005a7c:	b5800044 	addi	r22,r22,1
10005a80:	b5d3c83a 	sub	r9,r22,r23
10005a84:	000d883a 	mov	r6,zero
10005a88:	01d00934 	movhi	r7,16420
10005a8c:	1009883a 	mov	r4,r2
10005a90:	180b883a 	mov	r5,r3
10005a94:	aa7fd91e 	bne	r21,r9,100059fc <__alt_data_end+0xf80059fc>
10005a98:	802b883a 	mov	r21,r16
10005a9c:	dc000417 	ldw	r16,16(sp)
10005aa0:	1009883a 	mov	r4,r2
10005aa4:	180b883a 	mov	r5,r3
10005aa8:	100d883a 	mov	r6,r2
10005aac:	180f883a 	mov	r7,r3
10005ab0:	000f0fc0 	call	1000f0fc <__adddf3>
10005ab4:	9009883a 	mov	r4,r18
10005ab8:	980b883a 	mov	r5,r19
10005abc:	100d883a 	mov	r6,r2
10005ac0:	180f883a 	mov	r7,r3
10005ac4:	1023883a 	mov	r17,r2
10005ac8:	1829883a 	mov	r20,r3
10005acc:	000f7c80 	call	1000f7c8 <__ltdf2>
10005ad0:	10000816 	blt	r2,zero,10005af4 <_dtoa_r+0x918>
10005ad4:	9009883a 	mov	r4,r18
10005ad8:	980b883a 	mov	r5,r19
10005adc:	880d883a 	mov	r6,r17
10005ae0:	a00f883a 	mov	r7,r20
10005ae4:	000f6a40 	call	1000f6a4 <__nedf2>
10005ae8:	103f5d1e 	bne	r2,zero,10005860 <__alt_data_end+0xf8005860>
10005aec:	ad40004c 	andi	r21,r21,1
10005af0:	a83f5b26 	beq	r21,zero,10005860 <__alt_data_end+0xf8005860>
10005af4:	b53fffc3 	ldbu	r20,-1(r22)
10005af8:	b0ffff84 	addi	r3,r22,-2
10005afc:	01400e44 	movi	r5,57
10005b00:	00000306 	br	10005b10 <_dtoa_r+0x934>
10005b04:	1d000003 	ldbu	r20,0(r3)
10005b08:	102d883a 	mov	r22,r2
10005b0c:	18ffffc4 	addi	r3,r3,-1
10005b10:	a1003fcc 	andi	r4,r20,255
10005b14:	2100201c 	xori	r4,r4,128
10005b18:	213fe004 	addi	r4,r4,-128
10005b1c:	b0bfffc4 	addi	r2,r22,-1
10005b20:	2142ca1e 	bne	r4,r5,1000664c <_dtoa_r+0x1470>
10005b24:	b8bff71e 	bne	r23,r2,10005b04 <__alt_data_end+0xf8005b04>
10005b28:	d8800617 	ldw	r2,24(sp)
10005b2c:	05000c44 	movi	r20,49
10005b30:	10800044 	addi	r2,r2,1
10005b34:	d8800615 	stw	r2,24(sp)
10005b38:	00800c04 	movi	r2,48
10005b3c:	b8800005 	stb	r2,0(r23)
10005b40:	b805883a 	mov	r2,r23
10005b44:	15000005 	stb	r20,0(r2)
10005b48:	003f4506 	br	10005860 <__alt_data_end+0xf8005860>
10005b4c:	d9c00c17 	ldw	r7,48(sp)
10005b50:	3800c926 	beq	r7,zero,10005e78 <_dtoa_r+0xc9c>
10005b54:	d9c00417 	ldw	r7,16(sp)
10005b58:	00c00044 	movi	r3,1
10005b5c:	19c16c0e 	bge	r3,r7,10006110 <_dtoa_r+0xf34>
10005b60:	d9000917 	ldw	r4,36(sp)
10005b64:	d9c00a17 	ldw	r7,40(sp)
10005b68:	24ffffc4 	addi	r19,r4,-1
10005b6c:	3cc20716 	blt	r7,r19,1000638c <_dtoa_r+0x11b0>
10005b70:	3ce7c83a 	sub	r19,r7,r19
10005b74:	d9c00917 	ldw	r7,36(sp)
10005b78:	3802ae16 	blt	r7,zero,10006634 <_dtoa_r+0x1458>
10005b7c:	dc800817 	ldw	r18,32(sp)
10005b80:	d8800917 	ldw	r2,36(sp)
10005b84:	d8c00817 	ldw	r3,32(sp)
10005b88:	d9c00717 	ldw	r7,28(sp)
10005b8c:	8009883a 	mov	r4,r16
10005b90:	1887883a 	add	r3,r3,r2
10005b94:	388f883a 	add	r7,r7,r2
10005b98:	01400044 	movi	r5,1
10005b9c:	d8c00815 	stw	r3,32(sp)
10005ba0:	d9c00715 	stw	r7,28(sp)
10005ba4:	0008dc00 	call	10008dc0 <__i2b>
10005ba8:	102b883a 	mov	r21,r2
10005bac:	90000a26 	beq	r18,zero,10005bd8 <_dtoa_r+0x9fc>
10005bb0:	d8800717 	ldw	r2,28(sp)
10005bb4:	0080080e 	bge	zero,r2,10005bd8 <_dtoa_r+0x9fc>
10005bb8:	90812b16 	blt	r18,r2,10006068 <_dtoa_r+0xe8c>
10005bbc:	d8c00817 	ldw	r3,32(sp)
10005bc0:	d9000717 	ldw	r4,28(sp)
10005bc4:	90a5c83a 	sub	r18,r18,r2
10005bc8:	1887c83a 	sub	r3,r3,r2
10005bcc:	2089c83a 	sub	r4,r4,r2
10005bd0:	d8c00815 	stw	r3,32(sp)
10005bd4:	d9000715 	stw	r4,28(sp)
10005bd8:	d9c00a17 	ldw	r7,40(sp)
10005bdc:	01c0140e 	bge	zero,r7,10005c30 <_dtoa_r+0xa54>
10005be0:	d8800c17 	ldw	r2,48(sp)
10005be4:	1001de26 	beq	r2,zero,10006360 <_dtoa_r+0x1184>
10005be8:	04c00e0e 	bge	zero,r19,10005c24 <_dtoa_r+0xa48>
10005bec:	a80b883a 	mov	r5,r21
10005bf0:	8009883a 	mov	r4,r16
10005bf4:	980d883a 	mov	r6,r19
10005bf8:	00090540 	call	10009054 <__pow5mult>
10005bfc:	e00d883a 	mov	r6,fp
10005c00:	8009883a 	mov	r4,r16
10005c04:	100b883a 	mov	r5,r2
10005c08:	102b883a 	mov	r21,r2
10005c0c:	0008dfc0 	call	10008dfc <__multiply>
10005c10:	1029883a 	mov	r20,r2
10005c14:	e00b883a 	mov	r5,fp
10005c18:	8009883a 	mov	r4,r16
10005c1c:	0008a380 	call	10008a38 <_Bfree>
10005c20:	a039883a 	mov	fp,r20
10005c24:	d8c00a17 	ldw	r3,40(sp)
10005c28:	1ccdc83a 	sub	r6,r3,r19
10005c2c:	3001291e 	bne	r6,zero,100060d4 <_dtoa_r+0xef8>
10005c30:	8009883a 	mov	r4,r16
10005c34:	01400044 	movi	r5,1
10005c38:	0008dc00 	call	10008dc0 <__i2b>
10005c3c:	d9000b17 	ldw	r4,44(sp)
10005c40:	1029883a 	mov	r20,r2
10005c44:	0100050e 	bge	zero,r4,10005c5c <_dtoa_r+0xa80>
10005c48:	d9800b17 	ldw	r6,44(sp)
10005c4c:	8009883a 	mov	r4,r16
10005c50:	100b883a 	mov	r5,r2
10005c54:	00090540 	call	10009054 <__pow5mult>
10005c58:	1029883a 	mov	r20,r2
10005c5c:	d9c00417 	ldw	r7,16(sp)
10005c60:	00800044 	movi	r2,1
10005c64:	11c0f00e 	bge	r2,r7,10006028 <_dtoa_r+0xe4c>
10005c68:	0023883a 	mov	r17,zero
10005c6c:	d8800b17 	ldw	r2,44(sp)
10005c70:	1001741e 	bne	r2,zero,10006244 <_dtoa_r+0x1068>
10005c74:	00800044 	movi	r2,1
10005c78:	d8c00717 	ldw	r3,28(sp)
10005c7c:	10c5883a 	add	r2,r2,r3
10005c80:	108007cc 	andi	r2,r2,31
10005c84:	10008026 	beq	r2,zero,10005e88 <_dtoa_r+0xcac>
10005c88:	01000804 	movi	r4,32
10005c8c:	2089c83a 	sub	r4,r4,r2
10005c90:	00c00104 	movi	r3,4
10005c94:	1902d00e 	bge	r3,r4,100067d8 <_dtoa_r+0x15fc>
10005c98:	d9000817 	ldw	r4,32(sp)
10005c9c:	d9c00717 	ldw	r7,28(sp)
10005ca0:	00c00704 	movi	r3,28
10005ca4:	1885c83a 	sub	r2,r3,r2
10005ca8:	2089883a 	add	r4,r4,r2
10005cac:	388f883a 	add	r7,r7,r2
10005cb0:	d9000815 	stw	r4,32(sp)
10005cb4:	90a5883a 	add	r18,r18,r2
10005cb8:	d9c00715 	stw	r7,28(sp)
10005cbc:	d9c00817 	ldw	r7,32(sp)
10005cc0:	01c0050e 	bge	zero,r7,10005cd8 <_dtoa_r+0xafc>
10005cc4:	e00b883a 	mov	r5,fp
10005cc8:	8009883a 	mov	r4,r16
10005ccc:	380d883a 	mov	r6,r7
10005cd0:	00091800 	call	10009180 <__lshift>
10005cd4:	1039883a 	mov	fp,r2
10005cd8:	d8800717 	ldw	r2,28(sp)
10005cdc:	0080050e 	bge	zero,r2,10005cf4 <_dtoa_r+0xb18>
10005ce0:	a00b883a 	mov	r5,r20
10005ce4:	8009883a 	mov	r4,r16
10005ce8:	100d883a 	mov	r6,r2
10005cec:	00091800 	call	10009180 <__lshift>
10005cf0:	1029883a 	mov	r20,r2
10005cf4:	d8c00d17 	ldw	r3,52(sp)
10005cf8:	1801401e 	bne	r3,zero,100061fc <_dtoa_r+0x1020>
10005cfc:	d8800917 	ldw	r2,36(sp)
10005d00:	00815a0e 	bge	zero,r2,1000626c <_dtoa_r+0x1090>
10005d04:	d8c00c17 	ldw	r3,48(sp)
10005d08:	18006f1e 	bne	r3,zero,10005ec8 <_dtoa_r+0xcec>
10005d0c:	b823883a 	mov	r17,r23
10005d10:	dc800917 	ldw	r18,36(sp)
10005d14:	00000206 	br	10005d20 <_dtoa_r+0xb44>
10005d18:	0008a600 	call	10008a60 <__multadd>
10005d1c:	1039883a 	mov	fp,r2
10005d20:	e009883a 	mov	r4,fp
10005d24:	a00b883a 	mov	r5,r20
10005d28:	0004fa00 	call	10004fa0 <quorem>
10005d2c:	10800c04 	addi	r2,r2,48
10005d30:	88800005 	stb	r2,0(r17)
10005d34:	8c400044 	addi	r17,r17,1
10005d38:	8dc7c83a 	sub	r3,r17,r23
10005d3c:	8009883a 	mov	r4,r16
10005d40:	e00b883a 	mov	r5,fp
10005d44:	01800284 	movi	r6,10
10005d48:	000f883a 	mov	r7,zero
10005d4c:	1cbff216 	blt	r3,r18,10005d18 <__alt_data_end+0xf8005d18>
10005d50:	dd800917 	ldw	r22,36(sp)
10005d54:	1007883a 	mov	r3,r2
10005d58:	05823a0e 	bge	zero,r22,10006644 <_dtoa_r+0x1468>
10005d5c:	bdad883a 	add	r22,r23,r22
10005d60:	0023883a 	mov	r17,zero
10005d64:	e00b883a 	mov	r5,fp
10005d68:	01800044 	movi	r6,1
10005d6c:	8009883a 	mov	r4,r16
10005d70:	d8c01515 	stw	r3,84(sp)
10005d74:	00091800 	call	10009180 <__lshift>
10005d78:	1009883a 	mov	r4,r2
10005d7c:	a00b883a 	mov	r5,r20
10005d80:	1039883a 	mov	fp,r2
10005d84:	00092dc0 	call	100092dc <__mcmp>
10005d88:	d8c01517 	ldw	r3,84(sp)
10005d8c:	0080d60e 	bge	zero,r2,100060e8 <_dtoa_r+0xf0c>
10005d90:	b13fffc3 	ldbu	r4,-1(r22)
10005d94:	b0ffff84 	addi	r3,r22,-2
10005d98:	01800e44 	movi	r6,57
10005d9c:	00000306 	br	10005dac <_dtoa_r+0xbd0>
10005da0:	19000003 	ldbu	r4,0(r3)
10005da4:	102d883a 	mov	r22,r2
10005da8:	18ffffc4 	addi	r3,r3,-1
10005dac:	21403fcc 	andi	r5,r4,255
10005db0:	2940201c 	xori	r5,r5,128
10005db4:	297fe004 	addi	r5,r5,-128
10005db8:	b0bfffc4 	addi	r2,r22,-1
10005dbc:	2981a71e 	bne	r5,r6,1000645c <_dtoa_r+0x1280>
10005dc0:	b8bff71e 	bne	r23,r2,10005da0 <__alt_data_end+0xf8005da0>
10005dc4:	d8800617 	ldw	r2,24(sp)
10005dc8:	10800044 	addi	r2,r2,1
10005dcc:	d8800615 	stw	r2,24(sp)
10005dd0:	00800c44 	movi	r2,49
10005dd4:	b8800005 	stb	r2,0(r23)
10005dd8:	8009883a 	mov	r4,r16
10005ddc:	a00b883a 	mov	r5,r20
10005de0:	0008a380 	call	10008a38 <_Bfree>
10005de4:	a83e9e26 	beq	r21,zero,10005860 <__alt_data_end+0xf8005860>
10005de8:	88000426 	beq	r17,zero,10005dfc <_dtoa_r+0xc20>
10005dec:	8d400326 	beq	r17,r21,10005dfc <_dtoa_r+0xc20>
10005df0:	8009883a 	mov	r4,r16
10005df4:	880b883a 	mov	r5,r17
10005df8:	0008a380 	call	10008a38 <_Bfree>
10005dfc:	8009883a 	mov	r4,r16
10005e00:	a80b883a 	mov	r5,r21
10005e04:	0008a380 	call	10008a38 <_Bfree>
10005e08:	003e9506 	br	10005860 <__alt_data_end+0xf8005860>
10005e0c:	00c00044 	movi	r3,1
10005e10:	d8c00d15 	stw	r3,52(sp)
10005e14:	003d9f06 	br	10005494 <__alt_data_end+0xf8005494>
10005e18:	d9000817 	ldw	r4,32(sp)
10005e1c:	d8800617 	ldw	r2,24(sp)
10005e20:	d8000b15 	stw	zero,44(sp)
10005e24:	2089c83a 	sub	r4,r4,r2
10005e28:	0087c83a 	sub	r3,zero,r2
10005e2c:	d9000815 	stw	r4,32(sp)
10005e30:	d8c00a15 	stw	r3,40(sp)
10005e34:	003da306 	br	100054c4 <__alt_data_end+0xf80054c4>
10005e38:	0529c83a 	sub	r20,zero,r20
10005e3c:	dd000815 	stw	r20,32(sp)
10005e40:	d8000715 	stw	zero,28(sp)
10005e44:	003d9806 	br	100054a8 <__alt_data_end+0xf80054a8>
10005e48:	d9000617 	ldw	r4,24(sp)
10005e4c:	000f8800 	call	1000f880 <__floatsidf>
10005e50:	1009883a 	mov	r4,r2
10005e54:	180b883a 	mov	r5,r3
10005e58:	980d883a 	mov	r6,r19
10005e5c:	900f883a 	mov	r7,r18
10005e60:	000f6480 	call	1000f648 <__eqdf2>
10005e64:	103d7a26 	beq	r2,zero,10005450 <__alt_data_end+0xf8005450>
10005e68:	d8800617 	ldw	r2,24(sp)
10005e6c:	10bfffc4 	addi	r2,r2,-1
10005e70:	d8800615 	stw	r2,24(sp)
10005e74:	003d7606 	br	10005450 <__alt_data_end+0xf8005450>
10005e78:	dcc00a17 	ldw	r19,40(sp)
10005e7c:	dc800817 	ldw	r18,32(sp)
10005e80:	002b883a 	mov	r21,zero
10005e84:	003f4906 	br	10005bac <__alt_data_end+0xf8005bac>
10005e88:	00800704 	movi	r2,28
10005e8c:	d8c00817 	ldw	r3,32(sp)
10005e90:	d9000717 	ldw	r4,28(sp)
10005e94:	90a5883a 	add	r18,r18,r2
10005e98:	1887883a 	add	r3,r3,r2
10005e9c:	2089883a 	add	r4,r4,r2
10005ea0:	d8c00815 	stw	r3,32(sp)
10005ea4:	d9000715 	stw	r4,28(sp)
10005ea8:	003f8406 	br	10005cbc <__alt_data_end+0xf8005cbc>
10005eac:	d9c00317 	ldw	r7,12(sp)
10005eb0:	013efb84 	movi	r4,-1042
10005eb4:	2509c83a 	sub	r4,r4,r20
10005eb8:	3908983a 	sll	r4,r7,r4
10005ebc:	003d3006 	br	10005380 <__alt_data_end+0xf8005380>
10005ec0:	d8000d15 	stw	zero,52(sp)
10005ec4:	003d7306 	br	10005494 <__alt_data_end+0xf8005494>
10005ec8:	0480050e 	bge	zero,r18,10005ee0 <_dtoa_r+0xd04>
10005ecc:	a80b883a 	mov	r5,r21
10005ed0:	8009883a 	mov	r4,r16
10005ed4:	900d883a 	mov	r6,r18
10005ed8:	00091800 	call	10009180 <__lshift>
10005edc:	102b883a 	mov	r21,r2
10005ee0:	8801611e 	bne	r17,zero,10006468 <_dtoa_r+0x128c>
10005ee4:	a827883a 	mov	r19,r21
10005ee8:	d8c00317 	ldw	r3,12(sp)
10005eec:	d9000917 	ldw	r4,36(sp)
10005ef0:	b8bfffc4 	addi	r2,r23,-1
10005ef4:	18c0004c 	andi	r3,r3,1
10005ef8:	1105883a 	add	r2,r2,r4
10005efc:	b825883a 	mov	r18,r23
10005f00:	d8800515 	stw	r2,20(sp)
10005f04:	a823883a 	mov	r17,r21
10005f08:	d8c00315 	stw	r3,12(sp)
10005f0c:	ddc00715 	stw	r23,28(sp)
10005f10:	e009883a 	mov	r4,fp
10005f14:	a00b883a 	mov	r5,r20
10005f18:	0004fa00 	call	10004fa0 <quorem>
10005f1c:	e009883a 	mov	r4,fp
10005f20:	880b883a 	mov	r5,r17
10005f24:	102d883a 	mov	r22,r2
10005f28:	00092dc0 	call	100092dc <__mcmp>
10005f2c:	980d883a 	mov	r6,r19
10005f30:	8009883a 	mov	r4,r16
10005f34:	a00b883a 	mov	r5,r20
10005f38:	102b883a 	mov	r21,r2
10005f3c:	00093340 	call	10009334 <__mdiff>
10005f40:	100d883a 	mov	r6,r2
10005f44:	10800317 	ldw	r2,12(r2)
10005f48:	b5c00c04 	addi	r23,r22,48
10005f4c:	10008c26 	beq	r2,zero,10006180 <_dtoa_r+0xfa4>
10005f50:	8009883a 	mov	r4,r16
10005f54:	300b883a 	mov	r5,r6
10005f58:	0008a380 	call	10008a38 <_Bfree>
10005f5c:	00800044 	movi	r2,1
10005f60:	a8007116 	blt	r21,zero,10006128 <_dtoa_r+0xf4c>
10005f64:	a800041e 	bne	r21,zero,10005f78 <_dtoa_r+0xd9c>
10005f68:	d9c00417 	ldw	r7,16(sp)
10005f6c:	3800021e 	bne	r7,zero,10005f78 <_dtoa_r+0xd9c>
10005f70:	d8c00317 	ldw	r3,12(sp)
10005f74:	18006c26 	beq	r3,zero,10006128 <_dtoa_r+0xf4c>
10005f78:	00814c16 	blt	zero,r2,100064ac <_dtoa_r+0x12d0>
10005f7c:	d8c00517 	ldw	r3,20(sp)
10005f80:	95400044 	addi	r21,r18,1
10005f84:	95c00005 	stb	r23,0(r18)
10005f88:	a82d883a 	mov	r22,r21
10005f8c:	90c14d26 	beq	r18,r3,100064c4 <_dtoa_r+0x12e8>
10005f90:	e00b883a 	mov	r5,fp
10005f94:	8009883a 	mov	r4,r16
10005f98:	01800284 	movi	r6,10
10005f9c:	000f883a 	mov	r7,zero
10005fa0:	0008a600 	call	10008a60 <__multadd>
10005fa4:	1039883a 	mov	fp,r2
10005fa8:	8cc08b26 	beq	r17,r19,100061d8 <_dtoa_r+0xffc>
10005fac:	880b883a 	mov	r5,r17
10005fb0:	01800284 	movi	r6,10
10005fb4:	000f883a 	mov	r7,zero
10005fb8:	8009883a 	mov	r4,r16
10005fbc:	0008a600 	call	10008a60 <__multadd>
10005fc0:	980b883a 	mov	r5,r19
10005fc4:	8009883a 	mov	r4,r16
10005fc8:	01800284 	movi	r6,10
10005fcc:	000f883a 	mov	r7,zero
10005fd0:	1023883a 	mov	r17,r2
10005fd4:	0008a600 	call	10008a60 <__multadd>
10005fd8:	1027883a 	mov	r19,r2
10005fdc:	a825883a 	mov	r18,r21
10005fe0:	003fcb06 	br	10005f10 <__alt_data_end+0xf8005f10>
10005fe4:	d9c00417 	ldw	r7,16(sp)
10005fe8:	00800104 	movi	r2,4
10005fec:	3880e426 	beq	r7,r2,10006380 <_dtoa_r+0x11a4>
10005ff0:	00800144 	movi	r2,5
10005ff4:	38be3c1e 	bne	r7,r2,100058e8 <__alt_data_end+0xf80058e8>
10005ff8:	00c00044 	movi	r3,1
10005ffc:	d8c00c15 	stw	r3,48(sp)
10006000:	d9c02117 	ldw	r7,132(sp)
10006004:	d8800617 	ldw	r2,24(sp)
10006008:	388f883a 	add	r7,r7,r2
1000600c:	3c800044 	addi	r18,r7,1
10006010:	d9c00e15 	stw	r7,56(sp)
10006014:	dc800915 	stw	r18,36(sp)
10006018:	04bd3e16 	blt	zero,r18,10005514 <__alt_data_end+0xf8005514>
1000601c:	80001115 	stw	zero,68(r16)
10006020:	000b883a 	mov	r5,zero
10006024:	003d4606 	br	10005540 <__alt_data_end+0xf8005540>
10006028:	d8c00317 	ldw	r3,12(sp)
1000602c:	183f0e1e 	bne	r3,zero,10005c68 <__alt_data_end+0xf8005c68>
10006030:	00c00434 	movhi	r3,16
10006034:	18ffffc4 	addi	r3,r3,-1
10006038:	88c6703a 	and	r3,r17,r3
1000603c:	183f0a1e 	bne	r3,zero,10005c68 <__alt_data_end+0xf8005c68>
10006040:	8c5ffc2c 	andhi	r17,r17,32752
10006044:	883f0826 	beq	r17,zero,10005c68 <__alt_data_end+0xf8005c68>
10006048:	d9000817 	ldw	r4,32(sp)
1000604c:	d9c00717 	ldw	r7,28(sp)
10006050:	1023883a 	mov	r17,r2
10006054:	2089883a 	add	r4,r4,r2
10006058:	388f883a 	add	r7,r7,r2
1000605c:	d9000815 	stw	r4,32(sp)
10006060:	d9c00715 	stw	r7,28(sp)
10006064:	003f0106 	br	10005c6c <__alt_data_end+0xf8005c6c>
10006068:	9005883a 	mov	r2,r18
1000606c:	003ed306 	br	10005bbc <__alt_data_end+0xf8005bbc>
10006070:	d8800917 	ldw	r2,36(sp)
10006074:	00be3516 	blt	zero,r2,1000594c <__alt_data_end+0xf800594c>
10006078:	1000b61e 	bne	r2,zero,10006354 <_dtoa_r+0x1178>
1000607c:	9009883a 	mov	r4,r18
10006080:	980b883a 	mov	r5,r19
10006084:	000d883a 	mov	r6,zero
10006088:	01d00534 	movhi	r7,16404
1000608c:	000f1b00 	call	1000f1b0 <__muldf3>
10006090:	d9800317 	ldw	r6,12(sp)
10006094:	1009883a 	mov	r4,r2
10006098:	180b883a 	mov	r5,r3
1000609c:	880f883a 	mov	r7,r17
100060a0:	000f7640 	call	1000f764 <__gedf2>
100060a4:	0029883a 	mov	r20,zero
100060a8:	002b883a 	mov	r21,zero
100060ac:	10007e16 	blt	r2,zero,100062a8 <_dtoa_r+0x10cc>
100060b0:	d8802117 	ldw	r2,132(sp)
100060b4:	b82d883a 	mov	r22,r23
100060b8:	0084303a 	nor	r2,zero,r2
100060bc:	d8800615 	stw	r2,24(sp)
100060c0:	8009883a 	mov	r4,r16
100060c4:	a00b883a 	mov	r5,r20
100060c8:	0008a380 	call	10008a38 <_Bfree>
100060cc:	a83f4b1e 	bne	r21,zero,10005dfc <__alt_data_end+0xf8005dfc>
100060d0:	003de306 	br	10005860 <__alt_data_end+0xf8005860>
100060d4:	e00b883a 	mov	r5,fp
100060d8:	8009883a 	mov	r4,r16
100060dc:	00090540 	call	10009054 <__pow5mult>
100060e0:	1039883a 	mov	fp,r2
100060e4:	003ed206 	br	10005c30 <__alt_data_end+0xf8005c30>
100060e8:	1000021e 	bne	r2,zero,100060f4 <_dtoa_r+0xf18>
100060ec:	18c0004c 	andi	r3,r3,1
100060f0:	183f271e 	bne	r3,zero,10005d90 <__alt_data_end+0xf8005d90>
100060f4:	01000c04 	movi	r4,48
100060f8:	00000106 	br	10006100 <_dtoa_r+0xf24>
100060fc:	102d883a 	mov	r22,r2
10006100:	b0bfffc4 	addi	r2,r22,-1
10006104:	10c00007 	ldb	r3,0(r2)
10006108:	193ffc26 	beq	r3,r4,100060fc <__alt_data_end+0xf80060fc>
1000610c:	003f3206 	br	10005dd8 <__alt_data_end+0xf8005dd8>
10006110:	d8c00f17 	ldw	r3,60(sp)
10006114:	18015026 	beq	r3,zero,10006658 <_dtoa_r+0x147c>
10006118:	10810cc4 	addi	r2,r2,1075
1000611c:	dcc00a17 	ldw	r19,40(sp)
10006120:	dc800817 	ldw	r18,32(sp)
10006124:	003e9706 	br	10005b84 <__alt_data_end+0xf8005b84>
10006128:	b807883a 	mov	r3,r23
1000612c:	182b883a 	mov	r21,r3
10006130:	ddc00717 	ldw	r23,28(sp)
10006134:	00800e0e 	bge	zero,r2,10006170 <_dtoa_r+0xf94>
10006138:	e00b883a 	mov	r5,fp
1000613c:	01800044 	movi	r6,1
10006140:	8009883a 	mov	r4,r16
10006144:	d8c01515 	stw	r3,84(sp)
10006148:	00091800 	call	10009180 <__lshift>
1000614c:	1009883a 	mov	r4,r2
10006150:	a00b883a 	mov	r5,r20
10006154:	1039883a 	mov	fp,r2
10006158:	00092dc0 	call	100092dc <__mcmp>
1000615c:	d8c01517 	ldw	r3,84(sp)
10006160:	0081880e 	bge	zero,r2,10006784 <_dtoa_r+0x15a8>
10006164:	00800e44 	movi	r2,57
10006168:	b0c00c44 	addi	r3,r22,49
1000616c:	a8816326 	beq	r21,r2,100066fc <_dtoa_r+0x1520>
10006170:	90c00005 	stb	r3,0(r18)
10006174:	95800044 	addi	r22,r18,1
10006178:	982b883a 	mov	r21,r19
1000617c:	003f1606 	br	10005dd8 <__alt_data_end+0xf8005dd8>
10006180:	300b883a 	mov	r5,r6
10006184:	e009883a 	mov	r4,fp
10006188:	d9801515 	stw	r6,84(sp)
1000618c:	00092dc0 	call	100092dc <__mcmp>
10006190:	d9801517 	ldw	r6,84(sp)
10006194:	8009883a 	mov	r4,r16
10006198:	d8801515 	stw	r2,84(sp)
1000619c:	300b883a 	mov	r5,r6
100061a0:	0008a380 	call	10008a38 <_Bfree>
100061a4:	d8801517 	ldw	r2,84(sp)
100061a8:	103f6d1e 	bne	r2,zero,10005f60 <__alt_data_end+0xf8005f60>
100061ac:	d9c00417 	ldw	r7,16(sp)
100061b0:	383f6b1e 	bne	r7,zero,10005f60 <__alt_data_end+0xf8005f60>
100061b4:	d8c00317 	ldw	r3,12(sp)
100061b8:	183f691e 	bne	r3,zero,10005f60 <__alt_data_end+0xf8005f60>
100061bc:	b807883a 	mov	r3,r23
100061c0:	00800e44 	movi	r2,57
100061c4:	ddc00717 	ldw	r23,28(sp)
100061c8:	18814c26 	beq	r3,r2,100066fc <_dtoa_r+0x1520>
100061cc:	057fe80e 	bge	zero,r21,10006170 <__alt_data_end+0xf8006170>
100061d0:	b0c00c44 	addi	r3,r22,49
100061d4:	003fe606 	br	10006170 <__alt_data_end+0xf8006170>
100061d8:	880b883a 	mov	r5,r17
100061dc:	8009883a 	mov	r4,r16
100061e0:	01800284 	movi	r6,10
100061e4:	000f883a 	mov	r7,zero
100061e8:	0008a600 	call	10008a60 <__multadd>
100061ec:	1023883a 	mov	r17,r2
100061f0:	1027883a 	mov	r19,r2
100061f4:	a825883a 	mov	r18,r21
100061f8:	003f4506 	br	10005f10 <__alt_data_end+0xf8005f10>
100061fc:	e009883a 	mov	r4,fp
10006200:	a00b883a 	mov	r5,r20
10006204:	00092dc0 	call	100092dc <__mcmp>
10006208:	103ebc0e 	bge	r2,zero,10005cfc <__alt_data_end+0xf8005cfc>
1000620c:	e00b883a 	mov	r5,fp
10006210:	8009883a 	mov	r4,r16
10006214:	01800284 	movi	r6,10
10006218:	000f883a 	mov	r7,zero
1000621c:	0008a600 	call	10008a60 <__multadd>
10006220:	1039883a 	mov	fp,r2
10006224:	d8800617 	ldw	r2,24(sp)
10006228:	d8c00c17 	ldw	r3,48(sp)
1000622c:	10bfffc4 	addi	r2,r2,-1
10006230:	d8800615 	stw	r2,24(sp)
10006234:	1801571e 	bne	r3,zero,10006794 <_dtoa_r+0x15b8>
10006238:	d9c00e17 	ldw	r7,56(sp)
1000623c:	d9c00915 	stw	r7,36(sp)
10006240:	003eae06 	br	10005cfc <__alt_data_end+0xf8005cfc>
10006244:	a0800417 	ldw	r2,16(r20)
10006248:	10800104 	addi	r2,r2,4
1000624c:	1085883a 	add	r2,r2,r2
10006250:	1085883a 	add	r2,r2,r2
10006254:	a085883a 	add	r2,r20,r2
10006258:	11000017 	ldw	r4,0(r2)
1000625c:	0008ca80 	call	10008ca8 <__hi0bits>
10006260:	00c00804 	movi	r3,32
10006264:	1885c83a 	sub	r2,r3,r2
10006268:	003e8306 	br	10005c78 <__alt_data_end+0xf8005c78>
1000626c:	d9c00417 	ldw	r7,16(sp)
10006270:	00800084 	movi	r2,2
10006274:	11fea30e 	bge	r2,r7,10005d04 <__alt_data_end+0xf8005d04>
10006278:	d8800917 	ldw	r2,36(sp)
1000627c:	103f8c1e 	bne	r2,zero,100060b0 <__alt_data_end+0xf80060b0>
10006280:	a00b883a 	mov	r5,r20
10006284:	8009883a 	mov	r4,r16
10006288:	01800144 	movi	r6,5
1000628c:	000f883a 	mov	r7,zero
10006290:	0008a600 	call	10008a60 <__multadd>
10006294:	e009883a 	mov	r4,fp
10006298:	100b883a 	mov	r5,r2
1000629c:	1029883a 	mov	r20,r2
100062a0:	00092dc0 	call	100092dc <__mcmp>
100062a4:	00bf820e 	bge	zero,r2,100060b0 <__alt_data_end+0xf80060b0>
100062a8:	00800c44 	movi	r2,49
100062ac:	b8800005 	stb	r2,0(r23)
100062b0:	d8800617 	ldw	r2,24(sp)
100062b4:	bd800044 	addi	r22,r23,1
100062b8:	10800044 	addi	r2,r2,1
100062bc:	d8800615 	stw	r2,24(sp)
100062c0:	003f7f06 	br	100060c0 <__alt_data_end+0xf80060c0>
100062c4:	dc000417 	ldw	r16,16(sp)
100062c8:	003d6506 	br	10005860 <__alt_data_end+0xf8005860>
100062cc:	9009883a 	mov	r4,r18
100062d0:	000f8800 	call	1000f880 <__floatsidf>
100062d4:	1009883a 	mov	r4,r2
100062d8:	180b883a 	mov	r5,r3
100062dc:	980d883a 	mov	r6,r19
100062e0:	a00f883a 	mov	r7,r20
100062e4:	000f1b00 	call	1000f1b0 <__muldf3>
100062e8:	1009883a 	mov	r4,r2
100062ec:	180b883a 	mov	r5,r3
100062f0:	000d883a 	mov	r6,zero
100062f4:	01d00734 	movhi	r7,16412
100062f8:	000f0fc0 	call	1000f0fc <__adddf3>
100062fc:	057f3034 	movhi	r21,64704
10006300:	1025883a 	mov	r18,r2
10006304:	1d6b883a 	add	r21,r3,r21
10006308:	9809883a 	mov	r4,r19
1000630c:	a00b883a 	mov	r5,r20
10006310:	000d883a 	mov	r6,zero
10006314:	01d00534 	movhi	r7,16404
10006318:	000f1500 	call	1000f150 <__subdf3>
1000631c:	1009883a 	mov	r4,r2
10006320:	180b883a 	mov	r5,r3
10006324:	900d883a 	mov	r6,r18
10006328:	a80f883a 	mov	r7,r21
1000632c:	1027883a 	mov	r19,r2
10006330:	1829883a 	mov	r20,r3
10006334:	000f7000 	call	1000f700 <__gtdf2>
10006338:	00806616 	blt	zero,r2,100064d4 <_dtoa_r+0x12f8>
1000633c:	a9e0003c 	xorhi	r7,r21,32768
10006340:	9809883a 	mov	r4,r19
10006344:	a00b883a 	mov	r5,r20
10006348:	900d883a 	mov	r6,r18
1000634c:	000f7c80 	call	1000f7c8 <__ltdf2>
10006350:	103d710e 	bge	r2,zero,10005918 <__alt_data_end+0xf8005918>
10006354:	0029883a 	mov	r20,zero
10006358:	002b883a 	mov	r21,zero
1000635c:	003f5406 	br	100060b0 <__alt_data_end+0xf80060b0>
10006360:	d9800a17 	ldw	r6,40(sp)
10006364:	e00b883a 	mov	r5,fp
10006368:	8009883a 	mov	r4,r16
1000636c:	00090540 	call	10009054 <__pow5mult>
10006370:	1039883a 	mov	fp,r2
10006374:	003e2e06 	br	10005c30 <__alt_data_end+0xf8005c30>
10006378:	d8000c15 	stw	zero,48(sp)
1000637c:	003f2006 	br	10006000 <__alt_data_end+0xf8006000>
10006380:	00800044 	movi	r2,1
10006384:	d8800c15 	stw	r2,48(sp)
10006388:	003c5d06 	br	10005500 <__alt_data_end+0xf8005500>
1000638c:	d8c00a17 	ldw	r3,40(sp)
10006390:	d9000b17 	ldw	r4,44(sp)
10006394:	dcc00a15 	stw	r19,40(sp)
10006398:	98c5c83a 	sub	r2,r19,r3
1000639c:	2089883a 	add	r4,r4,r2
100063a0:	d9000b15 	stw	r4,44(sp)
100063a4:	0027883a 	mov	r19,zero
100063a8:	003df206 	br	10005b74 <__alt_data_end+0xf8005b74>
100063ac:	d9000317 	ldw	r4,12(sp)
100063b0:	8829883a 	mov	r20,r17
100063b4:	04800084 	movi	r18,2
100063b8:	d9001015 	stw	r4,64(sp)
100063bc:	003c8106 	br	100055c4 <__alt_data_end+0xf80055c4>
100063c0:	04800044 	movi	r18,1
100063c4:	dc800e15 	stw	r18,56(sp)
100063c8:	dc800915 	stw	r18,36(sp)
100063cc:	dc802115 	stw	r18,132(sp)
100063d0:	003f1206 	br	1000601c <__alt_data_end+0xf800601c>
100063d4:	d8800617 	ldw	r2,24(sp)
100063d8:	00abc83a 	sub	r21,zero,r2
100063dc:	a800a426 	beq	r21,zero,10006670 <_dtoa_r+0x1494>
100063e0:	a88003cc 	andi	r2,r21,15
100063e4:	100490fa 	slli	r2,r2,3
100063e8:	00c40074 	movhi	r3,4097
100063ec:	18cbae04 	addi	r3,r3,11960
100063f0:	d9000317 	ldw	r4,12(sp)
100063f4:	1885883a 	add	r2,r3,r2
100063f8:	11800017 	ldw	r6,0(r2)
100063fc:	11c00117 	ldw	r7,4(r2)
10006400:	a82bd13a 	srai	r21,r21,4
10006404:	880b883a 	mov	r5,r17
10006408:	000f1b00 	call	1000f1b0 <__muldf3>
1000640c:	1027883a 	mov	r19,r2
10006410:	1829883a 	mov	r20,r3
10006414:	a800e826 	beq	r21,zero,100067b8 <_dtoa_r+0x15dc>
10006418:	05840074 	movhi	r22,4097
1000641c:	b58ba404 	addi	r22,r22,11920
10006420:	04800084 	movi	r18,2
10006424:	a980004c 	andi	r6,r21,1
10006428:	1009883a 	mov	r4,r2
1000642c:	a82bd07a 	srai	r21,r21,1
10006430:	180b883a 	mov	r5,r3
10006434:	30000426 	beq	r6,zero,10006448 <_dtoa_r+0x126c>
10006438:	b1800017 	ldw	r6,0(r22)
1000643c:	b1c00117 	ldw	r7,4(r22)
10006440:	94800044 	addi	r18,r18,1
10006444:	000f1b00 	call	1000f1b0 <__muldf3>
10006448:	b5800204 	addi	r22,r22,8
1000644c:	a83ff51e 	bne	r21,zero,10006424 <__alt_data_end+0xf8006424>
10006450:	1027883a 	mov	r19,r2
10006454:	1829883a 	mov	r20,r3
10006458:	003c7306 	br	10005628 <__alt_data_end+0xf8005628>
1000645c:	21000044 	addi	r4,r4,1
10006460:	11000005 	stb	r4,0(r2)
10006464:	003e5c06 	br	10005dd8 <__alt_data_end+0xf8005dd8>
10006468:	a9400117 	ldw	r5,4(r21)
1000646c:	8009883a 	mov	r4,r16
10006470:	00089900 	call	10008990 <_Balloc>
10006474:	a9800417 	ldw	r6,16(r21)
10006478:	11000304 	addi	r4,r2,12
1000647c:	a9400304 	addi	r5,r21,12
10006480:	31800084 	addi	r6,r6,2
10006484:	318d883a 	add	r6,r6,r6
10006488:	318d883a 	add	r6,r6,r6
1000648c:	1023883a 	mov	r17,r2
10006490:	00085e80 	call	100085e8 <memcpy>
10006494:	8009883a 	mov	r4,r16
10006498:	880b883a 	mov	r5,r17
1000649c:	01800044 	movi	r6,1
100064a0:	00091800 	call	10009180 <__lshift>
100064a4:	1027883a 	mov	r19,r2
100064a8:	003e8f06 	br	10005ee8 <__alt_data_end+0xf8005ee8>
100064ac:	b807883a 	mov	r3,r23
100064b0:	00800e44 	movi	r2,57
100064b4:	ddc00717 	ldw	r23,28(sp)
100064b8:	18809026 	beq	r3,r2,100066fc <_dtoa_r+0x1520>
100064bc:	18c00044 	addi	r3,r3,1
100064c0:	003f2b06 	br	10006170 <__alt_data_end+0xf8006170>
100064c4:	b807883a 	mov	r3,r23
100064c8:	982b883a 	mov	r21,r19
100064cc:	ddc00717 	ldw	r23,28(sp)
100064d0:	003e2406 	br	10005d64 <__alt_data_end+0xf8005d64>
100064d4:	0029883a 	mov	r20,zero
100064d8:	002b883a 	mov	r21,zero
100064dc:	003f7206 	br	100062a8 <__alt_data_end+0xf80062a8>
100064e0:	593fffc4 	addi	r4,r11,-1
100064e4:	200490fa 	slli	r2,r4,3
100064e8:	00c40074 	movhi	r3,4097
100064ec:	18cbae04 	addi	r3,r3,11960
100064f0:	d9001015 	stw	r4,64(sp)
100064f4:	1885883a 	add	r2,r3,r2
100064f8:	11000017 	ldw	r4,0(r2)
100064fc:	11400117 	ldw	r5,4(r2)
10006500:	900d883a 	mov	r6,r18
10006504:	a80f883a 	mov	r7,r21
10006508:	dac01615 	stw	r11,88(sp)
1000650c:	000f1b00 	call	1000f1b0 <__muldf3>
10006510:	a00b883a 	mov	r5,r20
10006514:	9809883a 	mov	r4,r19
10006518:	d8c01215 	stw	r3,72(sp)
1000651c:	d8801115 	stw	r2,68(sp)
10006520:	000f9540 	call	1000f954 <__fixdfsi>
10006524:	1009883a 	mov	r4,r2
10006528:	1025883a 	mov	r18,r2
1000652c:	000f8800 	call	1000f880 <__floatsidf>
10006530:	9809883a 	mov	r4,r19
10006534:	a00b883a 	mov	r5,r20
10006538:	100d883a 	mov	r6,r2
1000653c:	180f883a 	mov	r7,r3
10006540:	94800c04 	addi	r18,r18,48
10006544:	000f1500 	call	1000f150 <__subdf3>
10006548:	bc800005 	stb	r18,0(r23)
1000654c:	dac01617 	ldw	r11,88(sp)
10006550:	102b883a 	mov	r21,r2
10006554:	00800044 	movi	r2,1
10006558:	bd800044 	addi	r22,r23,1
1000655c:	1815883a 	mov	r10,r3
10006560:	58802226 	beq	r11,r2,100065ec <_dtoa_r+0x1410>
10006564:	bad7883a 	add	r11,r23,r11
10006568:	dc001415 	stw	r16,80(sp)
1000656c:	a805883a 	mov	r2,r21
10006570:	b027883a 	mov	r19,r22
10006574:	5821883a 	mov	r16,r11
10006578:	882b883a 	mov	r21,r17
1000657c:	000d883a 	mov	r6,zero
10006580:	01d00934 	movhi	r7,16420
10006584:	1009883a 	mov	r4,r2
10006588:	180b883a 	mov	r5,r3
1000658c:	000f1b00 	call	1000f1b0 <__muldf3>
10006590:	180b883a 	mov	r5,r3
10006594:	1009883a 	mov	r4,r2
10006598:	1829883a 	mov	r20,r3
1000659c:	1023883a 	mov	r17,r2
100065a0:	000f9540 	call	1000f954 <__fixdfsi>
100065a4:	1009883a 	mov	r4,r2
100065a8:	1025883a 	mov	r18,r2
100065ac:	000f8800 	call	1000f880 <__floatsidf>
100065b0:	8809883a 	mov	r4,r17
100065b4:	a00b883a 	mov	r5,r20
100065b8:	100d883a 	mov	r6,r2
100065bc:	180f883a 	mov	r7,r3
100065c0:	94800c04 	addi	r18,r18,48
100065c4:	000f1500 	call	1000f150 <__subdf3>
100065c8:	9cc00044 	addi	r19,r19,1
100065cc:	9cbfffc5 	stb	r18,-1(r19)
100065d0:	9c3fea1e 	bne	r19,r16,1000657c <__alt_data_end+0xf800657c>
100065d4:	1815883a 	mov	r10,r3
100065d8:	d8c01017 	ldw	r3,64(sp)
100065dc:	dc001417 	ldw	r16,80(sp)
100065e0:	a823883a 	mov	r17,r21
100065e4:	b0ed883a 	add	r22,r22,r3
100065e8:	102b883a 	mov	r21,r2
100065ec:	d9001117 	ldw	r4,68(sp)
100065f0:	d9401217 	ldw	r5,72(sp)
100065f4:	000d883a 	mov	r6,zero
100065f8:	01cff834 	movhi	r7,16352
100065fc:	da801515 	stw	r10,84(sp)
10006600:	000f0fc0 	call	1000f0fc <__adddf3>
10006604:	da801517 	ldw	r10,84(sp)
10006608:	1009883a 	mov	r4,r2
1000660c:	180b883a 	mov	r5,r3
10006610:	500f883a 	mov	r7,r10
10006614:	a80d883a 	mov	r6,r21
10006618:	000f7c80 	call	1000f7c8 <__ltdf2>
1000661c:	da801517 	ldw	r10,84(sp)
10006620:	10003b0e 	bge	r2,zero,10006710 <_dtoa_r+0x1534>
10006624:	d9c01317 	ldw	r7,76(sp)
10006628:	b53fffc3 	ldbu	r20,-1(r22)
1000662c:	d9c00615 	stw	r7,24(sp)
10006630:	003d3106 	br	10005af8 <__alt_data_end+0xf8005af8>
10006634:	d8800817 	ldw	r2,32(sp)
10006638:	11e5c83a 	sub	r18,r2,r7
1000663c:	0005883a 	mov	r2,zero
10006640:	003d5006 	br	10005b84 <__alt_data_end+0xf8005b84>
10006644:	05800044 	movi	r22,1
10006648:	003dc406 	br	10005d5c <__alt_data_end+0xf8005d5c>
1000664c:	a5000044 	addi	r20,r20,1
10006650:	15000005 	stb	r20,0(r2)
10006654:	003c8206 	br	10005860 <__alt_data_end+0xf8005860>
10006658:	d8800217 	ldw	r2,8(sp)
1000665c:	00c00d84 	movi	r3,54
10006660:	dcc00a17 	ldw	r19,40(sp)
10006664:	1885c83a 	sub	r2,r3,r2
10006668:	dc800817 	ldw	r18,32(sp)
1000666c:	003d4506 	br	10005b84 <__alt_data_end+0xf8005b84>
10006670:	dcc00317 	ldw	r19,12(sp)
10006674:	8829883a 	mov	r20,r17
10006678:	04800084 	movi	r18,2
1000667c:	003bea06 	br	10005628 <__alt_data_end+0xf8005628>
10006680:	d9000917 	ldw	r4,36(sp)
10006684:	203f1126 	beq	r4,zero,100062cc <__alt_data_end+0xf80062cc>
10006688:	d9c00e17 	ldw	r7,56(sp)
1000668c:	01fca20e 	bge	zero,r7,10005918 <__alt_data_end+0xf8005918>
10006690:	a00b883a 	mov	r5,r20
10006694:	9809883a 	mov	r4,r19
10006698:	000d883a 	mov	r6,zero
1000669c:	01d00934 	movhi	r7,16420
100066a0:	000f1b00 	call	1000f1b0 <__muldf3>
100066a4:	91000044 	addi	r4,r18,1
100066a8:	1027883a 	mov	r19,r2
100066ac:	1829883a 	mov	r20,r3
100066b0:	000f8800 	call	1000f880 <__floatsidf>
100066b4:	9809883a 	mov	r4,r19
100066b8:	a00b883a 	mov	r5,r20
100066bc:	100d883a 	mov	r6,r2
100066c0:	180f883a 	mov	r7,r3
100066c4:	000f1b00 	call	1000f1b0 <__muldf3>
100066c8:	1009883a 	mov	r4,r2
100066cc:	180b883a 	mov	r5,r3
100066d0:	000d883a 	mov	r6,zero
100066d4:	01d00734 	movhi	r7,16412
100066d8:	000f0fc0 	call	1000f0fc <__adddf3>
100066dc:	1025883a 	mov	r18,r2
100066e0:	d8800617 	ldw	r2,24(sp)
100066e4:	057f3034 	movhi	r21,64704
100066e8:	1d6b883a 	add	r21,r3,r21
100066ec:	10bfffc4 	addi	r2,r2,-1
100066f0:	d8801315 	stw	r2,76(sp)
100066f4:	dac00e17 	ldw	r11,56(sp)
100066f8:	003be706 	br	10005698 <__alt_data_end+0xf8005698>
100066fc:	01000e44 	movi	r4,57
10006700:	91000005 	stb	r4,0(r18)
10006704:	95800044 	addi	r22,r18,1
10006708:	982b883a 	mov	r21,r19
1000670c:	003da106 	br	10005d94 <__alt_data_end+0xf8005d94>
10006710:	d9801117 	ldw	r6,68(sp)
10006714:	d9c01217 	ldw	r7,72(sp)
10006718:	0009883a 	mov	r4,zero
1000671c:	014ff834 	movhi	r5,16352
10006720:	da801515 	stw	r10,84(sp)
10006724:	000f1500 	call	1000f150 <__subdf3>
10006728:	da801517 	ldw	r10,84(sp)
1000672c:	1009883a 	mov	r4,r2
10006730:	180b883a 	mov	r5,r3
10006734:	a80d883a 	mov	r6,r21
10006738:	500f883a 	mov	r7,r10
1000673c:	000f7000 	call	1000f700 <__gtdf2>
10006740:	00bc750e 	bge	zero,r2,10005918 <__alt_data_end+0xf8005918>
10006744:	01000c04 	movi	r4,48
10006748:	00000106 	br	10006750 <_dtoa_r+0x1574>
1000674c:	102d883a 	mov	r22,r2
10006750:	b0bfffc4 	addi	r2,r22,-1
10006754:	10c00007 	ldb	r3,0(r2)
10006758:	193ffc26 	beq	r3,r4,1000674c <__alt_data_end+0xf800674c>
1000675c:	d8801317 	ldw	r2,76(sp)
10006760:	d8800615 	stw	r2,24(sp)
10006764:	003c3e06 	br	10005860 <__alt_data_end+0xf8005860>
10006768:	d9001317 	ldw	r4,76(sp)
1000676c:	df001117 	ldw	fp,68(sp)
10006770:	d9000615 	stw	r4,24(sp)
10006774:	003ce006 	br	10005af8 <__alt_data_end+0xf8005af8>
10006778:	df001117 	ldw	fp,68(sp)
1000677c:	dc401217 	ldw	r17,72(sp)
10006780:	003c6506 	br	10005918 <__alt_data_end+0xf8005918>
10006784:	103e7a1e 	bne	r2,zero,10006170 <__alt_data_end+0xf8006170>
10006788:	1880004c 	andi	r2,r3,1
1000678c:	103e7826 	beq	r2,zero,10006170 <__alt_data_end+0xf8006170>
10006790:	003e7406 	br	10006164 <__alt_data_end+0xf8006164>
10006794:	8009883a 	mov	r4,r16
10006798:	a80b883a 	mov	r5,r21
1000679c:	01800284 	movi	r6,10
100067a0:	000f883a 	mov	r7,zero
100067a4:	0008a600 	call	10008a60 <__multadd>
100067a8:	d9000e17 	ldw	r4,56(sp)
100067ac:	102b883a 	mov	r21,r2
100067b0:	d9000915 	stw	r4,36(sp)
100067b4:	003d5106 	br	10005cfc <__alt_data_end+0xf8005cfc>
100067b8:	04800084 	movi	r18,2
100067bc:	003b9a06 	br	10005628 <__alt_data_end+0xf8005628>
100067c0:	d8c01317 	ldw	r3,76(sp)
100067c4:	d8c00615 	stw	r3,24(sp)
100067c8:	003ccb06 	br	10005af8 <__alt_data_end+0xf8005af8>
100067cc:	d8c01317 	ldw	r3,76(sp)
100067d0:	d8c00615 	stw	r3,24(sp)
100067d4:	003c2206 	br	10005860 <__alt_data_end+0xf8005860>
100067d8:	20fd3826 	beq	r4,r3,10005cbc <__alt_data_end+0xf8005cbc>
100067dc:	00c00f04 	movi	r3,60
100067e0:	1885c83a 	sub	r2,r3,r2
100067e4:	003da906 	br	10005e8c <__alt_data_end+0xf8005e8c>
100067e8:	000b883a 	mov	r5,zero
100067ec:	003b5406 	br	10005540 <__alt_data_end+0xf8005540>
100067f0:	04c00044 	movi	r19,1
100067f4:	003b3b06 	br	100054e4 <__alt_data_end+0xf80054e4>

100067f8 <_fflush_r>:
100067f8:	defffb04 	addi	sp,sp,-20
100067fc:	dcc00315 	stw	r19,12(sp)
10006800:	dc400115 	stw	r17,4(sp)
10006804:	dfc00415 	stw	ra,16(sp)
10006808:	dc800215 	stw	r18,8(sp)
1000680c:	dc000015 	stw	r16,0(sp)
10006810:	2027883a 	mov	r19,r4
10006814:	2823883a 	mov	r17,r5
10006818:	20000226 	beq	r4,zero,10006824 <_fflush_r+0x2c>
1000681c:	20800e17 	ldw	r2,56(r4)
10006820:	10005726 	beq	r2,zero,10006980 <_fflush_r+0x188>
10006824:	8880030b 	ldhu	r2,12(r17)
10006828:	10c0020c 	andi	r3,r2,8
1000682c:	18ffffcc 	andi	r3,r3,65535
10006830:	18e0001c 	xori	r3,r3,32768
10006834:	18e00004 	addi	r3,r3,-32768
10006838:	1800311e 	bne	r3,zero,10006900 <_fflush_r+0x108>
1000683c:	89000117 	ldw	r4,4(r17)
10006840:	10c20014 	ori	r3,r2,2048
10006844:	88c0030d 	sth	r3,12(r17)
10006848:	180b883a 	mov	r5,r3
1000684c:	0100520e 	bge	zero,r4,10006998 <_fflush_r+0x1a0>
10006850:	88c00a17 	ldw	r3,40(r17)
10006854:	18002226 	beq	r3,zero,100068e0 <_fflush_r+0xe8>
10006858:	1084000c 	andi	r2,r2,4096
1000685c:	10bfffcc 	andi	r2,r2,65535
10006860:	10a0001c 	xori	r2,r2,32768
10006864:	10a00004 	addi	r2,r2,-32768
10006868:	10004e26 	beq	r2,zero,100069a4 <_fflush_r+0x1ac>
1000686c:	8c001417 	ldw	r16,80(r17)
10006870:	2940010c 	andi	r5,r5,4
10006874:	297fffcc 	andi	r5,r5,65535
10006878:	2960001c 	xori	r5,r5,32768
1000687c:	29600004 	addi	r5,r5,-32768
10006880:	28000626 	beq	r5,zero,1000689c <_fflush_r+0xa4>
10006884:	89000117 	ldw	r4,4(r17)
10006888:	88800c17 	ldw	r2,48(r17)
1000688c:	8121c83a 	sub	r16,r16,r4
10006890:	10000226 	beq	r2,zero,1000689c <_fflush_r+0xa4>
10006894:	88800f17 	ldw	r2,60(r17)
10006898:	80a1c83a 	sub	r16,r16,r2
1000689c:	89400717 	ldw	r5,28(r17)
100068a0:	9809883a 	mov	r4,r19
100068a4:	800d883a 	mov	r6,r16
100068a8:	000f883a 	mov	r7,zero
100068ac:	183ee83a 	callr	r3
100068b0:	8080281e 	bne	r16,r2,10006954 <_fflush_r+0x15c>
100068b4:	8880030b 	ldhu	r2,12(r17)
100068b8:	88c00417 	ldw	r3,16(r17)
100068bc:	88000115 	stw	zero,4(r17)
100068c0:	113dffcc 	andi	r4,r2,63487
100068c4:	1084000c 	andi	r2,r2,4096
100068c8:	10bfffcc 	andi	r2,r2,65535
100068cc:	10a0001c 	xori	r2,r2,32768
100068d0:	8900030d 	sth	r4,12(r17)
100068d4:	88c00015 	stw	r3,0(r17)
100068d8:	10a00004 	addi	r2,r2,-32768
100068dc:	10002c1e 	bne	r2,zero,10006990 <_fflush_r+0x198>
100068e0:	0005883a 	mov	r2,zero
100068e4:	dfc00417 	ldw	ra,16(sp)
100068e8:	dcc00317 	ldw	r19,12(sp)
100068ec:	dc800217 	ldw	r18,8(sp)
100068f0:	dc400117 	ldw	r17,4(sp)
100068f4:	dc000017 	ldw	r16,0(sp)
100068f8:	dec00504 	addi	sp,sp,20
100068fc:	f800283a 	ret
10006900:	8c800417 	ldw	r18,16(r17)
10006904:	903ff626 	beq	r18,zero,100068e0 <__alt_data_end+0xf80068e0>
10006908:	8c000017 	ldw	r16,0(r17)
1000690c:	108000cc 	andi	r2,r2,3
10006910:	8c800015 	stw	r18,0(r17)
10006914:	84a1c83a 	sub	r16,r16,r18
10006918:	10001b1e 	bne	r2,zero,10006988 <_fflush_r+0x190>
1000691c:	88800517 	ldw	r2,20(r17)
10006920:	88800215 	stw	r2,8(r17)
10006924:	04000316 	blt	zero,r16,10006934 <_fflush_r+0x13c>
10006928:	003fed06 	br	100068e0 <__alt_data_end+0xf80068e0>
1000692c:	90a5883a 	add	r18,r18,r2
10006930:	043feb0e 	bge	zero,r16,100068e0 <__alt_data_end+0xf80068e0>
10006934:	88800917 	ldw	r2,36(r17)
10006938:	89400717 	ldw	r5,28(r17)
1000693c:	800f883a 	mov	r7,r16
10006940:	900d883a 	mov	r6,r18
10006944:	9809883a 	mov	r4,r19
10006948:	103ee83a 	callr	r2
1000694c:	80a1c83a 	sub	r16,r16,r2
10006950:	00bff616 	blt	zero,r2,1000692c <__alt_data_end+0xf800692c>
10006954:	88c0030b 	ldhu	r3,12(r17)
10006958:	00bfffc4 	movi	r2,-1
1000695c:	18c01014 	ori	r3,r3,64
10006960:	88c0030d 	sth	r3,12(r17)
10006964:	dfc00417 	ldw	ra,16(sp)
10006968:	dcc00317 	ldw	r19,12(sp)
1000696c:	dc800217 	ldw	r18,8(sp)
10006970:	dc400117 	ldw	r17,4(sp)
10006974:	dc000017 	ldw	r16,0(sp)
10006978:	dec00504 	addi	sp,sp,20
1000697c:	f800283a 	ret
10006980:	0006ab40 	call	10006ab4 <__sinit>
10006984:	003fa706 	br	10006824 <__alt_data_end+0xf8006824>
10006988:	0005883a 	mov	r2,zero
1000698c:	003fe406 	br	10006920 <__alt_data_end+0xf8006920>
10006990:	8c001415 	stw	r16,80(r17)
10006994:	003fd206 	br	100068e0 <__alt_data_end+0xf80068e0>
10006998:	88c00f17 	ldw	r3,60(r17)
1000699c:	00ffac16 	blt	zero,r3,10006850 <__alt_data_end+0xf8006850>
100069a0:	003fcf06 	br	100068e0 <__alt_data_end+0xf80068e0>
100069a4:	89400717 	ldw	r5,28(r17)
100069a8:	9809883a 	mov	r4,r19
100069ac:	000d883a 	mov	r6,zero
100069b0:	01c00044 	movi	r7,1
100069b4:	183ee83a 	callr	r3
100069b8:	1021883a 	mov	r16,r2
100069bc:	00bfffc4 	movi	r2,-1
100069c0:	80800326 	beq	r16,r2,100069d0 <_fflush_r+0x1d8>
100069c4:	8940030b 	ldhu	r5,12(r17)
100069c8:	88c00a17 	ldw	r3,40(r17)
100069cc:	003fa806 	br	10006870 <__alt_data_end+0xf8006870>
100069d0:	98c00017 	ldw	r3,0(r19)
100069d4:	00800744 	movi	r2,29
100069d8:	18bfde1e 	bne	r3,r2,10006954 <__alt_data_end+0xf8006954>
100069dc:	003fc006 	br	100068e0 <__alt_data_end+0xf80068e0>

100069e0 <fflush>:
100069e0:	200b883a 	mov	r5,r4
100069e4:	20000426 	beq	r4,zero,100069f8 <fflush+0x18>
100069e8:	00840074 	movhi	r2,4097
100069ec:	10936704 	addi	r2,r2,19868
100069f0:	11000017 	ldw	r4,0(r2)
100069f4:	00067f81 	jmpi	100067f8 <_fflush_r>
100069f8:	00840074 	movhi	r2,4097
100069fc:	10936604 	addi	r2,r2,19864
10006a00:	11000017 	ldw	r4,0(r2)
10006a04:	01440034 	movhi	r5,4096
10006a08:	2959fe04 	addi	r5,r5,26616
10006a0c:	00079101 	jmpi	10007910 <_fwalk_reent>

10006a10 <__fp_lock>:
10006a10:	0005883a 	mov	r2,zero
10006a14:	f800283a 	ret

10006a18 <__fp_unlock>:
10006a18:	0005883a 	mov	r2,zero
10006a1c:	f800283a 	ret

10006a20 <_cleanup_r>:
10006a20:	01440074 	movhi	r5,4097
10006a24:	29744f04 	addi	r5,r5,-11972
10006a28:	00078681 	jmpi	10007868 <_fwalk>

10006a2c <__sfmoreglue>:
10006a2c:	defffc04 	addi	sp,sp,-16
10006a30:	dc800215 	stw	r18,8(sp)
10006a34:	2825883a 	mov	r18,r5
10006a38:	dc000015 	stw	r16,0(sp)
10006a3c:	01401704 	movi	r5,92
10006a40:	2021883a 	mov	r16,r4
10006a44:	9009883a 	mov	r4,r18
10006a48:	dfc00315 	stw	ra,12(sp)
10006a4c:	dc400115 	stw	r17,4(sp)
10006a50:	000158c0 	call	1000158c <__mulsi3>
10006a54:	8009883a 	mov	r4,r16
10006a58:	11400304 	addi	r5,r2,12
10006a5c:	1023883a 	mov	r17,r2
10006a60:	0007c840 	call	10007c84 <_malloc_r>
10006a64:	1021883a 	mov	r16,r2
10006a68:	10000726 	beq	r2,zero,10006a88 <__sfmoreglue+0x5c>
10006a6c:	11000304 	addi	r4,r2,12
10006a70:	10000015 	stw	zero,0(r2)
10006a74:	14800115 	stw	r18,4(r2)
10006a78:	11000215 	stw	r4,8(r2)
10006a7c:	000b883a 	mov	r5,zero
10006a80:	880d883a 	mov	r6,r17
10006a84:	00088b40 	call	100088b4 <memset>
10006a88:	8005883a 	mov	r2,r16
10006a8c:	dfc00317 	ldw	ra,12(sp)
10006a90:	dc800217 	ldw	r18,8(sp)
10006a94:	dc400117 	ldw	r17,4(sp)
10006a98:	dc000017 	ldw	r16,0(sp)
10006a9c:	dec00404 	addi	sp,sp,16
10006aa0:	f800283a 	ret

10006aa4 <_cleanup>:
10006aa4:	00840074 	movhi	r2,4097
10006aa8:	10936604 	addi	r2,r2,19864
10006aac:	11000017 	ldw	r4,0(r2)
10006ab0:	0006a201 	jmpi	10006a20 <_cleanup_r>

10006ab4 <__sinit>:
10006ab4:	20800e17 	ldw	r2,56(r4)
10006ab8:	1000401e 	bne	r2,zero,10006bbc <__sinit+0x108>
10006abc:	21400117 	ldw	r5,4(r4)
10006ac0:	01840034 	movhi	r6,4096
10006ac4:	319a8804 	addi	r6,r6,27168
10006ac8:	20c00217 	ldw	r3,8(r4)
10006acc:	21800f15 	stw	r6,60(r4)
10006ad0:	2080bb04 	addi	r2,r4,748
10006ad4:	02400044 	movi	r9,1
10006ad8:	018000c4 	movi	r6,3
10006adc:	2180b915 	stw	r6,740(r4)
10006ae0:	2080ba15 	stw	r2,744(r4)
10006ae4:	22400e15 	stw	r9,56(r4)
10006ae8:	20800317 	ldw	r2,12(r4)
10006aec:	2000b815 	stw	zero,736(r4)
10006af0:	02040074 	movhi	r8,4097
10006af4:	42297a04 	addi	r8,r8,-23064
10006af8:	01c40074 	movhi	r7,4097
10006afc:	39e98f04 	addi	r7,r7,-22980
10006b00:	01840074 	movhi	r6,4097
10006b04:	31a9b104 	addi	r6,r6,-22844
10006b08:	01040074 	movhi	r4,4097
10006b0c:	2129c804 	addi	r4,r4,-22752
10006b10:	02800104 	movi	r10,4
10006b14:	28000015 	stw	zero,0(r5)
10006b18:	28000115 	stw	zero,4(r5)
10006b1c:	28000215 	stw	zero,8(r5)
10006b20:	2a80030d 	sth	r10,12(r5)
10006b24:	2800038d 	sth	zero,14(r5)
10006b28:	28000415 	stw	zero,16(r5)
10006b2c:	28000515 	stw	zero,20(r5)
10006b30:	28000615 	stw	zero,24(r5)
10006b34:	29400715 	stw	r5,28(r5)
10006b38:	2a000815 	stw	r8,32(r5)
10006b3c:	29c00915 	stw	r7,36(r5)
10006b40:	29800a15 	stw	r6,40(r5)
10006b44:	29000b15 	stw	r4,44(r5)
10006b48:	01400284 	movi	r5,10
10006b4c:	18000015 	stw	zero,0(r3)
10006b50:	18000115 	stw	zero,4(r3)
10006b54:	18000215 	stw	zero,8(r3)
10006b58:	1940030d 	sth	r5,12(r3)
10006b5c:	1a40038d 	sth	r9,14(r3)
10006b60:	18000415 	stw	zero,16(r3)
10006b64:	18000515 	stw	zero,20(r3)
10006b68:	18000615 	stw	zero,24(r3)
10006b6c:	18c00715 	stw	r3,28(r3)
10006b70:	1a000815 	stw	r8,32(r3)
10006b74:	19c00915 	stw	r7,36(r3)
10006b78:	19800a15 	stw	r6,40(r3)
10006b7c:	19000b15 	stw	r4,44(r3)
10006b80:	00c00484 	movi	r3,18
10006b84:	10c0030d 	sth	r3,12(r2)
10006b88:	00c00084 	movi	r3,2
10006b8c:	10000015 	stw	zero,0(r2)
10006b90:	10000115 	stw	zero,4(r2)
10006b94:	10000215 	stw	zero,8(r2)
10006b98:	10c0038d 	sth	r3,14(r2)
10006b9c:	10000415 	stw	zero,16(r2)
10006ba0:	10000515 	stw	zero,20(r2)
10006ba4:	10000615 	stw	zero,24(r2)
10006ba8:	10800715 	stw	r2,28(r2)
10006bac:	12000815 	stw	r8,32(r2)
10006bb0:	11c00915 	stw	r7,36(r2)
10006bb4:	11800a15 	stw	r6,40(r2)
10006bb8:	11000b15 	stw	r4,44(r2)
10006bbc:	f800283a 	ret

10006bc0 <__sfp>:
10006bc0:	defffc04 	addi	sp,sp,-16
10006bc4:	00840074 	movhi	r2,4097
10006bc8:	10936604 	addi	r2,r2,19864
10006bcc:	dc400115 	stw	r17,4(sp)
10006bd0:	14400017 	ldw	r17,0(r2)
10006bd4:	dc800215 	stw	r18,8(sp)
10006bd8:	dfc00315 	stw	ra,12(sp)
10006bdc:	88800e17 	ldw	r2,56(r17)
10006be0:	dc000015 	stw	r16,0(sp)
10006be4:	2025883a 	mov	r18,r4
10006be8:	10002826 	beq	r2,zero,10006c8c <__sfp+0xcc>
10006bec:	8c40b804 	addi	r17,r17,736
10006bf0:	043fffc4 	movi	r16,-1
10006bf4:	89400117 	ldw	r5,4(r17)
10006bf8:	88800217 	ldw	r2,8(r17)
10006bfc:	297fffc4 	addi	r5,r5,-1
10006c00:	28000a16 	blt	r5,zero,10006c2c <__sfp+0x6c>
10006c04:	10c0030f 	ldh	r3,12(r2)
10006c08:	18000c26 	beq	r3,zero,10006c3c <__sfp+0x7c>
10006c0c:	10c01a04 	addi	r3,r2,104
10006c10:	00000206 	br	10006c1c <__sfp+0x5c>
10006c14:	19bfe90f 	ldh	r6,-92(r3)
10006c18:	30000826 	beq	r6,zero,10006c3c <__sfp+0x7c>
10006c1c:	297fffc4 	addi	r5,r5,-1
10006c20:	18bffd04 	addi	r2,r3,-12
10006c24:	18c01704 	addi	r3,r3,92
10006c28:	2c3ffa1e 	bne	r5,r16,10006c14 <__alt_data_end+0xf8006c14>
10006c2c:	88800017 	ldw	r2,0(r17)
10006c30:	10001926 	beq	r2,zero,10006c98 <__sfp+0xd8>
10006c34:	1023883a 	mov	r17,r2
10006c38:	003fee06 	br	10006bf4 <__alt_data_end+0xf8006bf4>
10006c3c:	00ffffc4 	movi	r3,-1
10006c40:	10c0038d 	sth	r3,14(r2)
10006c44:	00c00044 	movi	r3,1
10006c48:	10c0030d 	sth	r3,12(r2)
10006c4c:	10000015 	stw	zero,0(r2)
10006c50:	10000215 	stw	zero,8(r2)
10006c54:	10000115 	stw	zero,4(r2)
10006c58:	10000415 	stw	zero,16(r2)
10006c5c:	10000515 	stw	zero,20(r2)
10006c60:	10000615 	stw	zero,24(r2)
10006c64:	10000c15 	stw	zero,48(r2)
10006c68:	10000d15 	stw	zero,52(r2)
10006c6c:	10001115 	stw	zero,68(r2)
10006c70:	10001215 	stw	zero,72(r2)
10006c74:	dfc00317 	ldw	ra,12(sp)
10006c78:	dc800217 	ldw	r18,8(sp)
10006c7c:	dc400117 	ldw	r17,4(sp)
10006c80:	dc000017 	ldw	r16,0(sp)
10006c84:	dec00404 	addi	sp,sp,16
10006c88:	f800283a 	ret
10006c8c:	8809883a 	mov	r4,r17
10006c90:	0006ab40 	call	10006ab4 <__sinit>
10006c94:	003fd506 	br	10006bec <__alt_data_end+0xf8006bec>
10006c98:	9009883a 	mov	r4,r18
10006c9c:	01400104 	movi	r5,4
10006ca0:	0006a2c0 	call	10006a2c <__sfmoreglue>
10006ca4:	88800015 	stw	r2,0(r17)
10006ca8:	103fe21e 	bne	r2,zero,10006c34 <__alt_data_end+0xf8006c34>
10006cac:	00800304 	movi	r2,12
10006cb0:	90800015 	stw	r2,0(r18)
10006cb4:	0005883a 	mov	r2,zero
10006cb8:	003fee06 	br	10006c74 <__alt_data_end+0xf8006c74>

10006cbc <__sfp_lock_acquire>:
10006cbc:	f800283a 	ret

10006cc0 <__sfp_lock_release>:
10006cc0:	f800283a 	ret

10006cc4 <__sinit_lock_acquire>:
10006cc4:	f800283a 	ret

10006cc8 <__sinit_lock_release>:
10006cc8:	f800283a 	ret

10006ccc <__fp_lock_all>:
10006ccc:	00840074 	movhi	r2,4097
10006cd0:	10936704 	addi	r2,r2,19868
10006cd4:	11000017 	ldw	r4,0(r2)
10006cd8:	01440034 	movhi	r5,4096
10006cdc:	295a8404 	addi	r5,r5,27152
10006ce0:	00078681 	jmpi	10007868 <_fwalk>

10006ce4 <__fp_unlock_all>:
10006ce4:	00840074 	movhi	r2,4097
10006ce8:	10936704 	addi	r2,r2,19868
10006cec:	11000017 	ldw	r4,0(r2)
10006cf0:	01440034 	movhi	r5,4096
10006cf4:	295a8604 	addi	r5,r5,27160
10006cf8:	00078681 	jmpi	10007868 <_fwalk>

10006cfc <_fread_r>:
10006cfc:	defff504 	addi	sp,sp,-44
10006d00:	dd000515 	stw	r20,20(sp)
10006d04:	dcc00415 	stw	r19,16(sp)
10006d08:	2029883a 	mov	r20,r4
10006d0c:	2827883a 	mov	r19,r5
10006d10:	3809883a 	mov	r4,r7
10006d14:	300b883a 	mov	r5,r6
10006d18:	ddc00815 	stw	r23,32(sp)
10006d1c:	dd800715 	stw	r22,28(sp)
10006d20:	dd400615 	stw	r21,24(sp)
10006d24:	dc000115 	stw	r16,4(sp)
10006d28:	dfc00a15 	stw	ra,40(sp)
10006d2c:	df000915 	stw	fp,36(sp)
10006d30:	dc800315 	stw	r18,12(sp)
10006d34:	dc400215 	stw	r17,8(sp)
10006d38:	302f883a 	mov	r23,r6
10006d3c:	382b883a 	mov	r21,r7
10006d40:	000158c0 	call	1000158c <__mulsi3>
10006d44:	102d883a 	mov	r22,r2
10006d48:	dc000b17 	ldw	r16,44(sp)
10006d4c:	10002e26 	beq	r2,zero,10006e08 <_fread_r+0x10c>
10006d50:	a0000226 	beq	r20,zero,10006d5c <_fread_r+0x60>
10006d54:	a0800e17 	ldw	r2,56(r20)
10006d58:	10006726 	beq	r2,zero,10006ef8 <_fread_r+0x1fc>
10006d5c:	84400117 	ldw	r17,4(r16)
10006d60:	88002b16 	blt	r17,zero,10006e10 <_fread_r+0x114>
10006d64:	8080030b 	ldhu	r2,12(r16)
10006d68:	8807883a 	mov	r3,r17
10006d6c:	1080008c 	andi	r2,r2,2
10006d70:	10bfffcc 	andi	r2,r2,65535
10006d74:	10a0001c 	xori	r2,r2,32768
10006d78:	10a00004 	addi	r2,r2,-32768
10006d7c:	10002d1e 	bne	r2,zero,10006e34 <_fread_r+0x138>
10006d80:	b025883a 	mov	r18,r22
10006d84:	00000106 	br	10006d8c <_fread_r+0x90>
10006d88:	84400117 	ldw	r17,4(r16)
10006d8c:	9809883a 	mov	r4,r19
10006d90:	880d883a 	mov	r6,r17
10006d94:	81400017 	ldw	r5,0(r16)
10006d98:	8c805c2e 	bgeu	r17,r18,10006f0c <_fread_r+0x210>
10006d9c:	00085e80 	call	100085e8 <memcpy>
10006da0:	80800017 	ldw	r2,0(r16)
10006da4:	9c67883a 	add	r19,r19,r17
10006da8:	9465c83a 	sub	r18,r18,r17
10006dac:	1463883a 	add	r17,r2,r17
10006db0:	a009883a 	mov	r4,r20
10006db4:	800b883a 	mov	r5,r16
10006db8:	84400015 	stw	r17,0(r16)
10006dbc:	000a1a40 	call	1000a1a4 <__srefill_r>
10006dc0:	103ff126 	beq	r2,zero,10006d88 <__alt_data_end+0xf8006d88>
10006dc4:	b489c83a 	sub	r4,r22,r18
10006dc8:	b80b883a 	mov	r5,r23
10006dcc:	000157c0 	call	1000157c <__udivsi3>
10006dd0:	102b883a 	mov	r21,r2
10006dd4:	a805883a 	mov	r2,r21
10006dd8:	dfc00a17 	ldw	ra,40(sp)
10006ddc:	df000917 	ldw	fp,36(sp)
10006de0:	ddc00817 	ldw	r23,32(sp)
10006de4:	dd800717 	ldw	r22,28(sp)
10006de8:	dd400617 	ldw	r21,24(sp)
10006dec:	dd000517 	ldw	r20,20(sp)
10006df0:	dcc00417 	ldw	r19,16(sp)
10006df4:	dc800317 	ldw	r18,12(sp)
10006df8:	dc400217 	ldw	r17,8(sp)
10006dfc:	dc000117 	ldw	r16,4(sp)
10006e00:	dec00b04 	addi	sp,sp,44
10006e04:	f800283a 	ret
10006e08:	002b883a 	mov	r21,zero
10006e0c:	003ff106 	br	10006dd4 <__alt_data_end+0xf8006dd4>
10006e10:	8080030b 	ldhu	r2,12(r16)
10006e14:	80000115 	stw	zero,4(r16)
10006e18:	0007883a 	mov	r3,zero
10006e1c:	1080008c 	andi	r2,r2,2
10006e20:	10bfffcc 	andi	r2,r2,65535
10006e24:	10a0001c 	xori	r2,r2,32768
10006e28:	10a00004 	addi	r2,r2,-32768
10006e2c:	0023883a 	mov	r17,zero
10006e30:	103fd326 	beq	r2,zero,10006d80 <__alt_data_end+0xf8006d80>
10006e34:	1823883a 	mov	r17,r3
10006e38:	b0c0012e 	bgeu	r22,r3,10006e40 <_fread_r+0x144>
10006e3c:	b023883a 	mov	r17,r22
10006e40:	81400017 	ldw	r5,0(r16)
10006e44:	9809883a 	mov	r4,r19
10006e48:	880d883a 	mov	r6,r17
10006e4c:	00085e80 	call	100085e8 <memcpy>
10006e50:	80800117 	ldw	r2,4(r16)
10006e54:	84800017 	ldw	r18,0(r16)
10006e58:	81400c17 	ldw	r5,48(r16)
10006e5c:	1445c83a 	sub	r2,r2,r17
10006e60:	9465883a 	add	r18,r18,r17
10006e64:	84800015 	stw	r18,0(r16)
10006e68:	80800115 	stw	r2,4(r16)
10006e6c:	9c67883a 	add	r19,r19,r17
10006e70:	b463c83a 	sub	r17,r22,r17
10006e74:	28002e26 	beq	r5,zero,10006f30 <_fread_r+0x234>
10006e78:	883fd626 	beq	r17,zero,10006dd4 <__alt_data_end+0xf8006dd4>
10006e7c:	80801004 	addi	r2,r16,64
10006e80:	28800326 	beq	r5,r2,10006e90 <_fread_r+0x194>
10006e84:	a009883a 	mov	r4,r20
10006e88:	00070b40 	call	100070b4 <_free_r>
10006e8c:	84800017 	ldw	r18,0(r16)
10006e90:	80000c15 	stw	zero,48(r16)
10006e94:	80c00517 	ldw	r3,20(r16)
10006e98:	87000417 	ldw	fp,16(r16)
10006e9c:	d8c00015 	stw	r3,0(sp)
10006ea0:	00000106 	br	10006ea8 <_fread_r+0x1ac>
10006ea4:	883fcb26 	beq	r17,zero,10006dd4 <__alt_data_end+0xf8006dd4>
10006ea8:	84c00415 	stw	r19,16(r16)
10006eac:	84400515 	stw	r17,20(r16)
10006eb0:	84c00015 	stw	r19,0(r16)
10006eb4:	a009883a 	mov	r4,r20
10006eb8:	800b883a 	mov	r5,r16
10006ebc:	000a1a40 	call	1000a1a4 <__srefill_r>
10006ec0:	d8c00017 	ldw	r3,0(sp)
10006ec4:	81000117 	ldw	r4,4(r16)
10006ec8:	87000415 	stw	fp,16(r16)
10006ecc:	80c00515 	stw	r3,20(r16)
10006ed0:	84800015 	stw	r18,0(r16)
10006ed4:	80000115 	stw	zero,4(r16)
10006ed8:	8923c83a 	sub	r17,r17,r4
10006edc:	9927883a 	add	r19,r19,r4
10006ee0:	103ff026 	beq	r2,zero,10006ea4 <__alt_data_end+0xf8006ea4>
10006ee4:	b449c83a 	sub	r4,r22,r17
10006ee8:	b80b883a 	mov	r5,r23
10006eec:	000157c0 	call	1000157c <__udivsi3>
10006ef0:	102b883a 	mov	r21,r2
10006ef4:	003fb706 	br	10006dd4 <__alt_data_end+0xf8006dd4>
10006ef8:	a009883a 	mov	r4,r20
10006efc:	0006ab40 	call	10006ab4 <__sinit>
10006f00:	84400117 	ldw	r17,4(r16)
10006f04:	883f970e 	bge	r17,zero,10006d64 <__alt_data_end+0xf8006d64>
10006f08:	003fc106 	br	10006e10 <__alt_data_end+0xf8006e10>
10006f0c:	900d883a 	mov	r6,r18
10006f10:	00085e80 	call	100085e8 <memcpy>
10006f14:	80800117 	ldw	r2,4(r16)
10006f18:	80c00017 	ldw	r3,0(r16)
10006f1c:	1485c83a 	sub	r2,r2,r18
10006f20:	1ca5883a 	add	r18,r3,r18
10006f24:	80800115 	stw	r2,4(r16)
10006f28:	84800015 	stw	r18,0(r16)
10006f2c:	003fa906 	br	10006dd4 <__alt_data_end+0xf8006dd4>
10006f30:	883fd81e 	bne	r17,zero,10006e94 <__alt_data_end+0xf8006e94>
10006f34:	003fa706 	br	10006dd4 <__alt_data_end+0xf8006dd4>

10006f38 <fread>:
10006f38:	00840074 	movhi	r2,4097
10006f3c:	10936704 	addi	r2,r2,19868
10006f40:	2011883a 	mov	r8,r4
10006f44:	11000017 	ldw	r4,0(r2)
10006f48:	defffe04 	addi	sp,sp,-8
10006f4c:	2807883a 	mov	r3,r5
10006f50:	3005883a 	mov	r2,r6
10006f54:	d9c00015 	stw	r7,0(sp)
10006f58:	400b883a 	mov	r5,r8
10006f5c:	180d883a 	mov	r6,r3
10006f60:	100f883a 	mov	r7,r2
10006f64:	dfc00115 	stw	ra,4(sp)
10006f68:	0006cfc0 	call	10006cfc <_fread_r>
10006f6c:	dfc00117 	ldw	ra,4(sp)
10006f70:	dec00204 	addi	sp,sp,8
10006f74:	f800283a 	ret

10006f78 <_malloc_trim_r>:
10006f78:	defffb04 	addi	sp,sp,-20
10006f7c:	dcc00315 	stw	r19,12(sp)
10006f80:	dc800215 	stw	r18,8(sp)
10006f84:	dc400115 	stw	r17,4(sp)
10006f88:	dc000015 	stw	r16,0(sp)
10006f8c:	2827883a 	mov	r19,r5
10006f90:	dfc00415 	stw	ra,16(sp)
10006f94:	04440074 	movhi	r17,4097
10006f98:	8c4dd704 	addi	r17,r17,14172
10006f9c:	2021883a 	mov	r16,r4
10006fa0:	00109600 	call	10010960 <__malloc_lock>
10006fa4:	88800217 	ldw	r2,8(r17)
10006fa8:	14800117 	ldw	r18,4(r2)
10006fac:	00bfff04 	movi	r2,-4
10006fb0:	90a4703a 	and	r18,r18,r2
10006fb4:	9083fbc4 	addi	r2,r18,4079
10006fb8:	14e7c83a 	sub	r19,r2,r19
10006fbc:	9826d33a 	srli	r19,r19,12
10006fc0:	0083ffc4 	movi	r2,4095
10006fc4:	9cffffc4 	addi	r19,r19,-1
10006fc8:	9826933a 	slli	r19,r19,12
10006fcc:	14c0060e 	bge	r2,r19,10006fe8 <_malloc_trim_r+0x70>
10006fd0:	8009883a 	mov	r4,r16
10006fd4:	000b883a 	mov	r5,zero
10006fd8:	000a3f40 	call	1000a3f4 <_sbrk_r>
10006fdc:	88c00217 	ldw	r3,8(r17)
10006fe0:	1c87883a 	add	r3,r3,r18
10006fe4:	10c00a26 	beq	r2,r3,10007010 <_malloc_trim_r+0x98>
10006fe8:	8009883a 	mov	r4,r16
10006fec:	00109800 	call	10010980 <__malloc_unlock>
10006ff0:	0005883a 	mov	r2,zero
10006ff4:	dfc00417 	ldw	ra,16(sp)
10006ff8:	dcc00317 	ldw	r19,12(sp)
10006ffc:	dc800217 	ldw	r18,8(sp)
10007000:	dc400117 	ldw	r17,4(sp)
10007004:	dc000017 	ldw	r16,0(sp)
10007008:	dec00504 	addi	sp,sp,20
1000700c:	f800283a 	ret
10007010:	8009883a 	mov	r4,r16
10007014:	04cbc83a 	sub	r5,zero,r19
10007018:	000a3f40 	call	1000a3f4 <_sbrk_r>
1000701c:	00ffffc4 	movi	r3,-1
10007020:	10c01326 	beq	r2,r3,10007070 <_malloc_trim_r+0xf8>
10007024:	00840074 	movhi	r2,4097
10007028:	109aad04 	addi	r2,r2,27316
1000702c:	11000017 	ldw	r4,0(r2)
10007030:	88c00217 	ldw	r3,8(r17)
10007034:	94e5c83a 	sub	r18,r18,r19
10007038:	94800054 	ori	r18,r18,1
1000703c:	24e7c83a 	sub	r19,r4,r19
10007040:	1c800115 	stw	r18,4(r3)
10007044:	8009883a 	mov	r4,r16
10007048:	14c00015 	stw	r19,0(r2)
1000704c:	00109800 	call	10010980 <__malloc_unlock>
10007050:	00800044 	movi	r2,1
10007054:	dfc00417 	ldw	ra,16(sp)
10007058:	dcc00317 	ldw	r19,12(sp)
1000705c:	dc800217 	ldw	r18,8(sp)
10007060:	dc400117 	ldw	r17,4(sp)
10007064:	dc000017 	ldw	r16,0(sp)
10007068:	dec00504 	addi	sp,sp,20
1000706c:	f800283a 	ret
10007070:	8009883a 	mov	r4,r16
10007074:	000b883a 	mov	r5,zero
10007078:	000a3f40 	call	1000a3f4 <_sbrk_r>
1000707c:	88c00217 	ldw	r3,8(r17)
10007080:	014003c4 	movi	r5,15
10007084:	10c9c83a 	sub	r4,r2,r3
10007088:	293fd70e 	bge	r5,r4,10006fe8 <__alt_data_end+0xf8006fe8>
1000708c:	01440074 	movhi	r5,4097
10007090:	29536904 	addi	r5,r5,19876
10007094:	29400017 	ldw	r5,0(r5)
10007098:	21000054 	ori	r4,r4,1
1000709c:	19000115 	stw	r4,4(r3)
100070a0:	1145c83a 	sub	r2,r2,r5
100070a4:	01440074 	movhi	r5,4097
100070a8:	295aad04 	addi	r5,r5,27316
100070ac:	28800015 	stw	r2,0(r5)
100070b0:	003fcd06 	br	10006fe8 <__alt_data_end+0xf8006fe8>

100070b4 <_free_r>:
100070b4:	defffd04 	addi	sp,sp,-12
100070b8:	dc400115 	stw	r17,4(sp)
100070bc:	dc000015 	stw	r16,0(sp)
100070c0:	dfc00215 	stw	ra,8(sp)
100070c4:	2821883a 	mov	r16,r5
100070c8:	2023883a 	mov	r17,r4
100070cc:	28004b26 	beq	r5,zero,100071fc <_free_r+0x148>
100070d0:	00109600 	call	10010960 <__malloc_lock>
100070d4:	823fff17 	ldw	r8,-4(r16)
100070d8:	00bfff84 	movi	r2,-2
100070dc:	81bffe04 	addi	r6,r16,-8
100070e0:	4084703a 	and	r2,r8,r2
100070e4:	3087883a 	add	r3,r6,r2
100070e8:	01440074 	movhi	r5,4097
100070ec:	294dd704 	addi	r5,r5,14172
100070f0:	1a400117 	ldw	r9,4(r3)
100070f4:	29000217 	ldw	r4,8(r5)
100070f8:	01ffff04 	movi	r7,-4
100070fc:	49ce703a 	and	r7,r9,r7
10007100:	20c06526 	beq	r4,r3,10007298 <_free_r+0x1e4>
10007104:	19c00115 	stw	r7,4(r3)
10007108:	4200004c 	andi	r8,r8,1
1000710c:	40003026 	beq	r8,zero,100071d0 <_free_r+0x11c>
10007110:	0009883a 	mov	r4,zero
10007114:	19d1883a 	add	r8,r3,r7
10007118:	42000117 	ldw	r8,4(r8)
1000711c:	4200004c 	andi	r8,r8,1
10007120:	4000061e 	bne	r8,zero,1000713c <_free_r+0x88>
10007124:	11c5883a 	add	r2,r2,r7
10007128:	19c00217 	ldw	r7,8(r3)
1000712c:	20004e26 	beq	r4,zero,10007268 <_free_r+0x1b4>
10007130:	18c00317 	ldw	r3,12(r3)
10007134:	38c00315 	stw	r3,12(r7)
10007138:	19c00215 	stw	r7,8(r3)
1000713c:	11c00054 	ori	r7,r2,1
10007140:	3087883a 	add	r3,r6,r2
10007144:	31c00115 	stw	r7,4(r6)
10007148:	18800015 	stw	r2,0(r3)
1000714c:	20001a1e 	bne	r4,zero,100071b8 <_free_r+0x104>
10007150:	00c07fc4 	movi	r3,511
10007154:	18802e2e 	bgeu	r3,r2,10007210 <_free_r+0x15c>
10007158:	1006d27a 	srli	r3,r2,9
1000715c:	01000104 	movi	r4,4
10007160:	20c06636 	bltu	r4,r3,100072fc <_free_r+0x248>
10007164:	1008d1ba 	srli	r4,r2,6
10007168:	21000e04 	addi	r4,r4,56
1000716c:	210f883a 	add	r7,r4,r4
10007170:	39cf883a 	add	r7,r7,r7
10007174:	39cf883a 	add	r7,r7,r7
10007178:	29cf883a 	add	r7,r5,r7
1000717c:	38c00217 	ldw	r3,8(r7)
10007180:	01440074 	movhi	r5,4097
10007184:	294dd704 	addi	r5,r5,14172
10007188:	19c06126 	beq	r3,r7,10007310 <_free_r+0x25c>
1000718c:	013fff04 	movi	r4,-4
10007190:	19400117 	ldw	r5,4(r3)
10007194:	290a703a 	and	r5,r5,r4
10007198:	1140022e 	bgeu	r2,r5,100071a4 <_free_r+0xf0>
1000719c:	18c00217 	ldw	r3,8(r3)
100071a0:	38fffb1e 	bne	r7,r3,10007190 <__alt_data_end+0xf8007190>
100071a4:	18800317 	ldw	r2,12(r3)
100071a8:	30800315 	stw	r2,12(r6)
100071ac:	30c00215 	stw	r3,8(r6)
100071b0:	11800215 	stw	r6,8(r2)
100071b4:	19800315 	stw	r6,12(r3)
100071b8:	8809883a 	mov	r4,r17
100071bc:	dfc00217 	ldw	ra,8(sp)
100071c0:	dc400117 	ldw	r17,4(sp)
100071c4:	dc000017 	ldw	r16,0(sp)
100071c8:	dec00304 	addi	sp,sp,12
100071cc:	00109801 	jmpi	10010980 <__malloc_unlock>
100071d0:	813ffe17 	ldw	r4,-8(r16)
100071d4:	2a400204 	addi	r9,r5,8
100071d8:	310dc83a 	sub	r6,r6,r4
100071dc:	32000217 	ldw	r8,8(r6)
100071e0:	1105883a 	add	r2,r2,r4
100071e4:	42404326 	beq	r8,r9,100072f4 <_free_r+0x240>
100071e8:	32400317 	ldw	r9,12(r6)
100071ec:	0009883a 	mov	r4,zero
100071f0:	42400315 	stw	r9,12(r8)
100071f4:	4a000215 	stw	r8,8(r9)
100071f8:	003fc606 	br	10007114 <__alt_data_end+0xf8007114>
100071fc:	dfc00217 	ldw	ra,8(sp)
10007200:	dc400117 	ldw	r17,4(sp)
10007204:	dc000017 	ldw	r16,0(sp)
10007208:	dec00304 	addi	sp,sp,12
1000720c:	f800283a 	ret
10007210:	1004d0fa 	srli	r2,r2,3
10007214:	02000044 	movi	r8,1
10007218:	29c00117 	ldw	r7,4(r5)
1000721c:	1087883a 	add	r3,r2,r2
10007220:	18c7883a 	add	r3,r3,r3
10007224:	1005d0ba 	srai	r2,r2,2
10007228:	18c7883a 	add	r3,r3,r3
1000722c:	28c7883a 	add	r3,r5,r3
10007230:	19000217 	ldw	r4,8(r3)
10007234:	4084983a 	sll	r2,r8,r2
10007238:	30c00315 	stw	r3,12(r6)
1000723c:	31000215 	stw	r4,8(r6)
10007240:	11c4b03a 	or	r2,r2,r7
10007244:	21800315 	stw	r6,12(r4)
10007248:	8809883a 	mov	r4,r17
1000724c:	28800115 	stw	r2,4(r5)
10007250:	19800215 	stw	r6,8(r3)
10007254:	dfc00217 	ldw	ra,8(sp)
10007258:	dc400117 	ldw	r17,4(sp)
1000725c:	dc000017 	ldw	r16,0(sp)
10007260:	dec00304 	addi	sp,sp,12
10007264:	00109801 	jmpi	10010980 <__malloc_unlock>
10007268:	02040074 	movhi	r8,4097
1000726c:	420dd904 	addi	r8,r8,14180
10007270:	3a3faf1e 	bne	r7,r8,10007130 <__alt_data_end+0xf8007130>
10007274:	29800515 	stw	r6,20(r5)
10007278:	29800415 	stw	r6,16(r5)
1000727c:	11000054 	ori	r4,r2,1
10007280:	3087883a 	add	r3,r6,r2
10007284:	31c00315 	stw	r7,12(r6)
10007288:	31c00215 	stw	r7,8(r6)
1000728c:	31000115 	stw	r4,4(r6)
10007290:	18800015 	stw	r2,0(r3)
10007294:	003fc806 	br	100071b8 <__alt_data_end+0xf80071b8>
10007298:	4200004c 	andi	r8,r8,1
1000729c:	3885883a 	add	r2,r7,r2
100072a0:	4000071e 	bne	r8,zero,100072c0 <_free_r+0x20c>
100072a4:	81fffe17 	ldw	r7,-8(r16)
100072a8:	31cdc83a 	sub	r6,r6,r7
100072ac:	30c00317 	ldw	r3,12(r6)
100072b0:	31000217 	ldw	r4,8(r6)
100072b4:	11c5883a 	add	r2,r2,r7
100072b8:	20c00315 	stw	r3,12(r4)
100072bc:	19000215 	stw	r4,8(r3)
100072c0:	00c40074 	movhi	r3,4097
100072c4:	18d36a04 	addi	r3,r3,19880
100072c8:	18c00017 	ldw	r3,0(r3)
100072cc:	11000054 	ori	r4,r2,1
100072d0:	31000115 	stw	r4,4(r6)
100072d4:	29800215 	stw	r6,8(r5)
100072d8:	10ffb736 	bltu	r2,r3,100071b8 <__alt_data_end+0xf80071b8>
100072dc:	00840074 	movhi	r2,4097
100072e0:	109aa504 	addi	r2,r2,27284
100072e4:	11400017 	ldw	r5,0(r2)
100072e8:	8809883a 	mov	r4,r17
100072ec:	0006f780 	call	10006f78 <_malloc_trim_r>
100072f0:	003fb106 	br	100071b8 <__alt_data_end+0xf80071b8>
100072f4:	01000044 	movi	r4,1
100072f8:	003f8606 	br	10007114 <__alt_data_end+0xf8007114>
100072fc:	01000504 	movi	r4,20
10007300:	20c00b36 	bltu	r4,r3,10007330 <_free_r+0x27c>
10007304:	190016c4 	addi	r4,r3,91
10007308:	210f883a 	add	r7,r4,r4
1000730c:	003f9806 	br	10007170 <__alt_data_end+0xf8007170>
10007310:	2009d0ba 	srai	r4,r4,2
10007314:	00800044 	movi	r2,1
10007318:	29c00117 	ldw	r7,4(r5)
1000731c:	1108983a 	sll	r4,r2,r4
10007320:	1805883a 	mov	r2,r3
10007324:	21c8b03a 	or	r4,r4,r7
10007328:	29000115 	stw	r4,4(r5)
1000732c:	003f9e06 	br	100071a8 <__alt_data_end+0xf80071a8>
10007330:	01001504 	movi	r4,84
10007334:	20c00436 	bltu	r4,r3,10007348 <_free_r+0x294>
10007338:	1008d33a 	srli	r4,r2,12
1000733c:	21001b84 	addi	r4,r4,110
10007340:	210f883a 	add	r7,r4,r4
10007344:	003f8a06 	br	10007170 <__alt_data_end+0xf8007170>
10007348:	01005504 	movi	r4,340
1000734c:	20c00436 	bltu	r4,r3,10007360 <_free_r+0x2ac>
10007350:	1008d3fa 	srli	r4,r2,15
10007354:	21001dc4 	addi	r4,r4,119
10007358:	210f883a 	add	r7,r4,r4
1000735c:	003f8406 	br	10007170 <__alt_data_end+0xf8007170>
10007360:	01015504 	movi	r4,1364
10007364:	20c00436 	bltu	r4,r3,10007378 <_free_r+0x2c4>
10007368:	1008d4ba 	srli	r4,r2,18
1000736c:	21001f04 	addi	r4,r4,124
10007370:	210f883a 	add	r7,r4,r4
10007374:	003f7e06 	br	10007170 <__alt_data_end+0xf8007170>
10007378:	01c03f04 	movi	r7,252
1000737c:	01001f84 	movi	r4,126
10007380:	003f7b06 	br	10007170 <__alt_data_end+0xf8007170>

10007384 <__sfvwrite_r>:
10007384:	30800217 	ldw	r2,8(r6)
10007388:	defff504 	addi	sp,sp,-44
1000738c:	dd400615 	stw	r21,24(sp)
10007390:	dd000515 	stw	r20,20(sp)
10007394:	dc000115 	stw	r16,4(sp)
10007398:	dfc00a15 	stw	ra,40(sp)
1000739c:	df000915 	stw	fp,36(sp)
100073a0:	ddc00815 	stw	r23,32(sp)
100073a4:	dd800715 	stw	r22,28(sp)
100073a8:	dcc00415 	stw	r19,16(sp)
100073ac:	dc800315 	stw	r18,12(sp)
100073b0:	dc400215 	stw	r17,8(sp)
100073b4:	3029883a 	mov	r20,r6
100073b8:	202b883a 	mov	r21,r4
100073bc:	2821883a 	mov	r16,r5
100073c0:	10002126 	beq	r2,zero,10007448 <__sfvwrite_r+0xc4>
100073c4:	2880030b 	ldhu	r2,12(r5)
100073c8:	10c0020c 	andi	r3,r2,8
100073cc:	18ffffcc 	andi	r3,r3,65535
100073d0:	18e0001c 	xori	r3,r3,32768
100073d4:	18e00004 	addi	r3,r3,-32768
100073d8:	18002826 	beq	r3,zero,1000747c <__sfvwrite_r+0xf8>
100073dc:	28c00417 	ldw	r3,16(r5)
100073e0:	18002626 	beq	r3,zero,1000747c <__sfvwrite_r+0xf8>
100073e4:	10c0008c 	andi	r3,r2,2
100073e8:	18ffffcc 	andi	r3,r3,65535
100073ec:	18e0001c 	xori	r3,r3,32768
100073f0:	18e00004 	addi	r3,r3,-32768
100073f4:	a4400017 	ldw	r17,0(r20)
100073f8:	18002b26 	beq	r3,zero,100074a8 <__sfvwrite_r+0x124>
100073fc:	0027883a 	mov	r19,zero
10007400:	0025883a 	mov	r18,zero
10007404:	05810004 	movi	r22,1024
10007408:	980d883a 	mov	r6,r19
1000740c:	a809883a 	mov	r4,r21
10007410:	90004f26 	beq	r18,zero,10007550 <__sfvwrite_r+0x1cc>
10007414:	900f883a 	mov	r7,r18
10007418:	81400717 	ldw	r5,28(r16)
1000741c:	b480012e 	bgeu	r22,r18,10007424 <__sfvwrite_r+0xa0>
10007420:	01c10004 	movi	r7,1024
10007424:	80800917 	ldw	r2,36(r16)
10007428:	103ee83a 	callr	r2
1000742c:	0080540e 	bge	zero,r2,10007580 <__sfvwrite_r+0x1fc>
10007430:	a0c00217 	ldw	r3,8(r20)
10007434:	98a7883a 	add	r19,r19,r2
10007438:	90a5c83a 	sub	r18,r18,r2
1000743c:	1885c83a 	sub	r2,r3,r2
10007440:	a0800215 	stw	r2,8(r20)
10007444:	103ff01e 	bne	r2,zero,10007408 <__alt_data_end+0xf8007408>
10007448:	0005883a 	mov	r2,zero
1000744c:	dfc00a17 	ldw	ra,40(sp)
10007450:	df000917 	ldw	fp,36(sp)
10007454:	ddc00817 	ldw	r23,32(sp)
10007458:	dd800717 	ldw	r22,28(sp)
1000745c:	dd400617 	ldw	r21,24(sp)
10007460:	dd000517 	ldw	r20,20(sp)
10007464:	dcc00417 	ldw	r19,16(sp)
10007468:	dc800317 	ldw	r18,12(sp)
1000746c:	dc400217 	ldw	r17,8(sp)
10007470:	dc000117 	ldw	r16,4(sp)
10007474:	dec00b04 	addi	sp,sp,44
10007478:	f800283a 	ret
1000747c:	a809883a 	mov	r4,r21
10007480:	800b883a 	mov	r5,r16
10007484:	0004e2c0 	call	10004e2c <__swsetup_r>
10007488:	1000f01e 	bne	r2,zero,1000784c <__sfvwrite_r+0x4c8>
1000748c:	8080030b 	ldhu	r2,12(r16)
10007490:	a4400017 	ldw	r17,0(r20)
10007494:	10c0008c 	andi	r3,r2,2
10007498:	18ffffcc 	andi	r3,r3,65535
1000749c:	18e0001c 	xori	r3,r3,32768
100074a0:	18e00004 	addi	r3,r3,-32768
100074a4:	183fd51e 	bne	r3,zero,100073fc <__alt_data_end+0xf80073fc>
100074a8:	10c0004c 	andi	r3,r2,1
100074ac:	002d883a 	mov	r22,zero
100074b0:	1800381e 	bne	r3,zero,10007594 <__sfvwrite_r+0x210>
100074b4:	0025883a 	mov	r18,zero
100074b8:	90002126 	beq	r18,zero,10007540 <__sfvwrite_r+0x1bc>
100074bc:	10c0800c 	andi	r3,r2,512
100074c0:	18ffffcc 	andi	r3,r3,65535
100074c4:	18e0001c 	xori	r3,r3,32768
100074c8:	18e00004 	addi	r3,r3,-32768
100074cc:	84c00217 	ldw	r19,8(r16)
100074d0:	18006b26 	beq	r3,zero,10007680 <__sfvwrite_r+0x2fc>
100074d4:	980f883a 	mov	r7,r19
100074d8:	94c08636 	bltu	r18,r19,100076f4 <__sfvwrite_r+0x370>
100074dc:	10c1200c 	andi	r3,r2,1152
100074e0:	18009f1e 	bne	r3,zero,10007760 <__sfvwrite_r+0x3dc>
100074e4:	81000017 	ldw	r4,0(r16)
100074e8:	982f883a 	mov	r23,r19
100074ec:	9039883a 	mov	fp,r18
100074f0:	9027883a 	mov	r19,r18
100074f4:	380d883a 	mov	r6,r7
100074f8:	b00b883a 	mov	r5,r22
100074fc:	d9c00015 	stw	r7,0(sp)
10007500:	00087280 	call	10008728 <memmove>
10007504:	d9c00017 	ldw	r7,0(sp)
10007508:	81000217 	ldw	r4,8(r16)
1000750c:	80800017 	ldw	r2,0(r16)
10007510:	25efc83a 	sub	r23,r4,r23
10007514:	11cf883a 	add	r7,r2,r7
10007518:	85c00215 	stw	r23,8(r16)
1000751c:	81c00015 	stw	r7,0(r16)
10007520:	a0800217 	ldw	r2,8(r20)
10007524:	b72d883a 	add	r22,r22,fp
10007528:	9725c83a 	sub	r18,r18,fp
1000752c:	14e7c83a 	sub	r19,r2,r19
10007530:	a4c00215 	stw	r19,8(r20)
10007534:	983fc426 	beq	r19,zero,10007448 <__alt_data_end+0xf8007448>
10007538:	8080030b 	ldhu	r2,12(r16)
1000753c:	903fdf1e 	bne	r18,zero,100074bc <__alt_data_end+0xf80074bc>
10007540:	8d800017 	ldw	r22,0(r17)
10007544:	8c800117 	ldw	r18,4(r17)
10007548:	8c400204 	addi	r17,r17,8
1000754c:	003fda06 	br	100074b8 <__alt_data_end+0xf80074b8>
10007550:	8cc00017 	ldw	r19,0(r17)
10007554:	8c800117 	ldw	r18,4(r17)
10007558:	8c400204 	addi	r17,r17,8
1000755c:	003faa06 	br	10007408 <__alt_data_end+0xf8007408>
10007560:	0009b8c0 	call	10009b8c <_realloc_r>
10007564:	102f883a 	mov	r23,r2
10007568:	10009f1e 	bne	r2,zero,100077e8 <__sfvwrite_r+0x464>
1000756c:	81400417 	ldw	r5,16(r16)
10007570:	a809883a 	mov	r4,r21
10007574:	00070b40 	call	100070b4 <_free_r>
10007578:	00800304 	movi	r2,12
1000757c:	a8800015 	stw	r2,0(r21)
10007580:	80c0030b 	ldhu	r3,12(r16)
10007584:	00bfffc4 	movi	r2,-1
10007588:	18c01014 	ori	r3,r3,64
1000758c:	80c0030d 	sth	r3,12(r16)
10007590:	003fae06 	br	1000744c <__alt_data_end+0xf800744c>
10007594:	0007883a 	mov	r3,zero
10007598:	0039883a 	mov	fp,zero
1000759c:	0025883a 	mov	r18,zero
100075a0:	90001e26 	beq	r18,zero,1000761c <__sfvwrite_r+0x298>
100075a4:	18006526 	beq	r3,zero,1000773c <__sfvwrite_r+0x3b8>
100075a8:	b02f883a 	mov	r23,r22
100075ac:	9580012e 	bgeu	r18,r22,100075b4 <__sfvwrite_r+0x230>
100075b0:	902f883a 	mov	r23,r18
100075b4:	81000017 	ldw	r4,0(r16)
100075b8:	80800417 	ldw	r2,16(r16)
100075bc:	84c00217 	ldw	r19,8(r16)
100075c0:	81c00517 	ldw	r7,20(r16)
100075c4:	1100022e 	bgeu	r2,r4,100075d0 <__sfvwrite_r+0x24c>
100075c8:	99e7883a 	add	r19,r19,r7
100075cc:	9dc01816 	blt	r19,r23,10007630 <__sfvwrite_r+0x2ac>
100075d0:	b9c03b16 	blt	r23,r7,100076c0 <__sfvwrite_r+0x33c>
100075d4:	80800917 	ldw	r2,36(r16)
100075d8:	81400717 	ldw	r5,28(r16)
100075dc:	a809883a 	mov	r4,r21
100075e0:	d8c00015 	stw	r3,0(sp)
100075e4:	e00d883a 	mov	r6,fp
100075e8:	103ee83a 	callr	r2
100075ec:	1027883a 	mov	r19,r2
100075f0:	d8c00017 	ldw	r3,0(sp)
100075f4:	00bfe20e 	bge	zero,r2,10007580 <__alt_data_end+0xf8007580>
100075f8:	b4edc83a 	sub	r22,r22,r19
100075fc:	b0001a26 	beq	r22,zero,10007668 <__sfvwrite_r+0x2e4>
10007600:	a0800217 	ldw	r2,8(r20)
10007604:	e4f9883a 	add	fp,fp,r19
10007608:	94e5c83a 	sub	r18,r18,r19
1000760c:	14e7c83a 	sub	r19,r2,r19
10007610:	a4c00215 	stw	r19,8(r20)
10007614:	983f8c26 	beq	r19,zero,10007448 <__alt_data_end+0xf8007448>
10007618:	903fe21e 	bne	r18,zero,100075a4 <__alt_data_end+0xf80075a4>
1000761c:	8f000017 	ldw	fp,0(r17)
10007620:	8c800117 	ldw	r18,4(r17)
10007624:	0007883a 	mov	r3,zero
10007628:	8c400204 	addi	r17,r17,8
1000762c:	003fdc06 	br	100075a0 <__alt_data_end+0xf80075a0>
10007630:	e00b883a 	mov	r5,fp
10007634:	980d883a 	mov	r6,r19
10007638:	d8c00015 	stw	r3,0(sp)
1000763c:	00087280 	call	10008728 <memmove>
10007640:	80800017 	ldw	r2,0(r16)
10007644:	a809883a 	mov	r4,r21
10007648:	800b883a 	mov	r5,r16
1000764c:	14c5883a 	add	r2,r2,r19
10007650:	80800015 	stw	r2,0(r16)
10007654:	00067f80 	call	100067f8 <_fflush_r>
10007658:	d8c00017 	ldw	r3,0(sp)
1000765c:	103fc81e 	bne	r2,zero,10007580 <__alt_data_end+0xf8007580>
10007660:	b4edc83a 	sub	r22,r22,r19
10007664:	b03fe61e 	bne	r22,zero,10007600 <__alt_data_end+0xf8007600>
10007668:	a809883a 	mov	r4,r21
1000766c:	800b883a 	mov	r5,r16
10007670:	00067f80 	call	100067f8 <_fflush_r>
10007674:	103fc21e 	bne	r2,zero,10007580 <__alt_data_end+0xf8007580>
10007678:	0007883a 	mov	r3,zero
1000767c:	003fe006 	br	10007600 <__alt_data_end+0xf8007600>
10007680:	81000017 	ldw	r4,0(r16)
10007684:	80800417 	ldw	r2,16(r16)
10007688:	1100022e 	bgeu	r2,r4,10007694 <__sfvwrite_r+0x310>
1000768c:	9839883a 	mov	fp,r19
10007690:	9c806036 	bltu	r19,r18,10007814 <__sfvwrite_r+0x490>
10007694:	81c00517 	ldw	r7,20(r16)
10007698:	91c01c36 	bltu	r18,r7,1000770c <__sfvwrite_r+0x388>
1000769c:	80800917 	ldw	r2,36(r16)
100076a0:	81400717 	ldw	r5,28(r16)
100076a4:	a809883a 	mov	r4,r21
100076a8:	b00d883a 	mov	r6,r22
100076ac:	103ee83a 	callr	r2
100076b0:	1027883a 	mov	r19,r2
100076b4:	00bfb20e 	bge	zero,r2,10007580 <__alt_data_end+0xf8007580>
100076b8:	1039883a 	mov	fp,r2
100076bc:	003f9806 	br	10007520 <__alt_data_end+0xf8007520>
100076c0:	b80d883a 	mov	r6,r23
100076c4:	e00b883a 	mov	r5,fp
100076c8:	d8c00015 	stw	r3,0(sp)
100076cc:	00087280 	call	10008728 <memmove>
100076d0:	80800217 	ldw	r2,8(r16)
100076d4:	81000017 	ldw	r4,0(r16)
100076d8:	b827883a 	mov	r19,r23
100076dc:	15c5c83a 	sub	r2,r2,r23
100076e0:	25ef883a 	add	r23,r4,r23
100076e4:	80800215 	stw	r2,8(r16)
100076e8:	85c00015 	stw	r23,0(r16)
100076ec:	d8c00017 	ldw	r3,0(sp)
100076f0:	003fc106 	br	100075f8 <__alt_data_end+0xf80075f8>
100076f4:	81000017 	ldw	r4,0(r16)
100076f8:	902f883a 	mov	r23,r18
100076fc:	9039883a 	mov	fp,r18
10007700:	9027883a 	mov	r19,r18
10007704:	900f883a 	mov	r7,r18
10007708:	003f7a06 	br	100074f4 <__alt_data_end+0xf80074f4>
1000770c:	b00b883a 	mov	r5,r22
10007710:	900d883a 	mov	r6,r18
10007714:	00087280 	call	10008728 <memmove>
10007718:	80c00217 	ldw	r3,8(r16)
1000771c:	80800017 	ldw	r2,0(r16)
10007720:	9027883a 	mov	r19,r18
10007724:	1c87c83a 	sub	r3,r3,r18
10007728:	1485883a 	add	r2,r2,r18
1000772c:	80c00215 	stw	r3,8(r16)
10007730:	80800015 	stw	r2,0(r16)
10007734:	9039883a 	mov	fp,r18
10007738:	003f7906 	br	10007520 <__alt_data_end+0xf8007520>
1000773c:	e009883a 	mov	r4,fp
10007740:	01400284 	movi	r5,10
10007744:	900d883a 	mov	r6,r18
10007748:	00084f00 	call	100084f0 <memchr>
1000774c:	10003c26 	beq	r2,zero,10007840 <__sfvwrite_r+0x4bc>
10007750:	15800044 	addi	r22,r2,1
10007754:	b72dc83a 	sub	r22,r22,fp
10007758:	00c00044 	movi	r3,1
1000775c:	003f9206 	br	100075a8 <__alt_data_end+0xf80075a8>
10007760:	81000517 	ldw	r4,20(r16)
10007764:	81400417 	ldw	r5,16(r16)
10007768:	80c00017 	ldw	r3,0(r16)
1000776c:	210d883a 	add	r6,r4,r4
10007770:	3109883a 	add	r4,r6,r4
10007774:	2026d7fa 	srli	r19,r4,31
10007778:	1979c83a 	sub	fp,r3,r5
1000777c:	e1800044 	addi	r6,fp,1
10007780:	9909883a 	add	r4,r19,r4
10007784:	2027d07a 	srai	r19,r4,1
10007788:	3489883a 	add	r4,r6,r18
1000778c:	980d883a 	mov	r6,r19
10007790:	9900022e 	bgeu	r19,r4,1000779c <__sfvwrite_r+0x418>
10007794:	2027883a 	mov	r19,r4
10007798:	200d883a 	mov	r6,r4
1000779c:	1081000c 	andi	r2,r2,1024
100077a0:	10bfffcc 	andi	r2,r2,65535
100077a4:	10a0001c 	xori	r2,r2,32768
100077a8:	10a00004 	addi	r2,r2,-32768
100077ac:	a809883a 	mov	r4,r21
100077b0:	103f6b26 	beq	r2,zero,10007560 <__alt_data_end+0xf8007560>
100077b4:	300b883a 	mov	r5,r6
100077b8:	0007c840 	call	10007c84 <_malloc_r>
100077bc:	102f883a 	mov	r23,r2
100077c0:	103f6d26 	beq	r2,zero,10007578 <__alt_data_end+0xf8007578>
100077c4:	81400417 	ldw	r5,16(r16)
100077c8:	1009883a 	mov	r4,r2
100077cc:	e00d883a 	mov	r6,fp
100077d0:	00085e80 	call	100085e8 <memcpy>
100077d4:	8080030b 	ldhu	r2,12(r16)
100077d8:	00fedfc4 	movi	r3,-1153
100077dc:	10c4703a 	and	r2,r2,r3
100077e0:	10802014 	ori	r2,r2,128
100077e4:	8080030d 	sth	r2,12(r16)
100077e8:	bf09883a 	add	r4,r23,fp
100077ec:	9f07c83a 	sub	r3,r19,fp
100077f0:	85c00415 	stw	r23,16(r16)
100077f4:	84c00515 	stw	r19,20(r16)
100077f8:	81000015 	stw	r4,0(r16)
100077fc:	902f883a 	mov	r23,r18
10007800:	80c00215 	stw	r3,8(r16)
10007804:	9039883a 	mov	fp,r18
10007808:	9027883a 	mov	r19,r18
1000780c:	900f883a 	mov	r7,r18
10007810:	003f3806 	br	100074f4 <__alt_data_end+0xf80074f4>
10007814:	b00b883a 	mov	r5,r22
10007818:	980d883a 	mov	r6,r19
1000781c:	00087280 	call	10008728 <memmove>
10007820:	80800017 	ldw	r2,0(r16)
10007824:	a809883a 	mov	r4,r21
10007828:	800b883a 	mov	r5,r16
1000782c:	14c5883a 	add	r2,r2,r19
10007830:	80800015 	stw	r2,0(r16)
10007834:	00067f80 	call	100067f8 <_fflush_r>
10007838:	103f3926 	beq	r2,zero,10007520 <__alt_data_end+0xf8007520>
1000783c:	003f5006 	br	10007580 <__alt_data_end+0xf8007580>
10007840:	95800044 	addi	r22,r18,1
10007844:	00c00044 	movi	r3,1
10007848:	003f5706 	br	100075a8 <__alt_data_end+0xf80075a8>
1000784c:	80c0030b 	ldhu	r3,12(r16)
10007850:	00bfffc4 	movi	r2,-1
10007854:	18c01014 	ori	r3,r3,64
10007858:	80c0030d 	sth	r3,12(r16)
1000785c:	00c00244 	movi	r3,9
10007860:	a8c00015 	stw	r3,0(r21)
10007864:	003ef906 	br	1000744c <__alt_data_end+0xf800744c>

10007868 <_fwalk>:
10007868:	defff904 	addi	sp,sp,-28
1000786c:	dcc00315 	stw	r19,12(sp)
10007870:	24c0b804 	addi	r19,r4,736
10007874:	dd400515 	stw	r21,20(sp)
10007878:	dd000415 	stw	r20,16(sp)
1000787c:	dfc00615 	stw	ra,24(sp)
10007880:	dc800215 	stw	r18,8(sp)
10007884:	dc400115 	stw	r17,4(sp)
10007888:	dc000015 	stw	r16,0(sp)
1000788c:	282b883a 	mov	r21,r5
10007890:	0029883a 	mov	r20,zero
10007894:	0006cbc0 	call	10006cbc <__sfp_lock_acquire>
10007898:	98001226 	beq	r19,zero,100078e4 <_fwalk+0x7c>
1000789c:	04bfffc4 	movi	r18,-1
100078a0:	9c400117 	ldw	r17,4(r19)
100078a4:	9c000217 	ldw	r16,8(r19)
100078a8:	8c7fffc4 	addi	r17,r17,-1
100078ac:	88000b16 	blt	r17,zero,100078dc <_fwalk+0x74>
100078b0:	84000304 	addi	r16,r16,12
100078b4:	80c0000f 	ldh	r3,0(r16)
100078b8:	8c7fffc4 	addi	r17,r17,-1
100078bc:	813ffd04 	addi	r4,r16,-12
100078c0:	18000426 	beq	r3,zero,100078d4 <_fwalk+0x6c>
100078c4:	80c0008f 	ldh	r3,2(r16)
100078c8:	1c800226 	beq	r3,r18,100078d4 <_fwalk+0x6c>
100078cc:	a83ee83a 	callr	r21
100078d0:	a0a8b03a 	or	r20,r20,r2
100078d4:	84001704 	addi	r16,r16,92
100078d8:	8cbff61e 	bne	r17,r18,100078b4 <__alt_data_end+0xf80078b4>
100078dc:	9cc00017 	ldw	r19,0(r19)
100078e0:	983fef1e 	bne	r19,zero,100078a0 <__alt_data_end+0xf80078a0>
100078e4:	0006cc00 	call	10006cc0 <__sfp_lock_release>
100078e8:	a005883a 	mov	r2,r20
100078ec:	dfc00617 	ldw	ra,24(sp)
100078f0:	dd400517 	ldw	r21,20(sp)
100078f4:	dd000417 	ldw	r20,16(sp)
100078f8:	dcc00317 	ldw	r19,12(sp)
100078fc:	dc800217 	ldw	r18,8(sp)
10007900:	dc400117 	ldw	r17,4(sp)
10007904:	dc000017 	ldw	r16,0(sp)
10007908:	dec00704 	addi	sp,sp,28
1000790c:	f800283a 	ret

10007910 <_fwalk_reent>:
10007910:	defff804 	addi	sp,sp,-32
10007914:	dcc00315 	stw	r19,12(sp)
10007918:	24c0b804 	addi	r19,r4,736
1000791c:	dd800615 	stw	r22,24(sp)
10007920:	dd400515 	stw	r21,20(sp)
10007924:	dd000415 	stw	r20,16(sp)
10007928:	dfc00715 	stw	ra,28(sp)
1000792c:	dc800215 	stw	r18,8(sp)
10007930:	dc400115 	stw	r17,4(sp)
10007934:	dc000015 	stw	r16,0(sp)
10007938:	2029883a 	mov	r20,r4
1000793c:	282b883a 	mov	r21,r5
10007940:	002d883a 	mov	r22,zero
10007944:	0006cbc0 	call	10006cbc <__sfp_lock_acquire>
10007948:	98001326 	beq	r19,zero,10007998 <_fwalk_reent+0x88>
1000794c:	04bfffc4 	movi	r18,-1
10007950:	9c400117 	ldw	r17,4(r19)
10007954:	9c000217 	ldw	r16,8(r19)
10007958:	8c7fffc4 	addi	r17,r17,-1
1000795c:	88000c16 	blt	r17,zero,10007990 <_fwalk_reent+0x80>
10007960:	84000304 	addi	r16,r16,12
10007964:	80c0000f 	ldh	r3,0(r16)
10007968:	8c7fffc4 	addi	r17,r17,-1
1000796c:	817ffd04 	addi	r5,r16,-12
10007970:	18000526 	beq	r3,zero,10007988 <_fwalk_reent+0x78>
10007974:	80c0008f 	ldh	r3,2(r16)
10007978:	a009883a 	mov	r4,r20
1000797c:	1c800226 	beq	r3,r18,10007988 <_fwalk_reent+0x78>
10007980:	a83ee83a 	callr	r21
10007984:	b0acb03a 	or	r22,r22,r2
10007988:	84001704 	addi	r16,r16,92
1000798c:	8cbff51e 	bne	r17,r18,10007964 <__alt_data_end+0xf8007964>
10007990:	9cc00017 	ldw	r19,0(r19)
10007994:	983fee1e 	bne	r19,zero,10007950 <__alt_data_end+0xf8007950>
10007998:	0006cc00 	call	10006cc0 <__sfp_lock_release>
1000799c:	b005883a 	mov	r2,r22
100079a0:	dfc00717 	ldw	ra,28(sp)
100079a4:	dd800617 	ldw	r22,24(sp)
100079a8:	dd400517 	ldw	r21,20(sp)
100079ac:	dd000417 	ldw	r20,16(sp)
100079b0:	dcc00317 	ldw	r19,12(sp)
100079b4:	dc800217 	ldw	r18,8(sp)
100079b8:	dc400117 	ldw	r17,4(sp)
100079bc:	dc000017 	ldw	r16,0(sp)
100079c0:	dec00804 	addi	sp,sp,32
100079c4:	f800283a 	ret

100079c8 <iswspace>:
100079c8:	00803fc4 	movi	r2,255
100079cc:	11000a36 	bltu	r2,r4,100079f8 <iswspace+0x30>
100079d0:	00840074 	movhi	r2,4097
100079d4:	10936504 	addi	r2,r2,19860
100079d8:	10800017 	ldw	r2,0(r2)
100079dc:	1109883a 	add	r4,r2,r4
100079e0:	20800003 	ldbu	r2,0(r4)
100079e4:	1080020c 	andi	r2,r2,8
100079e8:	10803fcc 	andi	r2,r2,255
100079ec:	1080201c 	xori	r2,r2,128
100079f0:	10bfe004 	addi	r2,r2,-128
100079f4:	f800283a 	ret
100079f8:	0005883a 	mov	r2,zero
100079fc:	f800283a 	ret

10007a00 <_setlocale_r>:
10007a00:	defffc04 	addi	sp,sp,-16
10007a04:	dc800215 	stw	r18,8(sp)
10007a08:	dc400115 	stw	r17,4(sp)
10007a0c:	dc000015 	stw	r16,0(sp)
10007a10:	dfc00315 	stw	ra,12(sp)
10007a14:	3021883a 	mov	r16,r6
10007a18:	2023883a 	mov	r17,r4
10007a1c:	2825883a 	mov	r18,r5
10007a20:	30001626 	beq	r6,zero,10007a7c <_setlocale_r+0x7c>
10007a24:	3009883a 	mov	r4,r6
10007a28:	01440074 	movhi	r5,4097
10007a2c:	294b8904 	addi	r5,r5,11812
10007a30:	000a7280 	call	1000a728 <strcmp>
10007a34:	10000a1e 	bne	r2,zero,10007a60 <_setlocale_r+0x60>
10007a38:	8c800c15 	stw	r18,48(r17)
10007a3c:	8c000d15 	stw	r16,52(r17)
10007a40:	00840074 	movhi	r2,4097
10007a44:	108b8904 	addi	r2,r2,11812
10007a48:	dfc00317 	ldw	ra,12(sp)
10007a4c:	dc800217 	ldw	r18,8(sp)
10007a50:	dc400117 	ldw	r17,4(sp)
10007a54:	dc000017 	ldw	r16,0(sp)
10007a58:	dec00404 	addi	sp,sp,16
10007a5c:	f800283a 	ret
10007a60:	8009883a 	mov	r4,r16
10007a64:	01440074 	movhi	r5,4097
10007a68:	294ac904 	addi	r5,r5,11044
10007a6c:	000a7280 	call	1000a728 <strcmp>
10007a70:	103ff126 	beq	r2,zero,10007a38 <__alt_data_end+0xf8007a38>
10007a74:	0005883a 	mov	r2,zero
10007a78:	003ff306 	br	10007a48 <__alt_data_end+0xf8007a48>
10007a7c:	00840074 	movhi	r2,4097
10007a80:	108b8904 	addi	r2,r2,11812
10007a84:	dfc00317 	ldw	ra,12(sp)
10007a88:	dc800217 	ldw	r18,8(sp)
10007a8c:	dc400117 	ldw	r17,4(sp)
10007a90:	dc000017 	ldw	r16,0(sp)
10007a94:	dec00404 	addi	sp,sp,16
10007a98:	f800283a 	ret

10007a9c <__locale_charset>:
10007a9c:	00840074 	movhi	r2,4097
10007aa0:	108b8a04 	addi	r2,r2,11816
10007aa4:	f800283a 	ret

10007aa8 <_localeconv_r>:
10007aa8:	00840074 	movhi	r2,4097
10007aac:	108b8e04 	addi	r2,r2,11832
10007ab0:	f800283a 	ret

10007ab4 <setlocale>:
10007ab4:	00c40074 	movhi	r3,4097
10007ab8:	18d36704 	addi	r3,r3,19868
10007abc:	2005883a 	mov	r2,r4
10007ac0:	19000017 	ldw	r4,0(r3)
10007ac4:	280d883a 	mov	r6,r5
10007ac8:	100b883a 	mov	r5,r2
10007acc:	0007a001 	jmpi	10007a00 <_setlocale_r>

10007ad0 <localeconv>:
10007ad0:	00840074 	movhi	r2,4097
10007ad4:	108b8e04 	addi	r2,r2,11832
10007ad8:	f800283a 	ret

10007adc <__smakebuf_r>:
10007adc:	2880030b 	ldhu	r2,12(r5)
10007ae0:	deffed04 	addi	sp,sp,-76
10007ae4:	dc401015 	stw	r17,64(sp)
10007ae8:	10c0008c 	andi	r3,r2,2
10007aec:	18ffffcc 	andi	r3,r3,65535
10007af0:	18e0001c 	xori	r3,r3,32768
10007af4:	dc000f15 	stw	r16,60(sp)
10007af8:	dfc01215 	stw	ra,72(sp)
10007afc:	dc801115 	stw	r18,68(sp)
10007b00:	18e00004 	addi	r3,r3,-32768
10007b04:	2821883a 	mov	r16,r5
10007b08:	2023883a 	mov	r17,r4
10007b0c:	1800381e 	bne	r3,zero,10007bf0 <__smakebuf_r+0x114>
10007b10:	2940038f 	ldh	r5,14(r5)
10007b14:	28002d16 	blt	r5,zero,10007bcc <__smakebuf_r+0xf0>
10007b18:	d80d883a 	mov	r6,sp
10007b1c:	000d1500 	call	1000d150 <_fstat_r>
10007b20:	10002916 	blt	r2,zero,10007bc8 <__smakebuf_r+0xec>
10007b24:	d8800117 	ldw	r2,4(sp)
10007b28:	00e00014 	movui	r3,32768
10007b2c:	10bc000c 	andi	r2,r2,61440
10007b30:	10c03c26 	beq	r2,r3,10007c24 <__smakebuf_r+0x148>
10007b34:	80c0030b 	ldhu	r3,12(r16)
10007b38:	18c20014 	ori	r3,r3,2048
10007b3c:	80c0030d 	sth	r3,12(r16)
10007b40:	00c80004 	movi	r3,8192
10007b44:	10c00c1e 	bne	r2,r3,10007b78 <__smakebuf_r+0x9c>
10007b48:	8140038f 	ldh	r5,14(r16)
10007b4c:	8809883a 	mov	r4,r17
10007b50:	000dd5c0 	call	1000dd5c <_isatty_r>
10007b54:	10000826 	beq	r2,zero,10007b78 <__smakebuf_r+0x9c>
10007b58:	80c0030b 	ldhu	r3,12(r16)
10007b5c:	808010c4 	addi	r2,r16,67
10007b60:	80800015 	stw	r2,0(r16)
10007b64:	18c00054 	ori	r3,r3,1
10007b68:	80800415 	stw	r2,16(r16)
10007b6c:	00800044 	movi	r2,1
10007b70:	80c0030d 	sth	r3,12(r16)
10007b74:	80800515 	stw	r2,20(r16)
10007b78:	04810004 	movi	r18,1024
10007b7c:	8809883a 	mov	r4,r17
10007b80:	900b883a 	mov	r5,r18
10007b84:	0007c840 	call	10007c84 <_malloc_r>
10007b88:	10003026 	beq	r2,zero,10007c4c <__smakebuf_r+0x170>
10007b8c:	80c0030b 	ldhu	r3,12(r16)
10007b90:	01040034 	movhi	r4,4096
10007b94:	211a8804 	addi	r4,r4,27168
10007b98:	89000f15 	stw	r4,60(r17)
10007b9c:	18c02014 	ori	r3,r3,128
10007ba0:	80c0030d 	sth	r3,12(r16)
10007ba4:	80800015 	stw	r2,0(r16)
10007ba8:	80800415 	stw	r2,16(r16)
10007bac:	84800515 	stw	r18,20(r16)
10007bb0:	dfc01217 	ldw	ra,72(sp)
10007bb4:	dc801117 	ldw	r18,68(sp)
10007bb8:	dc401017 	ldw	r17,64(sp)
10007bbc:	dc000f17 	ldw	r16,60(sp)
10007bc0:	dec01304 	addi	sp,sp,76
10007bc4:	f800283a 	ret
10007bc8:	8080030b 	ldhu	r2,12(r16)
10007bcc:	10c0200c 	andi	r3,r2,128
10007bd0:	18ffffcc 	andi	r3,r3,65535
10007bd4:	18e0001c 	xori	r3,r3,32768
10007bd8:	18e00004 	addi	r3,r3,-32768
10007bdc:	18000f1e 	bne	r3,zero,10007c1c <__smakebuf_r+0x140>
10007be0:	04810004 	movi	r18,1024
10007be4:	10820014 	ori	r2,r2,2048
10007be8:	8080030d 	sth	r2,12(r16)
10007bec:	003fe306 	br	10007b7c <__alt_data_end+0xf8007b7c>
10007bf0:	288010c4 	addi	r2,r5,67
10007bf4:	28800015 	stw	r2,0(r5)
10007bf8:	28800415 	stw	r2,16(r5)
10007bfc:	00800044 	movi	r2,1
10007c00:	28800515 	stw	r2,20(r5)
10007c04:	dfc01217 	ldw	ra,72(sp)
10007c08:	dc801117 	ldw	r18,68(sp)
10007c0c:	dc401017 	ldw	r17,64(sp)
10007c10:	dc000f17 	ldw	r16,60(sp)
10007c14:	dec01304 	addi	sp,sp,76
10007c18:	f800283a 	ret
10007c1c:	04801004 	movi	r18,64
10007c20:	003ff006 	br	10007be4 <__alt_data_end+0xf8007be4>
10007c24:	81000a17 	ldw	r4,40(r16)
10007c28:	00c40074 	movhi	r3,4097
10007c2c:	18e9b104 	addi	r3,r3,-22844
10007c30:	20ffc01e 	bne	r4,r3,10007b34 <__alt_data_end+0xf8007b34>
10007c34:	8080030b 	ldhu	r2,12(r16)
10007c38:	00c10004 	movi	r3,1024
10007c3c:	80c01315 	stw	r3,76(r16)
10007c40:	10c4b03a 	or	r2,r2,r3
10007c44:	8080030d 	sth	r2,12(r16)
10007c48:	003fcb06 	br	10007b78 <__alt_data_end+0xf8007b78>
10007c4c:	8080030b 	ldhu	r2,12(r16)
10007c50:	10c0800c 	andi	r3,r2,512
10007c54:	18ffffcc 	andi	r3,r3,65535
10007c58:	18e0001c 	xori	r3,r3,32768
10007c5c:	18e00004 	addi	r3,r3,-32768
10007c60:	183fd31e 	bne	r3,zero,10007bb0 <__alt_data_end+0xf8007bb0>
10007c64:	10800094 	ori	r2,r2,2
10007c68:	80c010c4 	addi	r3,r16,67
10007c6c:	8080030d 	sth	r2,12(r16)
10007c70:	00800044 	movi	r2,1
10007c74:	80c00015 	stw	r3,0(r16)
10007c78:	80c00415 	stw	r3,16(r16)
10007c7c:	80800515 	stw	r2,20(r16)
10007c80:	003fcb06 	br	10007bb0 <__alt_data_end+0xf8007bb0>

10007c84 <_malloc_r>:
10007c84:	defff604 	addi	sp,sp,-40
10007c88:	dc800215 	stw	r18,8(sp)
10007c8c:	dfc00915 	stw	ra,36(sp)
10007c90:	df000815 	stw	fp,32(sp)
10007c94:	ddc00715 	stw	r23,28(sp)
10007c98:	dd800615 	stw	r22,24(sp)
10007c9c:	dd400515 	stw	r21,20(sp)
10007ca0:	dd000415 	stw	r20,16(sp)
10007ca4:	dcc00315 	stw	r19,12(sp)
10007ca8:	dc400115 	stw	r17,4(sp)
10007cac:	dc000015 	stw	r16,0(sp)
10007cb0:	288002c4 	addi	r2,r5,11
10007cb4:	00c00584 	movi	r3,22
10007cb8:	2025883a 	mov	r18,r4
10007cbc:	18802b2e 	bgeu	r3,r2,10007d6c <_malloc_r+0xe8>
10007cc0:	047ffe04 	movi	r17,-8
10007cc4:	1462703a 	and	r17,r2,r17
10007cc8:	88002a16 	blt	r17,zero,10007d74 <_malloc_r+0xf0>
10007ccc:	89402936 	bltu	r17,r5,10007d74 <_malloc_r+0xf0>
10007cd0:	9009883a 	mov	r4,r18
10007cd4:	00109600 	call	10010960 <__malloc_lock>
10007cd8:	00807dc4 	movi	r2,503
10007cdc:	14402936 	bltu	r2,r17,10007d84 <_malloc_r+0x100>
10007ce0:	8808d0fa 	srli	r4,r17,3
10007ce4:	04c40074 	movhi	r19,4097
10007ce8:	9ccdd704 	addi	r19,r19,14172
10007cec:	2105883a 	add	r2,r4,r4
10007cf0:	1085883a 	add	r2,r2,r2
10007cf4:	1085883a 	add	r2,r2,r2
10007cf8:	9885883a 	add	r2,r19,r2
10007cfc:	14000317 	ldw	r16,12(r2)
10007d00:	80815526 	beq	r16,r2,10008258 <_malloc_r+0x5d4>
10007d04:	81000117 	ldw	r4,4(r16)
10007d08:	00bfff04 	movi	r2,-4
10007d0c:	80c00317 	ldw	r3,12(r16)
10007d10:	2084703a 	and	r2,r4,r2
10007d14:	8085883a 	add	r2,r16,r2
10007d18:	11800117 	ldw	r6,4(r2)
10007d1c:	81400217 	ldw	r5,8(r16)
10007d20:	9009883a 	mov	r4,r18
10007d24:	31800054 	ori	r6,r6,1
10007d28:	11800115 	stw	r6,4(r2)
10007d2c:	28c00315 	stw	r3,12(r5)
10007d30:	19400215 	stw	r5,8(r3)
10007d34:	00109800 	call	10010980 <__malloc_unlock>
10007d38:	80800204 	addi	r2,r16,8
10007d3c:	dfc00917 	ldw	ra,36(sp)
10007d40:	df000817 	ldw	fp,32(sp)
10007d44:	ddc00717 	ldw	r23,28(sp)
10007d48:	dd800617 	ldw	r22,24(sp)
10007d4c:	dd400517 	ldw	r21,20(sp)
10007d50:	dd000417 	ldw	r20,16(sp)
10007d54:	dcc00317 	ldw	r19,12(sp)
10007d58:	dc800217 	ldw	r18,8(sp)
10007d5c:	dc400117 	ldw	r17,4(sp)
10007d60:	dc000017 	ldw	r16,0(sp)
10007d64:	dec00a04 	addi	sp,sp,40
10007d68:	f800283a 	ret
10007d6c:	04400404 	movi	r17,16
10007d70:	897fd72e 	bgeu	r17,r5,10007cd0 <__alt_data_end+0xf8007cd0>
10007d74:	00800304 	movi	r2,12
10007d78:	90800015 	stw	r2,0(r18)
10007d7c:	0005883a 	mov	r2,zero
10007d80:	003fee06 	br	10007d3c <__alt_data_end+0xf8007d3c>
10007d84:	8808d27a 	srli	r4,r17,9
10007d88:	20007126 	beq	r4,zero,10007f50 <_malloc_r+0x2cc>
10007d8c:	00800104 	movi	r2,4
10007d90:	1100eb36 	bltu	r2,r4,10008140 <_malloc_r+0x4bc>
10007d94:	8808d1ba 	srli	r4,r17,6
10007d98:	21000e04 	addi	r4,r4,56
10007d9c:	210b883a 	add	r5,r4,r4
10007da0:	294b883a 	add	r5,r5,r5
10007da4:	294b883a 	add	r5,r5,r5
10007da8:	04c40074 	movhi	r19,4097
10007dac:	9ccdd704 	addi	r19,r19,14172
10007db0:	994b883a 	add	r5,r19,r5
10007db4:	2c000317 	ldw	r16,12(r5)
10007db8:	2c000e26 	beq	r5,r16,10007df4 <_malloc_r+0x170>
10007dbc:	80c00117 	ldw	r3,4(r16)
10007dc0:	01ffff04 	movi	r7,-4
10007dc4:	018003c4 	movi	r6,15
10007dc8:	19c6703a 	and	r3,r3,r7
10007dcc:	1c45c83a 	sub	r2,r3,r17
10007dd0:	30800716 	blt	r6,r2,10007df0 <_malloc_r+0x16c>
10007dd4:	1000610e 	bge	r2,zero,10007f5c <_malloc_r+0x2d8>
10007dd8:	84000317 	ldw	r16,12(r16)
10007ddc:	2c000526 	beq	r5,r16,10007df4 <_malloc_r+0x170>
10007de0:	80c00117 	ldw	r3,4(r16)
10007de4:	19c6703a 	and	r3,r3,r7
10007de8:	1c45c83a 	sub	r2,r3,r17
10007dec:	30bff90e 	bge	r6,r2,10007dd4 <__alt_data_end+0xf8007dd4>
10007df0:	213fffc4 	addi	r4,r4,-1
10007df4:	21000044 	addi	r4,r4,1
10007df8:	9c000417 	ldw	r16,16(r19)
10007dfc:	00c40074 	movhi	r3,4097
10007e00:	18cdd704 	addi	r3,r3,14172
10007e04:	1a400204 	addi	r9,r3,8
10007e08:	8240ff26 	beq	r16,r9,10008208 <_malloc_r+0x584>
10007e0c:	81400117 	ldw	r5,4(r16)
10007e10:	00bfff04 	movi	r2,-4
10007e14:	018003c4 	movi	r6,15
10007e18:	2884703a 	and	r2,r5,r2
10007e1c:	144bc83a 	sub	r5,r2,r17
10007e20:	3140ea16 	blt	r6,r5,100081cc <_malloc_r+0x548>
10007e24:	1a400515 	stw	r9,20(r3)
10007e28:	1a400415 	stw	r9,16(r3)
10007e2c:	2800570e 	bge	r5,zero,10007f8c <_malloc_r+0x308>
10007e30:	01407fc4 	movi	r5,511
10007e34:	2880ca36 	bltu	r5,r2,10008160 <_malloc_r+0x4dc>
10007e38:	1004d0fa 	srli	r2,r2,3
10007e3c:	02000044 	movi	r8,1
10007e40:	19c00117 	ldw	r7,4(r3)
10007e44:	108b883a 	add	r5,r2,r2
10007e48:	294b883a 	add	r5,r5,r5
10007e4c:	1005d0ba 	srai	r2,r2,2
10007e50:	294b883a 	add	r5,r5,r5
10007e54:	28cb883a 	add	r5,r5,r3
10007e58:	29800217 	ldw	r6,8(r5)
10007e5c:	4084983a 	sll	r2,r8,r2
10007e60:	81400315 	stw	r5,12(r16)
10007e64:	81800215 	stw	r6,8(r16)
10007e68:	11c4b03a 	or	r2,r2,r7
10007e6c:	18800115 	stw	r2,4(r3)
10007e70:	2c000215 	stw	r16,8(r5)
10007e74:	34000315 	stw	r16,12(r6)
10007e78:	200bd0ba 	srai	r5,r4,2
10007e7c:	00c00044 	movi	r3,1
10007e80:	194a983a 	sll	r5,r3,r5
10007e84:	11404936 	bltu	r2,r5,10007fac <_malloc_r+0x328>
10007e88:	1146703a 	and	r3,r2,r5
10007e8c:	18000a1e 	bne	r3,zero,10007eb8 <_malloc_r+0x234>
10007e90:	00ffff04 	movi	r3,-4
10007e94:	294b883a 	add	r5,r5,r5
10007e98:	20c8703a 	and	r4,r4,r3
10007e9c:	1146703a 	and	r3,r2,r5
10007ea0:	21000104 	addi	r4,r4,4
10007ea4:	1800041e 	bne	r3,zero,10007eb8 <_malloc_r+0x234>
10007ea8:	294b883a 	add	r5,r5,r5
10007eac:	1146703a 	and	r3,r2,r5
10007eb0:	21000104 	addi	r4,r4,4
10007eb4:	183ffc26 	beq	r3,zero,10007ea8 <__alt_data_end+0xf8007ea8>
10007eb8:	023fff04 	movi	r8,-4
10007ebc:	01c003c4 	movi	r7,15
10007ec0:	2105883a 	add	r2,r4,r4
10007ec4:	1085883a 	add	r2,r2,r2
10007ec8:	1085883a 	add	r2,r2,r2
10007ecc:	9899883a 	add	r12,r19,r2
10007ed0:	62800304 	addi	r10,r12,12
10007ed4:	2017883a 	mov	r11,r4
10007ed8:	54000017 	ldw	r16,0(r10)
10007edc:	51bffd04 	addi	r6,r10,-12
10007ee0:	8180041e 	bne	r16,r6,10007ef4 <_malloc_r+0x270>
10007ee4:	0000ca06 	br	10008210 <_malloc_r+0x58c>
10007ee8:	10001c0e 	bge	r2,zero,10007f5c <_malloc_r+0x2d8>
10007eec:	84000317 	ldw	r16,12(r16)
10007ef0:	8180c726 	beq	r16,r6,10008210 <_malloc_r+0x58c>
10007ef4:	80c00117 	ldw	r3,4(r16)
10007ef8:	1a06703a 	and	r3,r3,r8
10007efc:	1c45c83a 	sub	r2,r3,r17
10007f00:	38bff90e 	bge	r7,r2,10007ee8 <__alt_data_end+0xf8007ee8>
10007f04:	81000317 	ldw	r4,12(r16)
10007f08:	81400217 	ldw	r5,8(r16)
10007f0c:	8447883a 	add	r3,r16,r17
10007f10:	8c400054 	ori	r17,r17,1
10007f14:	29000315 	stw	r4,12(r5)
10007f18:	21400215 	stw	r5,8(r4)
10007f1c:	84400115 	stw	r17,4(r16)
10007f20:	1889883a 	add	r4,r3,r2
10007f24:	11400054 	ori	r5,r2,1
10007f28:	98c00515 	stw	r3,20(r19)
10007f2c:	98c00415 	stw	r3,16(r19)
10007f30:	20800015 	stw	r2,0(r4)
10007f34:	1a400315 	stw	r9,12(r3)
10007f38:	1a400215 	stw	r9,8(r3)
10007f3c:	19400115 	stw	r5,4(r3)
10007f40:	9009883a 	mov	r4,r18
10007f44:	00109800 	call	10010980 <__malloc_unlock>
10007f48:	80800204 	addi	r2,r16,8
10007f4c:	003f7b06 	br	10007d3c <__alt_data_end+0xf8007d3c>
10007f50:	8808d0fa 	srli	r4,r17,3
10007f54:	210b883a 	add	r5,r4,r4
10007f58:	003f9106 	br	10007da0 <__alt_data_end+0xf8007da0>
10007f5c:	80c7883a 	add	r3,r16,r3
10007f60:	19400117 	ldw	r5,4(r3)
10007f64:	80800317 	ldw	r2,12(r16)
10007f68:	81000217 	ldw	r4,8(r16)
10007f6c:	29400054 	ori	r5,r5,1
10007f70:	19400115 	stw	r5,4(r3)
10007f74:	20800315 	stw	r2,12(r4)
10007f78:	11000215 	stw	r4,8(r2)
10007f7c:	9009883a 	mov	r4,r18
10007f80:	00109800 	call	10010980 <__malloc_unlock>
10007f84:	80800204 	addi	r2,r16,8
10007f88:	003f6c06 	br	10007d3c <__alt_data_end+0xf8007d3c>
10007f8c:	8085883a 	add	r2,r16,r2
10007f90:	10c00117 	ldw	r3,4(r2)
10007f94:	9009883a 	mov	r4,r18
10007f98:	18c00054 	ori	r3,r3,1
10007f9c:	10c00115 	stw	r3,4(r2)
10007fa0:	00109800 	call	10010980 <__malloc_unlock>
10007fa4:	80800204 	addi	r2,r16,8
10007fa8:	003f6406 	br	10007d3c <__alt_data_end+0xf8007d3c>
10007fac:	9c000217 	ldw	r16,8(r19)
10007fb0:	00bfff04 	movi	r2,-4
10007fb4:	85400117 	ldw	r21,4(r16)
10007fb8:	a8aa703a 	and	r21,r21,r2
10007fbc:	ac400336 	bltu	r21,r17,10007fcc <_malloc_r+0x348>
10007fc0:	ac45c83a 	sub	r2,r21,r17
10007fc4:	00c003c4 	movi	r3,15
10007fc8:	18805316 	blt	r3,r2,10008118 <_malloc_r+0x494>
10007fcc:	d5e74017 	ldw	r23,-25344(gp)
10007fd0:	d0e00417 	ldw	r3,-32752(gp)
10007fd4:	00bfffc4 	movi	r2,-1
10007fd8:	8579883a 	add	fp,r16,r21
10007fdc:	8def883a 	add	r23,r17,r23
10007fe0:	1880d226 	beq	r3,r2,1000832c <_malloc_r+0x6a8>
10007fe4:	bdc403c4 	addi	r23,r23,4111
10007fe8:	00bc0004 	movi	r2,-4096
10007fec:	b8ae703a 	and	r23,r23,r2
10007ff0:	9009883a 	mov	r4,r18
10007ff4:	b80b883a 	mov	r5,r23
10007ff8:	000a3f40 	call	1000a3f4 <_sbrk_r>
10007ffc:	1029883a 	mov	r20,r2
10008000:	00bfffc4 	movi	r2,-1
10008004:	a080d126 	beq	r20,r2,1000834c <_malloc_r+0x6c8>
10008008:	a7009f36 	bltu	r20,fp,10008288 <_malloc_r+0x604>
1000800c:	05840074 	movhi	r22,4097
10008010:	b59aad04 	addi	r22,r22,27316
10008014:	b0800017 	ldw	r2,0(r22)
10008018:	b885883a 	add	r2,r23,r2
1000801c:	b0800015 	stw	r2,0(r22)
10008020:	e500cf26 	beq	fp,r20,10008360 <_malloc_r+0x6dc>
10008024:	d1200417 	ldw	r4,-32752(gp)
10008028:	00ffffc4 	movi	r3,-1
1000802c:	20c0e026 	beq	r4,r3,100083b0 <_malloc_r+0x72c>
10008030:	a739c83a 	sub	fp,r20,fp
10008034:	1705883a 	add	r2,r2,fp
10008038:	b0800015 	stw	r2,0(r22)
1000803c:	a08001cc 	andi	r2,r20,7
10008040:	1000a526 	beq	r2,zero,100082d8 <_malloc_r+0x654>
10008044:	a0a9c83a 	sub	r20,r20,r2
10008048:	00c40204 	movi	r3,4104
1000804c:	a5000204 	addi	r20,r20,8
10008050:	1885c83a 	sub	r2,r3,r2
10008054:	a5c7883a 	add	r3,r20,r23
10008058:	18c3ffcc 	andi	r3,r3,4095
1000805c:	10efc83a 	sub	r23,r2,r3
10008060:	9009883a 	mov	r4,r18
10008064:	b80b883a 	mov	r5,r23
10008068:	000a3f40 	call	1000a3f4 <_sbrk_r>
1000806c:	00ffffc4 	movi	r3,-1
10008070:	10c0cc26 	beq	r2,r3,100083a4 <_malloc_r+0x720>
10008074:	1505c83a 	sub	r2,r2,r20
10008078:	b887883a 	add	r3,r23,r2
1000807c:	18c00054 	ori	r3,r3,1
10008080:	b0800017 	ldw	r2,0(r22)
10008084:	9d000215 	stw	r20,8(r19)
10008088:	a0c00115 	stw	r3,4(r20)
1000808c:	b885883a 	add	r2,r23,r2
10008090:	b0800015 	stw	r2,0(r22)
10008094:	84c00e26 	beq	r16,r19,100080d0 <_malloc_r+0x44c>
10008098:	00c003c4 	movi	r3,15
1000809c:	1d40902e 	bgeu	r3,r21,100082e0 <_malloc_r+0x65c>
100080a0:	ad7ffd04 	addi	r21,r21,-12
100080a4:	013ffe04 	movi	r4,-8
100080a8:	a908703a 	and	r4,r21,r4
100080ac:	810b883a 	add	r5,r16,r4
100080b0:	01800144 	movi	r6,5
100080b4:	29800115 	stw	r6,4(r5)
100080b8:	29800215 	stw	r6,8(r5)
100080bc:	81400117 	ldw	r5,4(r16)
100080c0:	2940004c 	andi	r5,r5,1
100080c4:	214ab03a 	or	r5,r4,r5
100080c8:	81400115 	stw	r5,4(r16)
100080cc:	1900ae36 	bltu	r3,r4,10008388 <_malloc_r+0x704>
100080d0:	d0e73f17 	ldw	r3,-25348(gp)
100080d4:	1880012e 	bgeu	r3,r2,100080dc <_malloc_r+0x458>
100080d8:	d0a73f15 	stw	r2,-25348(gp)
100080dc:	d0e73e17 	ldw	r3,-25352(gp)
100080e0:	9c000217 	ldw	r16,8(r19)
100080e4:	1880012e 	bgeu	r3,r2,100080ec <_malloc_r+0x468>
100080e8:	d0a73e15 	stw	r2,-25352(gp)
100080ec:	80c00117 	ldw	r3,4(r16)
100080f0:	00bfff04 	movi	r2,-4
100080f4:	1886703a 	and	r3,r3,r2
100080f8:	1c45c83a 	sub	r2,r3,r17
100080fc:	1c400236 	bltu	r3,r17,10008108 <_malloc_r+0x484>
10008100:	00c003c4 	movi	r3,15
10008104:	18800416 	blt	r3,r2,10008118 <_malloc_r+0x494>
10008108:	9009883a 	mov	r4,r18
1000810c:	00109800 	call	10010980 <__malloc_unlock>
10008110:	0005883a 	mov	r2,zero
10008114:	003f0906 	br	10007d3c <__alt_data_end+0xf8007d3c>
10008118:	88c00054 	ori	r3,r17,1
1000811c:	10800054 	ori	r2,r2,1
10008120:	80c00115 	stw	r3,4(r16)
10008124:	8463883a 	add	r17,r16,r17
10008128:	88800115 	stw	r2,4(r17)
1000812c:	9009883a 	mov	r4,r18
10008130:	9c400215 	stw	r17,8(r19)
10008134:	00109800 	call	10010980 <__malloc_unlock>
10008138:	80800204 	addi	r2,r16,8
1000813c:	003eff06 	br	10007d3c <__alt_data_end+0xf8007d3c>
10008140:	00800504 	movi	r2,20
10008144:	1100492e 	bgeu	r2,r4,1000826c <_malloc_r+0x5e8>
10008148:	00801504 	movi	r2,84
1000814c:	11005c36 	bltu	r2,r4,100082c0 <_malloc_r+0x63c>
10008150:	8808d33a 	srli	r4,r17,12
10008154:	21001b84 	addi	r4,r4,110
10008158:	210b883a 	add	r5,r4,r4
1000815c:	003f1006 	br	10007da0 <__alt_data_end+0xf8007da0>
10008160:	1006d27a 	srli	r3,r2,9
10008164:	01400104 	movi	r5,4
10008168:	28c0432e 	bgeu	r5,r3,10008278 <_malloc_r+0x5f4>
1000816c:	01400504 	movi	r5,20
10008170:	28c07036 	bltu	r5,r3,10008334 <_malloc_r+0x6b0>
10008174:	194016c4 	addi	r5,r3,91
10008178:	294d883a 	add	r6,r5,r5
1000817c:	318d883a 	add	r6,r6,r6
10008180:	318d883a 	add	r6,r6,r6
10008184:	998d883a 	add	r6,r19,r6
10008188:	30c00217 	ldw	r3,8(r6)
1000818c:	01c40074 	movhi	r7,4097
10008190:	39cdd704 	addi	r7,r7,14172
10008194:	19805726 	beq	r3,r6,100082f4 <_malloc_r+0x670>
10008198:	01ffff04 	movi	r7,-4
1000819c:	19400117 	ldw	r5,4(r3)
100081a0:	29ca703a 	and	r5,r5,r7
100081a4:	1140022e 	bgeu	r2,r5,100081b0 <_malloc_r+0x52c>
100081a8:	18c00217 	ldw	r3,8(r3)
100081ac:	30fffb1e 	bne	r6,r3,1000819c <__alt_data_end+0xf800819c>
100081b0:	19400317 	ldw	r5,12(r3)
100081b4:	98800117 	ldw	r2,4(r19)
100081b8:	81400315 	stw	r5,12(r16)
100081bc:	80c00215 	stw	r3,8(r16)
100081c0:	2c000215 	stw	r16,8(r5)
100081c4:	1c000315 	stw	r16,12(r3)
100081c8:	003f2b06 	br	10007e78 <__alt_data_end+0xf8007e78>
100081cc:	8445883a 	add	r2,r16,r17
100081d0:	8c400054 	ori	r17,r17,1
100081d4:	18800515 	stw	r2,20(r3)
100081d8:	18800415 	stw	r2,16(r3)
100081dc:	29000054 	ori	r4,r5,1
100081e0:	1147883a 	add	r3,r2,r5
100081e4:	84400115 	stw	r17,4(r16)
100081e8:	11000115 	stw	r4,4(r2)
100081ec:	12400315 	stw	r9,12(r2)
100081f0:	12400215 	stw	r9,8(r2)
100081f4:	19400015 	stw	r5,0(r3)
100081f8:	9009883a 	mov	r4,r18
100081fc:	00109800 	call	10010980 <__malloc_unlock>
10008200:	80800204 	addi	r2,r16,8
10008204:	003ecd06 	br	10007d3c <__alt_data_end+0xf8007d3c>
10008208:	18800117 	ldw	r2,4(r3)
1000820c:	003f1a06 	br	10007e78 <__alt_data_end+0xf8007e78>
10008210:	5ac00044 	addi	r11,r11,1
10008214:	588000cc 	andi	r2,r11,3
10008218:	52800204 	addi	r10,r10,8
1000821c:	103f2e1e 	bne	r2,zero,10007ed8 <__alt_data_end+0xf8007ed8>
10008220:	20c000cc 	andi	r3,r4,3
10008224:	60bffe04 	addi	r2,r12,-8
10008228:	18006f26 	beq	r3,zero,100083e8 <_malloc_r+0x764>
1000822c:	63000017 	ldw	r12,0(r12)
10008230:	213fffc4 	addi	r4,r4,-1
10008234:	60bffa26 	beq	r12,r2,10008220 <__alt_data_end+0xf8008220>
10008238:	98800117 	ldw	r2,4(r19)
1000823c:	294b883a 	add	r5,r5,r5
10008240:	117f5a36 	bltu	r2,r5,10007fac <__alt_data_end+0xf8007fac>
10008244:	283f5926 	beq	r5,zero,10007fac <__alt_data_end+0xf8007fac>
10008248:	1146703a 	and	r3,r2,r5
1000824c:	18001626 	beq	r3,zero,100082a8 <_malloc_r+0x624>
10008250:	5809883a 	mov	r4,r11
10008254:	003f1a06 	br	10007ec0 <__alt_data_end+0xf8007ec0>
10008258:	80800204 	addi	r2,r16,8
1000825c:	84000517 	ldw	r16,20(r16)
10008260:	143ea81e 	bne	r2,r16,10007d04 <__alt_data_end+0xf8007d04>
10008264:	21000084 	addi	r4,r4,2
10008268:	003ee306 	br	10007df8 <__alt_data_end+0xf8007df8>
1000826c:	210016c4 	addi	r4,r4,91
10008270:	210b883a 	add	r5,r4,r4
10008274:	003eca06 	br	10007da0 <__alt_data_end+0xf8007da0>
10008278:	100ad1ba 	srli	r5,r2,6
1000827c:	29400e04 	addi	r5,r5,56
10008280:	294d883a 	add	r6,r5,r5
10008284:	003fbd06 	br	1000817c <__alt_data_end+0xf800817c>
10008288:	84ff6026 	beq	r16,r19,1000800c <__alt_data_end+0xf800800c>
1000828c:	00840074 	movhi	r2,4097
10008290:	108dd704 	addi	r2,r2,14172
10008294:	14000217 	ldw	r16,8(r2)
10008298:	00bfff04 	movi	r2,-4
1000829c:	80c00117 	ldw	r3,4(r16)
100082a0:	1886703a 	and	r3,r3,r2
100082a4:	003f9406 	br	100080f8 <__alt_data_end+0xf80080f8>
100082a8:	294b883a 	add	r5,r5,r5
100082ac:	1146703a 	and	r3,r2,r5
100082b0:	5ac00104 	addi	r11,r11,4
100082b4:	183ffc26 	beq	r3,zero,100082a8 <__alt_data_end+0xf80082a8>
100082b8:	5809883a 	mov	r4,r11
100082bc:	003f0006 	br	10007ec0 <__alt_data_end+0xf8007ec0>
100082c0:	00805504 	movi	r2,340
100082c4:	11001336 	bltu	r2,r4,10008314 <_malloc_r+0x690>
100082c8:	8808d3fa 	srli	r4,r17,15
100082cc:	21001dc4 	addi	r4,r4,119
100082d0:	210b883a 	add	r5,r4,r4
100082d4:	003eb206 	br	10007da0 <__alt_data_end+0xf8007da0>
100082d8:	00840004 	movi	r2,4096
100082dc:	003f5d06 	br	10008054 <__alt_data_end+0xf8008054>
100082e0:	00800044 	movi	r2,1
100082e4:	a0800115 	stw	r2,4(r20)
100082e8:	a021883a 	mov	r16,r20
100082ec:	0007883a 	mov	r3,zero
100082f0:	003f8106 	br	100080f8 <__alt_data_end+0xf80080f8>
100082f4:	280bd0ba 	srai	r5,r5,2
100082f8:	01800044 	movi	r6,1
100082fc:	38800117 	ldw	r2,4(r7)
10008300:	314c983a 	sll	r6,r6,r5
10008304:	180b883a 	mov	r5,r3
10008308:	3084b03a 	or	r2,r6,r2
1000830c:	38800115 	stw	r2,4(r7)
10008310:	003fa906 	br	100081b8 <__alt_data_end+0xf80081b8>
10008314:	00815504 	movi	r2,1364
10008318:	11001836 	bltu	r2,r4,1000837c <_malloc_r+0x6f8>
1000831c:	8808d4ba 	srli	r4,r17,18
10008320:	21001f04 	addi	r4,r4,124
10008324:	210b883a 	add	r5,r4,r4
10008328:	003e9d06 	br	10007da0 <__alt_data_end+0xf8007da0>
1000832c:	bdc00404 	addi	r23,r23,16
10008330:	003f2f06 	br	10007ff0 <__alt_data_end+0xf8007ff0>
10008334:	01401504 	movi	r5,84
10008338:	28c01f36 	bltu	r5,r3,100083b8 <_malloc_r+0x734>
1000833c:	100ad33a 	srli	r5,r2,12
10008340:	29401b84 	addi	r5,r5,110
10008344:	294d883a 	add	r6,r5,r5
10008348:	003f8c06 	br	1000817c <__alt_data_end+0xf800817c>
1000834c:	9c000217 	ldw	r16,8(r19)
10008350:	00bfff04 	movi	r2,-4
10008354:	80c00117 	ldw	r3,4(r16)
10008358:	1886703a 	and	r3,r3,r2
1000835c:	003f6606 	br	100080f8 <__alt_data_end+0xf80080f8>
10008360:	e0c3ffcc 	andi	r3,fp,4095
10008364:	183f2f1e 	bne	r3,zero,10008024 <__alt_data_end+0xf8008024>
10008368:	98c00217 	ldw	r3,8(r19)
1000836c:	bd49883a 	add	r4,r23,r21
10008370:	21000054 	ori	r4,r4,1
10008374:	19000115 	stw	r4,4(r3)
10008378:	003f5506 	br	100080d0 <__alt_data_end+0xf80080d0>
1000837c:	01403f04 	movi	r5,252
10008380:	01001f84 	movi	r4,126
10008384:	003e8606 	br	10007da0 <__alt_data_end+0xf8007da0>
10008388:	9009883a 	mov	r4,r18
1000838c:	81400204 	addi	r5,r16,8
10008390:	00070b40 	call	100070b4 <_free_r>
10008394:	00840074 	movhi	r2,4097
10008398:	109aad04 	addi	r2,r2,27316
1000839c:	10800017 	ldw	r2,0(r2)
100083a0:	003f4b06 	br	100080d0 <__alt_data_end+0xf80080d0>
100083a4:	00c00044 	movi	r3,1
100083a8:	002f883a 	mov	r23,zero
100083ac:	003f3406 	br	10008080 <__alt_data_end+0xf8008080>
100083b0:	d5200415 	stw	r20,-32752(gp)
100083b4:	003f2106 	br	1000803c <__alt_data_end+0xf800803c>
100083b8:	01405504 	movi	r5,340
100083bc:	28c00436 	bltu	r5,r3,100083d0 <_malloc_r+0x74c>
100083c0:	100ad3fa 	srli	r5,r2,15
100083c4:	29401dc4 	addi	r5,r5,119
100083c8:	294d883a 	add	r6,r5,r5
100083cc:	003f6b06 	br	1000817c <__alt_data_end+0xf800817c>
100083d0:	01415504 	movi	r5,1364
100083d4:	28c00936 	bltu	r5,r3,100083fc <_malloc_r+0x778>
100083d8:	100ad4ba 	srli	r5,r2,18
100083dc:	29401f04 	addi	r5,r5,124
100083e0:	294d883a 	add	r6,r5,r5
100083e4:	003f6506 	br	1000817c <__alt_data_end+0xf800817c>
100083e8:	98800117 	ldw	r2,4(r19)
100083ec:	0146303a 	nor	r3,zero,r5
100083f0:	1884703a 	and	r2,r3,r2
100083f4:	98800115 	stw	r2,4(r19)
100083f8:	003f9006 	br	1000823c <__alt_data_end+0xf800823c>
100083fc:	01803f04 	movi	r6,252
10008400:	01401f84 	movi	r5,126
10008404:	003f5d06 	br	1000817c <__alt_data_end+0xf800817c>

10008408 <_mbrtowc_r>:
10008408:	defffc04 	addi	sp,sp,-16
1000840c:	dc000115 	stw	r16,4(sp)
10008410:	dc000417 	ldw	r16,16(sp)
10008414:	dc400215 	stw	r17,8(sp)
10008418:	dfc00315 	stw	ra,12(sp)
1000841c:	dc000015 	stw	r16,0(sp)
10008420:	2023883a 	mov	r17,r4
10008424:	30000b26 	beq	r6,zero,10008454 <_mbrtowc_r+0x4c>
10008428:	00084ac0 	call	100084ac <_mbtowc_r>
1000842c:	00ffffc4 	movi	r3,-1
10008430:	10c0031e 	bne	r2,r3,10008440 <_mbrtowc_r+0x38>
10008434:	80000015 	stw	zero,0(r16)
10008438:	00c02284 	movi	r3,138
1000843c:	88c00015 	stw	r3,0(r17)
10008440:	dfc00317 	ldw	ra,12(sp)
10008444:	dc400217 	ldw	r17,8(sp)
10008448:	dc000117 	ldw	r16,4(sp)
1000844c:	dec00404 	addi	sp,sp,16
10008450:	f800283a 	ret
10008454:	000b883a 	mov	r5,zero
10008458:	01840074 	movhi	r6,4097
1000845c:	318ac904 	addi	r6,r6,11044
10008460:	01c00044 	movi	r7,1
10008464:	00084ac0 	call	100084ac <_mbtowc_r>
10008468:	003ff006 	br	1000842c <__alt_data_end+0xf800842c>

1000846c <mbrtowc>:
1000846c:	00840074 	movhi	r2,4097
10008470:	10936704 	addi	r2,r2,19868
10008474:	2011883a 	mov	r8,r4
10008478:	11000017 	ldw	r4,0(r2)
1000847c:	defffe04 	addi	sp,sp,-8
10008480:	2807883a 	mov	r3,r5
10008484:	3005883a 	mov	r2,r6
10008488:	d9c00015 	stw	r7,0(sp)
1000848c:	400b883a 	mov	r5,r8
10008490:	180d883a 	mov	r6,r3
10008494:	100f883a 	mov	r7,r2
10008498:	dfc00115 	stw	ra,4(sp)
1000849c:	00084080 	call	10008408 <_mbrtowc_r>
100084a0:	dfc00117 	ldw	ra,4(sp)
100084a4:	dec00204 	addi	sp,sp,8
100084a8:	f800283a 	ret

100084ac <_mbtowc_r>:
100084ac:	deffff04 	addi	sp,sp,-4
100084b0:	28000826 	beq	r5,zero,100084d4 <_mbtowc_r+0x28>
100084b4:	30000926 	beq	r6,zero,100084dc <_mbtowc_r+0x30>
100084b8:	38000b26 	beq	r7,zero,100084e8 <_mbtowc_r+0x3c>
100084bc:	30800003 	ldbu	r2,0(r6)
100084c0:	28800015 	stw	r2,0(r5)
100084c4:	30800003 	ldbu	r2,0(r6)
100084c8:	1004c03a 	cmpne	r2,r2,zero
100084cc:	dec00104 	addi	sp,sp,4
100084d0:	f800283a 	ret
100084d4:	d80b883a 	mov	r5,sp
100084d8:	303ff71e 	bne	r6,zero,100084b8 <__alt_data_end+0xf80084b8>
100084dc:	0005883a 	mov	r2,zero
100084e0:	dec00104 	addi	sp,sp,4
100084e4:	f800283a 	ret
100084e8:	00bfff84 	movi	r2,-2
100084ec:	003ff706 	br	100084cc <__alt_data_end+0xf80084cc>

100084f0 <memchr>:
100084f0:	008000c4 	movi	r2,3
100084f4:	29403fcc 	andi	r5,r5,255
100084f8:	1180282e 	bgeu	r2,r6,1000859c <memchr+0xac>
100084fc:	2086703a 	and	r3,r4,r2
10008500:	1800351e 	bne	r3,zero,100085d8 <memchr+0xe8>
10008504:	2816923a 	slli	r11,r5,8
10008508:	2093883a 	add	r9,r4,r2
1000850c:	22000084 	addi	r8,r4,2
10008510:	5957883a 	add	r11,r11,r5
10008514:	5816923a 	slli	r11,r11,8
10008518:	20c00044 	addi	r3,r4,1
1000851c:	037fbff4 	movhi	r13,65279
10008520:	6b7fbfc4 	addi	r13,r13,-257
10008524:	5957883a 	add	r11,r11,r5
10008528:	5816923a 	slli	r11,r11,8
1000852c:	03202074 	movhi	r12,32897
10008530:	63202004 	addi	r12,r12,-32640
10008534:	101d883a 	mov	r14,r2
10008538:	5957883a 	add	r11,r11,r5
1000853c:	21c00017 	ldw	r7,0(r4)
10008540:	31bfff04 	addi	r6,r6,-4
10008544:	1805883a 	mov	r2,r3
10008548:	3acef03a 	xor	r7,r7,r11
1000854c:	3b55883a 	add	r10,r7,r13
10008550:	01ce303a 	nor	r7,zero,r7
10008554:	51ce703a 	and	r7,r10,r7
10008558:	3b0e703a 	and	r7,r7,r12
1000855c:	38000a26 	beq	r7,zero,10008588 <memchr+0x98>
10008560:	21c00003 	ldbu	r7,0(r4)
10008564:	39401e26 	beq	r7,r5,100085e0 <memchr+0xf0>
10008568:	19c00003 	ldbu	r7,0(r3)
1000856c:	39401926 	beq	r7,r5,100085d4 <memchr+0xe4>
10008570:	41c00003 	ldbu	r7,0(r8)
10008574:	4005883a 	mov	r2,r8
10008578:	39401626 	beq	r7,r5,100085d4 <memchr+0xe4>
1000857c:	49c00003 	ldbu	r7,0(r9)
10008580:	4805883a 	mov	r2,r9
10008584:	39401326 	beq	r7,r5,100085d4 <memchr+0xe4>
10008588:	21000104 	addi	r4,r4,4
1000858c:	4a400104 	addi	r9,r9,4
10008590:	42000104 	addi	r8,r8,4
10008594:	18c00104 	addi	r3,r3,4
10008598:	71bfe836 	bltu	r14,r6,1000853c <__alt_data_end+0xf800853c>
1000859c:	2005883a 	mov	r2,r4
100085a0:	30000a26 	beq	r6,zero,100085cc <memchr+0xdc>
100085a4:	10c00003 	ldbu	r3,0(r2)
100085a8:	19400a26 	beq	r3,r5,100085d4 <memchr+0xe4>
100085ac:	10c00044 	addi	r3,r2,1
100085b0:	118d883a 	add	r6,r2,r6
100085b4:	00000306 	br	100085c4 <memchr+0xd4>
100085b8:	11000003 	ldbu	r4,0(r2)
100085bc:	18c00044 	addi	r3,r3,1
100085c0:	21400426 	beq	r4,r5,100085d4 <memchr+0xe4>
100085c4:	1805883a 	mov	r2,r3
100085c8:	19bffb1e 	bne	r3,r6,100085b8 <__alt_data_end+0xf80085b8>
100085cc:	0005883a 	mov	r2,zero
100085d0:	f800283a 	ret
100085d4:	f800283a 	ret
100085d8:	2005883a 	mov	r2,r4
100085dc:	003ff106 	br	100085a4 <__alt_data_end+0xf80085a4>
100085e0:	2005883a 	mov	r2,r4
100085e4:	f800283a 	ret

100085e8 <memcpy>:
100085e8:	defffb04 	addi	sp,sp,-20
100085ec:	dc000015 	stw	r16,0(sp)
100085f0:	dfc00415 	stw	ra,16(sp)
100085f4:	dcc00315 	stw	r19,12(sp)
100085f8:	dc800215 	stw	r18,8(sp)
100085fc:	dc400115 	stw	r17,4(sp)
10008600:	00c003c4 	movi	r3,15
10008604:	2021883a 	mov	r16,r4
10008608:	3005883a 	mov	r2,r6
1000860c:	1980032e 	bgeu	r3,r6,1000861c <memcpy+0x34>
10008610:	2906b03a 	or	r3,r5,r4
10008614:	18c000cc 	andi	r3,r3,3
10008618:	18001026 	beq	r3,zero,1000865c <memcpy+0x74>
1000861c:	8007883a 	mov	r3,r16
10008620:	288f883a 	add	r7,r5,r2
10008624:	10000526 	beq	r2,zero,1000863c <memcpy+0x54>
10008628:	29800003 	ldbu	r6,0(r5)
1000862c:	18c00044 	addi	r3,r3,1
10008630:	29400044 	addi	r5,r5,1
10008634:	19bfffc5 	stb	r6,-1(r3)
10008638:	29fffb1e 	bne	r5,r7,10008628 <__alt_data_end+0xf8008628>
1000863c:	8005883a 	mov	r2,r16
10008640:	dfc00417 	ldw	ra,16(sp)
10008644:	dcc00317 	ldw	r19,12(sp)
10008648:	dc800217 	ldw	r18,8(sp)
1000864c:	dc400117 	ldw	r17,4(sp)
10008650:	dc000017 	ldw	r16,0(sp)
10008654:	dec00504 	addi	sp,sp,20
10008658:	f800283a 	ret
1000865c:	32bffc04 	addi	r10,r6,-16
10008660:	5014d13a 	srli	r10,r10,4
10008664:	20800404 	addi	r2,r4,16
10008668:	2007883a 	mov	r3,r4
1000866c:	5008913a 	slli	r4,r10,4
10008670:	280f883a 	mov	r7,r5
10008674:	1105883a 	add	r2,r2,r4
10008678:	3a000017 	ldw	r8,0(r7)
1000867c:	18c00404 	addi	r3,r3,16
10008680:	39c00404 	addi	r7,r7,16
10008684:	1a3ffc15 	stw	r8,-16(r3)
10008688:	3a3ffd17 	ldw	r8,-12(r7)
1000868c:	1a3ffd15 	stw	r8,-12(r3)
10008690:	3a3ffe17 	ldw	r8,-8(r7)
10008694:	1a3ffe15 	stw	r8,-8(r3)
10008698:	3a3fff17 	ldw	r8,-4(r7)
1000869c:	1a3fff15 	stw	r8,-4(r3)
100086a0:	18bff51e 	bne	r3,r2,10008678 <__alt_data_end+0xf8008678>
100086a4:	52800044 	addi	r10,r10,1
100086a8:	5014913a 	slli	r10,r10,4
100086ac:	308003cc 	andi	r2,r6,15
100086b0:	010000c4 	movi	r4,3
100086b4:	8287883a 	add	r3,r16,r10
100086b8:	2a95883a 	add	r10,r5,r10
100086bc:	2080182e 	bgeu	r4,r2,10008720 <memcpy+0x138>
100086c0:	147fff04 	addi	r17,r2,-4
100086c4:	8808d0ba 	srli	r4,r17,2
100086c8:	1a400104 	addi	r9,r3,4
100086cc:	180d883a 	mov	r6,r3
100086d0:	2105883a 	add	r2,r4,r4
100086d4:	1085883a 	add	r2,r2,r2
100086d8:	4893883a 	add	r9,r9,r2
100086dc:	500f883a 	mov	r7,r10
100086e0:	3a000017 	ldw	r8,0(r7)
100086e4:	31800104 	addi	r6,r6,4
100086e8:	39c00104 	addi	r7,r7,4
100086ec:	323fff15 	stw	r8,-4(r6)
100086f0:	327ffb1e 	bne	r6,r9,100086e0 <__alt_data_end+0xf80086e0>
100086f4:	20800044 	addi	r2,r4,1
100086f8:	1085883a 	add	r2,r2,r2
100086fc:	1085883a 	add	r2,r2,r2
10008700:	017fff04 	movi	r5,-4
10008704:	18a5883a 	add	r18,r3,r2
10008708:	50a7883a 	add	r19,r10,r2
1000870c:	000158c0 	call	1000158c <__mulsi3>
10008710:	1445883a 	add	r2,r2,r17
10008714:	980b883a 	mov	r5,r19
10008718:	9007883a 	mov	r3,r18
1000871c:	003fc006 	br	10008620 <__alt_data_end+0xf8008620>
10008720:	500b883a 	mov	r5,r10
10008724:	003fbe06 	br	10008620 <__alt_data_end+0xf8008620>

10008728 <memmove>:
10008728:	defffb04 	addi	sp,sp,-20
1000872c:	dc000015 	stw	r16,0(sp)
10008730:	dfc00415 	stw	ra,16(sp)
10008734:	dcc00315 	stw	r19,12(sp)
10008738:	dc800215 	stw	r18,8(sp)
1000873c:	dc400115 	stw	r17,4(sp)
10008740:	2021883a 	mov	r16,r4
10008744:	300f883a 	mov	r7,r6
10008748:	2900122e 	bgeu	r5,r4,10008794 <memmove+0x6c>
1000874c:	2987883a 	add	r3,r5,r6
10008750:	20c0102e 	bgeu	r4,r3,10008794 <memmove+0x6c>
10008754:	218b883a 	add	r5,r4,r6
10008758:	1989c83a 	sub	r4,r3,r6
1000875c:	30000526 	beq	r6,zero,10008774 <memmove+0x4c>
10008760:	18ffffc4 	addi	r3,r3,-1
10008764:	18800003 	ldbu	r2,0(r3)
10008768:	297fffc4 	addi	r5,r5,-1
1000876c:	28800005 	stb	r2,0(r5)
10008770:	193ffb1e 	bne	r3,r4,10008760 <__alt_data_end+0xf8008760>
10008774:	8005883a 	mov	r2,r16
10008778:	dfc00417 	ldw	ra,16(sp)
1000877c:	dcc00317 	ldw	r19,12(sp)
10008780:	dc800217 	ldw	r18,8(sp)
10008784:	dc400117 	ldw	r17,4(sp)
10008788:	dc000017 	ldw	r16,0(sp)
1000878c:	dec00504 	addi	sp,sp,20
10008790:	f800283a 	ret
10008794:	008003c4 	movi	r2,15
10008798:	1180422e 	bgeu	r2,r6,100088a4 <memmove+0x17c>
1000879c:	2c04b03a 	or	r2,r5,r16
100087a0:	108000cc 	andi	r2,r2,3
100087a4:	10003f1e 	bne	r2,zero,100088a4 <memmove+0x17c>
100087a8:	32bffc04 	addi	r10,r6,-16
100087ac:	5014d13a 	srli	r10,r10,4
100087b0:	81000404 	addi	r4,r16,16
100087b4:	8007883a 	mov	r3,r16
100087b8:	5004913a 	slli	r2,r10,4
100087bc:	280f883a 	mov	r7,r5
100087c0:	2089883a 	add	r4,r4,r2
100087c4:	38800017 	ldw	r2,0(r7)
100087c8:	18c00404 	addi	r3,r3,16
100087cc:	39c00404 	addi	r7,r7,16
100087d0:	18bffc15 	stw	r2,-16(r3)
100087d4:	38bffd17 	ldw	r2,-12(r7)
100087d8:	18bffd15 	stw	r2,-12(r3)
100087dc:	38bffe17 	ldw	r2,-8(r7)
100087e0:	18bffe15 	stw	r2,-8(r3)
100087e4:	38bfff17 	ldw	r2,-4(r7)
100087e8:	18bfff15 	stw	r2,-4(r3)
100087ec:	193ff51e 	bne	r3,r4,100087c4 <__alt_data_end+0xf80087c4>
100087f0:	52800044 	addi	r10,r10,1
100087f4:	5014913a 	slli	r10,r10,4
100087f8:	31c003cc 	andi	r7,r6,15
100087fc:	008000c4 	movi	r2,3
10008800:	8287883a 	add	r3,r16,r10
10008804:	2a95883a 	add	r10,r5,r10
10008808:	11c0282e 	bgeu	r2,r7,100088ac <memmove+0x184>
1000880c:	3c7fff04 	addi	r17,r7,-4
10008810:	8808d0ba 	srli	r4,r17,2
10008814:	1a400104 	addi	r9,r3,4
10008818:	180d883a 	mov	r6,r3
1000881c:	2105883a 	add	r2,r4,r4
10008820:	1085883a 	add	r2,r2,r2
10008824:	4893883a 	add	r9,r9,r2
10008828:	5005883a 	mov	r2,r10
1000882c:	12000017 	ldw	r8,0(r2)
10008830:	31800104 	addi	r6,r6,4
10008834:	10800104 	addi	r2,r2,4
10008838:	323fff15 	stw	r8,-4(r6)
1000883c:	327ffb1e 	bne	r6,r9,1000882c <__alt_data_end+0xf800882c>
10008840:	20800044 	addi	r2,r4,1
10008844:	1085883a 	add	r2,r2,r2
10008848:	1085883a 	add	r2,r2,r2
1000884c:	017fff04 	movi	r5,-4
10008850:	18a5883a 	add	r18,r3,r2
10008854:	50a7883a 	add	r19,r10,r2
10008858:	000158c0 	call	1000158c <__mulsi3>
1000885c:	144f883a 	add	r7,r2,r17
10008860:	980b883a 	mov	r5,r19
10008864:	9007883a 	mov	r3,r18
10008868:	383fc226 	beq	r7,zero,10008774 <__alt_data_end+0xf8008774>
1000886c:	19cf883a 	add	r7,r3,r7
10008870:	29800003 	ldbu	r6,0(r5)
10008874:	18c00044 	addi	r3,r3,1
10008878:	29400044 	addi	r5,r5,1
1000887c:	19bfffc5 	stb	r6,-1(r3)
10008880:	19fffb1e 	bne	r3,r7,10008870 <__alt_data_end+0xf8008870>
10008884:	8005883a 	mov	r2,r16
10008888:	dfc00417 	ldw	ra,16(sp)
1000888c:	dcc00317 	ldw	r19,12(sp)
10008890:	dc800217 	ldw	r18,8(sp)
10008894:	dc400117 	ldw	r17,4(sp)
10008898:	dc000017 	ldw	r16,0(sp)
1000889c:	dec00504 	addi	sp,sp,20
100088a0:	f800283a 	ret
100088a4:	8007883a 	mov	r3,r16
100088a8:	003fef06 	br	10008868 <__alt_data_end+0xf8008868>
100088ac:	500b883a 	mov	r5,r10
100088b0:	003fed06 	br	10008868 <__alt_data_end+0xf8008868>

100088b4 <memset>:
100088b4:	00c000c4 	movi	r3,3
100088b8:	2005883a 	mov	r2,r4
100088bc:	29403fcc 	andi	r5,r5,255
100088c0:	19802d2e 	bgeu	r3,r6,10008978 <memset+0xc4>
100088c4:	20c6703a 	and	r3,r4,r3
100088c8:	18002e1e 	bne	r3,zero,10008984 <memset+0xd0>
100088cc:	2806923a 	slli	r3,r5,8
100088d0:	010003c4 	movi	r4,15
100088d4:	3011883a 	mov	r8,r6
100088d8:	1946b03a 	or	r3,r3,r5
100088dc:	180e943a 	slli	r7,r3,16
100088e0:	38ceb03a 	or	r7,r7,r3
100088e4:	1007883a 	mov	r3,r2
100088e8:	21800f2e 	bgeu	r4,r6,10008928 <memset+0x74>
100088ec:	19c00015 	stw	r7,0(r3)
100088f0:	19c00115 	stw	r7,4(r3)
100088f4:	19c00215 	stw	r7,8(r3)
100088f8:	19c00315 	stw	r7,12(r3)
100088fc:	423ffc04 	addi	r8,r8,-16
10008900:	18c00404 	addi	r3,r3,16
10008904:	223ff936 	bltu	r4,r8,100088ec <__alt_data_end+0xf80088ec>
10008908:	30fffc04 	addi	r3,r6,-16
1000890c:	1806d13a 	srli	r3,r3,4
10008910:	318003cc 	andi	r6,r6,15
10008914:	010000c4 	movi	r4,3
10008918:	18c00044 	addi	r3,r3,1
1000891c:	1806913a 	slli	r3,r3,4
10008920:	10c7883a 	add	r3,r2,r3
10008924:	21800e2e 	bgeu	r4,r6,10008960 <memset+0xac>
10008928:	1813883a 	mov	r9,r3
1000892c:	3011883a 	mov	r8,r6
10008930:	010000c4 	movi	r4,3
10008934:	49c00015 	stw	r7,0(r9)
10008938:	423fff04 	addi	r8,r8,-4
1000893c:	4a400104 	addi	r9,r9,4
10008940:	223ffc36 	bltu	r4,r8,10008934 <__alt_data_end+0xf8008934>
10008944:	313fff04 	addi	r4,r6,-4
10008948:	2008d0ba 	srli	r4,r4,2
1000894c:	318000cc 	andi	r6,r6,3
10008950:	21000044 	addi	r4,r4,1
10008954:	2109883a 	add	r4,r4,r4
10008958:	2109883a 	add	r4,r4,r4
1000895c:	1907883a 	add	r3,r3,r4
10008960:	30000a26 	beq	r6,zero,1000898c <memset+0xd8>
10008964:	198d883a 	add	r6,r3,r6
10008968:	19400005 	stb	r5,0(r3)
1000896c:	18c00044 	addi	r3,r3,1
10008970:	19bffd1e 	bne	r3,r6,10008968 <__alt_data_end+0xf8008968>
10008974:	f800283a 	ret
10008978:	2007883a 	mov	r3,r4
1000897c:	303ff91e 	bne	r6,zero,10008964 <__alt_data_end+0xf8008964>
10008980:	00000206 	br	1000898c <memset+0xd8>
10008984:	2007883a 	mov	r3,r4
10008988:	003ff606 	br	10008964 <__alt_data_end+0xf8008964>
1000898c:	f800283a 	ret

10008990 <_Balloc>:
10008990:	20801317 	ldw	r2,76(r4)
10008994:	defffc04 	addi	sp,sp,-16
10008998:	dc400115 	stw	r17,4(sp)
1000899c:	dc000015 	stw	r16,0(sp)
100089a0:	dfc00315 	stw	ra,12(sp)
100089a4:	dc800215 	stw	r18,8(sp)
100089a8:	2023883a 	mov	r17,r4
100089ac:	2821883a 	mov	r16,r5
100089b0:	10000f26 	beq	r2,zero,100089f0 <_Balloc+0x60>
100089b4:	8407883a 	add	r3,r16,r16
100089b8:	18c7883a 	add	r3,r3,r3
100089bc:	10c7883a 	add	r3,r2,r3
100089c0:	18800017 	ldw	r2,0(r3)
100089c4:	10001126 	beq	r2,zero,10008a0c <_Balloc+0x7c>
100089c8:	11000017 	ldw	r4,0(r2)
100089cc:	19000015 	stw	r4,0(r3)
100089d0:	10000415 	stw	zero,16(r2)
100089d4:	10000315 	stw	zero,12(r2)
100089d8:	dfc00317 	ldw	ra,12(sp)
100089dc:	dc800217 	ldw	r18,8(sp)
100089e0:	dc400117 	ldw	r17,4(sp)
100089e4:	dc000017 	ldw	r16,0(sp)
100089e8:	dec00404 	addi	sp,sp,16
100089ec:	f800283a 	ret
100089f0:	01400104 	movi	r5,4
100089f4:	01800404 	movi	r6,16
100089f8:	000ced00 	call	1000ced0 <_calloc_r>
100089fc:	88801315 	stw	r2,76(r17)
10008a00:	103fec1e 	bne	r2,zero,100089b4 <__alt_data_end+0xf80089b4>
10008a04:	0005883a 	mov	r2,zero
10008a08:	003ff306 	br	100089d8 <__alt_data_end+0xf80089d8>
10008a0c:	01400044 	movi	r5,1
10008a10:	2c24983a 	sll	r18,r5,r16
10008a14:	8809883a 	mov	r4,r17
10008a18:	91800144 	addi	r6,r18,5
10008a1c:	318d883a 	add	r6,r6,r6
10008a20:	318d883a 	add	r6,r6,r6
10008a24:	000ced00 	call	1000ced0 <_calloc_r>
10008a28:	103ff626 	beq	r2,zero,10008a04 <__alt_data_end+0xf8008a04>
10008a2c:	14000115 	stw	r16,4(r2)
10008a30:	14800215 	stw	r18,8(r2)
10008a34:	003fe606 	br	100089d0 <__alt_data_end+0xf80089d0>

10008a38 <_Bfree>:
10008a38:	28000826 	beq	r5,zero,10008a5c <_Bfree+0x24>
10008a3c:	28c00117 	ldw	r3,4(r5)
10008a40:	20801317 	ldw	r2,76(r4)
10008a44:	18c7883a 	add	r3,r3,r3
10008a48:	18c7883a 	add	r3,r3,r3
10008a4c:	10c5883a 	add	r2,r2,r3
10008a50:	10c00017 	ldw	r3,0(r2)
10008a54:	28c00015 	stw	r3,0(r5)
10008a58:	11400015 	stw	r5,0(r2)
10008a5c:	f800283a 	ret

10008a60 <__multadd>:
10008a60:	defff604 	addi	sp,sp,-40
10008a64:	dd400515 	stw	r21,20(sp)
10008a68:	2d400417 	ldw	r21,16(r5)
10008a6c:	df000815 	stw	fp,32(sp)
10008a70:	ddc00715 	stw	r23,28(sp)
10008a74:	dd800615 	stw	r22,24(sp)
10008a78:	dd000415 	stw	r20,16(sp)
10008a7c:	dc400115 	stw	r17,4(sp)
10008a80:	dc000015 	stw	r16,0(sp)
10008a84:	dfc00915 	stw	ra,36(sp)
10008a88:	dcc00315 	stw	r19,12(sp)
10008a8c:	dc800215 	stw	r18,8(sp)
10008a90:	282d883a 	mov	r22,r5
10008a94:	202f883a 	mov	r23,r4
10008a98:	3029883a 	mov	r20,r6
10008a9c:	3839883a 	mov	fp,r7
10008aa0:	2c000504 	addi	r16,r5,20
10008aa4:	0023883a 	mov	r17,zero
10008aa8:	84c00017 	ldw	r19,0(r16)
10008aac:	a00b883a 	mov	r5,r20
10008ab0:	8c400044 	addi	r17,r17,1
10008ab4:	993fffcc 	andi	r4,r19,65535
10008ab8:	000158c0 	call	1000158c <__mulsi3>
10008abc:	1725883a 	add	r18,r2,fp
10008ac0:	9808d43a 	srli	r4,r19,16
10008ac4:	9026d43a 	srli	r19,r18,16
10008ac8:	a00b883a 	mov	r5,r20
10008acc:	000158c0 	call	1000158c <__mulsi3>
10008ad0:	988f883a 	add	r7,r19,r2
10008ad4:	3804943a 	slli	r2,r7,16
10008ad8:	94bfffcc 	andi	r18,r18,65535
10008adc:	3838d43a 	srli	fp,r7,16
10008ae0:	14a5883a 	add	r18,r2,r18
10008ae4:	84800015 	stw	r18,0(r16)
10008ae8:	84000104 	addi	r16,r16,4
10008aec:	8d7fee16 	blt	r17,r21,10008aa8 <__alt_data_end+0xf8008aa8>
10008af0:	e0000926 	beq	fp,zero,10008b18 <__multadd+0xb8>
10008af4:	b0800217 	ldw	r2,8(r22)
10008af8:	a880140e 	bge	r21,r2,10008b4c <__multadd+0xec>
10008afc:	a8800144 	addi	r2,r21,5
10008b00:	1085883a 	add	r2,r2,r2
10008b04:	1085883a 	add	r2,r2,r2
10008b08:	b085883a 	add	r2,r22,r2
10008b0c:	ad400044 	addi	r21,r21,1
10008b10:	17000015 	stw	fp,0(r2)
10008b14:	b5400415 	stw	r21,16(r22)
10008b18:	b005883a 	mov	r2,r22
10008b1c:	dfc00917 	ldw	ra,36(sp)
10008b20:	df000817 	ldw	fp,32(sp)
10008b24:	ddc00717 	ldw	r23,28(sp)
10008b28:	dd800617 	ldw	r22,24(sp)
10008b2c:	dd400517 	ldw	r21,20(sp)
10008b30:	dd000417 	ldw	r20,16(sp)
10008b34:	dcc00317 	ldw	r19,12(sp)
10008b38:	dc800217 	ldw	r18,8(sp)
10008b3c:	dc400117 	ldw	r17,4(sp)
10008b40:	dc000017 	ldw	r16,0(sp)
10008b44:	dec00a04 	addi	sp,sp,40
10008b48:	f800283a 	ret
10008b4c:	b1400117 	ldw	r5,4(r22)
10008b50:	b809883a 	mov	r4,r23
10008b54:	29400044 	addi	r5,r5,1
10008b58:	00089900 	call	10008990 <_Balloc>
10008b5c:	b1800417 	ldw	r6,16(r22)
10008b60:	b1400304 	addi	r5,r22,12
10008b64:	11000304 	addi	r4,r2,12
10008b68:	31800084 	addi	r6,r6,2
10008b6c:	318d883a 	add	r6,r6,r6
10008b70:	318d883a 	add	r6,r6,r6
10008b74:	1021883a 	mov	r16,r2
10008b78:	00085e80 	call	100085e8 <memcpy>
10008b7c:	b0c00117 	ldw	r3,4(r22)
10008b80:	b8801317 	ldw	r2,76(r23)
10008b84:	18c7883a 	add	r3,r3,r3
10008b88:	18c7883a 	add	r3,r3,r3
10008b8c:	10c5883a 	add	r2,r2,r3
10008b90:	10c00017 	ldw	r3,0(r2)
10008b94:	b0c00015 	stw	r3,0(r22)
10008b98:	15800015 	stw	r22,0(r2)
10008b9c:	802d883a 	mov	r22,r16
10008ba0:	003fd606 	br	10008afc <__alt_data_end+0xf8008afc>

10008ba4 <__s2b>:
10008ba4:	defff904 	addi	sp,sp,-28
10008ba8:	dd000415 	stw	r20,16(sp)
10008bac:	dc400115 	stw	r17,4(sp)
10008bb0:	2829883a 	mov	r20,r5
10008bb4:	2023883a 	mov	r17,r4
10008bb8:	01400244 	movi	r5,9
10008bbc:	39000204 	addi	r4,r7,8
10008bc0:	dcc00315 	stw	r19,12(sp)
10008bc4:	dc800215 	stw	r18,8(sp)
10008bc8:	dfc00615 	stw	ra,24(sp)
10008bcc:	dd400515 	stw	r21,20(sp)
10008bd0:	dc000015 	stw	r16,0(sp)
10008bd4:	3825883a 	mov	r18,r7
10008bd8:	3027883a 	mov	r19,r6
10008bdc:	00014d00 	call	100014d0 <__divsi3>
10008be0:	00c00044 	movi	r3,1
10008be4:	000b883a 	mov	r5,zero
10008be8:	1880030e 	bge	r3,r2,10008bf8 <__s2b+0x54>
10008bec:	18c7883a 	add	r3,r3,r3
10008bf0:	29400044 	addi	r5,r5,1
10008bf4:	18bffd16 	blt	r3,r2,10008bec <__alt_data_end+0xf8008bec>
10008bf8:	8809883a 	mov	r4,r17
10008bfc:	00089900 	call	10008990 <_Balloc>
10008c00:	d8c00717 	ldw	r3,28(sp)
10008c04:	10c00515 	stw	r3,20(r2)
10008c08:	00c00044 	movi	r3,1
10008c0c:	10c00415 	stw	r3,16(r2)
10008c10:	00c00244 	movi	r3,9
10008c14:	1cc0210e 	bge	r3,r19,10008c9c <__s2b+0xf8>
10008c18:	a0eb883a 	add	r21,r20,r3
10008c1c:	a821883a 	mov	r16,r21
10008c20:	a4e9883a 	add	r20,r20,r19
10008c24:	81c00007 	ldb	r7,0(r16)
10008c28:	8809883a 	mov	r4,r17
10008c2c:	84000044 	addi	r16,r16,1
10008c30:	100b883a 	mov	r5,r2
10008c34:	01800284 	movi	r6,10
10008c38:	39fff404 	addi	r7,r7,-48
10008c3c:	0008a600 	call	10008a60 <__multadd>
10008c40:	853ff81e 	bne	r16,r20,10008c24 <__alt_data_end+0xf8008c24>
10008c44:	ace1883a 	add	r16,r21,r19
10008c48:	843ffe04 	addi	r16,r16,-8
10008c4c:	9c800a0e 	bge	r19,r18,10008c78 <__s2b+0xd4>
10008c50:	94e5c83a 	sub	r18,r18,r19
10008c54:	84a5883a 	add	r18,r16,r18
10008c58:	81c00007 	ldb	r7,0(r16)
10008c5c:	8809883a 	mov	r4,r17
10008c60:	84000044 	addi	r16,r16,1
10008c64:	100b883a 	mov	r5,r2
10008c68:	01800284 	movi	r6,10
10008c6c:	39fff404 	addi	r7,r7,-48
10008c70:	0008a600 	call	10008a60 <__multadd>
10008c74:	84bff81e 	bne	r16,r18,10008c58 <__alt_data_end+0xf8008c58>
10008c78:	dfc00617 	ldw	ra,24(sp)
10008c7c:	dd400517 	ldw	r21,20(sp)
10008c80:	dd000417 	ldw	r20,16(sp)
10008c84:	dcc00317 	ldw	r19,12(sp)
10008c88:	dc800217 	ldw	r18,8(sp)
10008c8c:	dc400117 	ldw	r17,4(sp)
10008c90:	dc000017 	ldw	r16,0(sp)
10008c94:	dec00704 	addi	sp,sp,28
10008c98:	f800283a 	ret
10008c9c:	a4000284 	addi	r16,r20,10
10008ca0:	1827883a 	mov	r19,r3
10008ca4:	003fe906 	br	10008c4c <__alt_data_end+0xf8008c4c>

10008ca8 <__hi0bits>:
10008ca8:	20bfffec 	andhi	r2,r4,65535
10008cac:	1000141e 	bne	r2,zero,10008d00 <__hi0bits+0x58>
10008cb0:	2008943a 	slli	r4,r4,16
10008cb4:	00800404 	movi	r2,16
10008cb8:	20ffc02c 	andhi	r3,r4,65280
10008cbc:	1800021e 	bne	r3,zero,10008cc8 <__hi0bits+0x20>
10008cc0:	2008923a 	slli	r4,r4,8
10008cc4:	10800204 	addi	r2,r2,8
10008cc8:	20fc002c 	andhi	r3,r4,61440
10008ccc:	1800021e 	bne	r3,zero,10008cd8 <__hi0bits+0x30>
10008cd0:	2008913a 	slli	r4,r4,4
10008cd4:	10800104 	addi	r2,r2,4
10008cd8:	20f0002c 	andhi	r3,r4,49152
10008cdc:	1800031e 	bne	r3,zero,10008cec <__hi0bits+0x44>
10008ce0:	2109883a 	add	r4,r4,r4
10008ce4:	10800084 	addi	r2,r2,2
10008ce8:	2109883a 	add	r4,r4,r4
10008cec:	20000316 	blt	r4,zero,10008cfc <__hi0bits+0x54>
10008cf0:	2110002c 	andhi	r4,r4,16384
10008cf4:	2000041e 	bne	r4,zero,10008d08 <__hi0bits+0x60>
10008cf8:	00800804 	movi	r2,32
10008cfc:	f800283a 	ret
10008d00:	0005883a 	mov	r2,zero
10008d04:	003fec06 	br	10008cb8 <__alt_data_end+0xf8008cb8>
10008d08:	10800044 	addi	r2,r2,1
10008d0c:	f800283a 	ret

10008d10 <__lo0bits>:
10008d10:	20c00017 	ldw	r3,0(r4)
10008d14:	188001cc 	andi	r2,r3,7
10008d18:	10000826 	beq	r2,zero,10008d3c <__lo0bits+0x2c>
10008d1c:	1880004c 	andi	r2,r3,1
10008d20:	1000211e 	bne	r2,zero,10008da8 <__lo0bits+0x98>
10008d24:	1880008c 	andi	r2,r3,2
10008d28:	1000211e 	bne	r2,zero,10008db0 <__lo0bits+0xa0>
10008d2c:	1806d0ba 	srli	r3,r3,2
10008d30:	00800084 	movi	r2,2
10008d34:	20c00015 	stw	r3,0(r4)
10008d38:	f800283a 	ret
10008d3c:	18bfffcc 	andi	r2,r3,65535
10008d40:	10001326 	beq	r2,zero,10008d90 <__lo0bits+0x80>
10008d44:	0005883a 	mov	r2,zero
10008d48:	19403fcc 	andi	r5,r3,255
10008d4c:	2800021e 	bne	r5,zero,10008d58 <__lo0bits+0x48>
10008d50:	1806d23a 	srli	r3,r3,8
10008d54:	10800204 	addi	r2,r2,8
10008d58:	194003cc 	andi	r5,r3,15
10008d5c:	2800021e 	bne	r5,zero,10008d68 <__lo0bits+0x58>
10008d60:	1806d13a 	srli	r3,r3,4
10008d64:	10800104 	addi	r2,r2,4
10008d68:	194000cc 	andi	r5,r3,3
10008d6c:	2800021e 	bne	r5,zero,10008d78 <__lo0bits+0x68>
10008d70:	1806d0ba 	srli	r3,r3,2
10008d74:	10800084 	addi	r2,r2,2
10008d78:	1940004c 	andi	r5,r3,1
10008d7c:	2800081e 	bne	r5,zero,10008da0 <__lo0bits+0x90>
10008d80:	1806d07a 	srli	r3,r3,1
10008d84:	1800051e 	bne	r3,zero,10008d9c <__lo0bits+0x8c>
10008d88:	00800804 	movi	r2,32
10008d8c:	f800283a 	ret
10008d90:	1806d43a 	srli	r3,r3,16
10008d94:	00800404 	movi	r2,16
10008d98:	003feb06 	br	10008d48 <__alt_data_end+0xf8008d48>
10008d9c:	10800044 	addi	r2,r2,1
10008da0:	20c00015 	stw	r3,0(r4)
10008da4:	f800283a 	ret
10008da8:	0005883a 	mov	r2,zero
10008dac:	f800283a 	ret
10008db0:	1806d07a 	srli	r3,r3,1
10008db4:	00800044 	movi	r2,1
10008db8:	20c00015 	stw	r3,0(r4)
10008dbc:	f800283a 	ret

10008dc0 <__i2b>:
10008dc0:	defffd04 	addi	sp,sp,-12
10008dc4:	dc000015 	stw	r16,0(sp)
10008dc8:	04000044 	movi	r16,1
10008dcc:	dc400115 	stw	r17,4(sp)
10008dd0:	2823883a 	mov	r17,r5
10008dd4:	800b883a 	mov	r5,r16
10008dd8:	dfc00215 	stw	ra,8(sp)
10008ddc:	00089900 	call	10008990 <_Balloc>
10008de0:	14400515 	stw	r17,20(r2)
10008de4:	14000415 	stw	r16,16(r2)
10008de8:	dfc00217 	ldw	ra,8(sp)
10008dec:	dc400117 	ldw	r17,4(sp)
10008df0:	dc000017 	ldw	r16,0(sp)
10008df4:	dec00304 	addi	sp,sp,12
10008df8:	f800283a 	ret

10008dfc <__multiply>:
10008dfc:	defff004 	addi	sp,sp,-64
10008e00:	dc800815 	stw	r18,32(sp)
10008e04:	dc400715 	stw	r17,28(sp)
10008e08:	34800417 	ldw	r18,16(r6)
10008e0c:	2c400417 	ldw	r17,16(r5)
10008e10:	ddc00d15 	stw	r23,52(sp)
10008e14:	dc000615 	stw	r16,24(sp)
10008e18:	dfc00f15 	stw	ra,60(sp)
10008e1c:	df000e15 	stw	fp,56(sp)
10008e20:	dd800c15 	stw	r22,48(sp)
10008e24:	dd400b15 	stw	r21,44(sp)
10008e28:	dd000a15 	stw	r20,40(sp)
10008e2c:	dcc00915 	stw	r19,36(sp)
10008e30:	2821883a 	mov	r16,r5
10008e34:	302f883a 	mov	r23,r6
10008e38:	8c80050e 	bge	r17,r18,10008e50 <__multiply+0x54>
10008e3c:	8807883a 	mov	r3,r17
10008e40:	3021883a 	mov	r16,r6
10008e44:	9023883a 	mov	r17,r18
10008e48:	282f883a 	mov	r23,r5
10008e4c:	1825883a 	mov	r18,r3
10008e50:	80800217 	ldw	r2,8(r16)
10008e54:	8c87883a 	add	r3,r17,r18
10008e58:	d8c00115 	stw	r3,4(sp)
10008e5c:	81400117 	ldw	r5,4(r16)
10008e60:	10c0010e 	bge	r2,r3,10008e68 <__multiply+0x6c>
10008e64:	29400044 	addi	r5,r5,1
10008e68:	00089900 	call	10008990 <_Balloc>
10008e6c:	d8c00117 	ldw	r3,4(sp)
10008e70:	d8800515 	stw	r2,20(sp)
10008e74:	14c00504 	addi	r19,r2,20
10008e78:	1d400144 	addi	r21,r3,5
10008e7c:	ad6b883a 	add	r21,r21,r21
10008e80:	ad6b883a 	add	r21,r21,r21
10008e84:	156b883a 	add	r21,r2,r21
10008e88:	dd400215 	stw	r21,8(sp)
10008e8c:	9805883a 	mov	r2,r19
10008e90:	9d40042e 	bgeu	r19,r21,10008ea4 <__multiply+0xa8>
10008e94:	d8c00217 	ldw	r3,8(sp)
10008e98:	10000015 	stw	zero,0(r2)
10008e9c:	10800104 	addi	r2,r2,4
10008ea0:	10fffc36 	bltu	r2,r3,10008e94 <__alt_data_end+0xf8008e94>
10008ea4:	94800144 	addi	r18,r18,5
10008ea8:	94a5883a 	add	r18,r18,r18
10008eac:	94ad883a 	add	r22,r18,r18
10008eb0:	8c400144 	addi	r17,r17,5
10008eb4:	8c63883a 	add	r17,r17,r17
10008eb8:	bdad883a 	add	r22,r23,r22
10008ebc:	80c00504 	addi	r3,r16,20
10008ec0:	8c63883a 	add	r17,r17,r17
10008ec4:	bc800504 	addi	r18,r23,20
10008ec8:	dd800315 	stw	r22,12(sp)
10008ecc:	d8c00415 	stw	r3,16(sp)
10008ed0:	dcc00015 	stw	r19,0(sp)
10008ed4:	8463883a 	add	r17,r16,r17
10008ed8:	9580412e 	bgeu	r18,r22,10008fe0 <__multiply+0x1e4>
10008edc:	90800017 	ldw	r2,0(r18)
10008ee0:	173fffcc 	andi	fp,r2,65535
10008ee4:	e0001a26 	beq	fp,zero,10008f50 <__multiply+0x154>
10008ee8:	dd000017 	ldw	r20,0(sp)
10008eec:	dd800417 	ldw	r22,16(sp)
10008ef0:	002b883a 	mov	r21,zero
10008ef4:	b4c00017 	ldw	r19,0(r22)
10008ef8:	a4000017 	ldw	r16,0(r20)
10008efc:	e00b883a 	mov	r5,fp
10008f00:	993fffcc 	andi	r4,r19,65535
10008f04:	000158c0 	call	1000158c <__mulsi3>
10008f08:	9808d43a 	srli	r4,r19,16
10008f0c:	817fffcc 	andi	r5,r16,65535
10008f10:	1145883a 	add	r2,r2,r5
10008f14:	e00b883a 	mov	r5,fp
10008f18:	1567883a 	add	r19,r2,r21
10008f1c:	8020d43a 	srli	r16,r16,16
10008f20:	000158c0 	call	1000158c <__mulsi3>
10008f24:	9808d43a 	srli	r4,r19,16
10008f28:	1405883a 	add	r2,r2,r16
10008f2c:	a4c0000d 	sth	r19,0(r20)
10008f30:	110f883a 	add	r7,r2,r4
10008f34:	a1c0008d 	sth	r7,2(r20)
10008f38:	b5800104 	addi	r22,r22,4
10008f3c:	382ad43a 	srli	r21,r7,16
10008f40:	a5000104 	addi	r20,r20,4
10008f44:	b47feb36 	bltu	r22,r17,10008ef4 <__alt_data_end+0xf8008ef4>
10008f48:	a5400015 	stw	r21,0(r20)
10008f4c:	90800017 	ldw	r2,0(r18)
10008f50:	1038d43a 	srli	fp,r2,16
10008f54:	e0001c26 	beq	fp,zero,10008fc8 <__multiply+0x1cc>
10008f58:	d8c00017 	ldw	r3,0(sp)
10008f5c:	dd000417 	ldw	r20,16(sp)
10008f60:	002b883a 	mov	r21,zero
10008f64:	1d800017 	ldw	r22,0(r3)
10008f68:	182f883a 	mov	r23,r3
10008f6c:	b021883a 	mov	r16,r22
10008f70:	a4c00017 	ldw	r19,0(r20)
10008f74:	8020d43a 	srli	r16,r16,16
10008f78:	e00b883a 	mov	r5,fp
10008f7c:	993fffcc 	andi	r4,r19,65535
10008f80:	000158c0 	call	1000158c <__mulsi3>
10008f84:	1405883a 	add	r2,r2,r16
10008f88:	9808d43a 	srli	r4,r19,16
10008f8c:	156b883a 	add	r21,r2,r21
10008f90:	bdc00104 	addi	r23,r23,4
10008f94:	bdbfff0d 	sth	r22,-4(r23)
10008f98:	bd7fff8d 	sth	r21,-2(r23)
10008f9c:	bc000017 	ldw	r16,0(r23)
10008fa0:	e00b883a 	mov	r5,fp
10008fa4:	000158c0 	call	1000158c <__mulsi3>
10008fa8:	a80ed43a 	srli	r7,r21,16
10008fac:	813fffcc 	andi	r4,r16,65535
10008fb0:	2085883a 	add	r2,r4,r2
10008fb4:	11ed883a 	add	r22,r2,r7
10008fb8:	a5000104 	addi	r20,r20,4
10008fbc:	b02ad43a 	srli	r21,r22,16
10008fc0:	a47feb36 	bltu	r20,r17,10008f70 <__alt_data_end+0xf8008f70>
10008fc4:	bd800015 	stw	r22,0(r23)
10008fc8:	d8c00017 	ldw	r3,0(sp)
10008fcc:	94800104 	addi	r18,r18,4
10008fd0:	18c00104 	addi	r3,r3,4
10008fd4:	d8c00015 	stw	r3,0(sp)
10008fd8:	d8c00317 	ldw	r3,12(sp)
10008fdc:	90ffbf36 	bltu	r18,r3,10008edc <__alt_data_end+0xf8008edc>
10008fe0:	d8c00117 	ldw	r3,4(sp)
10008fe4:	00c00c0e 	bge	zero,r3,10009018 <__multiply+0x21c>
10008fe8:	d8c00217 	ldw	r3,8(sp)
10008fec:	18bfff17 	ldw	r2,-4(r3)
10008ff0:	1d7fff04 	addi	r21,r3,-4
10008ff4:	10000326 	beq	r2,zero,10009004 <__multiply+0x208>
10008ff8:	00000706 	br	10009018 <__multiply+0x21c>
10008ffc:	a8800017 	ldw	r2,0(r21)
10009000:	1000051e 	bne	r2,zero,10009018 <__multiply+0x21c>
10009004:	d8c00117 	ldw	r3,4(sp)
10009008:	ad7fff04 	addi	r21,r21,-4
1000900c:	18ffffc4 	addi	r3,r3,-1
10009010:	d8c00115 	stw	r3,4(sp)
10009014:	183ff91e 	bne	r3,zero,10008ffc <__alt_data_end+0xf8008ffc>
10009018:	d8800517 	ldw	r2,20(sp)
1000901c:	d8c00117 	ldw	r3,4(sp)
10009020:	10c00415 	stw	r3,16(r2)
10009024:	dfc00f17 	ldw	ra,60(sp)
10009028:	df000e17 	ldw	fp,56(sp)
1000902c:	ddc00d17 	ldw	r23,52(sp)
10009030:	dd800c17 	ldw	r22,48(sp)
10009034:	dd400b17 	ldw	r21,44(sp)
10009038:	dd000a17 	ldw	r20,40(sp)
1000903c:	dcc00917 	ldw	r19,36(sp)
10009040:	dc800817 	ldw	r18,32(sp)
10009044:	dc400717 	ldw	r17,28(sp)
10009048:	dc000617 	ldw	r16,24(sp)
1000904c:	dec01004 	addi	sp,sp,64
10009050:	f800283a 	ret

10009054 <__pow5mult>:
10009054:	defffb04 	addi	sp,sp,-20
10009058:	dcc00315 	stw	r19,12(sp)
1000905c:	dc800215 	stw	r18,8(sp)
10009060:	dc000015 	stw	r16,0(sp)
10009064:	dfc00415 	stw	ra,16(sp)
10009068:	dc400115 	stw	r17,4(sp)
1000906c:	308000cc 	andi	r2,r6,3
10009070:	3021883a 	mov	r16,r6
10009074:	2027883a 	mov	r19,r4
10009078:	2825883a 	mov	r18,r5
1000907c:	10002e1e 	bne	r2,zero,10009138 <__pow5mult+0xe4>
10009080:	8021d0ba 	srai	r16,r16,2
10009084:	80001a26 	beq	r16,zero,100090f0 <__pow5mult+0x9c>
10009088:	9c401217 	ldw	r17,72(r19)
1000908c:	8800061e 	bne	r17,zero,100090a8 <__pow5mult+0x54>
10009090:	00003406 	br	10009164 <__pow5mult+0x110>
10009094:	8021d07a 	srai	r16,r16,1
10009098:	80001526 	beq	r16,zero,100090f0 <__pow5mult+0x9c>
1000909c:	88c00017 	ldw	r3,0(r17)
100090a0:	18001b26 	beq	r3,zero,10009110 <__pow5mult+0xbc>
100090a4:	1823883a 	mov	r17,r3
100090a8:	80c0004c 	andi	r3,r16,1
100090ac:	183ff926 	beq	r3,zero,10009094 <__alt_data_end+0xf8009094>
100090b0:	900b883a 	mov	r5,r18
100090b4:	880d883a 	mov	r6,r17
100090b8:	9809883a 	mov	r4,r19
100090bc:	0008dfc0 	call	10008dfc <__multiply>
100090c0:	90001b26 	beq	r18,zero,10009130 <__pow5mult+0xdc>
100090c4:	91000117 	ldw	r4,4(r18)
100090c8:	98c01317 	ldw	r3,76(r19)
100090cc:	8021d07a 	srai	r16,r16,1
100090d0:	2109883a 	add	r4,r4,r4
100090d4:	2109883a 	add	r4,r4,r4
100090d8:	1907883a 	add	r3,r3,r4
100090dc:	19000017 	ldw	r4,0(r3)
100090e0:	91000015 	stw	r4,0(r18)
100090e4:	1c800015 	stw	r18,0(r3)
100090e8:	1025883a 	mov	r18,r2
100090ec:	803feb1e 	bne	r16,zero,1000909c <__alt_data_end+0xf800909c>
100090f0:	9005883a 	mov	r2,r18
100090f4:	dfc00417 	ldw	ra,16(sp)
100090f8:	dcc00317 	ldw	r19,12(sp)
100090fc:	dc800217 	ldw	r18,8(sp)
10009100:	dc400117 	ldw	r17,4(sp)
10009104:	dc000017 	ldw	r16,0(sp)
10009108:	dec00504 	addi	sp,sp,20
1000910c:	f800283a 	ret
10009110:	880b883a 	mov	r5,r17
10009114:	880d883a 	mov	r6,r17
10009118:	9809883a 	mov	r4,r19
1000911c:	0008dfc0 	call	10008dfc <__multiply>
10009120:	88800015 	stw	r2,0(r17)
10009124:	10000015 	stw	zero,0(r2)
10009128:	1023883a 	mov	r17,r2
1000912c:	003fde06 	br	100090a8 <__alt_data_end+0xf80090a8>
10009130:	1025883a 	mov	r18,r2
10009134:	003fd706 	br	10009094 <__alt_data_end+0xf8009094>
10009138:	10bfffc4 	addi	r2,r2,-1
1000913c:	1085883a 	add	r2,r2,r2
10009140:	00c40074 	movhi	r3,4097
10009144:	18cbe004 	addi	r3,r3,12160
10009148:	1085883a 	add	r2,r2,r2
1000914c:	1885883a 	add	r2,r3,r2
10009150:	11800017 	ldw	r6,0(r2)
10009154:	000f883a 	mov	r7,zero
10009158:	0008a600 	call	10008a60 <__multadd>
1000915c:	1025883a 	mov	r18,r2
10009160:	003fc706 	br	10009080 <__alt_data_end+0xf8009080>
10009164:	9809883a 	mov	r4,r19
10009168:	01409c44 	movi	r5,625
1000916c:	0008dc00 	call	10008dc0 <__i2b>
10009170:	98801215 	stw	r2,72(r19)
10009174:	1023883a 	mov	r17,r2
10009178:	10000015 	stw	zero,0(r2)
1000917c:	003fca06 	br	100090a8 <__alt_data_end+0xf80090a8>

10009180 <__lshift>:
10009180:	defff904 	addi	sp,sp,-28
10009184:	dd400515 	stw	r21,20(sp)
10009188:	dc400115 	stw	r17,4(sp)
1000918c:	2d400417 	ldw	r21,16(r5)
10009190:	3023d17a 	srai	r17,r6,5
10009194:	28800217 	ldw	r2,8(r5)
10009198:	dd000415 	stw	r20,16(sp)
1000919c:	8d6b883a 	add	r21,r17,r21
100091a0:	dcc00315 	stw	r19,12(sp)
100091a4:	dc800215 	stw	r18,8(sp)
100091a8:	dc000015 	stw	r16,0(sp)
100091ac:	dfc00615 	stw	ra,24(sp)
100091b0:	ac000044 	addi	r16,r21,1
100091b4:	2825883a 	mov	r18,r5
100091b8:	3029883a 	mov	r20,r6
100091bc:	2027883a 	mov	r19,r4
100091c0:	29400117 	ldw	r5,4(r5)
100091c4:	1400030e 	bge	r2,r16,100091d4 <__lshift+0x54>
100091c8:	1085883a 	add	r2,r2,r2
100091cc:	29400044 	addi	r5,r5,1
100091d0:	143ffd16 	blt	r2,r16,100091c8 <__alt_data_end+0xf80091c8>
100091d4:	9809883a 	mov	r4,r19
100091d8:	00089900 	call	10008990 <_Balloc>
100091dc:	10c00504 	addi	r3,r2,20
100091e0:	0440090e 	bge	zero,r17,10009208 <__lshift+0x88>
100091e4:	000f883a 	mov	r7,zero
100091e8:	18000015 	stw	zero,0(r3)
100091ec:	39c00044 	addi	r7,r7,1
100091f0:	18c00104 	addi	r3,r3,4
100091f4:	3c7ffc1e 	bne	r7,r17,100091e8 <__alt_data_end+0xf80091e8>
100091f8:	38c00144 	addi	r3,r7,5
100091fc:	18c7883a 	add	r3,r3,r3
10009200:	18c7883a 	add	r3,r3,r3
10009204:	10c7883a 	add	r3,r2,r3
10009208:	92000417 	ldw	r8,16(r18)
1000920c:	a18007cc 	andi	r6,r20,31
10009210:	91c00504 	addi	r7,r18,20
10009214:	42000144 	addi	r8,r8,5
10009218:	4211883a 	add	r8,r8,r8
1000921c:	4211883a 	add	r8,r8,r8
10009220:	9211883a 	add	r8,r18,r8
10009224:	30002226 	beq	r6,zero,100092b0 <__lshift+0x130>
10009228:	02800804 	movi	r10,32
1000922c:	5195c83a 	sub	r10,r10,r6
10009230:	000b883a 	mov	r5,zero
10009234:	3a400017 	ldw	r9,0(r7)
10009238:	18c00104 	addi	r3,r3,4
1000923c:	39c00104 	addi	r7,r7,4
10009240:	4992983a 	sll	r9,r9,r6
10009244:	2a4ab03a 	or	r5,r5,r9
10009248:	197fff15 	stw	r5,-4(r3)
1000924c:	397fff17 	ldw	r5,-4(r7)
10009250:	2a8ad83a 	srl	r5,r5,r10
10009254:	3a3ff736 	bltu	r7,r8,10009234 <__alt_data_end+0xf8009234>
10009258:	19400015 	stw	r5,0(r3)
1000925c:	28000126 	beq	r5,zero,10009264 <__lshift+0xe4>
10009260:	ac000084 	addi	r16,r21,2
10009264:	91000117 	ldw	r4,4(r18)
10009268:	98c01317 	ldw	r3,76(r19)
1000926c:	843fffc4 	addi	r16,r16,-1
10009270:	2109883a 	add	r4,r4,r4
10009274:	2109883a 	add	r4,r4,r4
10009278:	1907883a 	add	r3,r3,r4
1000927c:	19000017 	ldw	r4,0(r3)
10009280:	14000415 	stw	r16,16(r2)
10009284:	91000015 	stw	r4,0(r18)
10009288:	1c800015 	stw	r18,0(r3)
1000928c:	dfc00617 	ldw	ra,24(sp)
10009290:	dd400517 	ldw	r21,20(sp)
10009294:	dd000417 	ldw	r20,16(sp)
10009298:	dcc00317 	ldw	r19,12(sp)
1000929c:	dc800217 	ldw	r18,8(sp)
100092a0:	dc400117 	ldw	r17,4(sp)
100092a4:	dc000017 	ldw	r16,0(sp)
100092a8:	dec00704 	addi	sp,sp,28
100092ac:	f800283a 	ret
100092b0:	39400017 	ldw	r5,0(r7)
100092b4:	18c00104 	addi	r3,r3,4
100092b8:	39c00104 	addi	r7,r7,4
100092bc:	197fff15 	stw	r5,-4(r3)
100092c0:	3a3fe82e 	bgeu	r7,r8,10009264 <__alt_data_end+0xf8009264>
100092c4:	39400017 	ldw	r5,0(r7)
100092c8:	18c00104 	addi	r3,r3,4
100092cc:	39c00104 	addi	r7,r7,4
100092d0:	197fff15 	stw	r5,-4(r3)
100092d4:	3a3ff636 	bltu	r7,r8,100092b0 <__alt_data_end+0xf80092b0>
100092d8:	003fe206 	br	10009264 <__alt_data_end+0xf8009264>

100092dc <__mcmp>:
100092dc:	20800417 	ldw	r2,16(r4)
100092e0:	28c00417 	ldw	r3,16(r5)
100092e4:	10c5c83a 	sub	r2,r2,r3
100092e8:	10000f1e 	bne	r2,zero,10009328 <__mcmp+0x4c>
100092ec:	18c00144 	addi	r3,r3,5
100092f0:	18c7883a 	add	r3,r3,r3
100092f4:	18c7883a 	add	r3,r3,r3
100092f8:	21c00504 	addi	r7,r4,20
100092fc:	28cb883a 	add	r5,r5,r3
10009300:	20c9883a 	add	r4,r4,r3
10009304:	213fff04 	addi	r4,r4,-4
10009308:	297fff04 	addi	r5,r5,-4
1000930c:	21800017 	ldw	r6,0(r4)
10009310:	28c00017 	ldw	r3,0(r5)
10009314:	30c0021e 	bne	r6,r3,10009320 <__mcmp+0x44>
10009318:	393ffa36 	bltu	r7,r4,10009304 <__alt_data_end+0xf8009304>
1000931c:	f800283a 	ret
10009320:	30c00236 	bltu	r6,r3,1000932c <__mcmp+0x50>
10009324:	00800044 	movi	r2,1
10009328:	f800283a 	ret
1000932c:	00bfffc4 	movi	r2,-1
10009330:	f800283a 	ret

10009334 <__mdiff>:
10009334:	defffb04 	addi	sp,sp,-20
10009338:	dc000015 	stw	r16,0(sp)
1000933c:	2821883a 	mov	r16,r5
10009340:	dc800215 	stw	r18,8(sp)
10009344:	300b883a 	mov	r5,r6
10009348:	2025883a 	mov	r18,r4
1000934c:	8009883a 	mov	r4,r16
10009350:	dc400115 	stw	r17,4(sp)
10009354:	dfc00415 	stw	ra,16(sp)
10009358:	dcc00315 	stw	r19,12(sp)
1000935c:	3023883a 	mov	r17,r6
10009360:	00092dc0 	call	100092dc <__mcmp>
10009364:	10005026 	beq	r2,zero,100094a8 <__mdiff+0x174>
10009368:	10004a16 	blt	r2,zero,10009494 <__mdiff+0x160>
1000936c:	0027883a 	mov	r19,zero
10009370:	81400117 	ldw	r5,4(r16)
10009374:	9009883a 	mov	r4,r18
10009378:	00089900 	call	10008990 <_Balloc>
1000937c:	82400417 	ldw	r9,16(r16)
10009380:	89800417 	ldw	r6,16(r17)
10009384:	14c00315 	stw	r19,12(r2)
10009388:	4b800144 	addi	r14,r9,5
1000938c:	31800144 	addi	r6,r6,5
10009390:	739d883a 	add	r14,r14,r14
10009394:	318d883a 	add	r6,r6,r6
10009398:	739d883a 	add	r14,r14,r14
1000939c:	318d883a 	add	r6,r6,r6
100093a0:	81c00504 	addi	r7,r16,20
100093a4:	839d883a 	add	r14,r16,r14
100093a8:	8a000504 	addi	r8,r17,20
100093ac:	898d883a 	add	r6,r17,r6
100093b0:	10c00504 	addi	r3,r2,20
100093b4:	0009883a 	mov	r4,zero
100093b8:	3b000017 	ldw	r12,0(r7)
100093bc:	42c00017 	ldw	r11,0(r8)
100093c0:	42000104 	addi	r8,r8,4
100093c4:	62bfffcc 	andi	r10,r12,65535
100093c8:	5b7fffcc 	andi	r13,r11,65535
100093cc:	5109883a 	add	r4,r10,r4
100093d0:	2355c83a 	sub	r10,r4,r13
100093d4:	5816d43a 	srli	r11,r11,16
100093d8:	6008d43a 	srli	r4,r12,16
100093dc:	501bd43a 	srai	r13,r10,16
100093e0:	1a80000d 	sth	r10,0(r3)
100093e4:	22c9c83a 	sub	r4,r4,r11
100093e8:	2349883a 	add	r4,r4,r13
100093ec:	1900008d 	sth	r4,2(r3)
100093f0:	39c00104 	addi	r7,r7,4
100093f4:	2009d43a 	srai	r4,r4,16
100093f8:	18c00104 	addi	r3,r3,4
100093fc:	41bfee36 	bltu	r8,r6,100093b8 <__alt_data_end+0xf80093b8>
10009400:	180b883a 	mov	r5,r3
10009404:	3815883a 	mov	r10,r7
10009408:	3b80132e 	bgeu	r7,r14,10009458 <__mdiff+0x124>
1000940c:	3a000017 	ldw	r8,0(r7)
10009410:	18c00104 	addi	r3,r3,4
10009414:	39c00104 	addi	r7,r7,4
10009418:	41bfffcc 	andi	r6,r8,65535
1000941c:	310d883a 	add	r6,r6,r4
10009420:	3009d43a 	srai	r4,r6,16
10009424:	4010d43a 	srli	r8,r8,16
10009428:	19bfff0d 	sth	r6,-4(r3)
1000942c:	2209883a 	add	r4,r4,r8
10009430:	193fff8d 	sth	r4,-2(r3)
10009434:	2009d43a 	srai	r4,r4,16
10009438:	3bbff436 	bltu	r7,r14,1000940c <__alt_data_end+0xf800940c>
1000943c:	0286303a 	nor	r3,zero,r10
10009440:	1b87883a 	add	r3,r3,r14
10009444:	1806d0ba 	srli	r3,r3,2
10009448:	18c00044 	addi	r3,r3,1
1000944c:	18c7883a 	add	r3,r3,r3
10009450:	18c7883a 	add	r3,r3,r3
10009454:	28c7883a 	add	r3,r5,r3
10009458:	193fff17 	ldw	r4,-4(r3)
1000945c:	18ffff04 	addi	r3,r3,-4
10009460:	2000041e 	bne	r4,zero,10009474 <__mdiff+0x140>
10009464:	18ffff04 	addi	r3,r3,-4
10009468:	19000017 	ldw	r4,0(r3)
1000946c:	4a7fffc4 	addi	r9,r9,-1
10009470:	203ffc26 	beq	r4,zero,10009464 <__alt_data_end+0xf8009464>
10009474:	12400415 	stw	r9,16(r2)
10009478:	dfc00417 	ldw	ra,16(sp)
1000947c:	dcc00317 	ldw	r19,12(sp)
10009480:	dc800217 	ldw	r18,8(sp)
10009484:	dc400117 	ldw	r17,4(sp)
10009488:	dc000017 	ldw	r16,0(sp)
1000948c:	dec00504 	addi	sp,sp,20
10009490:	f800283a 	ret
10009494:	8005883a 	mov	r2,r16
10009498:	04c00044 	movi	r19,1
1000949c:	8821883a 	mov	r16,r17
100094a0:	1023883a 	mov	r17,r2
100094a4:	003fb206 	br	10009370 <__alt_data_end+0xf8009370>
100094a8:	9009883a 	mov	r4,r18
100094ac:	000b883a 	mov	r5,zero
100094b0:	00089900 	call	10008990 <_Balloc>
100094b4:	00c00044 	movi	r3,1
100094b8:	10c00415 	stw	r3,16(r2)
100094bc:	10000515 	stw	zero,20(r2)
100094c0:	dfc00417 	ldw	ra,16(sp)
100094c4:	dcc00317 	ldw	r19,12(sp)
100094c8:	dc800217 	ldw	r18,8(sp)
100094cc:	dc400117 	ldw	r17,4(sp)
100094d0:	dc000017 	ldw	r16,0(sp)
100094d4:	dec00504 	addi	sp,sp,20
100094d8:	f800283a 	ret

100094dc <__ulp>:
100094dc:	295ffc2c 	andhi	r5,r5,32752
100094e0:	00bf3034 	movhi	r2,64704
100094e4:	2887883a 	add	r3,r5,r2
100094e8:	00c0020e 	bge	zero,r3,100094f4 <__ulp+0x18>
100094ec:	0005883a 	mov	r2,zero
100094f0:	f800283a 	ret
100094f4:	00c7c83a 	sub	r3,zero,r3
100094f8:	1805d53a 	srai	r2,r3,20
100094fc:	00c004c4 	movi	r3,19
10009500:	18800a0e 	bge	r3,r2,1000952c <__ulp+0x50>
10009504:	01000c84 	movi	r4,50
10009508:	0007883a 	mov	r3,zero
1000950c:	20800516 	blt	r4,r2,10009524 <__ulp+0x48>
10009510:	01000cc4 	movi	r4,51
10009514:	2085c83a 	sub	r2,r4,r2
10009518:	01000044 	movi	r4,1
1000951c:	2084983a 	sll	r2,r4,r2
10009520:	f800283a 	ret
10009524:	00800044 	movi	r2,1
10009528:	f800283a 	ret
1000952c:	00c00234 	movhi	r3,8
10009530:	1887d83a 	sra	r3,r3,r2
10009534:	0005883a 	mov	r2,zero
10009538:	f800283a 	ret

1000953c <__b2d>:
1000953c:	defffa04 	addi	sp,sp,-24
10009540:	dc000015 	stw	r16,0(sp)
10009544:	24000417 	ldw	r16,16(r4)
10009548:	dc400115 	stw	r17,4(sp)
1000954c:	dcc00315 	stw	r19,12(sp)
10009550:	84000144 	addi	r16,r16,5
10009554:	8421883a 	add	r16,r16,r16
10009558:	8421883a 	add	r16,r16,r16
1000955c:	2421883a 	add	r16,r4,r16
10009560:	847fff17 	ldw	r17,-4(r16)
10009564:	24c00504 	addi	r19,r4,20
10009568:	dd000415 	stw	r20,16(sp)
1000956c:	8809883a 	mov	r4,r17
10009570:	dc800215 	stw	r18,8(sp)
10009574:	2829883a 	mov	r20,r5
10009578:	dfc00515 	stw	ra,20(sp)
1000957c:	0008ca80 	call	10008ca8 <__hi0bits>
10009580:	00c00804 	movi	r3,32
10009584:	1887c83a 	sub	r3,r3,r2
10009588:	a0c00015 	stw	r3,0(r20)
1000958c:	00c00284 	movi	r3,10
10009590:	84bfff04 	addi	r18,r16,-4
10009594:	18801216 	blt	r3,r2,100095e0 <__b2d+0xa4>
10009598:	010002c4 	movi	r4,11
1000959c:	2089c83a 	sub	r4,r4,r2
100095a0:	8906d83a 	srl	r3,r17,r4
100095a4:	18cffc34 	orhi	r3,r3,16368
100095a8:	9c80322e 	bgeu	r19,r18,10009674 <__b2d+0x138>
100095ac:	817ffe17 	ldw	r5,-8(r16)
100095b0:	2908d83a 	srl	r4,r5,r4
100095b4:	10800544 	addi	r2,r2,21
100095b8:	88a2983a 	sll	r17,r17,r2
100095bc:	2444b03a 	or	r2,r4,r17
100095c0:	dfc00517 	ldw	ra,20(sp)
100095c4:	dd000417 	ldw	r20,16(sp)
100095c8:	dcc00317 	ldw	r19,12(sp)
100095cc:	dc800217 	ldw	r18,8(sp)
100095d0:	dc400117 	ldw	r17,4(sp)
100095d4:	dc000017 	ldw	r16,0(sp)
100095d8:	dec00604 	addi	sp,sp,24
100095dc:	f800283a 	ret
100095e0:	9c801636 	bltu	r19,r18,1000963c <__b2d+0x100>
100095e4:	113ffd44 	addi	r4,r2,-11
100095e8:	000b883a 	mov	r5,zero
100095ec:	20001726 	beq	r4,zero,1000964c <__b2d+0x110>
100095f0:	00c00ac4 	movi	r3,43
100095f4:	1885c83a 	sub	r2,r3,r2
100095f8:	8906983a 	sll	r3,r17,r4
100095fc:	288cd83a 	srl	r6,r5,r2
10009600:	18cffc34 	orhi	r3,r3,16368
10009604:	1986b03a 	or	r3,r3,r6
10009608:	9c801c2e 	bgeu	r19,r18,1000967c <__b2d+0x140>
1000960c:	91bfff17 	ldw	r6,-4(r18)
10009610:	3084d83a 	srl	r2,r6,r2
10009614:	2908983a 	sll	r4,r5,r4
10009618:	1104b03a 	or	r2,r2,r4
1000961c:	dfc00517 	ldw	ra,20(sp)
10009620:	dd000417 	ldw	r20,16(sp)
10009624:	dcc00317 	ldw	r19,12(sp)
10009628:	dc800217 	ldw	r18,8(sp)
1000962c:	dc400117 	ldw	r17,4(sp)
10009630:	dc000017 	ldw	r16,0(sp)
10009634:	dec00604 	addi	sp,sp,24
10009638:	f800283a 	ret
1000963c:	113ffd44 	addi	r4,r2,-11
10009640:	84bffe04 	addi	r18,r16,-8
10009644:	817ffe17 	ldw	r5,-8(r16)
10009648:	203fe91e 	bne	r4,zero,100095f0 <__alt_data_end+0xf80095f0>
1000964c:	88cffc34 	orhi	r3,r17,16368
10009650:	2805883a 	mov	r2,r5
10009654:	dfc00517 	ldw	ra,20(sp)
10009658:	dd000417 	ldw	r20,16(sp)
1000965c:	dcc00317 	ldw	r19,12(sp)
10009660:	dc800217 	ldw	r18,8(sp)
10009664:	dc400117 	ldw	r17,4(sp)
10009668:	dc000017 	ldw	r16,0(sp)
1000966c:	dec00604 	addi	sp,sp,24
10009670:	f800283a 	ret
10009674:	0009883a 	mov	r4,zero
10009678:	003fce06 	br	100095b4 <__alt_data_end+0xf80095b4>
1000967c:	0005883a 	mov	r2,zero
10009680:	003fe406 	br	10009614 <__alt_data_end+0xf8009614>

10009684 <__d2b>:
10009684:	defff804 	addi	sp,sp,-32
10009688:	dc400315 	stw	r17,12(sp)
1000968c:	3023883a 	mov	r17,r6
10009690:	dc800415 	stw	r18,16(sp)
10009694:	8824907a 	slli	r18,r17,1
10009698:	dcc00515 	stw	r19,20(sp)
1000969c:	2827883a 	mov	r19,r5
100096a0:	9024d57a 	srli	r18,r18,21
100096a4:	01400044 	movi	r5,1
100096a8:	dd000615 	stw	r20,24(sp)
100096ac:	dc000215 	stw	r16,8(sp)
100096b0:	dfc00715 	stw	ra,28(sp)
100096b4:	3829883a 	mov	r20,r7
100096b8:	00089900 	call	10008990 <_Balloc>
100096bc:	1021883a 	mov	r16,r2
100096c0:	00800434 	movhi	r2,16
100096c4:	10bfffc4 	addi	r2,r2,-1
100096c8:	88a2703a 	and	r17,r17,r2
100096cc:	90000126 	beq	r18,zero,100096d4 <__d2b+0x50>
100096d0:	8c400434 	orhi	r17,r17,16
100096d4:	dc400015 	stw	r17,0(sp)
100096d8:	98002226 	beq	r19,zero,10009764 <__d2b+0xe0>
100096dc:	d9000104 	addi	r4,sp,4
100096e0:	dcc00115 	stw	r19,4(sp)
100096e4:	0008d100 	call	10008d10 <__lo0bits>
100096e8:	d8c00017 	ldw	r3,0(sp)
100096ec:	10002d1e 	bne	r2,zero,100097a4 <__d2b+0x120>
100096f0:	d9000117 	ldw	r4,4(sp)
100096f4:	81000515 	stw	r4,20(r16)
100096f8:	1823003a 	cmpeq	r17,r3,zero
100096fc:	01000084 	movi	r4,2
10009700:	2463c83a 	sub	r17,r4,r17
10009704:	80c00615 	stw	r3,24(r16)
10009708:	84400415 	stw	r17,16(r16)
1000970c:	90001d1e 	bne	r18,zero,10009784 <__d2b+0x100>
10009710:	88c00104 	addi	r3,r17,4
10009714:	18c7883a 	add	r3,r3,r3
10009718:	18c7883a 	add	r3,r3,r3
1000971c:	80c7883a 	add	r3,r16,r3
10009720:	19000017 	ldw	r4,0(r3)
10009724:	10bef384 	addi	r2,r2,-1074
10009728:	a0800015 	stw	r2,0(r20)
1000972c:	0008ca80 	call	10008ca8 <__hi0bits>
10009730:	8822917a 	slli	r17,r17,5
10009734:	d8c00817 	ldw	r3,32(sp)
10009738:	8885c83a 	sub	r2,r17,r2
1000973c:	18800015 	stw	r2,0(r3)
10009740:	8005883a 	mov	r2,r16
10009744:	dfc00717 	ldw	ra,28(sp)
10009748:	dd000617 	ldw	r20,24(sp)
1000974c:	dcc00517 	ldw	r19,20(sp)
10009750:	dc800417 	ldw	r18,16(sp)
10009754:	dc400317 	ldw	r17,12(sp)
10009758:	dc000217 	ldw	r16,8(sp)
1000975c:	dec00804 	addi	sp,sp,32
10009760:	f800283a 	ret
10009764:	d809883a 	mov	r4,sp
10009768:	0008d100 	call	10008d10 <__lo0bits>
1000976c:	d8c00017 	ldw	r3,0(sp)
10009770:	04400044 	movi	r17,1
10009774:	84400415 	stw	r17,16(r16)
10009778:	80c00515 	stw	r3,20(r16)
1000977c:	10800804 	addi	r2,r2,32
10009780:	903fe326 	beq	r18,zero,10009710 <__alt_data_end+0xf8009710>
10009784:	00c00d44 	movi	r3,53
10009788:	94bef344 	addi	r18,r18,-1075
1000978c:	90a5883a 	add	r18,r18,r2
10009790:	1885c83a 	sub	r2,r3,r2
10009794:	d8c00817 	ldw	r3,32(sp)
10009798:	a4800015 	stw	r18,0(r20)
1000979c:	18800015 	stw	r2,0(r3)
100097a0:	003fe706 	br	10009740 <__alt_data_end+0xf8009740>
100097a4:	01000804 	movi	r4,32
100097a8:	2089c83a 	sub	r4,r4,r2
100097ac:	1908983a 	sll	r4,r3,r4
100097b0:	d9400117 	ldw	r5,4(sp)
100097b4:	1886d83a 	srl	r3,r3,r2
100097b8:	2148b03a 	or	r4,r4,r5
100097bc:	81000515 	stw	r4,20(r16)
100097c0:	d8c00015 	stw	r3,0(sp)
100097c4:	003fcc06 	br	100096f8 <__alt_data_end+0xf80096f8>

100097c8 <__ratio>:
100097c8:	defff904 	addi	sp,sp,-28
100097cc:	dc400315 	stw	r17,12(sp)
100097d0:	2823883a 	mov	r17,r5
100097d4:	d9400104 	addi	r5,sp,4
100097d8:	dfc00615 	stw	ra,24(sp)
100097dc:	dcc00515 	stw	r19,20(sp)
100097e0:	dc800415 	stw	r18,16(sp)
100097e4:	2027883a 	mov	r19,r4
100097e8:	dc000215 	stw	r16,8(sp)
100097ec:	000953c0 	call	1000953c <__b2d>
100097f0:	8809883a 	mov	r4,r17
100097f4:	d80b883a 	mov	r5,sp
100097f8:	1025883a 	mov	r18,r2
100097fc:	1821883a 	mov	r16,r3
10009800:	000953c0 	call	1000953c <__b2d>
10009804:	99400417 	ldw	r5,16(r19)
10009808:	89000417 	ldw	r4,16(r17)
1000980c:	d9800117 	ldw	r6,4(sp)
10009810:	2909c83a 	sub	r4,r5,r4
10009814:	d9400017 	ldw	r5,0(sp)
10009818:	2008917a 	slli	r4,r4,5
1000981c:	314bc83a 	sub	r5,r6,r5
10009820:	290b883a 	add	r5,r5,r4
10009824:	01400e0e 	bge	zero,r5,10009860 <__ratio+0x98>
10009828:	280a953a 	slli	r5,r5,20
1000982c:	2c21883a 	add	r16,r5,r16
10009830:	9009883a 	mov	r4,r18
10009834:	800b883a 	mov	r5,r16
10009838:	100d883a 	mov	r6,r2
1000983c:	180f883a 	mov	r7,r3
10009840:	000f4940 	call	1000f494 <__divdf3>
10009844:	dfc00617 	ldw	ra,24(sp)
10009848:	dcc00517 	ldw	r19,20(sp)
1000984c:	dc800417 	ldw	r18,16(sp)
10009850:	dc400317 	ldw	r17,12(sp)
10009854:	dc000217 	ldw	r16,8(sp)
10009858:	dec00704 	addi	sp,sp,28
1000985c:	f800283a 	ret
10009860:	280a953a 	slli	r5,r5,20
10009864:	1947c83a 	sub	r3,r3,r5
10009868:	003ff106 	br	10009830 <__alt_data_end+0xf8009830>

1000986c <_mprec_log10>:
1000986c:	defffe04 	addi	sp,sp,-8
10009870:	dc000015 	stw	r16,0(sp)
10009874:	dfc00115 	stw	ra,4(sp)
10009878:	008005c4 	movi	r2,23
1000987c:	2021883a 	mov	r16,r4
10009880:	11000d0e 	bge	r2,r4,100098b8 <_mprec_log10+0x4c>
10009884:	0005883a 	mov	r2,zero
10009888:	00cffc34 	movhi	r3,16368
1000988c:	843fffc4 	addi	r16,r16,-1
10009890:	1009883a 	mov	r4,r2
10009894:	180b883a 	mov	r5,r3
10009898:	000d883a 	mov	r6,zero
1000989c:	01d00934 	movhi	r7,16420
100098a0:	000f1b00 	call	1000f1b0 <__muldf3>
100098a4:	803ff91e 	bne	r16,zero,1000988c <__alt_data_end+0xf800988c>
100098a8:	dfc00117 	ldw	ra,4(sp)
100098ac:	dc000017 	ldw	r16,0(sp)
100098b0:	dec00204 	addi	sp,sp,8
100098b4:	f800283a 	ret
100098b8:	202090fa 	slli	r16,r4,3
100098bc:	00840074 	movhi	r2,4097
100098c0:	108bae04 	addi	r2,r2,11960
100098c4:	1421883a 	add	r16,r2,r16
100098c8:	80800017 	ldw	r2,0(r16)
100098cc:	80c00117 	ldw	r3,4(r16)
100098d0:	dfc00117 	ldw	ra,4(sp)
100098d4:	dc000017 	ldw	r16,0(sp)
100098d8:	dec00204 	addi	sp,sp,8
100098dc:	f800283a 	ret

100098e0 <__copybits>:
100098e0:	297fffc4 	addi	r5,r5,-1
100098e4:	31c00417 	ldw	r7,16(r6)
100098e8:	2811d17a 	srai	r8,r5,5
100098ec:	30800504 	addi	r2,r6,20
100098f0:	39c00144 	addi	r7,r7,5
100098f4:	42000044 	addi	r8,r8,1
100098f8:	39cf883a 	add	r7,r7,r7
100098fc:	4211883a 	add	r8,r8,r8
10009900:	39cf883a 	add	r7,r7,r7
10009904:	4211883a 	add	r8,r8,r8
10009908:	31cf883a 	add	r7,r6,r7
1000990c:	2211883a 	add	r8,r4,r8
10009910:	11c00d2e 	bgeu	r2,r7,10009948 <__copybits+0x68>
10009914:	2007883a 	mov	r3,r4
10009918:	11400017 	ldw	r5,0(r2)
1000991c:	18c00104 	addi	r3,r3,4
10009920:	10800104 	addi	r2,r2,4
10009924:	197fff15 	stw	r5,-4(r3)
10009928:	11fffb36 	bltu	r2,r7,10009918 <__alt_data_end+0xf8009918>
1000992c:	3985c83a 	sub	r2,r7,r6
10009930:	10bffac4 	addi	r2,r2,-21
10009934:	1004d0ba 	srli	r2,r2,2
10009938:	10800044 	addi	r2,r2,1
1000993c:	1085883a 	add	r2,r2,r2
10009940:	1085883a 	add	r2,r2,r2
10009944:	2089883a 	add	r4,r4,r2
10009948:	2200032e 	bgeu	r4,r8,10009958 <__copybits+0x78>
1000994c:	20000015 	stw	zero,0(r4)
10009950:	21000104 	addi	r4,r4,4
10009954:	223ffd36 	bltu	r4,r8,1000994c <__alt_data_end+0xf800994c>
10009958:	f800283a 	ret

1000995c <__any_on>:
1000995c:	21800417 	ldw	r6,16(r4)
10009960:	2805d17a 	srai	r2,r5,5
10009964:	20c00504 	addi	r3,r4,20
10009968:	30800f0e 	bge	r6,r2,100099a8 <__any_on+0x4c>
1000996c:	3005883a 	mov	r2,r6
10009970:	10800144 	addi	r2,r2,5
10009974:	1085883a 	add	r2,r2,r2
10009978:	1085883a 	add	r2,r2,r2
1000997c:	2089883a 	add	r4,r4,r2
10009980:	1900152e 	bgeu	r3,r4,100099d8 <__any_on+0x7c>
10009984:	20bfff17 	ldw	r2,-4(r4)
10009988:	213fff04 	addi	r4,r4,-4
1000998c:	1000041e 	bne	r2,zero,100099a0 <__any_on+0x44>
10009990:	1900112e 	bgeu	r3,r4,100099d8 <__any_on+0x7c>
10009994:	213fff04 	addi	r4,r4,-4
10009998:	20800017 	ldw	r2,0(r4)
1000999c:	103ffc26 	beq	r2,zero,10009990 <__alt_data_end+0xf8009990>
100099a0:	00800044 	movi	r2,1
100099a4:	f800283a 	ret
100099a8:	11bff10e 	bge	r2,r6,10009970 <__alt_data_end+0xf8009970>
100099ac:	294007cc 	andi	r5,r5,31
100099b0:	283fef26 	beq	r5,zero,10009970 <__alt_data_end+0xf8009970>
100099b4:	11800144 	addi	r6,r2,5
100099b8:	318d883a 	add	r6,r6,r6
100099bc:	318d883a 	add	r6,r6,r6
100099c0:	218d883a 	add	r6,r4,r6
100099c4:	31800017 	ldw	r6,0(r6)
100099c8:	314ed83a 	srl	r7,r6,r5
100099cc:	394a983a 	sll	r5,r7,r5
100099d0:	29bff31e 	bne	r5,r6,100099a0 <__alt_data_end+0xf80099a0>
100099d4:	003fe606 	br	10009970 <__alt_data_end+0xf8009970>
100099d8:	0005883a 	mov	r2,zero
100099dc:	f800283a 	ret

100099e0 <_putc_r>:
100099e0:	defffc04 	addi	sp,sp,-16
100099e4:	dc000215 	stw	r16,8(sp)
100099e8:	dfc00315 	stw	ra,12(sp)
100099ec:	2021883a 	mov	r16,r4
100099f0:	20000226 	beq	r4,zero,100099fc <_putc_r+0x1c>
100099f4:	20800e17 	ldw	r2,56(r4)
100099f8:	10001d26 	beq	r2,zero,10009a70 <_putc_r+0x90>
100099fc:	30800217 	ldw	r2,8(r6)
10009a00:	10bfffc4 	addi	r2,r2,-1
10009a04:	30800215 	stw	r2,8(r6)
10009a08:	10000a16 	blt	r2,zero,10009a34 <_putc_r+0x54>
10009a0c:	30800017 	ldw	r2,0(r6)
10009a10:	11400005 	stb	r5,0(r2)
10009a14:	30800017 	ldw	r2,0(r6)
10009a18:	10c00044 	addi	r3,r2,1
10009a1c:	10800003 	ldbu	r2,0(r2)
10009a20:	30c00015 	stw	r3,0(r6)
10009a24:	dfc00317 	ldw	ra,12(sp)
10009a28:	dc000217 	ldw	r16,8(sp)
10009a2c:	dec00404 	addi	sp,sp,16
10009a30:	f800283a 	ret
10009a34:	30c00617 	ldw	r3,24(r6)
10009a38:	10c01316 	blt	r2,r3,10009a88 <_putc_r+0xa8>
10009a3c:	30800017 	ldw	r2,0(r6)
10009a40:	01000284 	movi	r4,10
10009a44:	11400005 	stb	r5,0(r2)
10009a48:	30c00017 	ldw	r3,0(r6)
10009a4c:	19400003 	ldbu	r5,0(r3)
10009a50:	29000d26 	beq	r5,r4,10009a88 <_putc_r+0xa8>
10009a54:	18c00044 	addi	r3,r3,1
10009a58:	2805883a 	mov	r2,r5
10009a5c:	30c00015 	stw	r3,0(r6)
10009a60:	dfc00317 	ldw	ra,12(sp)
10009a64:	dc000217 	ldw	r16,8(sp)
10009a68:	dec00404 	addi	sp,sp,16
10009a6c:	f800283a 	ret
10009a70:	d9400015 	stw	r5,0(sp)
10009a74:	d9800115 	stw	r6,4(sp)
10009a78:	0006ab40 	call	10006ab4 <__sinit>
10009a7c:	d9800117 	ldw	r6,4(sp)
10009a80:	d9400017 	ldw	r5,0(sp)
10009a84:	003fdd06 	br	100099fc <__alt_data_end+0xf80099fc>
10009a88:	8009883a 	mov	r4,r16
10009a8c:	dfc00317 	ldw	ra,12(sp)
10009a90:	dc000217 	ldw	r16,8(sp)
10009a94:	dec00404 	addi	sp,sp,16
10009a98:	000cd0c1 	jmpi	1000cd0c <__swbuf_r>

10009a9c <putc>:
10009a9c:	defffc04 	addi	sp,sp,-16
10009aa0:	dc400115 	stw	r17,4(sp)
10009aa4:	04440074 	movhi	r17,4097
10009aa8:	8c536704 	addi	r17,r17,19868
10009aac:	88800017 	ldw	r2,0(r17)
10009ab0:	dc800215 	stw	r18,8(sp)
10009ab4:	dc000015 	stw	r16,0(sp)
10009ab8:	dfc00315 	stw	ra,12(sp)
10009abc:	2025883a 	mov	r18,r4
10009ac0:	2821883a 	mov	r16,r5
10009ac4:	10000226 	beq	r2,zero,10009ad0 <putc+0x34>
10009ac8:	10c00e17 	ldw	r3,56(r2)
10009acc:	18002126 	beq	r3,zero,10009b54 <putc+0xb8>
10009ad0:	80800217 	ldw	r2,8(r16)
10009ad4:	10bfffc4 	addi	r2,r2,-1
10009ad8:	80800215 	stw	r2,8(r16)
10009adc:	10000c16 	blt	r2,zero,10009b10 <putc+0x74>
10009ae0:	80800017 	ldw	r2,0(r16)
10009ae4:	14800005 	stb	r18,0(r2)
10009ae8:	80800017 	ldw	r2,0(r16)
10009aec:	10c00044 	addi	r3,r2,1
10009af0:	10800003 	ldbu	r2,0(r2)
10009af4:	80c00015 	stw	r3,0(r16)
10009af8:	dfc00317 	ldw	ra,12(sp)
10009afc:	dc800217 	ldw	r18,8(sp)
10009b00:	dc400117 	ldw	r17,4(sp)
10009b04:	dc000017 	ldw	r16,0(sp)
10009b08:	dec00404 	addi	sp,sp,16
10009b0c:	f800283a 	ret
10009b10:	80c00617 	ldw	r3,24(r16)
10009b14:	10c01216 	blt	r2,r3,10009b60 <putc+0xc4>
10009b18:	80800017 	ldw	r2,0(r16)
10009b1c:	01000284 	movi	r4,10
10009b20:	14800005 	stb	r18,0(r2)
10009b24:	80c00017 	ldw	r3,0(r16)
10009b28:	19400003 	ldbu	r5,0(r3)
10009b2c:	29001526 	beq	r5,r4,10009b84 <putc+0xe8>
10009b30:	18c00044 	addi	r3,r3,1
10009b34:	2805883a 	mov	r2,r5
10009b38:	80c00015 	stw	r3,0(r16)
10009b3c:	dfc00317 	ldw	ra,12(sp)
10009b40:	dc800217 	ldw	r18,8(sp)
10009b44:	dc400117 	ldw	r17,4(sp)
10009b48:	dc000017 	ldw	r16,0(sp)
10009b4c:	dec00404 	addi	sp,sp,16
10009b50:	f800283a 	ret
10009b54:	1009883a 	mov	r4,r2
10009b58:	0006ab40 	call	10006ab4 <__sinit>
10009b5c:	003fdc06 	br	10009ad0 <__alt_data_end+0xf8009ad0>
10009b60:	89000017 	ldw	r4,0(r17)
10009b64:	900b883a 	mov	r5,r18
10009b68:	800d883a 	mov	r6,r16
10009b6c:	dfc00317 	ldw	ra,12(sp)
10009b70:	dc800217 	ldw	r18,8(sp)
10009b74:	dc400117 	ldw	r17,4(sp)
10009b78:	dc000017 	ldw	r16,0(sp)
10009b7c:	dec00404 	addi	sp,sp,16
10009b80:	000cd0c1 	jmpi	1000cd0c <__swbuf_r>
10009b84:	89000017 	ldw	r4,0(r17)
10009b88:	003ff706 	br	10009b68 <__alt_data_end+0xf8009b68>

10009b8c <_realloc_r>:
10009b8c:	defff504 	addi	sp,sp,-44
10009b90:	dd400615 	stw	r21,24(sp)
10009b94:	dc800315 	stw	r18,12(sp)
10009b98:	dc000115 	stw	r16,4(sp)
10009b9c:	dfc00a15 	stw	ra,40(sp)
10009ba0:	df000915 	stw	fp,36(sp)
10009ba4:	ddc00815 	stw	r23,32(sp)
10009ba8:	dd800715 	stw	r22,28(sp)
10009bac:	dd000515 	stw	r20,20(sp)
10009bb0:	dcc00415 	stw	r19,16(sp)
10009bb4:	dc400215 	stw	r17,8(sp)
10009bb8:	2821883a 	mov	r16,r5
10009bbc:	202b883a 	mov	r21,r4
10009bc0:	3025883a 	mov	r18,r6
10009bc4:	28009626 	beq	r5,zero,10009e20 <_realloc_r+0x294>
10009bc8:	00109600 	call	10010960 <__malloc_lock>
10009bcc:	80bfff17 	ldw	r2,-4(r16)
10009bd0:	04ffff04 	movi	r19,-4
10009bd4:	90c002c4 	addi	r3,r18,11
10009bd8:	01000584 	movi	r4,22
10009bdc:	85bffe04 	addi	r22,r16,-8
10009be0:	14e6703a 	and	r19,r2,r19
10009be4:	20c0372e 	bgeu	r4,r3,10009cc4 <_realloc_r+0x138>
10009be8:	047ffe04 	movi	r17,-8
10009bec:	1c62703a 	and	r17,r3,r17
10009bf0:	8807883a 	mov	r3,r17
10009bf4:	88005a16 	blt	r17,zero,10009d60 <_realloc_r+0x1d4>
10009bf8:	8c805936 	bltu	r17,r18,10009d60 <_realloc_r+0x1d4>
10009bfc:	98c0340e 	bge	r19,r3,10009cd0 <_realloc_r+0x144>
10009c00:	07040074 	movhi	fp,4097
10009c04:	e70dd704 	addi	fp,fp,14172
10009c08:	e1400217 	ldw	r5,8(fp)
10009c0c:	b4c9883a 	add	r4,r22,r19
10009c10:	29009026 	beq	r5,r4,10009e54 <_realloc_r+0x2c8>
10009c14:	21800117 	ldw	r6,4(r4)
10009c18:	01ffff84 	movi	r7,-2
10009c1c:	31ce703a 	and	r7,r6,r7
10009c20:	21cf883a 	add	r7,r4,r7
10009c24:	39c00117 	ldw	r7,4(r7)
10009c28:	39c0004c 	andi	r7,r7,1
10009c2c:	38004326 	beq	r7,zero,10009d3c <_realloc_r+0x1b0>
10009c30:	000d883a 	mov	r6,zero
10009c34:	0009883a 	mov	r4,zero
10009c38:	1080004c 	andi	r2,r2,1
10009c3c:	10005a1e 	bne	r2,zero,10009da8 <_realloc_r+0x21c>
10009c40:	85fffe17 	ldw	r23,-8(r16)
10009c44:	00bfff04 	movi	r2,-4
10009c48:	b5efc83a 	sub	r23,r22,r23
10009c4c:	b9c00117 	ldw	r7,4(r23)
10009c50:	388e703a 	and	r7,r7,r2
10009c54:	3ccf883a 	add	r7,r7,r19
10009c58:	20005226 	beq	r4,zero,10009da4 <_realloc_r+0x218>
10009c5c:	31e9883a 	add	r20,r6,r7
10009c60:	2140c726 	beq	r4,r5,10009f80 <_realloc_r+0x3f4>
10009c64:	a0c04f16 	blt	r20,r3,10009da4 <_realloc_r+0x218>
10009c68:	20800317 	ldw	r2,12(r4)
10009c6c:	20c00217 	ldw	r3,8(r4)
10009c70:	99bfff04 	addi	r6,r19,-4
10009c74:	01000904 	movi	r4,36
10009c78:	18800315 	stw	r2,12(r3)
10009c7c:	10c00215 	stw	r3,8(r2)
10009c80:	b8c00217 	ldw	r3,8(r23)
10009c84:	b8800317 	ldw	r2,12(r23)
10009c88:	bc800204 	addi	r18,r23,8
10009c8c:	18800315 	stw	r2,12(r3)
10009c90:	10c00215 	stw	r3,8(r2)
10009c94:	2180ed36 	bltu	r4,r6,1000a04c <_realloc_r+0x4c0>
10009c98:	008004c4 	movi	r2,19
10009c9c:	11809b2e 	bgeu	r2,r6,10009f0c <_realloc_r+0x380>
10009ca0:	80800017 	ldw	r2,0(r16)
10009ca4:	b8800215 	stw	r2,8(r23)
10009ca8:	80800117 	ldw	r2,4(r16)
10009cac:	b8800315 	stw	r2,12(r23)
10009cb0:	008006c4 	movi	r2,27
10009cb4:	1180f936 	bltu	r2,r6,1000a09c <_realloc_r+0x510>
10009cb8:	b8800404 	addi	r2,r23,16
10009cbc:	80c00204 	addi	r3,r16,8
10009cc0:	00009406 	br	10009f14 <_realloc_r+0x388>
10009cc4:	00c00404 	movi	r3,16
10009cc8:	1823883a 	mov	r17,r3
10009ccc:	003fca06 	br	10009bf8 <__alt_data_end+0xf8009bf8>
10009cd0:	9829883a 	mov	r20,r19
10009cd4:	a447c83a 	sub	r3,r20,r17
10009cd8:	010003c4 	movi	r4,15
10009cdc:	1080004c 	andi	r2,r2,1
10009ce0:	20c02336 	bltu	r4,r3,10009d70 <_realloc_r+0x1e4>
10009ce4:	1504b03a 	or	r2,r2,r20
10009ce8:	b0800115 	stw	r2,4(r22)
10009cec:	b52d883a 	add	r22,r22,r20
10009cf0:	b0800117 	ldw	r2,4(r22)
10009cf4:	10800054 	ori	r2,r2,1
10009cf8:	b0800115 	stw	r2,4(r22)
10009cfc:	a809883a 	mov	r4,r21
10009d00:	00109800 	call	10010980 <__malloc_unlock>
10009d04:	8025883a 	mov	r18,r16
10009d08:	9005883a 	mov	r2,r18
10009d0c:	dfc00a17 	ldw	ra,40(sp)
10009d10:	df000917 	ldw	fp,36(sp)
10009d14:	ddc00817 	ldw	r23,32(sp)
10009d18:	dd800717 	ldw	r22,28(sp)
10009d1c:	dd400617 	ldw	r21,24(sp)
10009d20:	dd000517 	ldw	r20,20(sp)
10009d24:	dcc00417 	ldw	r19,16(sp)
10009d28:	dc800317 	ldw	r18,12(sp)
10009d2c:	dc400217 	ldw	r17,8(sp)
10009d30:	dc000117 	ldw	r16,4(sp)
10009d34:	dec00b04 	addi	sp,sp,44
10009d38:	f800283a 	ret
10009d3c:	01ffff04 	movi	r7,-4
10009d40:	31cc703a 	and	r6,r6,r7
10009d44:	34e9883a 	add	r20,r6,r19
10009d48:	a0ffbb16 	blt	r20,r3,10009c38 <__alt_data_end+0xf8009c38>
10009d4c:	20c00317 	ldw	r3,12(r4)
10009d50:	21000217 	ldw	r4,8(r4)
10009d54:	20c00315 	stw	r3,12(r4)
10009d58:	19000215 	stw	r4,8(r3)
10009d5c:	003fdd06 	br	10009cd4 <__alt_data_end+0xf8009cd4>
10009d60:	00800304 	movi	r2,12
10009d64:	a8800015 	stw	r2,0(r21)
10009d68:	0025883a 	mov	r18,zero
10009d6c:	003fe606 	br	10009d08 <__alt_data_end+0xf8009d08>
10009d70:	1444b03a 	or	r2,r2,r17
10009d74:	b0800115 	stw	r2,4(r22)
10009d78:	b44b883a 	add	r5,r22,r17
10009d7c:	18800054 	ori	r2,r3,1
10009d80:	28800115 	stw	r2,4(r5)
10009d84:	28c7883a 	add	r3,r5,r3
10009d88:	18800117 	ldw	r2,4(r3)
10009d8c:	a809883a 	mov	r4,r21
10009d90:	29400204 	addi	r5,r5,8
10009d94:	10800054 	ori	r2,r2,1
10009d98:	18800115 	stw	r2,4(r3)
10009d9c:	00070b40 	call	100070b4 <_free_r>
10009da0:	003fd606 	br	10009cfc <__alt_data_end+0xf8009cfc>
10009da4:	38c0330e 	bge	r7,r3,10009e74 <_realloc_r+0x2e8>
10009da8:	900b883a 	mov	r5,r18
10009dac:	a809883a 	mov	r4,r21
10009db0:	0007c840 	call	10007c84 <_malloc_r>
10009db4:	1025883a 	mov	r18,r2
10009db8:	10001626 	beq	r2,zero,10009e14 <_realloc_r+0x288>
10009dbc:	80bfff17 	ldw	r2,-4(r16)
10009dc0:	00ffff84 	movi	r3,-2
10009dc4:	913ffe04 	addi	r4,r18,-8
10009dc8:	10c6703a 	and	r3,r2,r3
10009dcc:	b0c7883a 	add	r3,r22,r3
10009dd0:	20c09926 	beq	r4,r3,1000a038 <_realloc_r+0x4ac>
10009dd4:	99bfff04 	addi	r6,r19,-4
10009dd8:	00800904 	movi	r2,36
10009ddc:	11806436 	bltu	r2,r6,10009f70 <_realloc_r+0x3e4>
10009de0:	00c004c4 	movi	r3,19
10009de4:	19804036 	bltu	r3,r6,10009ee8 <_realloc_r+0x35c>
10009de8:	9005883a 	mov	r2,r18
10009dec:	8007883a 	mov	r3,r16
10009df0:	19000017 	ldw	r4,0(r3)
10009df4:	11000015 	stw	r4,0(r2)
10009df8:	19000117 	ldw	r4,4(r3)
10009dfc:	11000115 	stw	r4,4(r2)
10009e00:	18c00217 	ldw	r3,8(r3)
10009e04:	10c00215 	stw	r3,8(r2)
10009e08:	a809883a 	mov	r4,r21
10009e0c:	800b883a 	mov	r5,r16
10009e10:	00070b40 	call	100070b4 <_free_r>
10009e14:	a809883a 	mov	r4,r21
10009e18:	00109800 	call	10010980 <__malloc_unlock>
10009e1c:	003fba06 	br	10009d08 <__alt_data_end+0xf8009d08>
10009e20:	300b883a 	mov	r5,r6
10009e24:	dfc00a17 	ldw	ra,40(sp)
10009e28:	df000917 	ldw	fp,36(sp)
10009e2c:	ddc00817 	ldw	r23,32(sp)
10009e30:	dd800717 	ldw	r22,28(sp)
10009e34:	dd400617 	ldw	r21,24(sp)
10009e38:	dd000517 	ldw	r20,20(sp)
10009e3c:	dcc00417 	ldw	r19,16(sp)
10009e40:	dc800317 	ldw	r18,12(sp)
10009e44:	dc400217 	ldw	r17,8(sp)
10009e48:	dc000117 	ldw	r16,4(sp)
10009e4c:	dec00b04 	addi	sp,sp,44
10009e50:	0007c841 	jmpi	10007c84 <_malloc_r>
10009e54:	29800117 	ldw	r6,4(r5)
10009e58:	013fff04 	movi	r4,-4
10009e5c:	89c00404 	addi	r7,r17,16
10009e60:	310c703a 	and	r6,r6,r4
10009e64:	34c9883a 	add	r4,r6,r19
10009e68:	21c0340e 	bge	r4,r7,10009f3c <_realloc_r+0x3b0>
10009e6c:	2809883a 	mov	r4,r5
10009e70:	003f7106 	br	10009c38 <__alt_data_end+0xf8009c38>
10009e74:	b8800317 	ldw	r2,12(r23)
10009e78:	b8c00217 	ldw	r3,8(r23)
10009e7c:	99bfff04 	addi	r6,r19,-4
10009e80:	01000904 	movi	r4,36
10009e84:	18800315 	stw	r2,12(r3)
10009e88:	10c00215 	stw	r3,8(r2)
10009e8c:	bc800204 	addi	r18,r23,8
10009e90:	21807836 	bltu	r4,r6,1000a074 <_realloc_r+0x4e8>
10009e94:	008004c4 	movi	r2,19
10009e98:	1180732e 	bgeu	r2,r6,1000a068 <_realloc_r+0x4dc>
10009e9c:	80800017 	ldw	r2,0(r16)
10009ea0:	b8800215 	stw	r2,8(r23)
10009ea4:	80800117 	ldw	r2,4(r16)
10009ea8:	b8800315 	stw	r2,12(r23)
10009eac:	008006c4 	movi	r2,27
10009eb0:	11808936 	bltu	r2,r6,1000a0d8 <_realloc_r+0x54c>
10009eb4:	b8800404 	addi	r2,r23,16
10009eb8:	80c00204 	addi	r3,r16,8
10009ebc:	19000017 	ldw	r4,0(r3)
10009ec0:	9021883a 	mov	r16,r18
10009ec4:	3829883a 	mov	r20,r7
10009ec8:	11000015 	stw	r4,0(r2)
10009ecc:	19000117 	ldw	r4,4(r3)
10009ed0:	b82d883a 	mov	r22,r23
10009ed4:	11000115 	stw	r4,4(r2)
10009ed8:	18c00217 	ldw	r3,8(r3)
10009edc:	10c00215 	stw	r3,8(r2)
10009ee0:	b8800117 	ldw	r2,4(r23)
10009ee4:	003f7b06 	br	10009cd4 <__alt_data_end+0xf8009cd4>
10009ee8:	80c00017 	ldw	r3,0(r16)
10009eec:	90c00015 	stw	r3,0(r18)
10009ef0:	80c00117 	ldw	r3,4(r16)
10009ef4:	90c00115 	stw	r3,4(r18)
10009ef8:	00c006c4 	movi	r3,27
10009efc:	19804636 	bltu	r3,r6,1000a018 <_realloc_r+0x48c>
10009f00:	90800204 	addi	r2,r18,8
10009f04:	80c00204 	addi	r3,r16,8
10009f08:	003fb906 	br	10009df0 <__alt_data_end+0xf8009df0>
10009f0c:	9005883a 	mov	r2,r18
10009f10:	8007883a 	mov	r3,r16
10009f14:	19000017 	ldw	r4,0(r3)
10009f18:	9021883a 	mov	r16,r18
10009f1c:	b82d883a 	mov	r22,r23
10009f20:	11000015 	stw	r4,0(r2)
10009f24:	19000117 	ldw	r4,4(r3)
10009f28:	11000115 	stw	r4,4(r2)
10009f2c:	18c00217 	ldw	r3,8(r3)
10009f30:	10c00215 	stw	r3,8(r2)
10009f34:	b8800117 	ldw	r2,4(r23)
10009f38:	003f6606 	br	10009cd4 <__alt_data_end+0xf8009cd4>
10009f3c:	2445c83a 	sub	r2,r4,r17
10009f40:	b46d883a 	add	r22,r22,r17
10009f44:	10800054 	ori	r2,r2,1
10009f48:	b0800115 	stw	r2,4(r22)
10009f4c:	80bfff17 	ldw	r2,-4(r16)
10009f50:	a809883a 	mov	r4,r21
10009f54:	e5800215 	stw	r22,8(fp)
10009f58:	1080004c 	andi	r2,r2,1
10009f5c:	88a2b03a 	or	r17,r17,r2
10009f60:	847fff15 	stw	r17,-4(r16)
10009f64:	00109800 	call	10010980 <__malloc_unlock>
10009f68:	8025883a 	mov	r18,r16
10009f6c:	003f6606 	br	10009d08 <__alt_data_end+0xf8009d08>
10009f70:	9009883a 	mov	r4,r18
10009f74:	800b883a 	mov	r5,r16
10009f78:	00087280 	call	10008728 <memmove>
10009f7c:	003fa206 	br	10009e08 <__alt_data_end+0xf8009e08>
10009f80:	88800404 	addi	r2,r17,16
10009f84:	a0bf8716 	blt	r20,r2,10009da4 <__alt_data_end+0xf8009da4>
10009f88:	b8800317 	ldw	r2,12(r23)
10009f8c:	b8c00217 	ldw	r3,8(r23)
10009f90:	99bfff04 	addi	r6,r19,-4
10009f94:	01000904 	movi	r4,36
10009f98:	18800315 	stw	r2,12(r3)
10009f9c:	10c00215 	stw	r3,8(r2)
10009fa0:	bc800204 	addi	r18,r23,8
10009fa4:	21806536 	bltu	r4,r6,1000a13c <_realloc_r+0x5b0>
10009fa8:	008004c4 	movi	r2,19
10009fac:	1180592e 	bgeu	r2,r6,1000a114 <_realloc_r+0x588>
10009fb0:	80800017 	ldw	r2,0(r16)
10009fb4:	b8800215 	stw	r2,8(r23)
10009fb8:	80800117 	ldw	r2,4(r16)
10009fbc:	b8800315 	stw	r2,12(r23)
10009fc0:	008006c4 	movi	r2,27
10009fc4:	11806136 	bltu	r2,r6,1000a14c <_realloc_r+0x5c0>
10009fc8:	b8800404 	addi	r2,r23,16
10009fcc:	80c00204 	addi	r3,r16,8
10009fd0:	19000017 	ldw	r4,0(r3)
10009fd4:	11000015 	stw	r4,0(r2)
10009fd8:	19000117 	ldw	r4,4(r3)
10009fdc:	11000115 	stw	r4,4(r2)
10009fe0:	18c00217 	ldw	r3,8(r3)
10009fe4:	10c00215 	stw	r3,8(r2)
10009fe8:	a447c83a 	sub	r3,r20,r17
10009fec:	bc45883a 	add	r2,r23,r17
10009ff0:	18c00054 	ori	r3,r3,1
10009ff4:	10c00115 	stw	r3,4(r2)
10009ff8:	b8c00117 	ldw	r3,4(r23)
10009ffc:	e0800215 	stw	r2,8(fp)
1000a000:	a809883a 	mov	r4,r21
1000a004:	1880004c 	andi	r2,r3,1
1000a008:	88a2b03a 	or	r17,r17,r2
1000a00c:	bc400115 	stw	r17,4(r23)
1000a010:	00109800 	call	10010980 <__malloc_unlock>
1000a014:	003f3c06 	br	10009d08 <__alt_data_end+0xf8009d08>
1000a018:	80c00217 	ldw	r3,8(r16)
1000a01c:	90c00215 	stw	r3,8(r18)
1000a020:	80c00317 	ldw	r3,12(r16)
1000a024:	90c00315 	stw	r3,12(r18)
1000a028:	30802426 	beq	r6,r2,1000a0bc <_realloc_r+0x530>
1000a02c:	90800404 	addi	r2,r18,16
1000a030:	80c00404 	addi	r3,r16,16
1000a034:	003f6e06 	br	10009df0 <__alt_data_end+0xf8009df0>
1000a038:	953fff17 	ldw	r20,-4(r18)
1000a03c:	00ffff04 	movi	r3,-4
1000a040:	a0e8703a 	and	r20,r20,r3
1000a044:	a4e9883a 	add	r20,r20,r19
1000a048:	003f2206 	br	10009cd4 <__alt_data_end+0xf8009cd4>
1000a04c:	800b883a 	mov	r5,r16
1000a050:	9009883a 	mov	r4,r18
1000a054:	00087280 	call	10008728 <memmove>
1000a058:	9021883a 	mov	r16,r18
1000a05c:	b8800117 	ldw	r2,4(r23)
1000a060:	b82d883a 	mov	r22,r23
1000a064:	003f1b06 	br	10009cd4 <__alt_data_end+0xf8009cd4>
1000a068:	9005883a 	mov	r2,r18
1000a06c:	8007883a 	mov	r3,r16
1000a070:	003f9206 	br	10009ebc <__alt_data_end+0xf8009ebc>
1000a074:	800b883a 	mov	r5,r16
1000a078:	9009883a 	mov	r4,r18
1000a07c:	d9c00015 	stw	r7,0(sp)
1000a080:	00087280 	call	10008728 <memmove>
1000a084:	d9c00017 	ldw	r7,0(sp)
1000a088:	9021883a 	mov	r16,r18
1000a08c:	b8800117 	ldw	r2,4(r23)
1000a090:	3829883a 	mov	r20,r7
1000a094:	b82d883a 	mov	r22,r23
1000a098:	003f0e06 	br	10009cd4 <__alt_data_end+0xf8009cd4>
1000a09c:	80800217 	ldw	r2,8(r16)
1000a0a0:	b8800415 	stw	r2,16(r23)
1000a0a4:	80800317 	ldw	r2,12(r16)
1000a0a8:	b8800515 	stw	r2,20(r23)
1000a0ac:	31001226 	beq	r6,r4,1000a0f8 <_realloc_r+0x56c>
1000a0b0:	b8800604 	addi	r2,r23,24
1000a0b4:	80c00404 	addi	r3,r16,16
1000a0b8:	003f9606 	br	10009f14 <__alt_data_end+0xf8009f14>
1000a0bc:	81000417 	ldw	r4,16(r16)
1000a0c0:	90800604 	addi	r2,r18,24
1000a0c4:	80c00604 	addi	r3,r16,24
1000a0c8:	91000415 	stw	r4,16(r18)
1000a0cc:	81000517 	ldw	r4,20(r16)
1000a0d0:	91000515 	stw	r4,20(r18)
1000a0d4:	003f4606 	br	10009df0 <__alt_data_end+0xf8009df0>
1000a0d8:	80800217 	ldw	r2,8(r16)
1000a0dc:	b8800415 	stw	r2,16(r23)
1000a0e0:	80800317 	ldw	r2,12(r16)
1000a0e4:	b8800515 	stw	r2,20(r23)
1000a0e8:	31000d26 	beq	r6,r4,1000a120 <_realloc_r+0x594>
1000a0ec:	b8800604 	addi	r2,r23,24
1000a0f0:	80c00404 	addi	r3,r16,16
1000a0f4:	003f7106 	br	10009ebc <__alt_data_end+0xf8009ebc>
1000a0f8:	81000417 	ldw	r4,16(r16)
1000a0fc:	b8800804 	addi	r2,r23,32
1000a100:	80c00604 	addi	r3,r16,24
1000a104:	b9000615 	stw	r4,24(r23)
1000a108:	81000517 	ldw	r4,20(r16)
1000a10c:	b9000715 	stw	r4,28(r23)
1000a110:	003f8006 	br	10009f14 <__alt_data_end+0xf8009f14>
1000a114:	9005883a 	mov	r2,r18
1000a118:	8007883a 	mov	r3,r16
1000a11c:	003fac06 	br	10009fd0 <__alt_data_end+0xf8009fd0>
1000a120:	81000417 	ldw	r4,16(r16)
1000a124:	b8800804 	addi	r2,r23,32
1000a128:	80c00604 	addi	r3,r16,24
1000a12c:	b9000615 	stw	r4,24(r23)
1000a130:	81000517 	ldw	r4,20(r16)
1000a134:	b9000715 	stw	r4,28(r23)
1000a138:	003f6006 	br	10009ebc <__alt_data_end+0xf8009ebc>
1000a13c:	9009883a 	mov	r4,r18
1000a140:	800b883a 	mov	r5,r16
1000a144:	00087280 	call	10008728 <memmove>
1000a148:	003fa706 	br	10009fe8 <__alt_data_end+0xf8009fe8>
1000a14c:	80800217 	ldw	r2,8(r16)
1000a150:	b8800415 	stw	r2,16(r23)
1000a154:	80800317 	ldw	r2,12(r16)
1000a158:	b8800515 	stw	r2,20(r23)
1000a15c:	31000326 	beq	r6,r4,1000a16c <_realloc_r+0x5e0>
1000a160:	b8800604 	addi	r2,r23,24
1000a164:	80c00404 	addi	r3,r16,16
1000a168:	003f9906 	br	10009fd0 <__alt_data_end+0xf8009fd0>
1000a16c:	81000417 	ldw	r4,16(r16)
1000a170:	b8800804 	addi	r2,r23,32
1000a174:	80c00604 	addi	r3,r16,24
1000a178:	b9000615 	stw	r4,24(r23)
1000a17c:	81000517 	ldw	r4,20(r16)
1000a180:	b9000715 	stw	r4,28(r23)
1000a184:	003f9206 	br	10009fd0 <__alt_data_end+0xf8009fd0>

1000a188 <lflush>:
1000a188:	20c0030b 	ldhu	r3,12(r4)
1000a18c:	00800244 	movi	r2,9
1000a190:	18c0024c 	andi	r3,r3,9
1000a194:	18800226 	beq	r3,r2,1000a1a0 <lflush+0x18>
1000a198:	0005883a 	mov	r2,zero
1000a19c:	f800283a 	ret
1000a1a0:	00069e01 	jmpi	100069e0 <fflush>

1000a1a4 <__srefill_r>:
1000a1a4:	defffd04 	addi	sp,sp,-12
1000a1a8:	dc400115 	stw	r17,4(sp)
1000a1ac:	dc000015 	stw	r16,0(sp)
1000a1b0:	dfc00215 	stw	ra,8(sp)
1000a1b4:	2023883a 	mov	r17,r4
1000a1b8:	2821883a 	mov	r16,r5
1000a1bc:	20000226 	beq	r4,zero,1000a1c8 <__srefill_r+0x24>
1000a1c0:	20800e17 	ldw	r2,56(r4)
1000a1c4:	10004426 	beq	r2,zero,1000a2d8 <__srefill_r+0x134>
1000a1c8:	8080030b 	ldhu	r2,12(r16)
1000a1cc:	80000115 	stw	zero,4(r16)
1000a1d0:	10c0080c 	andi	r3,r2,32
1000a1d4:	18ffffcc 	andi	r3,r3,65535
1000a1d8:	18e0001c 	xori	r3,r3,32768
1000a1dc:	18e00004 	addi	r3,r3,-32768
1000a1e0:	1800371e 	bne	r3,zero,1000a2c0 <__srefill_r+0x11c>
1000a1e4:	10c0010c 	andi	r3,r2,4
1000a1e8:	18ffffcc 	andi	r3,r3,65535
1000a1ec:	18e0001c 	xori	r3,r3,32768
1000a1f0:	18e00004 	addi	r3,r3,-32768
1000a1f4:	18002226 	beq	r3,zero,1000a280 <__srefill_r+0xdc>
1000a1f8:	81400c17 	ldw	r5,48(r16)
1000a1fc:	28000826 	beq	r5,zero,1000a220 <__srefill_r+0x7c>
1000a200:	80801004 	addi	r2,r16,64
1000a204:	28800226 	beq	r5,r2,1000a210 <__srefill_r+0x6c>
1000a208:	8809883a 	mov	r4,r17
1000a20c:	00070b40 	call	100070b4 <_free_r>
1000a210:	80800f17 	ldw	r2,60(r16)
1000a214:	80000c15 	stw	zero,48(r16)
1000a218:	80800115 	stw	r2,4(r16)
1000a21c:	1000401e 	bne	r2,zero,1000a320 <__srefill_r+0x17c>
1000a220:	80800417 	ldw	r2,16(r16)
1000a224:	10005026 	beq	r2,zero,1000a368 <__srefill_r+0x1c4>
1000a228:	8080030b 	ldhu	r2,12(r16)
1000a22c:	108000cc 	andi	r2,r2,3
1000a230:	10002b1e 	bne	r2,zero,1000a2e0 <__srefill_r+0x13c>
1000a234:	81800417 	ldw	r6,16(r16)
1000a238:	80800817 	ldw	r2,32(r16)
1000a23c:	81400717 	ldw	r5,28(r16)
1000a240:	81c00517 	ldw	r7,20(r16)
1000a244:	8809883a 	mov	r4,r17
1000a248:	81800015 	stw	r6,0(r16)
1000a24c:	103ee83a 	callr	r2
1000a250:	8100030b 	ldhu	r4,12(r16)
1000a254:	00f7ffc4 	movi	r3,-8193
1000a258:	80800115 	stw	r2,4(r16)
1000a25c:	20c6703a 	and	r3,r4,r3
1000a260:	80c0030d 	sth	r3,12(r16)
1000a264:	0080130e 	bge	zero,r2,1000a2b4 <__srefill_r+0x110>
1000a268:	0005883a 	mov	r2,zero
1000a26c:	dfc00217 	ldw	ra,8(sp)
1000a270:	dc400117 	ldw	r17,4(sp)
1000a274:	dc000017 	ldw	r16,0(sp)
1000a278:	dec00304 	addi	sp,sp,12
1000a27c:	f800283a 	ret
1000a280:	10c0040c 	andi	r3,r2,16
1000a284:	18ffffcc 	andi	r3,r3,65535
1000a288:	18e0001c 	xori	r3,r3,32768
1000a28c:	18e00004 	addi	r3,r3,-32768
1000a290:	18003926 	beq	r3,zero,1000a378 <__srefill_r+0x1d4>
1000a294:	10c0020c 	andi	r3,r2,8
1000a298:	18ffffcc 	andi	r3,r3,65535
1000a29c:	18e0001c 	xori	r3,r3,32768
1000a2a0:	18e00004 	addi	r3,r3,-32768
1000a2a4:	1800261e 	bne	r3,zero,1000a340 <__srefill_r+0x19c>
1000a2a8:	10800114 	ori	r2,r2,4
1000a2ac:	8080030d 	sth	r2,12(r16)
1000a2b0:	003fdb06 	br	1000a220 <__alt_data_end+0xf800a220>
1000a2b4:	1000111e 	bne	r2,zero,1000a2fc <__srefill_r+0x158>
1000a2b8:	18c00814 	ori	r3,r3,32
1000a2bc:	80c0030d 	sth	r3,12(r16)
1000a2c0:	00bfffc4 	movi	r2,-1
1000a2c4:	dfc00217 	ldw	ra,8(sp)
1000a2c8:	dc400117 	ldw	r17,4(sp)
1000a2cc:	dc000017 	ldw	r16,0(sp)
1000a2d0:	dec00304 	addi	sp,sp,12
1000a2d4:	f800283a 	ret
1000a2d8:	0006ab40 	call	10006ab4 <__sinit>
1000a2dc:	003fba06 	br	1000a1c8 <__alt_data_end+0xf800a1c8>
1000a2e0:	00840074 	movhi	r2,4097
1000a2e4:	10936604 	addi	r2,r2,19864
1000a2e8:	11000017 	ldw	r4,0(r2)
1000a2ec:	01440074 	movhi	r5,4097
1000a2f0:	29686204 	addi	r5,r5,-24184
1000a2f4:	00078680 	call	10007868 <_fwalk>
1000a2f8:	003fce06 	br	1000a234 <__alt_data_end+0xf800a234>
1000a2fc:	18c01014 	ori	r3,r3,64
1000a300:	00bfffc4 	movi	r2,-1
1000a304:	80000115 	stw	zero,4(r16)
1000a308:	80c0030d 	sth	r3,12(r16)
1000a30c:	dfc00217 	ldw	ra,8(sp)
1000a310:	dc400117 	ldw	r17,4(sp)
1000a314:	dc000017 	ldw	r16,0(sp)
1000a318:	dec00304 	addi	sp,sp,12
1000a31c:	f800283a 	ret
1000a320:	80c00e17 	ldw	r3,56(r16)
1000a324:	0005883a 	mov	r2,zero
1000a328:	80c00015 	stw	r3,0(r16)
1000a32c:	dfc00217 	ldw	ra,8(sp)
1000a330:	dc400117 	ldw	r17,4(sp)
1000a334:	dc000017 	ldw	r16,0(sp)
1000a338:	dec00304 	addi	sp,sp,12
1000a33c:	f800283a 	ret
1000a340:	8809883a 	mov	r4,r17
1000a344:	800b883a 	mov	r5,r16
1000a348:	00067f80 	call	100067f8 <_fflush_r>
1000a34c:	103fdc1e 	bne	r2,zero,1000a2c0 <__alt_data_end+0xf800a2c0>
1000a350:	8080030b 	ldhu	r2,12(r16)
1000a354:	00fffdc4 	movi	r3,-9
1000a358:	80000215 	stw	zero,8(r16)
1000a35c:	1884703a 	and	r2,r3,r2
1000a360:	80000615 	stw	zero,24(r16)
1000a364:	003fd006 	br	1000a2a8 <__alt_data_end+0xf800a2a8>
1000a368:	8809883a 	mov	r4,r17
1000a36c:	800b883a 	mov	r5,r16
1000a370:	0007adc0 	call	10007adc <__smakebuf_r>
1000a374:	003fac06 	br	1000a228 <__alt_data_end+0xf800a228>
1000a378:	00c00244 	movi	r3,9
1000a37c:	10801014 	ori	r2,r2,64
1000a380:	88c00015 	stw	r3,0(r17)
1000a384:	8080030d 	sth	r2,12(r16)
1000a388:	00bfffc4 	movi	r2,-1
1000a38c:	003fb706 	br	1000a26c <__alt_data_end+0xf800a26c>

1000a390 <__isinfd>:
1000a390:	0105c83a 	sub	r2,zero,r4
1000a394:	1108b03a 	or	r4,r2,r4
1000a398:	2004d7fa 	srli	r2,r4,31
1000a39c:	00e00034 	movhi	r3,32768
1000a3a0:	18ffffc4 	addi	r3,r3,-1
1000a3a4:	28ca703a 	and	r5,r5,r3
1000a3a8:	1144b03a 	or	r2,r2,r5
1000a3ac:	00dffc34 	movhi	r3,32752
1000a3b0:	1885c83a 	sub	r2,r3,r2
1000a3b4:	0087c83a 	sub	r3,zero,r2
1000a3b8:	1884b03a 	or	r2,r3,r2
1000a3bc:	1005d7fa 	srai	r2,r2,31
1000a3c0:	10800044 	addi	r2,r2,1
1000a3c4:	f800283a 	ret

1000a3c8 <__isnand>:
1000a3c8:	0105c83a 	sub	r2,zero,r4
1000a3cc:	1108b03a 	or	r4,r2,r4
1000a3d0:	2004d7fa 	srli	r2,r4,31
1000a3d4:	00e00034 	movhi	r3,32768
1000a3d8:	18ffffc4 	addi	r3,r3,-1
1000a3dc:	28ca703a 	and	r5,r5,r3
1000a3e0:	1144b03a 	or	r2,r2,r5
1000a3e4:	00dffc34 	movhi	r3,32752
1000a3e8:	1885c83a 	sub	r2,r3,r2
1000a3ec:	1004d7fa 	srli	r2,r2,31
1000a3f0:	f800283a 	ret

1000a3f4 <_sbrk_r>:
1000a3f4:	defffd04 	addi	sp,sp,-12
1000a3f8:	dc400115 	stw	r17,4(sp)
1000a3fc:	dc000015 	stw	r16,0(sp)
1000a400:	2023883a 	mov	r17,r4
1000a404:	04040074 	movhi	r16,4097
1000a408:	841aa604 	addi	r16,r16,27288
1000a40c:	2809883a 	mov	r4,r5
1000a410:	dfc00215 	stw	ra,8(sp)
1000a414:	80000015 	stw	zero,0(r16)
1000a418:	0010b640 	call	10010b64 <sbrk>
1000a41c:	00ffffc4 	movi	r3,-1
1000a420:	10c00526 	beq	r2,r3,1000a438 <_sbrk_r+0x44>
1000a424:	dfc00217 	ldw	ra,8(sp)
1000a428:	dc400117 	ldw	r17,4(sp)
1000a42c:	dc000017 	ldw	r16,0(sp)
1000a430:	dec00304 	addi	sp,sp,12
1000a434:	f800283a 	ret
1000a438:	80c00017 	ldw	r3,0(r16)
1000a43c:	183ff926 	beq	r3,zero,1000a424 <__alt_data_end+0xf800a424>
1000a440:	88c00015 	stw	r3,0(r17)
1000a444:	dfc00217 	ldw	ra,8(sp)
1000a448:	dc400117 	ldw	r17,4(sp)
1000a44c:	dc000017 	ldw	r16,0(sp)
1000a450:	dec00304 	addi	sp,sp,12
1000a454:	f800283a 	ret

1000a458 <__sccl>:
1000a458:	2a400003 	ldbu	r9,0(r5)
1000a45c:	00801784 	movi	r2,94
1000a460:	48802626 	beq	r9,r2,1000a4fc <__sccl+0xa4>
1000a464:	28800044 	addi	r2,r5,1
1000a468:	0011883a 	mov	r8,zero
1000a46c:	000b883a 	mov	r5,zero
1000a470:	0007883a 	mov	r3,zero
1000a474:	01c04004 	movi	r7,256
1000a478:	20cd883a 	add	r6,r4,r3
1000a47c:	32000005 	stb	r8,0(r6)
1000a480:	18c00044 	addi	r3,r3,1
1000a484:	19fffc1e 	bne	r3,r7,1000a478 <__alt_data_end+0xf800a478>
1000a488:	48000f26 	beq	r9,zero,1000a4c8 <__sccl+0x70>
1000a48c:	01800044 	movi	r6,1
1000a490:	314dc83a 	sub	r6,r6,r5
1000a494:	02001744 	movi	r8,93
1000a498:	01400b44 	movi	r5,45
1000a49c:	2247883a 	add	r3,r4,r9
1000a4a0:	19800005 	stb	r6,0(r3)
1000a4a4:	10c00003 	ldbu	r3,0(r2)
1000a4a8:	11c00044 	addi	r7,r2,1
1000a4ac:	19400a26 	beq	r3,r5,1000a4d8 <__sccl+0x80>
1000a4b0:	1a000726 	beq	r3,r8,1000a4d0 <__sccl+0x78>
1000a4b4:	1800011e 	bne	r3,zero,1000a4bc <__sccl+0x64>
1000a4b8:	f800283a 	ret
1000a4bc:	1813883a 	mov	r9,r3
1000a4c0:	3805883a 	mov	r2,r7
1000a4c4:	003ff506 	br	1000a49c <__alt_data_end+0xf800a49c>
1000a4c8:	10bfffc4 	addi	r2,r2,-1
1000a4cc:	f800283a 	ret
1000a4d0:	3805883a 	mov	r2,r7
1000a4d4:	f800283a 	ret
1000a4d8:	10c00043 	ldbu	r3,1(r2)
1000a4dc:	1a000c26 	beq	r3,r8,1000a510 <__sccl+0xb8>
1000a4e0:	1a400b16 	blt	r3,r9,1000a510 <__sccl+0xb8>
1000a4e4:	10800084 	addi	r2,r2,2
1000a4e8:	4a400044 	addi	r9,r9,1
1000a4ec:	224f883a 	add	r7,r4,r9
1000a4f0:	39800005 	stb	r6,0(r7)
1000a4f4:	48fffc16 	blt	r9,r3,1000a4e8 <__alt_data_end+0xf800a4e8>
1000a4f8:	003fea06 	br	1000a4a4 <__alt_data_end+0xf800a4a4>
1000a4fc:	2a400043 	ldbu	r9,1(r5)
1000a500:	28800084 	addi	r2,r5,2
1000a504:	02000044 	movi	r8,1
1000a508:	01400044 	movi	r5,1
1000a50c:	003fd806 	br	1000a470 <__alt_data_end+0xf800a470>
1000a510:	2813883a 	mov	r9,r5
1000a514:	3805883a 	mov	r2,r7
1000a518:	003fe006 	br	1000a49c <__alt_data_end+0xf800a49c>

1000a51c <nanf>:
1000a51c:	009ff034 	movhi	r2,32704
1000a520:	f800283a 	ret

1000a524 <_sprintf_r>:
1000a524:	deffe704 	addi	sp,sp,-100
1000a528:	2807883a 	mov	r3,r5
1000a52c:	dfc01715 	stw	ra,92(sp)
1000a530:	d9c01815 	stw	r7,96(sp)
1000a534:	00a00034 	movhi	r2,32768
1000a538:	10bfffc4 	addi	r2,r2,-1
1000a53c:	02008204 	movi	r8,520
1000a540:	d8800215 	stw	r2,8(sp)
1000a544:	d8800515 	stw	r2,20(sp)
1000a548:	d80b883a 	mov	r5,sp
1000a54c:	d9c01804 	addi	r7,sp,96
1000a550:	00bfffc4 	movi	r2,-1
1000a554:	d8c00015 	stw	r3,0(sp)
1000a558:	d8c00415 	stw	r3,16(sp)
1000a55c:	da00030d 	sth	r8,12(sp)
1000a560:	d880038d 	sth	r2,14(sp)
1000a564:	00018040 	call	10001804 <___vfprintf_internal_r>
1000a568:	d8c00017 	ldw	r3,0(sp)
1000a56c:	18000005 	stb	zero,0(r3)
1000a570:	dfc01717 	ldw	ra,92(sp)
1000a574:	dec01904 	addi	sp,sp,100
1000a578:	f800283a 	ret

1000a57c <sprintf>:
1000a57c:	deffe604 	addi	sp,sp,-104
1000a580:	2007883a 	mov	r3,r4
1000a584:	dfc01715 	stw	ra,92(sp)
1000a588:	d9801815 	stw	r6,96(sp)
1000a58c:	d9c01915 	stw	r7,100(sp)
1000a590:	00840074 	movhi	r2,4097
1000a594:	10936704 	addi	r2,r2,19868
1000a598:	11000017 	ldw	r4,0(r2)
1000a59c:	00a00034 	movhi	r2,32768
1000a5a0:	10bfffc4 	addi	r2,r2,-1
1000a5a4:	280d883a 	mov	r6,r5
1000a5a8:	02008204 	movi	r8,520
1000a5ac:	d8800215 	stw	r2,8(sp)
1000a5b0:	d8800515 	stw	r2,20(sp)
1000a5b4:	d80b883a 	mov	r5,sp
1000a5b8:	d9c01804 	addi	r7,sp,96
1000a5bc:	00bfffc4 	movi	r2,-1
1000a5c0:	d8c00015 	stw	r3,0(sp)
1000a5c4:	d8c00415 	stw	r3,16(sp)
1000a5c8:	da00030d 	sth	r8,12(sp)
1000a5cc:	d880038d 	sth	r2,14(sp)
1000a5d0:	00018040 	call	10001804 <___vfprintf_internal_r>
1000a5d4:	d8c00017 	ldw	r3,0(sp)
1000a5d8:	18000005 	stb	zero,0(r3)
1000a5dc:	dfc01717 	ldw	ra,92(sp)
1000a5e0:	dec01a04 	addi	sp,sp,104
1000a5e4:	f800283a 	ret

1000a5e8 <__sread>:
1000a5e8:	defffe04 	addi	sp,sp,-8
1000a5ec:	dc000015 	stw	r16,0(sp)
1000a5f0:	2821883a 	mov	r16,r5
1000a5f4:	2940038f 	ldh	r5,14(r5)
1000a5f8:	dfc00115 	stw	ra,4(sp)
1000a5fc:	000de2c0 	call	1000de2c <_read_r>
1000a600:	10000716 	blt	r2,zero,1000a620 <__sread+0x38>
1000a604:	80c01417 	ldw	r3,80(r16)
1000a608:	1887883a 	add	r3,r3,r2
1000a60c:	80c01415 	stw	r3,80(r16)
1000a610:	dfc00117 	ldw	ra,4(sp)
1000a614:	dc000017 	ldw	r16,0(sp)
1000a618:	dec00204 	addi	sp,sp,8
1000a61c:	f800283a 	ret
1000a620:	80c0030b 	ldhu	r3,12(r16)
1000a624:	18fbffcc 	andi	r3,r3,61439
1000a628:	80c0030d 	sth	r3,12(r16)
1000a62c:	dfc00117 	ldw	ra,4(sp)
1000a630:	dc000017 	ldw	r16,0(sp)
1000a634:	dec00204 	addi	sp,sp,8
1000a638:	f800283a 	ret

1000a63c <__swrite>:
1000a63c:	2880030b 	ldhu	r2,12(r5)
1000a640:	defffb04 	addi	sp,sp,-20
1000a644:	dcc00315 	stw	r19,12(sp)
1000a648:	10c0400c 	andi	r3,r2,256
1000a64c:	18ffffcc 	andi	r3,r3,65535
1000a650:	18e0001c 	xori	r3,r3,32768
1000a654:	dc800215 	stw	r18,8(sp)
1000a658:	dc400115 	stw	r17,4(sp)
1000a65c:	dc000015 	stw	r16,0(sp)
1000a660:	dfc00415 	stw	ra,16(sp)
1000a664:	18e00004 	addi	r3,r3,-32768
1000a668:	2821883a 	mov	r16,r5
1000a66c:	2027883a 	mov	r19,r4
1000a670:	3025883a 	mov	r18,r6
1000a674:	3823883a 	mov	r17,r7
1000a678:	18000526 	beq	r3,zero,1000a690 <__swrite+0x54>
1000a67c:	2940038f 	ldh	r5,14(r5)
1000a680:	000d883a 	mov	r6,zero
1000a684:	01c00084 	movi	r7,2
1000a688:	000ddc00 	call	1000ddc0 <_lseek_r>
1000a68c:	8080030b 	ldhu	r2,12(r16)
1000a690:	8140038f 	ldh	r5,14(r16)
1000a694:	10bbffcc 	andi	r2,r2,61439
1000a698:	9809883a 	mov	r4,r19
1000a69c:	900d883a 	mov	r6,r18
1000a6a0:	880f883a 	mov	r7,r17
1000a6a4:	8080030d 	sth	r2,12(r16)
1000a6a8:	dfc00417 	ldw	ra,16(sp)
1000a6ac:	dcc00317 	ldw	r19,12(sp)
1000a6b0:	dc800217 	ldw	r18,8(sp)
1000a6b4:	dc400117 	ldw	r17,4(sp)
1000a6b8:	dc000017 	ldw	r16,0(sp)
1000a6bc:	dec00504 	addi	sp,sp,20
1000a6c0:	000ce641 	jmpi	1000ce64 <_write_r>

1000a6c4 <__sseek>:
1000a6c4:	defffe04 	addi	sp,sp,-8
1000a6c8:	dc000015 	stw	r16,0(sp)
1000a6cc:	2821883a 	mov	r16,r5
1000a6d0:	2940038f 	ldh	r5,14(r5)
1000a6d4:	dfc00115 	stw	ra,4(sp)
1000a6d8:	000ddc00 	call	1000ddc0 <_lseek_r>
1000a6dc:	00ffffc4 	movi	r3,-1
1000a6e0:	10c00826 	beq	r2,r3,1000a704 <__sseek+0x40>
1000a6e4:	80c0030b 	ldhu	r3,12(r16)
1000a6e8:	80801415 	stw	r2,80(r16)
1000a6ec:	18c40014 	ori	r3,r3,4096
1000a6f0:	80c0030d 	sth	r3,12(r16)
1000a6f4:	dfc00117 	ldw	ra,4(sp)
1000a6f8:	dc000017 	ldw	r16,0(sp)
1000a6fc:	dec00204 	addi	sp,sp,8
1000a700:	f800283a 	ret
1000a704:	80c0030b 	ldhu	r3,12(r16)
1000a708:	18fbffcc 	andi	r3,r3,61439
1000a70c:	80c0030d 	sth	r3,12(r16)
1000a710:	dfc00117 	ldw	ra,4(sp)
1000a714:	dc000017 	ldw	r16,0(sp)
1000a718:	dec00204 	addi	sp,sp,8
1000a71c:	f800283a 	ret

1000a720 <__sclose>:
1000a720:	2940038f 	ldh	r5,14(r5)
1000a724:	000cf9c1 	jmpi	1000cf9c <_close_r>

1000a728 <strcmp>:
1000a728:	2904b03a 	or	r2,r5,r4
1000a72c:	108000cc 	andi	r2,r2,3
1000a730:	1000171e 	bne	r2,zero,1000a790 <strcmp+0x68>
1000a734:	20800017 	ldw	r2,0(r4)
1000a738:	28c00017 	ldw	r3,0(r5)
1000a73c:	10c0141e 	bne	r2,r3,1000a790 <strcmp+0x68>
1000a740:	027fbff4 	movhi	r9,65279
1000a744:	4a7fbfc4 	addi	r9,r9,-257
1000a748:	1247883a 	add	r3,r2,r9
1000a74c:	0084303a 	nor	r2,zero,r2
1000a750:	1884703a 	and	r2,r3,r2
1000a754:	02202074 	movhi	r8,32897
1000a758:	42202004 	addi	r8,r8,-32640
1000a75c:	1204703a 	and	r2,r2,r8
1000a760:	10000226 	beq	r2,zero,1000a76c <strcmp+0x44>
1000a764:	00001706 	br	1000a7c4 <strcmp+0x9c>
1000a768:	3000161e 	bne	r6,zero,1000a7c4 <strcmp+0x9c>
1000a76c:	21000104 	addi	r4,r4,4
1000a770:	20800017 	ldw	r2,0(r4)
1000a774:	29400104 	addi	r5,r5,4
1000a778:	28c00017 	ldw	r3,0(r5)
1000a77c:	124f883a 	add	r7,r2,r9
1000a780:	008c303a 	nor	r6,zero,r2
1000a784:	398c703a 	and	r6,r7,r6
1000a788:	320c703a 	and	r6,r6,r8
1000a78c:	10fff626 	beq	r2,r3,1000a768 <__alt_data_end+0xf800a768>
1000a790:	20800007 	ldb	r2,0(r4)
1000a794:	1000051e 	bne	r2,zero,1000a7ac <strcmp+0x84>
1000a798:	00000606 	br	1000a7b4 <strcmp+0x8c>
1000a79c:	21000044 	addi	r4,r4,1
1000a7a0:	20800007 	ldb	r2,0(r4)
1000a7a4:	29400044 	addi	r5,r5,1
1000a7a8:	10000226 	beq	r2,zero,1000a7b4 <strcmp+0x8c>
1000a7ac:	28c00007 	ldb	r3,0(r5)
1000a7b0:	10fffa26 	beq	r2,r3,1000a79c <__alt_data_end+0xf800a79c>
1000a7b4:	20c00003 	ldbu	r3,0(r4)
1000a7b8:	28800003 	ldbu	r2,0(r5)
1000a7bc:	1885c83a 	sub	r2,r3,r2
1000a7c0:	f800283a 	ret
1000a7c4:	0005883a 	mov	r2,zero
1000a7c8:	f800283a 	ret

1000a7cc <_strtod_r>:
1000a7cc:	deffdc04 	addi	sp,sp,-144
1000a7d0:	dc001a15 	stw	r16,104(sp)
1000a7d4:	d9400e15 	stw	r5,56(sp)
1000a7d8:	d9801115 	stw	r6,68(sp)
1000a7dc:	d9400c15 	stw	r5,48(sp)
1000a7e0:	2805883a 	mov	r2,r5
1000a7e4:	dfc02315 	stw	ra,140(sp)
1000a7e8:	df002215 	stw	fp,136(sp)
1000a7ec:	ddc02115 	stw	r23,132(sp)
1000a7f0:	dd802015 	stw	r22,128(sp)
1000a7f4:	dd401f15 	stw	r21,124(sp)
1000a7f8:	dd001e15 	stw	r20,120(sp)
1000a7fc:	dcc01d15 	stw	r19,116(sp)
1000a800:	dc801c15 	stw	r18,112(sp)
1000a804:	dc401b15 	stw	r17,108(sp)
1000a808:	2021883a 	mov	r16,r4
1000a80c:	d8000615 	stw	zero,24(sp)
1000a810:	d8000715 	stw	zero,28(sp)
1000a814:	01400b44 	movi	r5,45
1000a818:	01840074 	movhi	r6,4097
1000a81c:	31aa5c04 	addi	r6,r6,-22160
1000a820:	10c00003 	ldbu	r3,0(r2)
1000a824:	19003fcc 	andi	r4,r3,255
1000a828:	29004c2e 	bgeu	r5,r4,1000a95c <_strtod_r+0x190>
1000a82c:	1c803fcc 	andi	r18,r3,255
1000a830:	9480201c 	xori	r18,r18,128
1000a834:	102d883a 	mov	r22,r2
1000a838:	d8001215 	stw	zero,72(sp)
1000a83c:	94bfe004 	addi	r18,r18,-128
1000a840:	00800c04 	movi	r2,48
1000a844:	9080f526 	beq	r18,r2,1000ac1c <_strtod_r+0x450>
1000a848:	d8001315 	stw	zero,76(sp)
1000a84c:	04c00bc4 	movi	r19,47
1000a850:	900f883a 	mov	r7,r18
1000a854:	9c84770e 	bge	r19,r18,1000ba34 <_strtod_r+0x1268>
1000a858:	05c00e44 	movi	r23,57
1000a85c:	bc847a16 	blt	r23,r18,1000ba48 <_strtod_r+0x127c>
1000a860:	0039883a 	mov	fp,zero
1000a864:	b4400044 	addi	r17,r22,1
1000a868:	dd801015 	stw	r22,64(sp)
1000a86c:	d8000f15 	stw	zero,60(sp)
1000a870:	e02d883a 	mov	r22,fp
1000a874:	002b883a 	mov	r21,zero
1000a878:	8039883a 	mov	fp,r16
1000a87c:	05000204 	movi	r20,8
1000a880:	0021883a 	mov	r16,zero
1000a884:	a5408c16 	blt	r20,r21,1000aab8 <_strtod_r+0x2ec>
1000a888:	b009883a 	mov	r4,r22
1000a88c:	01400284 	movi	r5,10
1000a890:	000158c0 	call	1000158c <__mulsi3>
1000a894:	1485883a 	add	r2,r2,r18
1000a898:	15bff404 	addi	r22,r2,-48
1000a89c:	dc400c15 	stw	r17,48(sp)
1000a8a0:	8c800007 	ldb	r18,0(r17)
1000a8a4:	ad400044 	addi	r21,r21,1
1000a8a8:	880b883a 	mov	r5,r17
1000a8ac:	900f883a 	mov	r7,r18
1000a8b0:	9c808e0e 	bge	r19,r18,1000aaec <_strtod_r+0x320>
1000a8b4:	8c400044 	addi	r17,r17,1
1000a8b8:	bcbff20e 	bge	r23,r18,1000a884 <__alt_data_end+0xf800a884>
1000a8bc:	dc000f15 	stw	r16,60(sp)
1000a8c0:	e021883a 	mov	r16,fp
1000a8c4:	b039883a 	mov	fp,r22
1000a8c8:	dd801017 	ldw	r22,64(sp)
1000a8cc:	a827883a 	mov	r19,r21
1000a8d0:	dd801415 	stw	r22,80(sp)
1000a8d4:	000d883a 	mov	r6,zero
1000a8d8:	0029883a 	mov	r20,zero
1000a8dc:	d8001015 	stw	zero,64(sp)
1000a8e0:	00801944 	movi	r2,101
1000a8e4:	3880dd26 	beq	r7,r2,1000ac5c <_strtod_r+0x490>
1000a8e8:	00801144 	movi	r2,69
1000a8ec:	3880db26 	beq	r7,r2,1000ac5c <_strtod_r+0x490>
1000a8f0:	0009883a 	mov	r4,zero
1000a8f4:	a8011d1e 	bne	r21,zero,1000ad6c <_strtod_r+0x5a0>
1000a8f8:	3001591e 	bne	r6,zero,1000ae60 <_strtod_r+0x694>
1000a8fc:	d8c01317 	ldw	r3,76(sp)
1000a900:	1801571e 	bne	r3,zero,1000ae60 <_strtod_r+0x694>
1000a904:	d8c01017 	ldw	r3,64(sp)
1000a908:	1803081e 	bne	r3,zero,1000b52c <_strtod_r+0xd60>
1000a90c:	00801384 	movi	r2,78
1000a910:	38847e26 	beq	r7,r2,1000bb0c <_strtod_r+0x1340>
1000a914:	11c47916 	blt	r2,r7,1000bafc <_strtod_r+0x1330>
1000a918:	00801244 	movi	r2,73
1000a91c:	3883031e 	bne	r7,r2,1000b52c <_strtod_r+0xd60>
1000a920:	d8800c17 	ldw	r2,48(sp)
1000a924:	01040074 	movhi	r4,4097
1000a928:	210be304 	addi	r4,r4,12172
1000a92c:	01801004 	movi	r6,64
1000a930:	01c01684 	movi	r7,90
1000a934:	21400007 	ldb	r5,0(r4)
1000a938:	21000044 	addi	r4,r4,1
1000a93c:	2804b426 	beq	r5,zero,1000bc10 <_strtod_r+0x1444>
1000a940:	10800044 	addi	r2,r2,1
1000a944:	10c00007 	ldb	r3,0(r2)
1000a948:	30c0020e 	bge	r6,r3,1000a954 <_strtod_r+0x188>
1000a94c:	38c00116 	blt	r7,r3,1000a954 <_strtod_r+0x188>
1000a950:	18c00804 	addi	r3,r3,32
1000a954:	197ff726 	beq	r3,r5,1000a934 <__alt_data_end+0xf800a934>
1000a958:	0002f406 	br	1000b52c <_strtod_r+0xd60>
1000a95c:	2109883a 	add	r4,r4,r4
1000a960:	2109883a 	add	r4,r4,r4
1000a964:	2189883a 	add	r4,r4,r6
1000a968:	21000017 	ldw	r4,0(r4)
1000a96c:	2000683a 	jmp	r4
1000a970:	1000aa3c 	xorhi	zero,r2,680
1000a974:	1000a82c 	andhi	zero,r2,672
1000a978:	1000a82c 	andhi	zero,r2,672
1000a97c:	1000a82c 	andhi	zero,r2,672
1000a980:	1000a82c 	andhi	zero,r2,672
1000a984:	1000a82c 	andhi	zero,r2,672
1000a988:	1000a82c 	andhi	zero,r2,672
1000a98c:	1000a82c 	andhi	zero,r2,672
1000a990:	1000a82c 	andhi	zero,r2,672
1000a994:	1000aaa0 	cmpeqi	zero,r2,682
1000a998:	1000aaa0 	cmpeqi	zero,r2,682
1000a99c:	1000aaa0 	cmpeqi	zero,r2,682
1000a9a0:	1000aaa0 	cmpeqi	zero,r2,682
1000a9a4:	1000aaa0 	cmpeqi	zero,r2,682
1000a9a8:	1000a82c 	andhi	zero,r2,672
1000a9ac:	1000a82c 	andhi	zero,r2,672
1000a9b0:	1000a82c 	andhi	zero,r2,672
1000a9b4:	1000a82c 	andhi	zero,r2,672
1000a9b8:	1000a82c 	andhi	zero,r2,672
1000a9bc:	1000a82c 	andhi	zero,r2,672
1000a9c0:	1000a82c 	andhi	zero,r2,672
1000a9c4:	1000a82c 	andhi	zero,r2,672
1000a9c8:	1000a82c 	andhi	zero,r2,672
1000a9cc:	1000a82c 	andhi	zero,r2,672
1000a9d0:	1000a82c 	andhi	zero,r2,672
1000a9d4:	1000a82c 	andhi	zero,r2,672
1000a9d8:	1000a82c 	andhi	zero,r2,672
1000a9dc:	1000a82c 	andhi	zero,r2,672
1000a9e0:	1000a82c 	andhi	zero,r2,672
1000a9e4:	1000a82c 	andhi	zero,r2,672
1000a9e8:	1000a82c 	andhi	zero,r2,672
1000a9ec:	1000a82c 	andhi	zero,r2,672
1000a9f0:	1000aaa0 	cmpeqi	zero,r2,682
1000a9f4:	1000a82c 	andhi	zero,r2,672
1000a9f8:	1000a82c 	andhi	zero,r2,672
1000a9fc:	1000a82c 	andhi	zero,r2,672
1000aa00:	1000a82c 	andhi	zero,r2,672
1000aa04:	1000a82c 	andhi	zero,r2,672
1000aa08:	1000a82c 	andhi	zero,r2,672
1000aa0c:	1000a82c 	andhi	zero,r2,672
1000aa10:	1000a82c 	andhi	zero,r2,672
1000aa14:	1000a82c 	andhi	zero,r2,672
1000aa18:	1000a82c 	andhi	zero,r2,672
1000aa1c:	1000aa28 	cmpgeui	zero,r2,680
1000aa20:	1000a82c 	andhi	zero,r2,672
1000aa24:	1000aaac 	andhi	zero,r2,682
1000aa28:	d8001215 	stw	zero,72(sp)
1000aa2c:	15800044 	addi	r22,r2,1
1000aa30:	dd800c15 	stw	r22,48(sp)
1000aa34:	14800047 	ldb	r18,1(r2)
1000aa38:	903f811e 	bne	r18,zero,1000a840 <__alt_data_end+0xf800a840>
1000aa3c:	0005883a 	mov	r2,zero
1000aa40:	0007883a 	mov	r3,zero
1000aa44:	d9400e17 	ldw	r5,56(sp)
1000aa48:	d8001215 	stw	zero,72(sp)
1000aa4c:	d9400c15 	stw	r5,48(sp)
1000aa50:	d9001117 	ldw	r4,68(sp)
1000aa54:	20000326 	beq	r4,zero,1000aa64 <_strtod_r+0x298>
1000aa58:	d9000c17 	ldw	r4,48(sp)
1000aa5c:	d9401117 	ldw	r5,68(sp)
1000aa60:	29000015 	stw	r4,0(r5)
1000aa64:	d9001217 	ldw	r4,72(sp)
1000aa68:	20000126 	beq	r4,zero,1000aa70 <_strtod_r+0x2a4>
1000aa6c:	18e0003c 	xorhi	r3,r3,32768
1000aa70:	dfc02317 	ldw	ra,140(sp)
1000aa74:	df002217 	ldw	fp,136(sp)
1000aa78:	ddc02117 	ldw	r23,132(sp)
1000aa7c:	dd802017 	ldw	r22,128(sp)
1000aa80:	dd401f17 	ldw	r21,124(sp)
1000aa84:	dd001e17 	ldw	r20,120(sp)
1000aa88:	dcc01d17 	ldw	r19,116(sp)
1000aa8c:	dc801c17 	ldw	r18,112(sp)
1000aa90:	dc401b17 	ldw	r17,108(sp)
1000aa94:	dc001a17 	ldw	r16,104(sp)
1000aa98:	dec02404 	addi	sp,sp,144
1000aa9c:	f800283a 	ret
1000aaa0:	10800044 	addi	r2,r2,1
1000aaa4:	d8800c15 	stw	r2,48(sp)
1000aaa8:	003f5d06 	br	1000a820 <__alt_data_end+0xf800a820>
1000aaac:	00c00044 	movi	r3,1
1000aab0:	d8c01215 	stw	r3,72(sp)
1000aab4:	003fdd06 	br	1000aa2c <__alt_data_end+0xf800aa2c>
1000aab8:	010003c4 	movi	r4,15
1000aabc:	257f7716 	blt	r4,r21,1000a89c <__alt_data_end+0xf800a89c>
1000aac0:	8009883a 	mov	r4,r16
1000aac4:	01400284 	movi	r5,10
1000aac8:	000158c0 	call	1000158c <__mulsi3>
1000aacc:	dc400c15 	stw	r17,48(sp)
1000aad0:	1485883a 	add	r2,r2,r18
1000aad4:	8c800007 	ldb	r18,0(r17)
1000aad8:	143ff404 	addi	r16,r2,-48
1000aadc:	ad400044 	addi	r21,r21,1
1000aae0:	880b883a 	mov	r5,r17
1000aae4:	900f883a 	mov	r7,r18
1000aae8:	9cbf7216 	blt	r19,r18,1000a8b4 <__alt_data_end+0xf800a8b4>
1000aaec:	dc000f15 	stw	r16,60(sp)
1000aaf0:	e021883a 	mov	r16,fp
1000aaf4:	b039883a 	mov	fp,r22
1000aaf8:	dd801017 	ldw	r22,64(sp)
1000aafc:	00800b84 	movi	r2,46
1000ab00:	9082561e 	bne	r18,r2,1000b45c <_strtod_r+0xc90>
1000ab04:	28800044 	addi	r2,r5,1
1000ab08:	d8800c15 	stw	r2,48(sp)
1000ab0c:	29c00047 	ldb	r7,1(r5)
1000ab10:	a802611e 	bne	r21,zero,1000b498 <_strtod_r+0xccc>
1000ab14:	00800c04 	movi	r2,48
1000ab18:	3884161e 	bne	r7,r2,1000bb74 <_strtod_r+0x13a8>
1000ab1c:	00800044 	movi	r2,1
1000ab20:	3809883a 	mov	r4,r7
1000ab24:	100d883a 	mov	r6,r2
1000ab28:	10800044 	addi	r2,r2,1
1000ab2c:	2887883a 	add	r3,r5,r2
1000ab30:	d8c00c15 	stw	r3,48(sp)
1000ab34:	2987883a 	add	r3,r5,r6
1000ab38:	19c00047 	ldb	r7,1(r3)
1000ab3c:	393ff926 	beq	r7,r4,1000ab24 <__alt_data_end+0xf800ab24>
1000ab40:	38bff3c4 	addi	r2,r7,-49
1000ab44:	00c00204 	movi	r3,8
1000ab48:	1882ad36 	bltu	r3,r2,1000b600 <_strtod_r+0xe34>
1000ab4c:	d9400c17 	ldw	r5,48(sp)
1000ab50:	3029883a 	mov	r20,r6
1000ab54:	002f883a 	mov	r23,zero
1000ab58:	d9401415 	stw	r5,80(sp)
1000ab5c:	2823883a 	mov	r17,r5
1000ab60:	01800044 	movi	r6,1
1000ab64:	3dbff404 	addi	r22,r7,-48
1000ab68:	b0002826 	beq	r22,zero,1000ac0c <_strtod_r+0x440>
1000ab6c:	00800044 	movi	r2,1
1000ab70:	a1a9883a 	add	r20,r20,r6
1000ab74:	30844826 	beq	r6,r2,1000bc98 <_strtod_r+0x14cc>
1000ab78:	b9a7883a 	add	r19,r23,r6
1000ab7c:	dc401015 	stw	r17,64(sp)
1000ab80:	e023883a 	mov	r17,fp
1000ab84:	b039883a 	mov	fp,r22
1000ab88:	802d883a 	mov	r22,r16
1000ab8c:	dc000f17 	ldw	r16,60(sp)
1000ab90:	98ffffc4 	addi	r3,r19,-1
1000ab94:	dd001615 	stw	r20,88(sp)
1000ab98:	04800204 	movi	r18,8
1000ab9c:	d9801515 	stw	r6,84(sp)
1000aba0:	b829883a 	mov	r20,r23
1000aba4:	1827883a 	mov	r19,r3
1000aba8:	a5000044 	addi	r20,r20,1
1000abac:	a17fffc4 	addi	r5,r20,-1
1000abb0:	9142b916 	blt	r18,r5,1000b698 <_strtod_r+0xecc>
1000abb4:	8809883a 	mov	r4,r17
1000abb8:	01400284 	movi	r5,10
1000abbc:	000158c0 	call	1000158c <__mulsi3>
1000abc0:	1023883a 	mov	r17,r2
1000abc4:	a4fff81e 	bne	r20,r19,1000aba8 <__alt_data_end+0xf800aba8>
1000abc8:	d9801517 	ldw	r6,84(sp)
1000abcc:	dc000f15 	stw	r16,60(sp)
1000abd0:	dd001617 	ldw	r20,88(sp)
1000abd4:	b021883a 	mov	r16,r22
1000abd8:	e02d883a 	mov	r22,fp
1000abdc:	8839883a 	mov	fp,r17
1000abe0:	dc401017 	ldw	r17,64(sp)
1000abe4:	b985883a 	add	r2,r23,r6
1000abe8:	10bfffc4 	addi	r2,r2,-1
1000abec:	00c00204 	movi	r3,8
1000abf0:	15c00044 	addi	r23,r2,1
1000abf4:	1883d616 	blt	r3,r2,1000bb50 <_strtod_r+0x1384>
1000abf8:	e009883a 	mov	r4,fp
1000abfc:	01400284 	movi	r5,10
1000ac00:	000158c0 	call	1000158c <__mulsi3>
1000ac04:	15b9883a 	add	fp,r2,r22
1000ac08:	000d883a 	mov	r6,zero
1000ac0c:	88800044 	addi	r2,r17,1
1000ac10:	d8800c15 	stw	r2,48(sp)
1000ac14:	89c00047 	ldb	r7,1(r17)
1000ac18:	00022306 	br	1000b4a8 <_strtod_r+0xcdc>
1000ac1c:	b0800047 	ldb	r2,1(r22)
1000ac20:	01001604 	movi	r4,88
1000ac24:	1102a326 	beq	r2,r4,1000b6b4 <_strtod_r+0xee8>
1000ac28:	01001e04 	movi	r4,120
1000ac2c:	1102a126 	beq	r2,r4,1000b6b4 <_strtod_r+0xee8>
1000ac30:	b0800044 	addi	r2,r22,1
1000ac34:	9009883a 	mov	r4,r18
1000ac38:	d8800c15 	stw	r2,48(sp)
1000ac3c:	14800007 	ldb	r18,0(r2)
1000ac40:	102d883a 	mov	r22,r2
1000ac44:	10800044 	addi	r2,r2,1
1000ac48:	913ffb26 	beq	r18,r4,1000ac38 <__alt_data_end+0xf800ac38>
1000ac4c:	90022526 	beq	r18,zero,1000b4e4 <_strtod_r+0xd18>
1000ac50:	00c00044 	movi	r3,1
1000ac54:	d8c01315 	stw	r3,76(sp)
1000ac58:	003efc06 	br	1000a84c <__alt_data_end+0xf800a84c>
1000ac5c:	a800011e 	bne	r21,zero,1000ac64 <_strtod_r+0x498>
1000ac60:	30023026 	beq	r6,zero,1000b524 <_strtod_r+0xd58>
1000ac64:	d9400c17 	ldw	r5,48(sp)
1000ac68:	28800044 	addi	r2,r5,1
1000ac6c:	d8800c15 	stw	r2,48(sp)
1000ac70:	29c00047 	ldb	r7,1(r5)
1000ac74:	d9400e15 	stw	r5,56(sp)
1000ac78:	00800ac4 	movi	r2,43
1000ac7c:	38821026 	beq	r7,r2,1000b4c0 <_strtod_r+0xcf4>
1000ac80:	00800b44 	movi	r2,45
1000ac84:	38821426 	beq	r7,r2,1000b4d8 <_strtod_r+0xd0c>
1000ac88:	d8001515 	stw	zero,84(sp)
1000ac8c:	38bff404 	addi	r2,r7,-48
1000ac90:	00c00244 	movi	r3,9
1000ac94:	1881fc36 	bltu	r3,r2,1000b488 <_strtod_r+0xcbc>
1000ac98:	00800c04 	movi	r2,48
1000ac9c:	3880071e 	bne	r7,r2,1000acbc <_strtod_r+0x4f0>
1000aca0:	d8800c17 	ldw	r2,48(sp)
1000aca4:	3807883a 	mov	r3,r7
1000aca8:	10800044 	addi	r2,r2,1
1000acac:	d8800c15 	stw	r2,48(sp)
1000acb0:	11c00007 	ldb	r7,0(r2)
1000acb4:	10800044 	addi	r2,r2,1
1000acb8:	38fffc26 	beq	r7,r3,1000acac <__alt_data_end+0xf800acac>
1000acbc:	38bff3c4 	addi	r2,r7,-49
1000acc0:	00c00204 	movi	r3,8
1000acc4:	18bf0a36 	bltu	r3,r2,1000a8f0 <__alt_data_end+0xf800a8f0>
1000acc8:	d8c00c17 	ldw	r3,48(sp)
1000accc:	393ff404 	addi	r4,r7,-48
1000acd0:	05c00bc4 	movi	r23,47
1000acd4:	18800044 	addi	r2,r3,1
1000acd8:	d8800c15 	stw	r2,48(sp)
1000acdc:	19c00047 	ldb	r7,1(r3)
1000ace0:	d8c01615 	stw	r3,88(sp)
1000ace4:	b9c0160e 	bge	r23,r7,1000ad40 <_strtod_r+0x574>
1000ace8:	00c00e44 	movi	r3,57
1000acec:	19c01416 	blt	r3,r7,1000ad40 <_strtod_r+0x574>
1000acf0:	d9401617 	ldw	r5,88(sp)
1000acf4:	dc001715 	stw	r16,92(sp)
1000acf8:	1823883a 	mov	r17,r3
1000acfc:	2d800084 	addi	r22,r5,2
1000ad00:	3025883a 	mov	r18,r6
1000ad04:	3821883a 	mov	r16,r7
1000ad08:	00000206 	br	1000ad14 <_strtod_r+0x548>
1000ad0c:	b5800044 	addi	r22,r22,1
1000ad10:	8c000816 	blt	r17,r16,1000ad34 <_strtod_r+0x568>
1000ad14:	01400284 	movi	r5,10
1000ad18:	000158c0 	call	1000158c <__mulsi3>
1000ad1c:	dd800c15 	stw	r22,48(sp)
1000ad20:	1405883a 	add	r2,r2,r16
1000ad24:	b4000007 	ldb	r16,0(r22)
1000ad28:	113ff404 	addi	r4,r2,-48
1000ad2c:	b005883a 	mov	r2,r22
1000ad30:	bc3ff616 	blt	r23,r16,1000ad0c <__alt_data_end+0xf800ad0c>
1000ad34:	800f883a 	mov	r7,r16
1000ad38:	dc001717 	ldw	r16,92(sp)
1000ad3c:	900d883a 	mov	r6,r18
1000ad40:	d8c01617 	ldw	r3,88(sp)
1000ad44:	10c5c83a 	sub	r2,r2,r3
1000ad48:	00c00204 	movi	r3,8
1000ad4c:	18833716 	blt	r3,r2,1000ba2c <_strtod_r+0x1260>
1000ad50:	009387c4 	movi	r2,19999
1000ad54:	1100010e 	bge	r2,r4,1000ad5c <_strtod_r+0x590>
1000ad58:	1009883a 	mov	r4,r2
1000ad5c:	d8c01517 	ldw	r3,84(sp)
1000ad60:	183ee426 	beq	r3,zero,1000a8f4 <__alt_data_end+0xf800a8f4>
1000ad64:	0109c83a 	sub	r4,zero,r4
1000ad68:	a83ee326 	beq	r21,zero,1000a8f8 <__alt_data_end+0xf800a8f8>
1000ad6c:	2529c83a 	sub	r20,r4,r20
1000ad70:	dd001015 	stw	r20,64(sp)
1000ad74:	9800011e 	bne	r19,zero,1000ad7c <_strtod_r+0x5b0>
1000ad78:	a827883a 	mov	r19,r21
1000ad7c:	00800404 	movi	r2,16
1000ad80:	a823883a 	mov	r17,r21
1000ad84:	1540010e 	bge	r2,r21,1000ad8c <_strtod_r+0x5c0>
1000ad88:	1023883a 	mov	r17,r2
1000ad8c:	e009883a 	mov	r4,fp
1000ad90:	000fa780 	call	1000fa78 <__floatunsidf>
1000ad94:	d8800615 	stw	r2,24(sp)
1000ad98:	d8c00715 	stw	r3,28(sp)
1000ad9c:	01000244 	movi	r4,9
1000ada0:	2440150e 	bge	r4,r17,1000adf8 <_strtod_r+0x62c>
1000ada4:	893ffdc4 	addi	r4,r17,-9
1000ada8:	200890fa 	slli	r4,r4,3
1000adac:	180b883a 	mov	r5,r3
1000adb0:	00c40074 	movhi	r3,4097
1000adb4:	18cbae04 	addi	r3,r3,11960
1000adb8:	1907883a 	add	r3,r3,r4
1000adbc:	19800017 	ldw	r6,0(r3)
1000adc0:	19c00117 	ldw	r7,4(r3)
1000adc4:	1009883a 	mov	r4,r2
1000adc8:	000f1b00 	call	1000f1b0 <__muldf3>
1000adcc:	d9000f17 	ldw	r4,60(sp)
1000add0:	1025883a 	mov	r18,r2
1000add4:	1829883a 	mov	r20,r3
1000add8:	000fa780 	call	1000fa78 <__floatunsidf>
1000addc:	9009883a 	mov	r4,r18
1000ade0:	a00b883a 	mov	r5,r20
1000ade4:	100d883a 	mov	r6,r2
1000ade8:	180f883a 	mov	r7,r3
1000adec:	000f0fc0 	call	1000f0fc <__adddf3>
1000adf0:	d8800615 	stw	r2,24(sp)
1000adf4:	d8c00715 	stw	r3,28(sp)
1000adf8:	008003c4 	movi	r2,15
1000adfc:	15401b16 	blt	r2,r21,1000ae6c <_strtod_r+0x6a0>
1000ae00:	d8c01017 	ldw	r3,64(sp)
1000ae04:	18001626 	beq	r3,zero,1000ae60 <_strtod_r+0x694>
1000ae08:	d9001017 	ldw	r4,64(sp)
1000ae0c:	01032e0e 	bge	zero,r4,1000bac8 <_strtod_r+0x12fc>
1000ae10:	00c00584 	movi	r3,22
1000ae14:	19031016 	blt	r3,r4,1000ba58 <_strtod_r+0x128c>
1000ae18:	200490fa 	slli	r2,r4,3
1000ae1c:	00c40074 	movhi	r3,4097
1000ae20:	18cbae04 	addi	r3,r3,11960
1000ae24:	d9000617 	ldw	r4,24(sp)
1000ae28:	1885883a 	add	r2,r3,r2
1000ae2c:	d9400717 	ldw	r5,28(sp)
1000ae30:	11800017 	ldw	r6,0(r2)
1000ae34:	11c00117 	ldw	r7,4(r2)
1000ae38:	000f1b00 	call	1000f1b0 <__muldf3>
1000ae3c:	003f0406 	br	1000aa50 <__alt_data_end+0xf800aa50>
1000ae40:	00dffc34 	movhi	r3,32752
1000ae44:	d8c00715 	stw	r3,28(sp)
1000ae48:	d8000615 	stw	zero,24(sp)
1000ae4c:	1080020c 	andi	r2,r2,8
1000ae50:	10000326 	beq	r2,zero,1000ae60 <_strtod_r+0x694>
1000ae54:	d8800717 	ldw	r2,28(sp)
1000ae58:	10a00034 	orhi	r2,r2,32768
1000ae5c:	d8800715 	stw	r2,28(sp)
1000ae60:	d8800617 	ldw	r2,24(sp)
1000ae64:	d8c00717 	ldw	r3,28(sp)
1000ae68:	003ef906 	br	1000aa50 <__alt_data_end+0xf800aa50>
1000ae6c:	d8801017 	ldw	r2,64(sp)
1000ae70:	ac63c83a 	sub	r17,r21,r17
1000ae74:	1463883a 	add	r17,r2,r17
1000ae78:	0442a70e 	bge	zero,r17,1000b918 <_strtod_r+0x114c>
1000ae7c:	888003cc 	andi	r2,r17,15
1000ae80:	10000b26 	beq	r2,zero,1000aeb0 <_strtod_r+0x6e4>
1000ae84:	100490fa 	slli	r2,r2,3
1000ae88:	00c40074 	movhi	r3,4097
1000ae8c:	18cbae04 	addi	r3,r3,11960
1000ae90:	d9000617 	ldw	r4,24(sp)
1000ae94:	1885883a 	add	r2,r3,r2
1000ae98:	d9400717 	ldw	r5,28(sp)
1000ae9c:	11800017 	ldw	r6,0(r2)
1000aea0:	11c00117 	ldw	r7,4(r2)
1000aea4:	000f1b00 	call	1000f1b0 <__muldf3>
1000aea8:	d8800615 	stw	r2,24(sp)
1000aeac:	d8c00715 	stw	r3,28(sp)
1000aeb0:	00bffc04 	movi	r2,-16
1000aeb4:	88a2703a 	and	r17,r17,r2
1000aeb8:	8801a41e 	bne	r17,zero,1000b54c <_strtod_r+0xd80>
1000aebc:	0029883a 	mov	r20,zero
1000aec0:	d9401417 	ldw	r5,80(sp)
1000aec4:	df000015 	stw	fp,0(sp)
1000aec8:	8009883a 	mov	r4,r16
1000aecc:	980d883a 	mov	r6,r19
1000aed0:	a80f883a 	mov	r7,r21
1000aed4:	0008ba40 	call	10008ba4 <__s2b>
1000aed8:	d8c01017 	ldw	r3,64(sp)
1000aedc:	102d883a 	mov	r22,r2
1000aee0:	b1000304 	addi	r4,r22,12
1000aee4:	1805d7fa 	srai	r2,r3,31
1000aee8:	00f9c83a 	sub	fp,zero,r3
1000aeec:	d9001315 	stw	r4,76(sp)
1000aef0:	e0b8703a 	and	fp,fp,r2
1000aef4:	df000e15 	stw	fp,56(sp)
1000aef8:	b1400117 	ldw	r5,4(r22)
1000aefc:	8009883a 	mov	r4,r16
1000af00:	0027883a 	mov	r19,zero
1000af04:	00089900 	call	10008990 <_Balloc>
1000af08:	b1800417 	ldw	r6,16(r22)
1000af0c:	d9401317 	ldw	r5,76(sp)
1000af10:	11000304 	addi	r4,r2,12
1000af14:	31800084 	addi	r6,r6,2
1000af18:	318d883a 	add	r6,r6,r6
1000af1c:	318d883a 	add	r6,r6,r6
1000af20:	1025883a 	mov	r18,r2
1000af24:	00085e80 	call	100085e8 <memcpy>
1000af28:	d9400617 	ldw	r5,24(sp)
1000af2c:	d9800717 	ldw	r6,28(sp)
1000af30:	d8800a04 	addi	r2,sp,40
1000af34:	8009883a 	mov	r4,r16
1000af38:	d9c00d04 	addi	r7,sp,52
1000af3c:	d8800015 	stw	r2,0(sp)
1000af40:	00096840 	call	10009684 <__d2b>
1000af44:	8009883a 	mov	r4,r16
1000af48:	01400044 	movi	r5,1
1000af4c:	d8800b15 	stw	r2,44(sp)
1000af50:	0008dc00 	call	10008dc0 <__i2b>
1000af54:	d8c01017 	ldw	r3,64(sp)
1000af58:	1023883a 	mov	r17,r2
1000af5c:	00c0010e 	bge	zero,r3,1000af64 <_strtod_r+0x798>
1000af60:	1827883a 	mov	r19,r3
1000af64:	d8800d17 	ldw	r2,52(sp)
1000af68:	1000de16 	blt	r2,zero,1000b2e4 <_strtod_r+0xb18>
1000af6c:	d9000e17 	ldw	r4,56(sp)
1000af70:	9807883a 	mov	r3,r19
1000af74:	20af883a 	add	r23,r4,r2
1000af78:	d9000a17 	ldw	r4,40(sp)
1000af7c:	1505c83a 	sub	r2,r2,r20
1000af80:	017f00c4 	movi	r5,-1021
1000af84:	110d883a 	add	r6,r2,r4
1000af88:	31409a0e 	bge	r6,r5,1000b1f4 <_strtod_r+0xa28>
1000af8c:	10810cc4 	addi	r2,r2,1075
1000af90:	b8b9883a 	add	fp,r23,r2
1000af94:	1885883a 	add	r2,r3,r2
1000af98:	152b883a 	add	r21,r2,r20
1000af9c:	e005883a 	mov	r2,fp
1000afa0:	bf00010e 	bge	r23,fp,1000afa8 <_strtod_r+0x7dc>
1000afa4:	b805883a 	mov	r2,r23
1000afa8:	a880010e 	bge	r21,r2,1000afb0 <_strtod_r+0x7e4>
1000afac:	a805883a 	mov	r2,r21
1000afb0:	0080030e 	bge	zero,r2,1000afc0 <_strtod_r+0x7f4>
1000afb4:	e0b9c83a 	sub	fp,fp,r2
1000afb8:	a8abc83a 	sub	r21,r21,r2
1000afbc:	b8afc83a 	sub	r23,r23,r2
1000afc0:	d9400e17 	ldw	r5,56(sp)
1000afc4:	28000f26 	beq	r5,zero,1000b004 <_strtod_r+0x838>
1000afc8:	280d883a 	mov	r6,r5
1000afcc:	8009883a 	mov	r4,r16
1000afd0:	880b883a 	mov	r5,r17
1000afd4:	00090540 	call	10009054 <__pow5mult>
1000afd8:	d9800b17 	ldw	r6,44(sp)
1000afdc:	8009883a 	mov	r4,r16
1000afe0:	100b883a 	mov	r5,r2
1000afe4:	1023883a 	mov	r17,r2
1000afe8:	0008dfc0 	call	10008dfc <__multiply>
1000afec:	d9400b17 	ldw	r5,44(sp)
1000aff0:	8009883a 	mov	r4,r16
1000aff4:	d8801815 	stw	r2,96(sp)
1000aff8:	0008a380 	call	10008a38 <_Bfree>
1000affc:	d8801817 	ldw	r2,96(sp)
1000b000:	d8800b15 	stw	r2,44(sp)
1000b004:	0700050e 	bge	zero,fp,1000b01c <_strtod_r+0x850>
1000b008:	d9400b17 	ldw	r5,44(sp)
1000b00c:	8009883a 	mov	r4,r16
1000b010:	e00d883a 	mov	r6,fp
1000b014:	00091800 	call	10009180 <__lshift>
1000b018:	d8800b15 	stw	r2,44(sp)
1000b01c:	98000526 	beq	r19,zero,1000b034 <_strtod_r+0x868>
1000b020:	900b883a 	mov	r5,r18
1000b024:	8009883a 	mov	r4,r16
1000b028:	980d883a 	mov	r6,r19
1000b02c:	00090540 	call	10009054 <__pow5mult>
1000b030:	1025883a 	mov	r18,r2
1000b034:	0540050e 	bge	zero,r21,1000b04c <_strtod_r+0x880>
1000b038:	900b883a 	mov	r5,r18
1000b03c:	8009883a 	mov	r4,r16
1000b040:	a80d883a 	mov	r6,r21
1000b044:	00091800 	call	10009180 <__lshift>
1000b048:	1025883a 	mov	r18,r2
1000b04c:	05c0050e 	bge	zero,r23,1000b064 <_strtod_r+0x898>
1000b050:	880b883a 	mov	r5,r17
1000b054:	8009883a 	mov	r4,r16
1000b058:	b80d883a 	mov	r6,r23
1000b05c:	00091800 	call	10009180 <__lshift>
1000b060:	1023883a 	mov	r17,r2
1000b064:	d9400b17 	ldw	r5,44(sp)
1000b068:	8009883a 	mov	r4,r16
1000b06c:	900d883a 	mov	r6,r18
1000b070:	00093340 	call	10009334 <__mdiff>
1000b074:	1027883a 	mov	r19,r2
1000b078:	10800317 	ldw	r2,12(r2)
1000b07c:	9809883a 	mov	r4,r19
1000b080:	98000315 	stw	zero,12(r19)
1000b084:	880b883a 	mov	r5,r17
1000b088:	d8800f15 	stw	r2,60(sp)
1000b08c:	00092dc0 	call	100092dc <__mcmp>
1000b090:	1001cb16 	blt	r2,zero,1000b7c0 <_strtod_r+0xff4>
1000b094:	1001fa26 	beq	r2,zero,1000b880 <_strtod_r+0x10b4>
1000b098:	9809883a 	mov	r4,r19
1000b09c:	880b883a 	mov	r5,r17
1000b0a0:	00097c80 	call	100097c8 <__ratio>
1000b0a4:	1009883a 	mov	r4,r2
1000b0a8:	180b883a 	mov	r5,r3
1000b0ac:	000d883a 	mov	r6,zero
1000b0b0:	01d00034 	movhi	r7,16384
1000b0b4:	102f883a 	mov	r23,r2
1000b0b8:	1839883a 	mov	fp,r3
1000b0bc:	000f8240 	call	1000f824 <__ledf2>
1000b0c0:	00804f16 	blt	zero,r2,1000b200 <_strtod_r+0xa34>
1000b0c4:	d9400f17 	ldw	r5,60(sp)
1000b0c8:	28008926 	beq	r5,zero,1000b2f0 <_strtod_r+0xb24>
1000b0cc:	da400717 	ldw	r9,28(sp)
1000b0d0:	05cffc34 	movhi	r23,16368
1000b0d4:	d8000815 	stw	zero,32(sp)
1000b0d8:	ddc00915 	stw	r23,36(sp)
1000b0dc:	002b883a 	mov	r21,zero
1000b0e0:	4f1ffc2c 	andhi	fp,r9,32752
1000b0e4:	009ff834 	movhi	r2,32736
1000b0e8:	e0805526 	beq	fp,r2,1000b240 <_strtod_r+0xa74>
1000b0ec:	a0001b26 	beq	r20,zero,1000b15c <_strtod_r+0x990>
1000b0f0:	0081a834 	movhi	r2,1696
1000b0f4:	17001936 	bltu	r2,fp,1000b15c <_strtod_r+0x990>
1000b0f8:	a809883a 	mov	r4,r21
1000b0fc:	b80b883a 	mov	r5,r23
1000b100:	01bff034 	movhi	r6,65472
1000b104:	01d07834 	movhi	r7,16864
1000b108:	39ffffc4 	addi	r7,r7,-1
1000b10c:	000f8240 	call	1000f824 <__ledf2>
1000b110:	00800d16 	blt	zero,r2,1000b148 <_strtod_r+0x97c>
1000b114:	a809883a 	mov	r4,r21
1000b118:	b80b883a 	mov	r5,r23
1000b11c:	000dfa80 	call	1000dfa8 <__fixunsdfsi>
1000b120:	1000d626 	beq	r2,zero,1000b47c <_strtod_r+0xcb0>
1000b124:	1009883a 	mov	r4,r2
1000b128:	000fa780 	call	1000fa78 <__floatunsidf>
1000b12c:	102b883a 	mov	r21,r2
1000b130:	182f883a 	mov	r23,r3
1000b134:	d9400f17 	ldw	r5,60(sp)
1000b138:	2800ce1e 	bne	r5,zero,1000b474 <_strtod_r+0xca8>
1000b13c:	b8a0003c 	xorhi	r2,r23,32768
1000b140:	dd400815 	stw	r21,32(sp)
1000b144:	d8800915 	stw	r2,36(sp)
1000b148:	d8c00917 	ldw	r3,36(sp)
1000b14c:	0081ac34 	movhi	r2,1712
1000b150:	1885883a 	add	r2,r3,r2
1000b154:	1705c83a 	sub	r2,r2,fp
1000b158:	d8800915 	stw	r2,36(sp)
1000b15c:	d9000617 	ldw	r4,24(sp)
1000b160:	d9400717 	ldw	r5,28(sp)
1000b164:	00094dc0 	call	100094dc <__ulp>
1000b168:	da800617 	ldw	r10,24(sp)
1000b16c:	da400717 	ldw	r9,28(sp)
1000b170:	d9800817 	ldw	r6,32(sp)
1000b174:	d9c00917 	ldw	r7,36(sp)
1000b178:	1009883a 	mov	r4,r2
1000b17c:	180b883a 	mov	r5,r3
1000b180:	da401915 	stw	r9,100(sp)
1000b184:	da801815 	stw	r10,96(sp)
1000b188:	000f1b00 	call	1000f1b0 <__muldf3>
1000b18c:	da401917 	ldw	r9,100(sp)
1000b190:	da801817 	ldw	r10,96(sp)
1000b194:	100d883a 	mov	r6,r2
1000b198:	480b883a 	mov	r5,r9
1000b19c:	5009883a 	mov	r4,r10
1000b1a0:	180f883a 	mov	r7,r3
1000b1a4:	000f0fc0 	call	1000f0fc <__adddf3>
1000b1a8:	d8800615 	stw	r2,24(sp)
1000b1ac:	d8c00715 	stw	r3,28(sp)
1000b1b0:	1813883a 	mov	r9,r3
1000b1b4:	a000021e 	bne	r20,zero,1000b1c0 <_strtod_r+0x9f4>
1000b1b8:	489ffc2c 	andhi	r2,r9,32752
1000b1bc:	e0807226 	beq	fp,r2,1000b388 <_strtod_r+0xbbc>
1000b1c0:	d9400b17 	ldw	r5,44(sp)
1000b1c4:	8009883a 	mov	r4,r16
1000b1c8:	0008a380 	call	10008a38 <_Bfree>
1000b1cc:	8009883a 	mov	r4,r16
1000b1d0:	900b883a 	mov	r5,r18
1000b1d4:	0008a380 	call	10008a38 <_Bfree>
1000b1d8:	8009883a 	mov	r4,r16
1000b1dc:	880b883a 	mov	r5,r17
1000b1e0:	0008a380 	call	10008a38 <_Bfree>
1000b1e4:	8009883a 	mov	r4,r16
1000b1e8:	980b883a 	mov	r5,r19
1000b1ec:	0008a380 	call	10008a38 <_Bfree>
1000b1f0:	003f4106 	br	1000aef8 <__alt_data_end+0xf800aef8>
1000b1f4:	00800d84 	movi	r2,54
1000b1f8:	1105c83a 	sub	r2,r2,r4
1000b1fc:	003f6406 	br	1000af90 <__alt_data_end+0xf800af90>
1000b200:	b809883a 	mov	r4,r23
1000b204:	e00b883a 	mov	r5,fp
1000b208:	000d883a 	mov	r6,zero
1000b20c:	01cff834 	movhi	r7,16352
1000b210:	000f1b00 	call	1000f1b0 <__muldf3>
1000b214:	d9000f17 	ldw	r4,60(sp)
1000b218:	102b883a 	mov	r21,r2
1000b21c:	182f883a 	mov	r23,r3
1000b220:	2000011e 	bne	r4,zero,1000b228 <_strtod_r+0xa5c>
1000b224:	18e0003c 	xorhi	r3,r3,32768
1000b228:	da400717 	ldw	r9,28(sp)
1000b22c:	d8800815 	stw	r2,32(sp)
1000b230:	d8c00915 	stw	r3,36(sp)
1000b234:	4f1ffc2c 	andhi	fp,r9,32752
1000b238:	009ff834 	movhi	r2,32736
1000b23c:	e0bfab1e 	bne	fp,r2,1000b0ec <__alt_data_end+0xf800b0ec>
1000b240:	d8800617 	ldw	r2,24(sp)
1000b244:	00ff2c34 	movhi	r3,64688
1000b248:	48d3883a 	add	r9,r9,r3
1000b24c:	1009883a 	mov	r4,r2
1000b250:	d8800415 	stw	r2,16(sp)
1000b254:	d8800717 	ldw	r2,28(sp)
1000b258:	480b883a 	mov	r5,r9
1000b25c:	da400715 	stw	r9,28(sp)
1000b260:	d8800515 	stw	r2,20(sp)
1000b264:	00094dc0 	call	100094dc <__ulp>
1000b268:	da800617 	ldw	r10,24(sp)
1000b26c:	da400717 	ldw	r9,28(sp)
1000b270:	d9800817 	ldw	r6,32(sp)
1000b274:	d9c00917 	ldw	r7,36(sp)
1000b278:	1009883a 	mov	r4,r2
1000b27c:	180b883a 	mov	r5,r3
1000b280:	da401915 	stw	r9,100(sp)
1000b284:	da801815 	stw	r10,96(sp)
1000b288:	000f1b00 	call	1000f1b0 <__muldf3>
1000b28c:	da801817 	ldw	r10,96(sp)
1000b290:	da401917 	ldw	r9,100(sp)
1000b294:	100d883a 	mov	r6,r2
1000b298:	5009883a 	mov	r4,r10
1000b29c:	480b883a 	mov	r5,r9
1000b2a0:	180f883a 	mov	r7,r3
1000b2a4:	000f0fc0 	call	1000f0fc <__adddf3>
1000b2a8:	d8800615 	stw	r2,24(sp)
1000b2ac:	015f2834 	movhi	r5,31904
1000b2b0:	297fffc4 	addi	r5,r5,-1
1000b2b4:	189ffc2c 	andhi	r2,r3,32752
1000b2b8:	2880642e 	bgeu	r5,r2,1000b44c <_strtod_r+0xc80>
1000b2bc:	d8800517 	ldw	r2,20(sp)
1000b2c0:	00dffc34 	movhi	r3,32752
1000b2c4:	18ffffc4 	addi	r3,r3,-1
1000b2c8:	10c18526 	beq	r2,r3,1000b8e0 <_strtod_r+0x1114>
1000b2cc:	011ffc34 	movhi	r4,32752
1000b2d0:	213fffc4 	addi	r4,r4,-1
1000b2d4:	00bfffc4 	movi	r2,-1
1000b2d8:	d9000715 	stw	r4,28(sp)
1000b2dc:	d8800615 	stw	r2,24(sp)
1000b2e0:	003fb706 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b2e4:	9887c83a 	sub	r3,r19,r2
1000b2e8:	ddc00e17 	ldw	r23,56(sp)
1000b2ec:	003f2206 	br	1000af78 <__alt_data_end+0xf800af78>
1000b2f0:	d8800617 	ldw	r2,24(sp)
1000b2f4:	10001a1e 	bne	r2,zero,1000b360 <_strtod_r+0xb94>
1000b2f8:	da400717 	ldw	r9,28(sp)
1000b2fc:	00c00434 	movhi	r3,16
1000b300:	18ffffc4 	addi	r3,r3,-1
1000b304:	48c4703a 	and	r2,r9,r3
1000b308:	1000191e 	bne	r2,zero,1000b370 <_strtod_r+0xba4>
1000b30c:	b809883a 	mov	r4,r23
1000b310:	e00b883a 	mov	r5,fp
1000b314:	000d883a 	mov	r6,zero
1000b318:	01cffc34 	movhi	r7,16368
1000b31c:	da401915 	stw	r9,100(sp)
1000b320:	000f7c80 	call	1000f7c8 <__ltdf2>
1000b324:	da401917 	ldw	r9,100(sp)
1000b328:	1001bb16 	blt	r2,zero,1000ba18 <_strtod_r+0x124c>
1000b32c:	b809883a 	mov	r4,r23
1000b330:	e00b883a 	mov	r5,fp
1000b334:	000d883a 	mov	r6,zero
1000b338:	01cff834 	movhi	r7,16352
1000b33c:	000f1b00 	call	1000f1b0 <__muldf3>
1000b340:	da401917 	ldw	r9,100(sp)
1000b344:	182f883a 	mov	r23,r3
1000b348:	102b883a 	mov	r21,r2
1000b34c:	1007883a 	mov	r3,r2
1000b350:	b8a0003c 	xorhi	r2,r23,32768
1000b354:	d8c00815 	stw	r3,32(sp)
1000b358:	d8800915 	stw	r2,36(sp)
1000b35c:	003f6006 	br	1000b0e0 <__alt_data_end+0xf800b0e0>
1000b360:	00c00044 	movi	r3,1
1000b364:	da400717 	ldw	r9,28(sp)
1000b368:	10c0011e 	bne	r2,r3,1000b370 <_strtod_r+0xba4>
1000b36c:	4800c526 	beq	r9,zero,1000b684 <_strtod_r+0xeb8>
1000b370:	00affc34 	movhi	r2,49136
1000b374:	d8000815 	stw	zero,32(sp)
1000b378:	d8800915 	stw	r2,36(sp)
1000b37c:	002b883a 	mov	r21,zero
1000b380:	05cffc34 	movhi	r23,16368
1000b384:	003f5606 	br	1000b0e0 <__alt_data_end+0xf800b0e0>
1000b388:	b80b883a 	mov	r5,r23
1000b38c:	a809883a 	mov	r4,r21
1000b390:	da401915 	stw	r9,100(sp)
1000b394:	000f9540 	call	1000f954 <__fixdfsi>
1000b398:	1009883a 	mov	r4,r2
1000b39c:	000f8800 	call	1000f880 <__floatsidf>
1000b3a0:	b80b883a 	mov	r5,r23
1000b3a4:	a809883a 	mov	r4,r21
1000b3a8:	100d883a 	mov	r6,r2
1000b3ac:	180f883a 	mov	r7,r3
1000b3b0:	000f1500 	call	1000f150 <__subdf3>
1000b3b4:	102f883a 	mov	r23,r2
1000b3b8:	d8800f17 	ldw	r2,60(sp)
1000b3bc:	1839883a 	mov	fp,r3
1000b3c0:	da401917 	ldw	r9,100(sp)
1000b3c4:	1000021e 	bne	r2,zero,1000b3d0 <_strtod_r+0xc04>
1000b3c8:	d8800617 	ldw	r2,24(sp)
1000b3cc:	10004826 	beq	r2,zero,1000b4f0 <_strtod_r+0xd24>
1000b3d0:	b809883a 	mov	r4,r23
1000b3d4:	e00b883a 	mov	r5,fp
1000b3d8:	01a52834 	movhi	r6,38048
1000b3dc:	318d6544 	addi	r6,r6,13717
1000b3e0:	01cff834 	movhi	r7,16352
1000b3e4:	39ffffc4 	addi	r7,r7,-1
1000b3e8:	000f7c80 	call	1000f7c8 <__ltdf2>
1000b3ec:	10000716 	blt	r2,zero,1000b40c <_strtod_r+0xc40>
1000b3f0:	b809883a 	mov	r4,r23
1000b3f4:	e00b883a 	mov	r5,fp
1000b3f8:	018d6c34 	movhi	r6,13744
1000b3fc:	31b94d44 	addi	r6,r6,-6859
1000b400:	01cff834 	movhi	r7,16352
1000b404:	000f7000 	call	1000f700 <__gtdf2>
1000b408:	00bf6d0e 	bge	zero,r2,1000b1c0 <__alt_data_end+0xf800b1c0>
1000b40c:	d9400b17 	ldw	r5,44(sp)
1000b410:	8009883a 	mov	r4,r16
1000b414:	0008a380 	call	10008a38 <_Bfree>
1000b418:	8009883a 	mov	r4,r16
1000b41c:	900b883a 	mov	r5,r18
1000b420:	0008a380 	call	10008a38 <_Bfree>
1000b424:	8009883a 	mov	r4,r16
1000b428:	880b883a 	mov	r5,r17
1000b42c:	0008a380 	call	10008a38 <_Bfree>
1000b430:	8009883a 	mov	r4,r16
1000b434:	b00b883a 	mov	r5,r22
1000b438:	0008a380 	call	10008a38 <_Bfree>
1000b43c:	8009883a 	mov	r4,r16
1000b440:	980b883a 	mov	r5,r19
1000b444:	0008a380 	call	10008a38 <_Bfree>
1000b448:	003e8506 	br	1000ae60 <__alt_data_end+0xf800ae60>
1000b44c:	0240d434 	movhi	r9,848
1000b450:	1a53883a 	add	r9,r3,r9
1000b454:	da400715 	stw	r9,28(sp)
1000b458:	003f5606 	br	1000b1b4 <__alt_data_end+0xf800b1b4>
1000b45c:	a827883a 	mov	r19,r21
1000b460:	dd801415 	stw	r22,80(sp)
1000b464:	000d883a 	mov	r6,zero
1000b468:	0029883a 	mov	r20,zero
1000b46c:	d8001015 	stw	zero,64(sp)
1000b470:	003d1d06 	br	1000a8e8 <__alt_data_end+0xf800a8e8>
1000b474:	b805883a 	mov	r2,r23
1000b478:	003f3106 	br	1000b140 <__alt_data_end+0xf800b140>
1000b47c:	002b883a 	mov	r21,zero
1000b480:	05cffc34 	movhi	r23,16368
1000b484:	003f2b06 	br	1000b134 <__alt_data_end+0xf800b134>
1000b488:	d9400e17 	ldw	r5,56(sp)
1000b48c:	0009883a 	mov	r4,zero
1000b490:	d9400c15 	stw	r5,48(sp)
1000b494:	003d1706 	br	1000a8f4 <__alt_data_end+0xf800a8f4>
1000b498:	dd801415 	stw	r22,80(sp)
1000b49c:	a82f883a 	mov	r23,r21
1000b4a0:	000d883a 	mov	r6,zero
1000b4a4:	0029883a 	mov	r20,zero
1000b4a8:	3dbff404 	addi	r22,r7,-48
1000b4ac:	00800244 	movi	r2,9
1000b4b0:	15802136 	bltu	r2,r22,1000b538 <_strtod_r+0xd6c>
1000b4b4:	31800044 	addi	r6,r6,1
1000b4b8:	dc400c17 	ldw	r17,48(sp)
1000b4bc:	003daa06 	br	1000ab68 <__alt_data_end+0xf800ab68>
1000b4c0:	d8001515 	stw	zero,84(sp)
1000b4c4:	d9400e17 	ldw	r5,56(sp)
1000b4c8:	28800084 	addi	r2,r5,2
1000b4cc:	d8800c15 	stw	r2,48(sp)
1000b4d0:	29c00087 	ldb	r7,2(r5)
1000b4d4:	003ded06 	br	1000ac8c <__alt_data_end+0xf800ac8c>
1000b4d8:	00c00044 	movi	r3,1
1000b4dc:	d8c01515 	stw	r3,84(sp)
1000b4e0:	003ff806 	br	1000b4c4 <__alt_data_end+0xf800b4c4>
1000b4e4:	0005883a 	mov	r2,zero
1000b4e8:	0007883a 	mov	r3,zero
1000b4ec:	003d5806 	br	1000aa50 <__alt_data_end+0xf800aa50>
1000b4f0:	00c00434 	movhi	r3,16
1000b4f4:	18ffffc4 	addi	r3,r3,-1
1000b4f8:	48d2703a 	and	r9,r9,r3
1000b4fc:	483fb41e 	bne	r9,zero,1000b3d0 <__alt_data_end+0xf800b3d0>
1000b500:	b809883a 	mov	r4,r23
1000b504:	e00b883a 	mov	r5,fp
1000b508:	01a52834 	movhi	r6,38048
1000b50c:	318d6544 	addi	r6,r6,13717
1000b510:	01cff434 	movhi	r7,16336
1000b514:	39ffffc4 	addi	r7,r7,-1
1000b518:	000f7c80 	call	1000f7c8 <__ltdf2>
1000b51c:	103f280e 	bge	r2,zero,1000b1c0 <__alt_data_end+0xf800b1c0>
1000b520:	003fba06 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b524:	d8c01317 	ldw	r3,76(sp)
1000b528:	183dce1e 	bne	r3,zero,1000ac64 <__alt_data_end+0xf800ac64>
1000b52c:	d8800617 	ldw	r2,24(sp)
1000b530:	d8c00717 	ldw	r3,28(sp)
1000b534:	003d4306 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000b538:	00c00044 	movi	r3,1
1000b53c:	a827883a 	mov	r19,r21
1000b540:	d8c01015 	stw	r3,64(sp)
1000b544:	b82b883a 	mov	r21,r23
1000b548:	003ce506 	br	1000a8e0 <__alt_data_end+0xf800a8e0>
1000b54c:	00804d04 	movi	r2,308
1000b550:	1440ec16 	blt	r2,r17,1000b904 <_strtod_r+0x1138>
1000b554:	8825d13a 	srai	r18,r17,4
1000b558:	05c00044 	movi	r23,1
1000b55c:	bc81ca0e 	bge	r23,r18,1000bc88 <_strtod_r+0x14bc>
1000b560:	d8800617 	ldw	r2,24(sp)
1000b564:	d8c00717 	ldw	r3,28(sp)
1000b568:	05840074 	movhi	r22,4097
1000b56c:	b58ba404 	addi	r22,r22,11920
1000b570:	b029883a 	mov	r20,r22
1000b574:	0023883a 	mov	r17,zero
1000b578:	9180004c 	andi	r6,r18,1
1000b57c:	30000526 	beq	r6,zero,1000b594 <_strtod_r+0xdc8>
1000b580:	a1800017 	ldw	r6,0(r20)
1000b584:	a1c00117 	ldw	r7,4(r20)
1000b588:	1009883a 	mov	r4,r2
1000b58c:	180b883a 	mov	r5,r3
1000b590:	000f1b00 	call	1000f1b0 <__muldf3>
1000b594:	9025d07a 	srai	r18,r18,1
1000b598:	8c400044 	addi	r17,r17,1
1000b59c:	a5000204 	addi	r20,r20,8
1000b5a0:	bcbff516 	blt	r23,r18,1000b578 <__alt_data_end+0xf800b578>
1000b5a4:	d8800615 	stw	r2,24(sp)
1000b5a8:	d8c00715 	stw	r3,28(sp)
1000b5ac:	880490fa 	slli	r2,r17,3
1000b5b0:	d9400717 	ldw	r5,28(sp)
1000b5b4:	d9000617 	ldw	r4,24(sp)
1000b5b8:	b0a3883a 	add	r17,r22,r2
1000b5bc:	89800017 	ldw	r6,0(r17)
1000b5c0:	89c00117 	ldw	r7,4(r17)
1000b5c4:	00bf2c34 	movhi	r2,64688
1000b5c8:	288b883a 	add	r5,r5,r2
1000b5cc:	000f1b00 	call	1000f1b0 <__muldf3>
1000b5d0:	d8800615 	stw	r2,24(sp)
1000b5d4:	011f2834 	movhi	r4,31904
1000b5d8:	189ffc2c 	andhi	r2,r3,32752
1000b5dc:	2080c936 	bltu	r4,r2,1000b904 <_strtod_r+0x1138>
1000b5e0:	011f2434 	movhi	r4,31888
1000b5e4:	2081652e 	bgeu	r4,r2,1000bb7c <_strtod_r+0x13b0>
1000b5e8:	009ffc34 	movhi	r2,32752
1000b5ec:	10bfffc4 	addi	r2,r2,-1
1000b5f0:	d8800715 	stw	r2,28(sp)
1000b5f4:	00bfffc4 	movi	r2,-1
1000b5f8:	d8800615 	stw	r2,24(sp)
1000b5fc:	003e2f06 	br	1000aebc <__alt_data_end+0xf800aebc>
1000b600:	00c00044 	movi	r3,1
1000b604:	0027883a 	mov	r19,zero
1000b608:	dd801415 	stw	r22,80(sp)
1000b60c:	0029883a 	mov	r20,zero
1000b610:	d8c01015 	stw	r3,64(sp)
1000b614:	003cb206 	br	1000a8e0 <__alt_data_end+0xf800a8e0>
1000b618:	d8800717 	ldw	r2,28(sp)
1000b61c:	00c00434 	movhi	r3,16
1000b620:	18ffffc4 	addi	r3,r3,-1
1000b624:	10c6703a 	and	r3,r2,r3
1000b628:	1801471e 	bne	r3,zero,1000bb48 <_strtod_r+0x137c>
1000b62c:	d8c00617 	ldw	r3,24(sp)
1000b630:	18007e26 	beq	r3,zero,1000b82c <_strtod_r+0x1060>
1000b634:	18c0004c 	andi	r3,r3,1
1000b638:	1800a726 	beq	r3,zero,1000b8d8 <_strtod_r+0x110c>
1000b63c:	ddc00617 	ldw	r23,24(sp)
1000b640:	dd400717 	ldw	r21,28(sp)
1000b644:	b809883a 	mov	r4,r23
1000b648:	a80b883a 	mov	r5,r21
1000b64c:	00094dc0 	call	100094dc <__ulp>
1000b650:	b809883a 	mov	r4,r23
1000b654:	a80b883a 	mov	r5,r21
1000b658:	100d883a 	mov	r6,r2
1000b65c:	180f883a 	mov	r7,r3
1000b660:	000f1500 	call	1000f150 <__subdf3>
1000b664:	1009883a 	mov	r4,r2
1000b668:	180b883a 	mov	r5,r3
1000b66c:	000d883a 	mov	r6,zero
1000b670:	000f883a 	mov	r7,zero
1000b674:	d8800615 	stw	r2,24(sp)
1000b678:	d8c00715 	stw	r3,28(sp)
1000b67c:	000f6480 	call	1000f648 <__eqdf2>
1000b680:	1000951e 	bne	r2,zero,1000b8d8 <_strtod_r+0x110c>
1000b684:	d8000615 	stw	zero,24(sp)
1000b688:	d8000715 	stw	zero,28(sp)
1000b68c:	00800884 	movi	r2,34
1000b690:	80800015 	stw	r2,0(r16)
1000b694:	003f5d06 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b698:	00800404 	movi	r2,16
1000b69c:	153d4916 	blt	r2,r20,1000abc4 <__alt_data_end+0xf800abc4>
1000b6a0:	8009883a 	mov	r4,r16
1000b6a4:	01400284 	movi	r5,10
1000b6a8:	000158c0 	call	1000158c <__mulsi3>
1000b6ac:	1021883a 	mov	r16,r2
1000b6b0:	003d4406 	br	1000abc4 <__alt_data_end+0xf800abc4>
1000b6b4:	d9001217 	ldw	r4,72(sp)
1000b6b8:	d8800b04 	addi	r2,sp,44
1000b6bc:	04c40074 	movhi	r19,4097
1000b6c0:	9cced904 	addi	r19,r19,15204
1000b6c4:	d9000115 	stw	r4,4(sp)
1000b6c8:	d8800015 	stw	r2,0(sp)
1000b6cc:	8009883a 	mov	r4,r16
1000b6d0:	d9400c04 	addi	r5,sp,48
1000b6d4:	980d883a 	mov	r6,r19
1000b6d8:	d9c00a04 	addi	r7,sp,40
1000b6dc:	000d3580 	call	1000d358 <__gethex>
1000b6e0:	148001cc 	andi	r18,r2,7
1000b6e4:	903dde26 	beq	r18,zero,1000ae60 <__alt_data_end+0xf800ae60>
1000b6e8:	00c00184 	movi	r3,6
1000b6ec:	90c0f226 	beq	r18,r3,1000bab8 <_strtod_r+0x12ec>
1000b6f0:	d9800b17 	ldw	r6,44(sp)
1000b6f4:	30000826 	beq	r6,zero,1000b718 <_strtod_r+0xf4c>
1000b6f8:	99400017 	ldw	r5,0(r19)
1000b6fc:	d9000204 	addi	r4,sp,8
1000b700:	d8801815 	stw	r2,96(sp)
1000b704:	00098e00 	call	100098e0 <__copybits>
1000b708:	d9400b17 	ldw	r5,44(sp)
1000b70c:	8009883a 	mov	r4,r16
1000b710:	0008a380 	call	10008a38 <_Bfree>
1000b714:	d8801817 	ldw	r2,96(sp)
1000b718:	00c00184 	movi	r3,6
1000b71c:	d9000a17 	ldw	r4,40(sp)
1000b720:	1cbdca36 	bltu	r3,r18,1000ae4c <__alt_data_end+0xf800ae4c>
1000b724:	94a5883a 	add	r18,r18,r18
1000b728:	94a5883a 	add	r18,r18,r18
1000b72c:	00c40074 	movhi	r3,4097
1000b730:	18edd004 	addi	r3,r3,-18624
1000b734:	90c7883a 	add	r3,r18,r3
1000b738:	18c00017 	ldw	r3,0(r3)
1000b73c:	1800683a 	jmp	r3
1000b740:	1000b7b4 	orhi	zero,r2,734
1000b744:	1000b770 	cmpltui	zero,r2,733
1000b748:	1000b75c 	xori	zero,r2,733
1000b74c:	1000ae40 	call	11000ae4 <_gp+0xfe3d50>
1000b750:	1000b79c 	xori	zero,r2,734
1000b754:	1000b770 	cmpltui	zero,r2,733
1000b758:	1000b7b4 	orhi	zero,r2,734
1000b75c:	d8c00217 	ldw	r3,8(sp)
1000b760:	d8c00615 	stw	r3,24(sp)
1000b764:	d8c00317 	ldw	r3,12(sp)
1000b768:	d8c00715 	stw	r3,28(sp)
1000b76c:	003db706 	br	1000ae4c <__alt_data_end+0xf800ae4c>
1000b770:	21010cc4 	addi	r4,r4,1075
1000b774:	d9400317 	ldw	r5,12(sp)
1000b778:	2008953a 	slli	r4,r4,20
1000b77c:	00fffc34 	movhi	r3,65520
1000b780:	18ffffc4 	addi	r3,r3,-1
1000b784:	28c6703a 	and	r3,r5,r3
1000b788:	20c6b03a 	or	r3,r4,r3
1000b78c:	d9000217 	ldw	r4,8(sp)
1000b790:	d8c00715 	stw	r3,28(sp)
1000b794:	d9000615 	stw	r4,24(sp)
1000b798:	003dac06 	br	1000ae4c <__alt_data_end+0xf800ae4c>
1000b79c:	00e00034 	movhi	r3,32768
1000b7a0:	18ffffc4 	addi	r3,r3,-1
1000b7a4:	d8c00715 	stw	r3,28(sp)
1000b7a8:	00ffffc4 	movi	r3,-1
1000b7ac:	d8c00615 	stw	r3,24(sp)
1000b7b0:	003da606 	br	1000ae4c <__alt_data_end+0xf800ae4c>
1000b7b4:	d8000715 	stw	zero,28(sp)
1000b7b8:	d8000615 	stw	zero,24(sp)
1000b7bc:	003da306 	br	1000ae4c <__alt_data_end+0xf800ae4c>
1000b7c0:	d8c00f17 	ldw	r3,60(sp)
1000b7c4:	1800441e 	bne	r3,zero,1000b8d8 <_strtod_r+0x110c>
1000b7c8:	d8800617 	ldw	r2,24(sp)
1000b7cc:	1000421e 	bne	r2,zero,1000b8d8 <_strtod_r+0x110c>
1000b7d0:	d8800717 	ldw	r2,28(sp)
1000b7d4:	00c00434 	movhi	r3,16
1000b7d8:	18ffffc4 	addi	r3,r3,-1
1000b7dc:	10c6703a 	and	r3,r2,r3
1000b7e0:	18003d1e 	bne	r3,zero,1000b8d8 <_strtod_r+0x110c>
1000b7e4:	109ffc2c 	andhi	r2,r2,32752
1000b7e8:	00c1ac34 	movhi	r3,1712
1000b7ec:	18803a2e 	bgeu	r3,r2,1000b8d8 <_strtod_r+0x110c>
1000b7f0:	98800517 	ldw	r2,20(r19)
1000b7f4:	1000031e 	bne	r2,zero,1000b804 <_strtod_r+0x1038>
1000b7f8:	98800417 	ldw	r2,16(r19)
1000b7fc:	00c00044 	movi	r3,1
1000b800:	1880350e 	bge	r3,r2,1000b8d8 <_strtod_r+0x110c>
1000b804:	980b883a 	mov	r5,r19
1000b808:	8009883a 	mov	r4,r16
1000b80c:	01800044 	movi	r6,1
1000b810:	00091800 	call	10009180 <__lshift>
1000b814:	1009883a 	mov	r4,r2
1000b818:	880b883a 	mov	r5,r17
1000b81c:	1027883a 	mov	r19,r2
1000b820:	00092dc0 	call	100092dc <__mcmp>
1000b824:	00802c0e 	bge	zero,r2,1000b8d8 <_strtod_r+0x110c>
1000b828:	d8800717 	ldw	r2,28(sp)
1000b82c:	109ffc2c 	andhi	r2,r2,32752
1000b830:	a000ed26 	beq	r20,zero,1000bbe8 <_strtod_r+0x141c>
1000b834:	00c1ac34 	movhi	r3,1712
1000b838:	1880eb36 	bltu	r3,r2,1000bbe8 <_strtod_r+0x141c>
1000b83c:	00c0dc34 	movhi	r3,880
1000b840:	18bf902e 	bgeu	r3,r2,1000b684 <__alt_data_end+0xf800b684>
1000b844:	d9000617 	ldw	r4,24(sp)
1000b848:	d9400717 	ldw	r5,28(sp)
1000b84c:	008e5434 	movhi	r2,14672
1000b850:	000d883a 	mov	r6,zero
1000b854:	100f883a 	mov	r7,r2
1000b858:	d8800515 	stw	r2,20(sp)
1000b85c:	d8000415 	stw	zero,16(sp)
1000b860:	000f1b00 	call	1000f1b0 <__muldf3>
1000b864:	d8800615 	stw	r2,24(sp)
1000b868:	d8c00715 	stw	r3,28(sp)
1000b86c:	183ee71e 	bne	r3,zero,1000b40c <__alt_data_end+0xf800b40c>
1000b870:	103ee61e 	bne	r2,zero,1000b40c <__alt_data_end+0xf800b40c>
1000b874:	00800884 	movi	r2,34
1000b878:	80800015 	stw	r2,0(r16)
1000b87c:	003ee306 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b880:	d9000f17 	ldw	r4,60(sp)
1000b884:	203f6426 	beq	r4,zero,1000b618 <__alt_data_end+0xf800b618>
1000b888:	d8c00717 	ldw	r3,28(sp)
1000b88c:	00800434 	movhi	r2,16
1000b890:	10bfffc4 	addi	r2,r2,-1
1000b894:	1888703a 	and	r4,r3,r2
1000b898:	2080bd26 	beq	r4,r2,1000bb90 <_strtod_r+0x13c4>
1000b89c:	d8800617 	ldw	r2,24(sp)
1000b8a0:	1080004c 	andi	r2,r2,1
1000b8a4:	10000c26 	beq	r2,zero,1000b8d8 <_strtod_r+0x110c>
1000b8a8:	ddc00617 	ldw	r23,24(sp)
1000b8ac:	dd400717 	ldw	r21,28(sp)
1000b8b0:	b809883a 	mov	r4,r23
1000b8b4:	a80b883a 	mov	r5,r21
1000b8b8:	00094dc0 	call	100094dc <__ulp>
1000b8bc:	b809883a 	mov	r4,r23
1000b8c0:	a80b883a 	mov	r5,r21
1000b8c4:	100d883a 	mov	r6,r2
1000b8c8:	180f883a 	mov	r7,r3
1000b8cc:	000f0fc0 	call	1000f0fc <__adddf3>
1000b8d0:	d8800615 	stw	r2,24(sp)
1000b8d4:	d8c00715 	stw	r3,28(sp)
1000b8d8:	a03fda1e 	bne	r20,zero,1000b844 <__alt_data_end+0xf800b844>
1000b8dc:	003ecb06 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b8e0:	d8c00417 	ldw	r3,16(sp)
1000b8e4:	00bfffc4 	movi	r2,-1
1000b8e8:	18be781e 	bne	r3,r2,1000b2cc <__alt_data_end+0xf800b2cc>
1000b8ec:	00800884 	movi	r2,34
1000b8f0:	80800015 	stw	r2,0(r16)
1000b8f4:	009ffc34 	movhi	r2,32752
1000b8f8:	d8800715 	stw	r2,28(sp)
1000b8fc:	d8000615 	stw	zero,24(sp)
1000b900:	003ec206 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b904:	00800884 	movi	r2,34
1000b908:	80800015 	stw	r2,0(r16)
1000b90c:	00dffc34 	movhi	r3,32752
1000b910:	0005883a 	mov	r2,zero
1000b914:	003c4e06 	br	1000aa50 <__alt_data_end+0xf800aa50>
1000b918:	883d6826 	beq	r17,zero,1000aebc <__alt_data_end+0xf800aebc>
1000b91c:	0463c83a 	sub	r17,zero,r17
1000b920:	888003cc 	andi	r2,r17,15
1000b924:	10000b26 	beq	r2,zero,1000b954 <_strtod_r+0x1188>
1000b928:	100490fa 	slli	r2,r2,3
1000b92c:	00c40074 	movhi	r3,4097
1000b930:	18cbae04 	addi	r3,r3,11960
1000b934:	d9000617 	ldw	r4,24(sp)
1000b938:	1885883a 	add	r2,r3,r2
1000b93c:	d9400717 	ldw	r5,28(sp)
1000b940:	11800017 	ldw	r6,0(r2)
1000b944:	11c00117 	ldw	r7,4(r2)
1000b948:	000f4940 	call	1000f494 <__divdf3>
1000b94c:	d8800615 	stw	r2,24(sp)
1000b950:	d8c00715 	stw	r3,28(sp)
1000b954:	8823d13a 	srai	r17,r17,4
1000b958:	883d5826 	beq	r17,zero,1000aebc <__alt_data_end+0xf800aebc>
1000b95c:	008007c4 	movi	r2,31
1000b960:	14402816 	blt	r2,r17,1000ba04 <_strtod_r+0x1238>
1000b964:	8880040c 	andi	r2,r17,16
1000b968:	1000cf1e 	bne	r2,zero,1000bca8 <_strtod_r+0x14dc>
1000b96c:	0029883a 	mov	r20,zero
1000b970:	0440100e 	bge	zero,r17,1000b9b4 <_strtod_r+0x11e8>
1000b974:	d8800617 	ldw	r2,24(sp)
1000b978:	d8c00717 	ldw	r3,28(sp)
1000b97c:	04840074 	movhi	r18,4097
1000b980:	948be704 	addi	r18,r18,12188
1000b984:	8980004c 	andi	r6,r17,1
1000b988:	30000526 	beq	r6,zero,1000b9a0 <_strtod_r+0x11d4>
1000b98c:	91800017 	ldw	r6,0(r18)
1000b990:	91c00117 	ldw	r7,4(r18)
1000b994:	1009883a 	mov	r4,r2
1000b998:	180b883a 	mov	r5,r3
1000b99c:	000f1b00 	call	1000f1b0 <__muldf3>
1000b9a0:	8823d07a 	srai	r17,r17,1
1000b9a4:	94800204 	addi	r18,r18,8
1000b9a8:	883ff61e 	bne	r17,zero,1000b984 <__alt_data_end+0xf800b984>
1000b9ac:	d8800615 	stw	r2,24(sp)
1000b9b0:	d8c00715 	stw	r3,28(sp)
1000b9b4:	a0000d26 	beq	r20,zero,1000b9ec <_strtod_r+0x1220>
1000b9b8:	d8c00717 	ldw	r3,28(sp)
1000b9bc:	01001ac4 	movi	r4,107
1000b9c0:	189ffc2c 	andhi	r2,r3,32752
1000b9c4:	1004d53a 	srli	r2,r2,20
1000b9c8:	2085c83a 	sub	r2,r4,r2
1000b9cc:	0080070e 	bge	zero,r2,1000b9ec <_strtod_r+0x1220>
1000b9d0:	010007c4 	movi	r4,31
1000b9d4:	2080c30e 	bge	r4,r2,1000bce4 <_strtod_r+0x1518>
1000b9d8:	d8000615 	stw	zero,24(sp)
1000b9dc:	01000d04 	movi	r4,52
1000b9e0:	2080c60e 	bge	r4,r2,1000bcfc <_strtod_r+0x1530>
1000b9e4:	0080dc34 	movhi	r2,880
1000b9e8:	d8800715 	stw	r2,28(sp)
1000b9ec:	d9000617 	ldw	r4,24(sp)
1000b9f0:	d9400717 	ldw	r5,28(sp)
1000b9f4:	000d883a 	mov	r6,zero
1000b9f8:	000f883a 	mov	r7,zero
1000b9fc:	000f6480 	call	1000f648 <__eqdf2>
1000ba00:	103d2f1e 	bne	r2,zero,1000aec0 <__alt_data_end+0xf800aec0>
1000ba04:	00800884 	movi	r2,34
1000ba08:	80800015 	stw	r2,0(r16)
1000ba0c:	0007883a 	mov	r3,zero
1000ba10:	0005883a 	mov	r2,zero
1000ba14:	003c0e06 	br	1000aa50 <__alt_data_end+0xf800aa50>
1000ba18:	0007883a 	mov	r3,zero
1000ba1c:	00aff834 	movhi	r2,49120
1000ba20:	002b883a 	mov	r21,zero
1000ba24:	05cff834 	movhi	r23,16352
1000ba28:	003e4a06 	br	1000b354 <__alt_data_end+0xf800b354>
1000ba2c:	011387c4 	movi	r4,19999
1000ba30:	003cca06 	br	1000ad5c <__alt_data_end+0xf800ad5c>
1000ba34:	b00b883a 	mov	r5,r22
1000ba38:	d8000f15 	stw	zero,60(sp)
1000ba3c:	0039883a 	mov	fp,zero
1000ba40:	002b883a 	mov	r21,zero
1000ba44:	003c2d06 	br	1000aafc <__alt_data_end+0xf800aafc>
1000ba48:	d8000f15 	stw	zero,60(sp)
1000ba4c:	0039883a 	mov	fp,zero
1000ba50:	002b883a 	mov	r21,zero
1000ba54:	003b9d06 	br	1000a8cc <__alt_data_end+0xf800a8cc>
1000ba58:	d9401017 	ldw	r5,64(sp)
1000ba5c:	00c00944 	movi	r3,37
1000ba60:	1d47c83a 	sub	r3,r3,r21
1000ba64:	197d0116 	blt	r3,r5,1000ae6c <__alt_data_end+0xf800ae6c>
1000ba68:	1563c83a 	sub	r17,r2,r21
1000ba6c:	880490fa 	slli	r2,r17,3
1000ba70:	04040074 	movhi	r16,4097
1000ba74:	840bae04 	addi	r16,r16,11960
1000ba78:	d9000617 	ldw	r4,24(sp)
1000ba7c:	8085883a 	add	r2,r16,r2
1000ba80:	d9400717 	ldw	r5,28(sp)
1000ba84:	11800017 	ldw	r6,0(r2)
1000ba88:	11c00117 	ldw	r7,4(r2)
1000ba8c:	000f1b00 	call	1000f1b0 <__muldf3>
1000ba90:	d9001017 	ldw	r4,64(sp)
1000ba94:	180b883a 	mov	r5,r3
1000ba98:	244dc83a 	sub	r6,r4,r17
1000ba9c:	300c90fa 	slli	r6,r6,3
1000baa0:	1009883a 	mov	r4,r2
1000baa4:	81a1883a 	add	r16,r16,r6
1000baa8:	81800017 	ldw	r6,0(r16)
1000baac:	81c00117 	ldw	r7,4(r16)
1000bab0:	000f1b00 	call	1000f1b0 <__muldf3>
1000bab4:	003be606 	br	1000aa50 <__alt_data_end+0xf800aa50>
1000bab8:	d9400e17 	ldw	r5,56(sp)
1000babc:	d8001215 	stw	zero,72(sp)
1000bac0:	d9400c15 	stw	r5,48(sp)
1000bac4:	003ce606 	br	1000ae60 <__alt_data_end+0xf800ae60>
1000bac8:	d9401017 	ldw	r5,64(sp)
1000bacc:	00bffa84 	movi	r2,-22
1000bad0:	28bce616 	blt	r5,r2,1000ae6c <__alt_data_end+0xf800ae6c>
1000bad4:	280490fa 	slli	r2,r5,3
1000bad8:	00c40074 	movhi	r3,4097
1000badc:	18cbae04 	addi	r3,r3,11960
1000bae0:	d9000617 	ldw	r4,24(sp)
1000bae4:	1885c83a 	sub	r2,r3,r2
1000bae8:	d9400717 	ldw	r5,28(sp)
1000baec:	11800017 	ldw	r6,0(r2)
1000baf0:	11c00117 	ldw	r7,4(r2)
1000baf4:	000f4940 	call	1000f494 <__divdf3>
1000baf8:	003bd506 	br	1000aa50 <__alt_data_end+0xf800aa50>
1000bafc:	00801a44 	movi	r2,105
1000bb00:	38bb8726 	beq	r7,r2,1000a920 <__alt_data_end+0xf800a920>
1000bb04:	00801b84 	movi	r2,110
1000bb08:	38be881e 	bne	r7,r2,1000b52c <__alt_data_end+0xf800b52c>
1000bb0c:	d8c00c17 	ldw	r3,48(sp)
1000bb10:	01040074 	movhi	r4,4097
1000bb14:	210be604 	addi	r4,r4,12184
1000bb18:	01801004 	movi	r6,64
1000bb1c:	01c01684 	movi	r7,90
1000bb20:	21400007 	ldb	r5,0(r4)
1000bb24:	21000044 	addi	r4,r4,1
1000bb28:	28004e26 	beq	r5,zero,1000bc64 <_strtod_r+0x1498>
1000bb2c:	18c00044 	addi	r3,r3,1
1000bb30:	18800007 	ldb	r2,0(r3)
1000bb34:	3080020e 	bge	r6,r2,1000bb40 <_strtod_r+0x1374>
1000bb38:	38800116 	blt	r7,r2,1000bb40 <_strtod_r+0x1374>
1000bb3c:	10800804 	addi	r2,r2,32
1000bb40:	117ff726 	beq	r2,r5,1000bb20 <__alt_data_end+0xf800bb20>
1000bb44:	003e7906 	br	1000b52c <__alt_data_end+0xf800b52c>
1000bb48:	d8c00617 	ldw	r3,24(sp)
1000bb4c:	003eb906 	br	1000b634 <__alt_data_end+0xf800b634>
1000bb50:	00800404 	movi	r2,16
1000bb54:	15c02216 	blt	r2,r23,1000bbe0 <_strtod_r+0x1414>
1000bb58:	d9000f17 	ldw	r4,60(sp)
1000bb5c:	01400284 	movi	r5,10
1000bb60:	000158c0 	call	1000158c <__mulsi3>
1000bb64:	15ad883a 	add	r22,r2,r22
1000bb68:	dd800f15 	stw	r22,60(sp)
1000bb6c:	000d883a 	mov	r6,zero
1000bb70:	003c2606 	br	1000ac0c <__alt_data_end+0xf800ac0c>
1000bb74:	000d883a 	mov	r6,zero
1000bb78:	003bf106 	br	1000ab40 <__alt_data_end+0xf800ab40>
1000bb7c:	0080d434 	movhi	r2,848
1000bb80:	1887883a 	add	r3,r3,r2
1000bb84:	d8c00715 	stw	r3,28(sp)
1000bb88:	0029883a 	mov	r20,zero
1000bb8c:	003ccc06 	br	1000aec0 <__alt_data_end+0xf800aec0>
1000bb90:	d8800617 	ldw	r2,24(sp)
1000bb94:	a0001026 	beq	r20,zero,1000bbd8 <_strtod_r+0x140c>
1000bb98:	191ffc2c 	andhi	r4,r3,32752
1000bb9c:	0141a834 	movhi	r5,1696
1000bba0:	29000d36 	bltu	r5,r4,1000bbd8 <_strtod_r+0x140c>
1000bba4:	2008d53a 	srli	r4,r4,20
1000bba8:	01401ac4 	movi	r5,107
1000bbac:	2909c83a 	sub	r4,r5,r4
1000bbb0:	017fffc4 	movi	r5,-1
1000bbb4:	2908983a 	sll	r4,r5,r4
1000bbb8:	113f391e 	bne	r2,r4,1000b8a0 <__alt_data_end+0xf800b8a0>
1000bbbc:	18dffc2c 	andhi	r3,r3,32752
1000bbc0:	00800434 	movhi	r2,16
1000bbc4:	1885883a 	add	r2,r3,r2
1000bbc8:	d8800715 	stw	r2,28(sp)
1000bbcc:	d8000615 	stw	zero,24(sp)
1000bbd0:	a03f1c1e 	bne	r20,zero,1000b844 <__alt_data_end+0xf800b844>
1000bbd4:	003e0d06 	br	1000b40c <__alt_data_end+0xf800b40c>
1000bbd8:	013fffc4 	movi	r4,-1
1000bbdc:	003ff606 	br	1000bbb8 <__alt_data_end+0xf800bbb8>
1000bbe0:	000d883a 	mov	r6,zero
1000bbe4:	003c0906 	br	1000ac0c <__alt_data_end+0xf800ac0c>
1000bbe8:	00fffc34 	movhi	r3,65520
1000bbec:	10c5883a 	add	r2,r2,r3
1000bbf0:	00c00434 	movhi	r3,16
1000bbf4:	18ffffc4 	addi	r3,r3,-1
1000bbf8:	10c4b03a 	or	r2,r2,r3
1000bbfc:	d8800715 	stw	r2,28(sp)
1000bc00:	00bfffc4 	movi	r2,-1
1000bc04:	d8800615 	stw	r2,24(sp)
1000bc08:	a03f0e1e 	bne	r20,zero,1000b844 <__alt_data_end+0xf800b844>
1000bc0c:	003dff06 	br	1000b40c <__alt_data_end+0xf800b40c>
1000bc10:	1011883a 	mov	r8,r2
1000bc14:	d8800c15 	stw	r2,48(sp)
1000bc18:	01040074 	movhi	r4,4097
1000bc1c:	210be404 	addi	r4,r4,12176
1000bc20:	01801004 	movi	r6,64
1000bc24:	01c01684 	movi	r7,90
1000bc28:	21400007 	ldb	r5,0(r4)
1000bc2c:	10800044 	addi	r2,r2,1
1000bc30:	21000044 	addi	r4,r4,1
1000bc34:	28001a26 	beq	r5,zero,1000bca0 <_strtod_r+0x14d4>
1000bc38:	10c00007 	ldb	r3,0(r2)
1000bc3c:	30c0020e 	bge	r6,r3,1000bc48 <_strtod_r+0x147c>
1000bc40:	38c00116 	blt	r7,r3,1000bc48 <_strtod_r+0x147c>
1000bc44:	18c00804 	addi	r3,r3,32
1000bc48:	197ff726 	beq	r3,r5,1000bc28 <__alt_data_end+0xf800bc28>
1000bc4c:	40800044 	addi	r2,r8,1
1000bc50:	d8800c15 	stw	r2,48(sp)
1000bc54:	009ffc34 	movhi	r2,32752
1000bc58:	d8800715 	stw	r2,28(sp)
1000bc5c:	d8000615 	stw	zero,24(sp)
1000bc60:	003c7f06 	br	1000ae60 <__alt_data_end+0xf800ae60>
1000bc64:	18800044 	addi	r2,r3,1
1000bc68:	d8800c15 	stw	r2,48(sp)
1000bc6c:	18c00047 	ldb	r3,1(r3)
1000bc70:	00800a04 	movi	r2,40
1000bc74:	18800e26 	beq	r3,r2,1000bcb0 <_strtod_r+0x14e4>
1000bc78:	00bffe34 	movhi	r2,65528
1000bc7c:	d8800715 	stw	r2,28(sp)
1000bc80:	d8000615 	stw	zero,24(sp)
1000bc84:	003c7606 	br	1000ae60 <__alt_data_end+0xf800ae60>
1000bc88:	0023883a 	mov	r17,zero
1000bc8c:	05840074 	movhi	r22,4097
1000bc90:	b58ba404 	addi	r22,r22,11920
1000bc94:	003e4506 	br	1000b5ac <__alt_data_end+0xf800b5ac>
1000bc98:	b805883a 	mov	r2,r23
1000bc9c:	003bd306 	br	1000abec <__alt_data_end+0xf800abec>
1000bca0:	d8800c15 	stw	r2,48(sp)
1000bca4:	003feb06 	br	1000bc54 <__alt_data_end+0xf800bc54>
1000bca8:	05001a84 	movi	r20,106
1000bcac:	003f3006 	br	1000b970 <__alt_data_end+0xf800b970>
1000bcb0:	d9000c04 	addi	r4,sp,48
1000bcb4:	01440074 	movhi	r5,4097
1000bcb8:	294ede04 	addi	r5,r5,15224
1000bcbc:	d9800204 	addi	r6,sp,8
1000bcc0:	000dad00 	call	1000dad0 <__hexnan>
1000bcc4:	00c00144 	movi	r3,5
1000bcc8:	10ffeb1e 	bne	r2,r3,1000bc78 <__alt_data_end+0xf800bc78>
1000bccc:	d8800317 	ldw	r2,12(sp)
1000bcd0:	109ffc34 	orhi	r2,r2,32752
1000bcd4:	d8800715 	stw	r2,28(sp)
1000bcd8:	d8800217 	ldw	r2,8(sp)
1000bcdc:	d8800615 	stw	r2,24(sp)
1000bce0:	003c5f06 	br	1000ae60 <__alt_data_end+0xf800ae60>
1000bce4:	00ffffc4 	movi	r3,-1
1000bce8:	1884983a 	sll	r2,r3,r2
1000bcec:	d8c00617 	ldw	r3,24(sp)
1000bcf0:	1884703a 	and	r2,r3,r2
1000bcf4:	d8800615 	stw	r2,24(sp)
1000bcf8:	003f3c06 	br	1000b9ec <__alt_data_end+0xf800b9ec>
1000bcfc:	10bff804 	addi	r2,r2,-32
1000bd00:	013fffc4 	movi	r4,-1
1000bd04:	2084983a 	sll	r2,r4,r2
1000bd08:	10c6703a 	and	r3,r2,r3
1000bd0c:	d8c00715 	stw	r3,28(sp)
1000bd10:	003f3606 	br	1000b9ec <__alt_data_end+0xf800b9ec>

1000bd14 <strtod>:
1000bd14:	00c40074 	movhi	r3,4097
1000bd18:	18d36704 	addi	r3,r3,19868
1000bd1c:	2005883a 	mov	r2,r4
1000bd20:	19000017 	ldw	r4,0(r3)
1000bd24:	280d883a 	mov	r6,r5
1000bd28:	100b883a 	mov	r5,r2
1000bd2c:	000a7cc1 	jmpi	1000a7cc <_strtod_r>

1000bd30 <strtof>:
1000bd30:	defffb04 	addi	sp,sp,-20
1000bd34:	dcc00315 	stw	r19,12(sp)
1000bd38:	04c40074 	movhi	r19,4097
1000bd3c:	9cd36704 	addi	r19,r19,19868
1000bd40:	2005883a 	mov	r2,r4
1000bd44:	99000017 	ldw	r4,0(r19)
1000bd48:	280d883a 	mov	r6,r5
1000bd4c:	100b883a 	mov	r5,r2
1000bd50:	dfc00415 	stw	ra,16(sp)
1000bd54:	dc800215 	stw	r18,8(sp)
1000bd58:	dc400115 	stw	r17,4(sp)
1000bd5c:	dc000015 	stw	r16,0(sp)
1000bd60:	000a7cc0 	call	1000a7cc <_strtod_r>
1000bd64:	1009883a 	mov	r4,r2
1000bd68:	180b883a 	mov	r5,r3
1000bd6c:	1025883a 	mov	r18,r2
1000bd70:	1823883a 	mov	r17,r3
1000bd74:	000fa180 	call	1000fa18 <__truncdfsf2>
1000bd78:	1009883a 	mov	r4,r2
1000bd7c:	000b883a 	mov	r5,zero
1000bd80:	1021883a 	mov	r16,r2
1000bd84:	000eca40 	call	1000eca4 <__nesf2>
1000bd88:	1000111e 	bne	r2,zero,1000bdd0 <strtof+0xa0>
1000bd8c:	9009883a 	mov	r4,r18
1000bd90:	880b883a 	mov	r5,r17
1000bd94:	000d883a 	mov	r6,zero
1000bd98:	000f883a 	mov	r7,zero
1000bd9c:	000f6a40 	call	1000f6a4 <__nedf2>
1000bda0:	10000b26 	beq	r2,zero,1000bdd0 <strtof+0xa0>
1000bda4:	98800017 	ldw	r2,0(r19)
1000bda8:	00c00884 	movi	r3,34
1000bdac:	10c00015 	stw	r3,0(r2)
1000bdb0:	8005883a 	mov	r2,r16
1000bdb4:	dfc00417 	ldw	ra,16(sp)
1000bdb8:	dcc00317 	ldw	r19,12(sp)
1000bdbc:	dc800217 	ldw	r18,8(sp)
1000bdc0:	dc400117 	ldw	r17,4(sp)
1000bdc4:	dc000017 	ldw	r16,0(sp)
1000bdc8:	dec00504 	addi	sp,sp,20
1000bdcc:	f800283a 	ret
1000bdd0:	8009883a 	mov	r4,r16
1000bdd4:	015fe034 	movhi	r5,32640
1000bdd8:	297fffc4 	addi	r5,r5,-1
1000bddc:	000ecf80 	call	1000ecf8 <__gtsf2>
1000bde0:	0080070e 	bge	zero,r2,1000be00 <strtof+0xd0>
1000bde4:	9009883a 	mov	r4,r18
1000bde8:	880b883a 	mov	r5,r17
1000bdec:	01bfffc4 	movi	r6,-1
1000bdf0:	01dffc34 	movhi	r7,32752
1000bdf4:	39ffffc4 	addi	r7,r7,-1
1000bdf8:	000f7000 	call	1000f700 <__gtdf2>
1000bdfc:	00bfe90e 	bge	zero,r2,1000bda4 <__alt_data_end+0xf800bda4>
1000be00:	8009883a 	mov	r4,r16
1000be04:	017fe034 	movhi	r5,65408
1000be08:	297fffc4 	addi	r5,r5,-1
1000be0c:	000ed540 	call	1000ed54 <__ltsf2>
1000be10:	103fe70e 	bge	r2,zero,1000bdb0 <__alt_data_end+0xf800bdb0>
1000be14:	9009883a 	mov	r4,r18
1000be18:	880b883a 	mov	r5,r17
1000be1c:	01bfffc4 	movi	r6,-1
1000be20:	01fffc34 	movhi	r7,65520
1000be24:	39ffffc4 	addi	r7,r7,-1
1000be28:	000f7c80 	call	1000f7c8 <__ltdf2>
1000be2c:	103fdd0e 	bge	r2,zero,1000bda4 <__alt_data_end+0xf800bda4>
1000be30:	8005883a 	mov	r2,r16
1000be34:	dfc00417 	ldw	ra,16(sp)
1000be38:	dcc00317 	ldw	r19,12(sp)
1000be3c:	dc800217 	ldw	r18,8(sp)
1000be40:	dc400117 	ldw	r17,4(sp)
1000be44:	dc000017 	ldw	r16,0(sp)
1000be48:	dec00504 	addi	sp,sp,20
1000be4c:	f800283a 	ret

1000be50 <_strtol_r>:
1000be50:	defff304 	addi	sp,sp,-52
1000be54:	00840074 	movhi	r2,4097
1000be58:	10936504 	addi	r2,r2,19860
1000be5c:	df000b15 	stw	fp,44(sp)
1000be60:	17000017 	ldw	fp,0(r2)
1000be64:	ddc00a15 	stw	r23,40(sp)
1000be68:	dd000715 	stw	r20,28(sp)
1000be6c:	dcc00615 	stw	r19,24(sp)
1000be70:	dc000315 	stw	r16,12(sp)
1000be74:	dfc00c15 	stw	ra,48(sp)
1000be78:	dd800915 	stw	r22,36(sp)
1000be7c:	dd400815 	stw	r21,32(sp)
1000be80:	dc800515 	stw	r18,20(sp)
1000be84:	dc400415 	stw	r17,16(sp)
1000be88:	2827883a 	mov	r19,r5
1000be8c:	d9000215 	stw	r4,8(sp)
1000be90:	3029883a 	mov	r20,r6
1000be94:	382f883a 	mov	r23,r7
1000be98:	2821883a 	mov	r16,r5
1000be9c:	84400007 	ldb	r17,0(r16)
1000bea0:	84000044 	addi	r16,r16,1
1000bea4:	e445883a 	add	r2,fp,r17
1000bea8:	10800003 	ldbu	r2,0(r2)
1000beac:	1080020c 	andi	r2,r2,8
1000beb0:	10803fcc 	andi	r2,r2,255
1000beb4:	1080201c 	xori	r2,r2,128
1000beb8:	10bfe004 	addi	r2,r2,-128
1000bebc:	103ff71e 	bne	r2,zero,1000be9c <__alt_data_end+0xf800be9c>
1000bec0:	00800b44 	movi	r2,45
1000bec4:	88806a26 	beq	r17,r2,1000c070 <_strtol_r+0x220>
1000bec8:	00800ac4 	movi	r2,43
1000becc:	88806d26 	beq	r17,r2,1000c084 <_strtol_r+0x234>
1000bed0:	d8000015 	stw	zero,0(sp)
1000bed4:	b800481e 	bne	r23,zero,1000bff8 <_strtol_r+0x1a8>
1000bed8:	00800c04 	movi	r2,48
1000bedc:	88804a26 	beq	r17,r2,1000c008 <_strtol_r+0x1b8>
1000bee0:	05c00284 	movi	r23,10
1000bee4:	b825883a 	mov	r18,r23
1000bee8:	d8c00017 	ldw	r3,0(sp)
1000beec:	00a00034 	movhi	r2,32768
1000bef0:	900b883a 	mov	r5,r18
1000bef4:	182b003a 	cmpeq	r21,r3,zero
1000bef8:	156bc83a 	sub	r21,r2,r21
1000befc:	a809883a 	mov	r4,r21
1000bf00:	00015840 	call	10001584 <__umodsi3>
1000bf04:	a809883a 	mov	r4,r21
1000bf08:	900b883a 	mov	r5,r18
1000bf0c:	d8800115 	stw	r2,4(sp)
1000bf10:	000157c0 	call	1000157c <__udivsi3>
1000bf14:	e447883a 	add	r3,fp,r17
1000bf18:	18c00003 	ldbu	r3,0(r3)
1000bf1c:	102b883a 	mov	r21,r2
1000bf20:	000d883a 	mov	r6,zero
1000bf24:	1940010c 	andi	r5,r3,4
1000bf28:	29403fcc 	andi	r5,r5,255
1000bf2c:	2940201c 	xori	r5,r5,128
1000bf30:	297fe004 	addi	r5,r5,-128
1000bf34:	0009883a 	mov	r4,zero
1000bf38:	05bfffc4 	movi	r22,-1
1000bf3c:	28001226 	beq	r5,zero,1000bf88 <_strtol_r+0x138>
1000bf40:	8c7ff404 	addi	r17,r17,-48
1000bf44:	8dc0170e 	bge	r17,r23,1000bfa4 <_strtol_r+0x154>
1000bf48:	35800626 	beq	r6,r22,1000bf64 <_strtol_r+0x114>
1000bf4c:	a9003a36 	bltu	r21,r4,1000c038 <_strtol_r+0x1e8>
1000bf50:	25403726 	beq	r4,r21,1000c030 <_strtol_r+0x1e0>
1000bf54:	900b883a 	mov	r5,r18
1000bf58:	000158c0 	call	1000158c <__mulsi3>
1000bf5c:	8889883a 	add	r4,r17,r2
1000bf60:	01800044 	movi	r6,1
1000bf64:	84400007 	ldb	r17,0(r16)
1000bf68:	84000044 	addi	r16,r16,1
1000bf6c:	e447883a 	add	r3,fp,r17
1000bf70:	18c00003 	ldbu	r3,0(r3)
1000bf74:	1940010c 	andi	r5,r3,4
1000bf78:	29403fcc 	andi	r5,r5,255
1000bf7c:	2940201c 	xori	r5,r5,128
1000bf80:	297fe004 	addi	r5,r5,-128
1000bf84:	283fee1e 	bne	r5,zero,1000bf40 <__alt_data_end+0xf800bf40>
1000bf88:	188000cc 	andi	r2,r3,3
1000bf8c:	10000526 	beq	r2,zero,1000bfa4 <_strtol_r+0x154>
1000bf90:	18c0004c 	andi	r3,r3,1
1000bf94:	18002a26 	beq	r3,zero,1000c040 <_strtol_r+0x1f0>
1000bf98:	00800dc4 	movi	r2,55
1000bf9c:	88a3c83a 	sub	r17,r17,r2
1000bfa0:	8dffe916 	blt	r17,r23,1000bf48 <__alt_data_end+0xf800bf48>
1000bfa4:	00bfffc4 	movi	r2,-1
1000bfa8:	d8c00017 	ldw	r3,0(sp)
1000bfac:	30802726 	beq	r6,r2,1000c04c <_strtol_r+0x1fc>
1000bfb0:	18000126 	beq	r3,zero,1000bfb8 <_strtol_r+0x168>
1000bfb4:	0109c83a 	sub	r4,zero,r4
1000bfb8:	2005883a 	mov	r2,r4
1000bfbc:	a0000226 	beq	r20,zero,1000bfc8 <_strtol_r+0x178>
1000bfc0:	3000291e 	bne	r6,zero,1000c068 <_strtol_r+0x218>
1000bfc4:	a4c00015 	stw	r19,0(r20)
1000bfc8:	dfc00c17 	ldw	ra,48(sp)
1000bfcc:	df000b17 	ldw	fp,44(sp)
1000bfd0:	ddc00a17 	ldw	r23,40(sp)
1000bfd4:	dd800917 	ldw	r22,36(sp)
1000bfd8:	dd400817 	ldw	r21,32(sp)
1000bfdc:	dd000717 	ldw	r20,28(sp)
1000bfe0:	dcc00617 	ldw	r19,24(sp)
1000bfe4:	dc800517 	ldw	r18,20(sp)
1000bfe8:	dc400417 	ldw	r17,16(sp)
1000bfec:	dc000317 	ldw	r16,12(sp)
1000bff0:	dec00d04 	addi	sp,sp,52
1000bff4:	f800283a 	ret
1000bff8:	00800404 	movi	r2,16
1000bffc:	b8bfb91e 	bne	r23,r2,1000bee4 <__alt_data_end+0xf800bee4>
1000c000:	00800c04 	movi	r2,48
1000c004:	88bfb71e 	bne	r17,r2,1000bee4 <__alt_data_end+0xf800bee4>
1000c008:	80800007 	ldb	r2,0(r16)
1000c00c:	00c01e04 	movi	r3,120
1000c010:	10c02026 	beq	r2,r3,1000c094 <_strtol_r+0x244>
1000c014:	00c01604 	movi	r3,88
1000c018:	10c01e26 	beq	r2,r3,1000c094 <_strtol_r+0x244>
1000c01c:	b800221e 	bne	r23,zero,1000c0a8 <_strtol_r+0x258>
1000c020:	04800204 	movi	r18,8
1000c024:	04400c04 	movi	r17,48
1000c028:	902f883a 	mov	r23,r18
1000c02c:	003fae06 	br	1000bee8 <__alt_data_end+0xf800bee8>
1000c030:	d8800117 	ldw	r2,4(sp)
1000c034:	147fc70e 	bge	r2,r17,1000bf54 <__alt_data_end+0xf800bf54>
1000c038:	01bfffc4 	movi	r6,-1
1000c03c:	003fc906 	br	1000bf64 <__alt_data_end+0xf800bf64>
1000c040:	008015c4 	movi	r2,87
1000c044:	88a3c83a 	sub	r17,r17,r2
1000c048:	003fd506 	br	1000bfa0 <__alt_data_end+0xf800bfa0>
1000c04c:	d9000217 	ldw	r4,8(sp)
1000c050:	1805003a 	cmpeq	r2,r3,zero
1000c054:	00c00884 	movi	r3,34
1000c058:	20c00015 	stw	r3,0(r4)
1000c05c:	00e00034 	movhi	r3,32768
1000c060:	1885c83a 	sub	r2,r3,r2
1000c064:	a03fd826 	beq	r20,zero,1000bfc8 <__alt_data_end+0xf800bfc8>
1000c068:	84ffffc4 	addi	r19,r16,-1
1000c06c:	003fd506 	br	1000bfc4 <__alt_data_end+0xf800bfc4>
1000c070:	00c00044 	movi	r3,1
1000c074:	84400007 	ldb	r17,0(r16)
1000c078:	d8c00015 	stw	r3,0(sp)
1000c07c:	80e1883a 	add	r16,r16,r3
1000c080:	003f9406 	br	1000bed4 <__alt_data_end+0xf800bed4>
1000c084:	84400007 	ldb	r17,0(r16)
1000c088:	d8000015 	stw	zero,0(sp)
1000c08c:	84000044 	addi	r16,r16,1
1000c090:	003f9006 	br	1000bed4 <__alt_data_end+0xf800bed4>
1000c094:	04800404 	movi	r18,16
1000c098:	84400047 	ldb	r17,1(r16)
1000c09c:	902f883a 	mov	r23,r18
1000c0a0:	84000084 	addi	r16,r16,2
1000c0a4:	003f9006 	br	1000bee8 <__alt_data_end+0xf800bee8>
1000c0a8:	b825883a 	mov	r18,r23
1000c0ac:	04400c04 	movi	r17,48
1000c0b0:	003f8d06 	br	1000bee8 <__alt_data_end+0xf800bee8>

1000c0b4 <strtol>:
1000c0b4:	00840074 	movhi	r2,4097
1000c0b8:	10936704 	addi	r2,r2,19868
1000c0bc:	2007883a 	mov	r3,r4
1000c0c0:	11000017 	ldw	r4,0(r2)
1000c0c4:	2805883a 	mov	r2,r5
1000c0c8:	300f883a 	mov	r7,r6
1000c0cc:	180b883a 	mov	r5,r3
1000c0d0:	100d883a 	mov	r6,r2
1000c0d4:	000be501 	jmpi	1000be50 <_strtol_r>

1000c0d8 <_strtoll_r>:
1000c0d8:	defff004 	addi	sp,sp,-64
1000c0dc:	00840074 	movhi	r2,4097
1000c0e0:	10936504 	addi	r2,r2,19860
1000c0e4:	ddc00d15 	stw	r23,52(sp)
1000c0e8:	15c00017 	ldw	r23,0(r2)
1000c0ec:	df000e15 	stw	fp,56(sp)
1000c0f0:	dc000615 	stw	r16,24(sp)
1000c0f4:	dfc00f15 	stw	ra,60(sp)
1000c0f8:	dd800c15 	stw	r22,48(sp)
1000c0fc:	dd400b15 	stw	r21,44(sp)
1000c100:	dd000a15 	stw	r20,40(sp)
1000c104:	dcc00915 	stw	r19,36(sp)
1000c108:	dc800815 	stw	r18,32(sp)
1000c10c:	dc400715 	stw	r17,28(sp)
1000c110:	d9400015 	stw	r5,0(sp)
1000c114:	d9000415 	stw	r4,16(sp)
1000c118:	d9800115 	stw	r6,4(sp)
1000c11c:	3839883a 	mov	fp,r7
1000c120:	2821883a 	mov	r16,r5
1000c124:	82000007 	ldb	r8,0(r16)
1000c128:	84000044 	addi	r16,r16,1
1000c12c:	ba05883a 	add	r2,r23,r8
1000c130:	10800003 	ldbu	r2,0(r2)
1000c134:	1080020c 	andi	r2,r2,8
1000c138:	10803fcc 	andi	r2,r2,255
1000c13c:	1080201c 	xori	r2,r2,128
1000c140:	10bfe004 	addi	r2,r2,-128
1000c144:	103ff71e 	bne	r2,zero,1000c124 <__alt_data_end+0xf800c124>
1000c148:	00800b44 	movi	r2,45
1000c14c:	40807a26 	beq	r8,r2,1000c338 <_strtoll_r+0x260>
1000c150:	00800ac4 	movi	r2,43
1000c154:	40808826 	beq	r8,r2,1000c378 <_strtoll_r+0x2a0>
1000c158:	d8000215 	stw	zero,8(sp)
1000c15c:	e000061e 	bne	fp,zero,1000c178 <_strtoll_r+0xa0>
1000c160:	00800c04 	movi	r2,48
1000c164:	40808b26 	beq	r8,r2,1000c394 <_strtoll_r+0x2bc>
1000c168:	04800284 	movi	r18,10
1000c16c:	0027883a 	mov	r19,zero
1000c170:	9039883a 	mov	fp,r18
1000c174:	00000406 	br	1000c188 <_strtoll_r+0xb0>
1000c178:	00800404 	movi	r2,16
1000c17c:	e0809926 	beq	fp,r2,1000c3e4 <_strtoll_r+0x30c>
1000c180:	e027d7fa 	srai	r19,fp,31
1000c184:	e025883a 	mov	r18,fp
1000c188:	d9000217 	ldw	r4,8(sp)
1000c18c:	20006226 	beq	r4,zero,1000c318 <_strtoll_r+0x240>
1000c190:	002b883a 	mov	r21,zero
1000c194:	04600034 	movhi	r17,32768
1000c198:	a809883a 	mov	r4,r21
1000c19c:	880b883a 	mov	r5,r17
1000c1a0:	900d883a 	mov	r6,r18
1000c1a4:	980f883a 	mov	r7,r19
1000c1a8:	da000515 	stw	r8,20(sp)
1000c1ac:	000e67c0 	call	1000e67c <__umoddi3>
1000c1b0:	a809883a 	mov	r4,r21
1000c1b4:	880b883a 	mov	r5,r17
1000c1b8:	900d883a 	mov	r6,r18
1000c1bc:	980f883a 	mov	r7,r19
1000c1c0:	d8800315 	stw	r2,12(sp)
1000c1c4:	000e02c0 	call	1000e02c <__udivdi3>
1000c1c8:	da000517 	ldw	r8,20(sp)
1000c1cc:	182b883a 	mov	r21,r3
1000c1d0:	1023883a 	mov	r17,r2
1000c1d4:	ba0d883a 	add	r6,r23,r8
1000c1d8:	31800003 	ldbu	r6,0(r6)
1000c1dc:	0007883a 	mov	r3,zero
1000c1e0:	0009883a 	mov	r4,zero
1000c1e4:	3240010c 	andi	r9,r6,4
1000c1e8:	4a403fcc 	andi	r9,r9,255
1000c1ec:	4a40201c 	xori	r9,r9,128
1000c1f0:	4a7fe004 	addi	r9,r9,-128
1000c1f4:	000b883a 	mov	r5,zero
1000c1f8:	05bfffc4 	movi	r22,-1
1000c1fc:	48001026 	beq	r9,zero,1000c240 <_strtoll_r+0x168>
1000c200:	453ff404 	addi	r20,r8,-48
1000c204:	a700150e 	bge	r20,fp,1000c25c <_strtoll_r+0x184>
1000c208:	1d800426 	beq	r3,r22,1000c21c <_strtoll_r+0x144>
1000c20c:	a9400236 	bltu	r21,r5,1000c218 <_strtoll_r+0x140>
1000c210:	2d402e1e 	bne	r5,r21,1000c2cc <_strtoll_r+0x1f4>
1000c214:	89002d2e 	bgeu	r17,r4,1000c2cc <_strtoll_r+0x1f4>
1000c218:	00ffffc4 	movi	r3,-1
1000c21c:	82000007 	ldb	r8,0(r16)
1000c220:	84000044 	addi	r16,r16,1
1000c224:	ba0d883a 	add	r6,r23,r8
1000c228:	31800003 	ldbu	r6,0(r6)
1000c22c:	3240010c 	andi	r9,r6,4
1000c230:	4a403fcc 	andi	r9,r9,255
1000c234:	4a40201c 	xori	r9,r9,128
1000c238:	4a7fe004 	addi	r9,r9,-128
1000c23c:	483ff01e 	bne	r9,zero,1000c200 <__alt_data_end+0xf800c200>
1000c240:	308000cc 	andi	r2,r6,3
1000c244:	10000526 	beq	r2,zero,1000c25c <_strtoll_r+0x184>
1000c248:	3180004c 	andi	r6,r6,1
1000c24c:	30002b26 	beq	r6,zero,1000c2fc <_strtoll_r+0x224>
1000c250:	00800dc4 	movi	r2,55
1000c254:	40a9c83a 	sub	r20,r8,r2
1000c258:	a73feb16 	blt	r20,fp,1000c208 <__alt_data_end+0xf800c208>
1000c25c:	00bfffc4 	movi	r2,-1
1000c260:	18803a26 	beq	r3,r2,1000c34c <_strtoll_r+0x274>
1000c264:	d8800217 	ldw	r2,8(sp)
1000c268:	10000426 	beq	r2,zero,1000c27c <_strtoll_r+0x1a4>
1000c26c:	0109c83a 	sub	r4,zero,r4
1000c270:	2004c03a 	cmpne	r2,r4,zero
1000c274:	014bc83a 	sub	r5,zero,r5
1000c278:	288bc83a 	sub	r5,r5,r2
1000c27c:	d8800117 	ldw	r2,4(sp)
1000c280:	10004f26 	beq	r2,zero,1000c3c0 <_strtoll_r+0x2e8>
1000c284:	2005883a 	mov	r2,r4
1000c288:	1800271e 	bne	r3,zero,1000c328 <_strtoll_r+0x250>
1000c28c:	2807883a 	mov	r3,r5
1000c290:	d9400017 	ldw	r5,0(sp)
1000c294:	d9000117 	ldw	r4,4(sp)
1000c298:	21400015 	stw	r5,0(r4)
1000c29c:	dfc00f17 	ldw	ra,60(sp)
1000c2a0:	df000e17 	ldw	fp,56(sp)
1000c2a4:	ddc00d17 	ldw	r23,52(sp)
1000c2a8:	dd800c17 	ldw	r22,48(sp)
1000c2ac:	dd400b17 	ldw	r21,44(sp)
1000c2b0:	dd000a17 	ldw	r20,40(sp)
1000c2b4:	dcc00917 	ldw	r19,36(sp)
1000c2b8:	dc800817 	ldw	r18,32(sp)
1000c2bc:	dc400717 	ldw	r17,28(sp)
1000c2c0:	dc000617 	ldw	r16,24(sp)
1000c2c4:	dec01004 	addi	sp,sp,64
1000c2c8:	f800283a 	ret
1000c2cc:	24400e26 	beq	r4,r17,1000c308 <_strtoll_r+0x230>
1000c2d0:	900d883a 	mov	r6,r18
1000c2d4:	980f883a 	mov	r7,r19
1000c2d8:	000de980 	call	1000de98 <__muldi3>
1000c2dc:	a00dd7fa 	srai	r6,r20,31
1000c2e0:	a085883a 	add	r2,r20,r2
1000c2e4:	1511803a 	cmpltu	r8,r2,r20
1000c2e8:	30c7883a 	add	r3,r6,r3
1000c2ec:	40cb883a 	add	r5,r8,r3
1000c2f0:	1009883a 	mov	r4,r2
1000c2f4:	00c00044 	movi	r3,1
1000c2f8:	003fc806 	br	1000c21c <__alt_data_end+0xf800c21c>
1000c2fc:	008015c4 	movi	r2,87
1000c300:	40a9c83a 	sub	r20,r8,r2
1000c304:	003fd406 	br	1000c258 <__alt_data_end+0xf800c258>
1000c308:	2d7ff11e 	bne	r5,r21,1000c2d0 <__alt_data_end+0xf800c2d0>
1000c30c:	d8800317 	ldw	r2,12(sp)
1000c310:	153fc116 	blt	r2,r20,1000c218 <__alt_data_end+0xf800c218>
1000c314:	003fee06 	br	1000c2d0 <__alt_data_end+0xf800c2d0>
1000c318:	057fffc4 	movi	r21,-1
1000c31c:	04600034 	movhi	r17,32768
1000c320:	8c7fffc4 	addi	r17,r17,-1
1000c324:	003f9c06 	br	1000c198 <__alt_data_end+0xf800c198>
1000c328:	2807883a 	mov	r3,r5
1000c32c:	843fffc4 	addi	r16,r16,-1
1000c330:	dc000015 	stw	r16,0(sp)
1000c334:	003fd606 	br	1000c290 <__alt_data_end+0xf800c290>
1000c338:	00800044 	movi	r2,1
1000c33c:	82000007 	ldb	r8,0(r16)
1000c340:	d8800215 	stw	r2,8(sp)
1000c344:	80a1883a 	add	r16,r16,r2
1000c348:	003f8406 	br	1000c15c <__alt_data_end+0xf800c15c>
1000c34c:	d9000217 	ldw	r4,8(sp)
1000c350:	20000d1e 	bne	r4,zero,1000c388 <_strtoll_r+0x2b0>
1000c354:	1805883a 	mov	r2,r3
1000c358:	00e00034 	movhi	r3,32768
1000c35c:	18ffffc4 	addi	r3,r3,-1
1000c360:	d9400417 	ldw	r5,16(sp)
1000c364:	01000884 	movi	r4,34
1000c368:	29000015 	stw	r4,0(r5)
1000c36c:	d9000117 	ldw	r4,4(sp)
1000c370:	203fee1e 	bne	r4,zero,1000c32c <__alt_data_end+0xf800c32c>
1000c374:	003fc906 	br	1000c29c <__alt_data_end+0xf800c29c>
1000c378:	82000007 	ldb	r8,0(r16)
1000c37c:	d8000215 	stw	zero,8(sp)
1000c380:	84000044 	addi	r16,r16,1
1000c384:	003f7506 	br	1000c15c <__alt_data_end+0xf800c15c>
1000c388:	0005883a 	mov	r2,zero
1000c38c:	00e00034 	movhi	r3,32768
1000c390:	003ff306 	br	1000c360 <__alt_data_end+0xf800c360>
1000c394:	80800007 	ldb	r2,0(r16)
1000c398:	00c01e04 	movi	r3,120
1000c39c:	10c00b26 	beq	r2,r3,1000c3cc <_strtoll_r+0x2f4>
1000c3a0:	00c01604 	movi	r3,88
1000c3a4:	10c00926 	beq	r2,r3,1000c3cc <_strtoll_r+0x2f4>
1000c3a8:	e000131e 	bne	fp,zero,1000c3f8 <_strtoll_r+0x320>
1000c3ac:	04800204 	movi	r18,8
1000c3b0:	0027883a 	mov	r19,zero
1000c3b4:	02000c04 	movi	r8,48
1000c3b8:	9039883a 	mov	fp,r18
1000c3bc:	003f7206 	br	1000c188 <__alt_data_end+0xf800c188>
1000c3c0:	2005883a 	mov	r2,r4
1000c3c4:	2807883a 	mov	r3,r5
1000c3c8:	003fb406 	br	1000c29c <__alt_data_end+0xf800c29c>
1000c3cc:	04800404 	movi	r18,16
1000c3d0:	82000047 	ldb	r8,1(r16)
1000c3d4:	0027883a 	mov	r19,zero
1000c3d8:	84000084 	addi	r16,r16,2
1000c3dc:	9039883a 	mov	fp,r18
1000c3e0:	003f6906 	br	1000c188 <__alt_data_end+0xf800c188>
1000c3e4:	00800c04 	movi	r2,48
1000c3e8:	40bfea26 	beq	r8,r2,1000c394 <__alt_data_end+0xf800c394>
1000c3ec:	e025883a 	mov	r18,fp
1000c3f0:	0027883a 	mov	r19,zero
1000c3f4:	003f6406 	br	1000c188 <__alt_data_end+0xf800c188>
1000c3f8:	e025883a 	mov	r18,fp
1000c3fc:	e027d7fa 	srai	r19,fp,31
1000c400:	02000c04 	movi	r8,48
1000c404:	003f6006 	br	1000c188 <__alt_data_end+0xf800c188>

1000c408 <_strtoul_r>:
1000c408:	defff304 	addi	sp,sp,-52
1000c40c:	00840074 	movhi	r2,4097
1000c410:	10936504 	addi	r2,r2,19860
1000c414:	df000b15 	stw	fp,44(sp)
1000c418:	17000017 	ldw	fp,0(r2)
1000c41c:	ddc00a15 	stw	r23,40(sp)
1000c420:	dd000715 	stw	r20,28(sp)
1000c424:	dcc00615 	stw	r19,24(sp)
1000c428:	dc000315 	stw	r16,12(sp)
1000c42c:	dfc00c15 	stw	ra,48(sp)
1000c430:	dd800915 	stw	r22,36(sp)
1000c434:	dd400815 	stw	r21,32(sp)
1000c438:	dc800515 	stw	r18,20(sp)
1000c43c:	dc400415 	stw	r17,16(sp)
1000c440:	2827883a 	mov	r19,r5
1000c444:	d9000215 	stw	r4,8(sp)
1000c448:	3029883a 	mov	r20,r6
1000c44c:	382f883a 	mov	r23,r7
1000c450:	2821883a 	mov	r16,r5
1000c454:	84400007 	ldb	r17,0(r16)
1000c458:	84000044 	addi	r16,r16,1
1000c45c:	e445883a 	add	r2,fp,r17
1000c460:	10800003 	ldbu	r2,0(r2)
1000c464:	1080020c 	andi	r2,r2,8
1000c468:	10803fcc 	andi	r2,r2,255
1000c46c:	1080201c 	xori	r2,r2,128
1000c470:	10bfe004 	addi	r2,r2,-128
1000c474:	103ff71e 	bne	r2,zero,1000c454 <__alt_data_end+0xf800c454>
1000c478:	00800b44 	movi	r2,45
1000c47c:	88805e26 	beq	r17,r2,1000c5f8 <_strtoul_r+0x1f0>
1000c480:	00800ac4 	movi	r2,43
1000c484:	88806126 	beq	r17,r2,1000c60c <_strtoul_r+0x204>
1000c488:	d8000115 	stw	zero,4(sp)
1000c48c:	b800091e 	bne	r23,zero,1000c4b4 <_strtoul_r+0xac>
1000c490:	00800c04 	movi	r2,48
1000c494:	88806326 	beq	r17,r2,1000c624 <_strtoul_r+0x21c>
1000c498:	05c00284 	movi	r23,10
1000c49c:	00800144 	movi	r2,5
1000c4a0:	d8800015 	stw	r2,0(sp)
1000c4a4:	058666b4 	movhi	r22,6554
1000c4a8:	b5a66644 	addi	r22,r22,-26215
1000c4ac:	b825883a 	mov	r18,r23
1000c4b0:	00000b06 	br	1000c4e0 <_strtoul_r+0xd8>
1000c4b4:	00800404 	movi	r2,16
1000c4b8:	b8805826 	beq	r23,r2,1000c61c <_strtoul_r+0x214>
1000c4bc:	013fffc4 	movi	r4,-1
1000c4c0:	b80b883a 	mov	r5,r23
1000c4c4:	000157c0 	call	1000157c <__udivsi3>
1000c4c8:	013fffc4 	movi	r4,-1
1000c4cc:	b80b883a 	mov	r5,r23
1000c4d0:	102d883a 	mov	r22,r2
1000c4d4:	00015840 	call	10001584 <__umodsi3>
1000c4d8:	d8800015 	stw	r2,0(sp)
1000c4dc:	b825883a 	mov	r18,r23
1000c4e0:	e447883a 	add	r3,fp,r17
1000c4e4:	18c00003 	ldbu	r3,0(r3)
1000c4e8:	0011883a 	mov	r8,zero
1000c4ec:	0009883a 	mov	r4,zero
1000c4f0:	1980010c 	andi	r6,r3,4
1000c4f4:	31803fcc 	andi	r6,r6,255
1000c4f8:	3180201c 	xori	r6,r6,128
1000c4fc:	31bfe004 	addi	r6,r6,-128
1000c500:	057fffc4 	movi	r21,-1
1000c504:	30001226 	beq	r6,zero,1000c550 <_strtoul_r+0x148>
1000c508:	8c7ff404 	addi	r17,r17,-48
1000c50c:	8dc0170e 	bge	r17,r23,1000c56c <_strtoul_r+0x164>
1000c510:	45400626 	beq	r8,r21,1000c52c <_strtoul_r+0x124>
1000c514:	b1002c36 	bltu	r22,r4,1000c5c8 <_strtoul_r+0x1c0>
1000c518:	25802926 	beq	r4,r22,1000c5c0 <_strtoul_r+0x1b8>
1000c51c:	900b883a 	mov	r5,r18
1000c520:	000158c0 	call	1000158c <__mulsi3>
1000c524:	8889883a 	add	r4,r17,r2
1000c528:	02000044 	movi	r8,1
1000c52c:	84400007 	ldb	r17,0(r16)
1000c530:	84000044 	addi	r16,r16,1
1000c534:	e447883a 	add	r3,fp,r17
1000c538:	18c00003 	ldbu	r3,0(r3)
1000c53c:	1980010c 	andi	r6,r3,4
1000c540:	31803fcc 	andi	r6,r6,255
1000c544:	3180201c 	xori	r6,r6,128
1000c548:	31bfe004 	addi	r6,r6,-128
1000c54c:	303fee1e 	bne	r6,zero,1000c508 <__alt_data_end+0xf800c508>
1000c550:	188000cc 	andi	r2,r3,3
1000c554:	10000526 	beq	r2,zero,1000c56c <_strtoul_r+0x164>
1000c558:	18c0004c 	andi	r3,r3,1
1000c55c:	18001c26 	beq	r3,zero,1000c5d0 <_strtoul_r+0x1c8>
1000c560:	00800dc4 	movi	r2,55
1000c564:	88a3c83a 	sub	r17,r17,r2
1000c568:	8dffe916 	blt	r17,r23,1000c510 <__alt_data_end+0xf800c510>
1000c56c:	00bfffc4 	movi	r2,-1
1000c570:	40801a26 	beq	r8,r2,1000c5dc <_strtoul_r+0x1d4>
1000c574:	d8c00117 	ldw	r3,4(sp)
1000c578:	18000126 	beq	r3,zero,1000c580 <_strtoul_r+0x178>
1000c57c:	0109c83a 	sub	r4,zero,r4
1000c580:	a0000226 	beq	r20,zero,1000c58c <_strtoul_r+0x184>
1000c584:	40001a1e 	bne	r8,zero,1000c5f0 <_strtoul_r+0x1e8>
1000c588:	a4c00015 	stw	r19,0(r20)
1000c58c:	2005883a 	mov	r2,r4
1000c590:	dfc00c17 	ldw	ra,48(sp)
1000c594:	df000b17 	ldw	fp,44(sp)
1000c598:	ddc00a17 	ldw	r23,40(sp)
1000c59c:	dd800917 	ldw	r22,36(sp)
1000c5a0:	dd400817 	ldw	r21,32(sp)
1000c5a4:	dd000717 	ldw	r20,28(sp)
1000c5a8:	dcc00617 	ldw	r19,24(sp)
1000c5ac:	dc800517 	ldw	r18,20(sp)
1000c5b0:	dc400417 	ldw	r17,16(sp)
1000c5b4:	dc000317 	ldw	r16,12(sp)
1000c5b8:	dec00d04 	addi	sp,sp,52
1000c5bc:	f800283a 	ret
1000c5c0:	d8800017 	ldw	r2,0(sp)
1000c5c4:	147fd50e 	bge	r2,r17,1000c51c <__alt_data_end+0xf800c51c>
1000c5c8:	023fffc4 	movi	r8,-1
1000c5cc:	003fd706 	br	1000c52c <__alt_data_end+0xf800c52c>
1000c5d0:	008015c4 	movi	r2,87
1000c5d4:	88a3c83a 	sub	r17,r17,r2
1000c5d8:	003fe306 	br	1000c568 <__alt_data_end+0xf800c568>
1000c5dc:	d8c00217 	ldw	r3,8(sp)
1000c5e0:	00800884 	movi	r2,34
1000c5e4:	4009883a 	mov	r4,r8
1000c5e8:	18800015 	stw	r2,0(r3)
1000c5ec:	a03fe726 	beq	r20,zero,1000c58c <__alt_data_end+0xf800c58c>
1000c5f0:	84ffffc4 	addi	r19,r16,-1
1000c5f4:	003fe406 	br	1000c588 <__alt_data_end+0xf800c588>
1000c5f8:	00c00044 	movi	r3,1
1000c5fc:	84400007 	ldb	r17,0(r16)
1000c600:	d8c00115 	stw	r3,4(sp)
1000c604:	80e1883a 	add	r16,r16,r3
1000c608:	003fa006 	br	1000c48c <__alt_data_end+0xf800c48c>
1000c60c:	84400007 	ldb	r17,0(r16)
1000c610:	d8000115 	stw	zero,4(sp)
1000c614:	84000044 	addi	r16,r16,1
1000c618:	003f9c06 	br	1000c48c <__alt_data_end+0xf800c48c>
1000c61c:	00800c04 	movi	r2,48
1000c620:	88bfa61e 	bne	r17,r2,1000c4bc <__alt_data_end+0xf800c4bc>
1000c624:	80800007 	ldb	r2,0(r16)
1000c628:	00c01e04 	movi	r3,120
1000c62c:	10c00b26 	beq	r2,r3,1000c65c <_strtoul_r+0x254>
1000c630:	00c01604 	movi	r3,88
1000c634:	10c00926 	beq	r2,r3,1000c65c <_strtoul_r+0x254>
1000c638:	b800111e 	bne	r23,zero,1000c680 <_strtoul_r+0x278>
1000c63c:	04800204 	movi	r18,8
1000c640:	008001c4 	movi	r2,7
1000c644:	d8800015 	stw	r2,0(sp)
1000c648:	05880034 	movhi	r22,8192
1000c64c:	b5bfffc4 	addi	r22,r22,-1
1000c650:	04400c04 	movi	r17,48
1000c654:	902f883a 	mov	r23,r18
1000c658:	003fa106 	br	1000c4e0 <__alt_data_end+0xf800c4e0>
1000c65c:	04800404 	movi	r18,16
1000c660:	008003c4 	movi	r2,15
1000c664:	84400047 	ldb	r17,1(r16)
1000c668:	d8800015 	stw	r2,0(sp)
1000c66c:	84000084 	addi	r16,r16,2
1000c670:	05840034 	movhi	r22,4096
1000c674:	b5bfffc4 	addi	r22,r22,-1
1000c678:	902f883a 	mov	r23,r18
1000c67c:	003f9806 	br	1000c4e0 <__alt_data_end+0xf800c4e0>
1000c680:	013fffc4 	movi	r4,-1
1000c684:	b80b883a 	mov	r5,r23
1000c688:	000157c0 	call	1000157c <__udivsi3>
1000c68c:	013fffc4 	movi	r4,-1
1000c690:	b80b883a 	mov	r5,r23
1000c694:	102d883a 	mov	r22,r2
1000c698:	00015840 	call	10001584 <__umodsi3>
1000c69c:	d8800015 	stw	r2,0(sp)
1000c6a0:	b825883a 	mov	r18,r23
1000c6a4:	04400c04 	movi	r17,48
1000c6a8:	003f8d06 	br	1000c4e0 <__alt_data_end+0xf800c4e0>

1000c6ac <strtoul>:
1000c6ac:	00840074 	movhi	r2,4097
1000c6b0:	10936704 	addi	r2,r2,19868
1000c6b4:	2007883a 	mov	r3,r4
1000c6b8:	11000017 	ldw	r4,0(r2)
1000c6bc:	2805883a 	mov	r2,r5
1000c6c0:	300f883a 	mov	r7,r6
1000c6c4:	180b883a 	mov	r5,r3
1000c6c8:	100d883a 	mov	r6,r2
1000c6cc:	000c4081 	jmpi	1000c408 <_strtoul_r>

1000c6d0 <_strtoull_r>:
1000c6d0:	defff004 	addi	sp,sp,-64
1000c6d4:	00840074 	movhi	r2,4097
1000c6d8:	10936504 	addi	r2,r2,19860
1000c6dc:	dd800c15 	stw	r22,48(sp)
1000c6e0:	15800017 	ldw	r22,0(r2)
1000c6e4:	df000e15 	stw	fp,56(sp)
1000c6e8:	dc000615 	stw	r16,24(sp)
1000c6ec:	dfc00f15 	stw	ra,60(sp)
1000c6f0:	ddc00d15 	stw	r23,52(sp)
1000c6f4:	dd400b15 	stw	r21,44(sp)
1000c6f8:	dd000a15 	stw	r20,40(sp)
1000c6fc:	dcc00915 	stw	r19,36(sp)
1000c700:	dc800815 	stw	r18,32(sp)
1000c704:	dc400715 	stw	r17,28(sp)
1000c708:	d9400015 	stw	r5,0(sp)
1000c70c:	d9000415 	stw	r4,16(sp)
1000c710:	d9800115 	stw	r6,4(sp)
1000c714:	3839883a 	mov	fp,r7
1000c718:	2821883a 	mov	r16,r5
1000c71c:	82000007 	ldb	r8,0(r16)
1000c720:	84000044 	addi	r16,r16,1
1000c724:	b205883a 	add	r2,r22,r8
1000c728:	10800003 	ldbu	r2,0(r2)
1000c72c:	1080020c 	andi	r2,r2,8
1000c730:	10803fcc 	andi	r2,r2,255
1000c734:	1080201c 	xori	r2,r2,128
1000c738:	10bfe004 	addi	r2,r2,-128
1000c73c:	103ff71e 	bne	r2,zero,1000c71c <__alt_data_end+0xf800c71c>
1000c740:	00800b44 	movi	r2,45
1000c744:	40807e26 	beq	r8,r2,1000c940 <_strtoull_r+0x270>
1000c748:	00800ac4 	movi	r2,43
1000c74c:	40808126 	beq	r8,r2,1000c954 <_strtoull_r+0x284>
1000c750:	d8000315 	stw	zero,12(sp)
1000c754:	e0000c1e 	bne	fp,zero,1000c788 <_strtoull_r+0xb8>
1000c758:	00800c04 	movi	r2,48
1000c75c:	40808126 	beq	r8,r2,1000c964 <_strtoull_r+0x294>
1000c760:	04c00284 	movi	r19,10
1000c764:	00800144 	movi	r2,5
1000c768:	d8800215 	stw	r2,8(sp)
1000c76c:	046666b4 	movhi	r17,39322
1000c770:	8c666644 	addi	r17,r17,-26215
1000c774:	05c666b4 	movhi	r23,6554
1000c778:	bde66644 	addi	r23,r23,-26215
1000c77c:	0025883a 	mov	r18,zero
1000c780:	9839883a 	mov	fp,r19
1000c784:	00001306 	br	1000c7d4 <_strtoull_r+0x104>
1000c788:	00800404 	movi	r2,16
1000c78c:	e0809026 	beq	fp,r2,1000c9d0 <_strtoull_r+0x300>
1000c790:	e025d7fa 	srai	r18,fp,31
1000c794:	013fffc4 	movi	r4,-1
1000c798:	200b883a 	mov	r5,r4
1000c79c:	e00d883a 	mov	r6,fp
1000c7a0:	900f883a 	mov	r7,r18
1000c7a4:	da000515 	stw	r8,20(sp)
1000c7a8:	000e02c0 	call	1000e02c <__udivdi3>
1000c7ac:	013fffc4 	movi	r4,-1
1000c7b0:	200b883a 	mov	r5,r4
1000c7b4:	e00d883a 	mov	r6,fp
1000c7b8:	900f883a 	mov	r7,r18
1000c7bc:	1023883a 	mov	r17,r2
1000c7c0:	182f883a 	mov	r23,r3
1000c7c4:	000e67c0 	call	1000e67c <__umoddi3>
1000c7c8:	da000517 	ldw	r8,20(sp)
1000c7cc:	d8800215 	stw	r2,8(sp)
1000c7d0:	e027883a 	mov	r19,fp
1000c7d4:	b20d883a 	add	r6,r22,r8
1000c7d8:	32400003 	ldbu	r9,0(r6)
1000c7dc:	0007883a 	mov	r3,zero
1000c7e0:	0009883a 	mov	r4,zero
1000c7e4:	4a80010c 	andi	r10,r9,4
1000c7e8:	52803fcc 	andi	r10,r10,255
1000c7ec:	5280201c 	xori	r10,r10,128
1000c7f0:	52bfe004 	addi	r10,r10,-128
1000c7f4:	000b883a 	mov	r5,zero
1000c7f8:	057fffc4 	movi	r21,-1
1000c7fc:	50001026 	beq	r10,zero,1000c840 <_strtoull_r+0x170>
1000c800:	453ff404 	addi	r20,r8,-48
1000c804:	a700150e 	bge	r20,fp,1000c85c <_strtoull_r+0x18c>
1000c808:	1d400426 	beq	r3,r21,1000c81c <_strtoull_r+0x14c>
1000c80c:	b9400236 	bltu	r23,r5,1000c818 <_strtoull_r+0x148>
1000c810:	2dc0301e 	bne	r5,r23,1000c8d4 <_strtoull_r+0x204>
1000c814:	89002f2e 	bgeu	r17,r4,1000c8d4 <_strtoull_r+0x204>
1000c818:	00ffffc4 	movi	r3,-1
1000c81c:	82000007 	ldb	r8,0(r16)
1000c820:	84000044 	addi	r16,r16,1
1000c824:	b20d883a 	add	r6,r22,r8
1000c828:	32400003 	ldbu	r9,0(r6)
1000c82c:	4a80010c 	andi	r10,r9,4
1000c830:	52803fcc 	andi	r10,r10,255
1000c834:	5280201c 	xori	r10,r10,128
1000c838:	52bfe004 	addi	r10,r10,-128
1000c83c:	503ff01e 	bne	r10,zero,1000c800 <__alt_data_end+0xf800c800>
1000c840:	488000cc 	andi	r2,r9,3
1000c844:	10000526 	beq	r2,zero,1000c85c <_strtoull_r+0x18c>
1000c848:	4a40004c 	andi	r9,r9,1
1000c84c:	48002d26 	beq	r9,zero,1000c904 <_strtoull_r+0x234>
1000c850:	00800dc4 	movi	r2,55
1000c854:	40a9c83a 	sub	r20,r8,r2
1000c858:	a73feb16 	blt	r20,fp,1000c808 <__alt_data_end+0xf800c808>
1000c85c:	00bfffc4 	movi	r2,-1
1000c860:	18802f26 	beq	r3,r2,1000c920 <_strtoull_r+0x250>
1000c864:	d8800317 	ldw	r2,12(sp)
1000c868:	10000426 	beq	r2,zero,1000c87c <_strtoull_r+0x1ac>
1000c86c:	0109c83a 	sub	r4,zero,r4
1000c870:	2004c03a 	cmpne	r2,r4,zero
1000c874:	014bc83a 	sub	r5,zero,r5
1000c878:	288bc83a 	sub	r5,r5,r2
1000c87c:	d8800117 	ldw	r2,4(sp)
1000c880:	10000626 	beq	r2,zero,1000c89c <_strtoull_r+0x1cc>
1000c884:	18000226 	beq	r3,zero,1000c890 <_strtoull_r+0x1c0>
1000c888:	843fffc4 	addi	r16,r16,-1
1000c88c:	dc000015 	stw	r16,0(sp)
1000c890:	d8800017 	ldw	r2,0(sp)
1000c894:	d8c00117 	ldw	r3,4(sp)
1000c898:	18800015 	stw	r2,0(r3)
1000c89c:	2005883a 	mov	r2,r4
1000c8a0:	2807883a 	mov	r3,r5
1000c8a4:	dfc00f17 	ldw	ra,60(sp)
1000c8a8:	df000e17 	ldw	fp,56(sp)
1000c8ac:	ddc00d17 	ldw	r23,52(sp)
1000c8b0:	dd800c17 	ldw	r22,48(sp)
1000c8b4:	dd400b17 	ldw	r21,44(sp)
1000c8b8:	dd000a17 	ldw	r20,40(sp)
1000c8bc:	dcc00917 	ldw	r19,36(sp)
1000c8c0:	dc800817 	ldw	r18,32(sp)
1000c8c4:	dc400717 	ldw	r17,28(sp)
1000c8c8:	dc000617 	ldw	r16,24(sp)
1000c8cc:	dec01004 	addi	sp,sp,64
1000c8d0:	f800283a 	ret
1000c8d4:	24400e26 	beq	r4,r17,1000c910 <_strtoull_r+0x240>
1000c8d8:	980d883a 	mov	r6,r19
1000c8dc:	900f883a 	mov	r7,r18
1000c8e0:	000de980 	call	1000de98 <__muldi3>
1000c8e4:	a00dd7fa 	srai	r6,r20,31
1000c8e8:	a085883a 	add	r2,r20,r2
1000c8ec:	1511803a 	cmpltu	r8,r2,r20
1000c8f0:	30c7883a 	add	r3,r6,r3
1000c8f4:	40cb883a 	add	r5,r8,r3
1000c8f8:	1009883a 	mov	r4,r2
1000c8fc:	00c00044 	movi	r3,1
1000c900:	003fc606 	br	1000c81c <__alt_data_end+0xf800c81c>
1000c904:	008015c4 	movi	r2,87
1000c908:	40a9c83a 	sub	r20,r8,r2
1000c90c:	003fd206 	br	1000c858 <__alt_data_end+0xf800c858>
1000c910:	2dfff11e 	bne	r5,r23,1000c8d8 <__alt_data_end+0xf800c8d8>
1000c914:	d8800217 	ldw	r2,8(sp)
1000c918:	153fbf16 	blt	r2,r20,1000c818 <__alt_data_end+0xf800c818>
1000c91c:	003fee06 	br	1000c8d8 <__alt_data_end+0xf800c8d8>
1000c920:	d9000417 	ldw	r4,16(sp)
1000c924:	00800884 	movi	r2,34
1000c928:	180b883a 	mov	r5,r3
1000c92c:	20800015 	stw	r2,0(r4)
1000c930:	d8800117 	ldw	r2,4(sp)
1000c934:	1809883a 	mov	r4,r3
1000c938:	103fd31e 	bne	r2,zero,1000c888 <__alt_data_end+0xf800c888>
1000c93c:	003fd706 	br	1000c89c <__alt_data_end+0xf800c89c>
1000c940:	00800044 	movi	r2,1
1000c944:	82000007 	ldb	r8,0(r16)
1000c948:	d8800315 	stw	r2,12(sp)
1000c94c:	80a1883a 	add	r16,r16,r2
1000c950:	003f8006 	br	1000c754 <__alt_data_end+0xf800c754>
1000c954:	82000007 	ldb	r8,0(r16)
1000c958:	d8000315 	stw	zero,12(sp)
1000c95c:	84000044 	addi	r16,r16,1
1000c960:	003f7c06 	br	1000c754 <__alt_data_end+0xf800c754>
1000c964:	80800007 	ldb	r2,0(r16)
1000c968:	00c01e04 	movi	r3,120
1000c96c:	10c00d26 	beq	r2,r3,1000c9a4 <_strtoull_r+0x2d4>
1000c970:	00c01604 	movi	r3,88
1000c974:	10c00b26 	beq	r2,r3,1000c9a4 <_strtoull_r+0x2d4>
1000c978:	e000291e 	bne	fp,zero,1000ca20 <_strtoull_r+0x350>
1000c97c:	04c00204 	movi	r19,8
1000c980:	008001c4 	movi	r2,7
1000c984:	d8800215 	stw	r2,8(sp)
1000c988:	047fffc4 	movi	r17,-1
1000c98c:	05c80034 	movhi	r23,8192
1000c990:	bdffffc4 	addi	r23,r23,-1
1000c994:	0025883a 	mov	r18,zero
1000c998:	02000c04 	movi	r8,48
1000c99c:	9839883a 	mov	fp,r19
1000c9a0:	003f8c06 	br	1000c7d4 <__alt_data_end+0xf800c7d4>
1000c9a4:	04c00404 	movi	r19,16
1000c9a8:	008003c4 	movi	r2,15
1000c9ac:	82000047 	ldb	r8,1(r16)
1000c9b0:	d8800215 	stw	r2,8(sp)
1000c9b4:	84000084 	addi	r16,r16,2
1000c9b8:	047fffc4 	movi	r17,-1
1000c9bc:	05c40034 	movhi	r23,4096
1000c9c0:	bdffffc4 	addi	r23,r23,-1
1000c9c4:	0025883a 	mov	r18,zero
1000c9c8:	9839883a 	mov	fp,r19
1000c9cc:	003f8106 	br	1000c7d4 <__alt_data_end+0xf800c7d4>
1000c9d0:	00800c04 	movi	r2,48
1000c9d4:	40bfe326 	beq	r8,r2,1000c964 <__alt_data_end+0xf800c964>
1000c9d8:	013fffc4 	movi	r4,-1
1000c9dc:	200b883a 	mov	r5,r4
1000c9e0:	e00d883a 	mov	r6,fp
1000c9e4:	000f883a 	mov	r7,zero
1000c9e8:	da000515 	stw	r8,20(sp)
1000c9ec:	000e02c0 	call	1000e02c <__udivdi3>
1000c9f0:	013fffc4 	movi	r4,-1
1000c9f4:	200b883a 	mov	r5,r4
1000c9f8:	e00d883a 	mov	r6,fp
1000c9fc:	000f883a 	mov	r7,zero
1000ca00:	1023883a 	mov	r17,r2
1000ca04:	182f883a 	mov	r23,r3
1000ca08:	000e67c0 	call	1000e67c <__umoddi3>
1000ca0c:	d8800215 	stw	r2,8(sp)
1000ca10:	e027883a 	mov	r19,fp
1000ca14:	0025883a 	mov	r18,zero
1000ca18:	da000517 	ldw	r8,20(sp)
1000ca1c:	003f6d06 	br	1000c7d4 <__alt_data_end+0xf800c7d4>
1000ca20:	e025d7fa 	srai	r18,fp,31
1000ca24:	013fffc4 	movi	r4,-1
1000ca28:	200b883a 	mov	r5,r4
1000ca2c:	e00d883a 	mov	r6,fp
1000ca30:	900f883a 	mov	r7,r18
1000ca34:	000e02c0 	call	1000e02c <__udivdi3>
1000ca38:	013fffc4 	movi	r4,-1
1000ca3c:	200b883a 	mov	r5,r4
1000ca40:	e00d883a 	mov	r6,fp
1000ca44:	900f883a 	mov	r7,r18
1000ca48:	1023883a 	mov	r17,r2
1000ca4c:	182f883a 	mov	r23,r3
1000ca50:	000e67c0 	call	1000e67c <__umoddi3>
1000ca54:	d8800215 	stw	r2,8(sp)
1000ca58:	e027883a 	mov	r19,fp
1000ca5c:	02000c04 	movi	r8,48
1000ca60:	003f5c06 	br	1000c7d4 <__alt_data_end+0xf800c7d4>

1000ca64 <__submore>:
1000ca64:	defffa04 	addi	sp,sp,-24
1000ca68:	dc000015 	stw	r16,0(sp)
1000ca6c:	2821883a 	mov	r16,r5
1000ca70:	29400c17 	ldw	r5,48(r5)
1000ca74:	dfc00515 	stw	ra,20(sp)
1000ca78:	dd000415 	stw	r20,16(sp)
1000ca7c:	dcc00315 	stw	r19,12(sp)
1000ca80:	dc800215 	stw	r18,8(sp)
1000ca84:	dc400115 	stw	r17,4(sp)
1000ca88:	80801004 	addi	r2,r16,64
1000ca8c:	28801726 	beq	r5,r2,1000caec <__submore+0x88>
1000ca90:	84400d17 	ldw	r17,52(r16)
1000ca94:	8c67883a 	add	r19,r17,r17
1000ca98:	980d883a 	mov	r6,r19
1000ca9c:	0009b8c0 	call	10009b8c <_realloc_r>
1000caa0:	1025883a 	mov	r18,r2
1000caa4:	10002926 	beq	r2,zero,1000cb4c <__submore+0xe8>
1000caa8:	1469883a 	add	r20,r2,r17
1000caac:	a009883a 	mov	r4,r20
1000cab0:	100b883a 	mov	r5,r2
1000cab4:	880d883a 	mov	r6,r17
1000cab8:	00085e80 	call	100085e8 <memcpy>
1000cabc:	0005883a 	mov	r2,zero
1000cac0:	85000015 	stw	r20,0(r16)
1000cac4:	84800c15 	stw	r18,48(r16)
1000cac8:	84c00d15 	stw	r19,52(r16)
1000cacc:	dfc00517 	ldw	ra,20(sp)
1000cad0:	dd000417 	ldw	r20,16(sp)
1000cad4:	dcc00317 	ldw	r19,12(sp)
1000cad8:	dc800217 	ldw	r18,8(sp)
1000cadc:	dc400117 	ldw	r17,4(sp)
1000cae0:	dc000017 	ldw	r16,0(sp)
1000cae4:	dec00604 	addi	sp,sp,24
1000cae8:	f800283a 	ret
1000caec:	04410004 	movi	r17,1024
1000caf0:	880b883a 	mov	r5,r17
1000caf4:	0007c840 	call	10007c84 <_malloc_r>
1000caf8:	1007883a 	mov	r3,r2
1000cafc:	10001326 	beq	r2,zero,1000cb4c <__submore+0xe8>
1000cb00:	80801083 	ldbu	r2,66(r16)
1000cb04:	80c00c15 	stw	r3,48(r16)
1000cb08:	84400d15 	stw	r17,52(r16)
1000cb0c:	1880ffc5 	stb	r2,1023(r3)
1000cb10:	81401043 	ldbu	r5,65(r16)
1000cb14:	1900ff44 	addi	r4,r3,1021
1000cb18:	0005883a 	mov	r2,zero
1000cb1c:	1940ff85 	stb	r5,1022(r3)
1000cb20:	81401003 	ldbu	r5,64(r16)
1000cb24:	1940ff45 	stb	r5,1021(r3)
1000cb28:	81000015 	stw	r4,0(r16)
1000cb2c:	dfc00517 	ldw	ra,20(sp)
1000cb30:	dd000417 	ldw	r20,16(sp)
1000cb34:	dcc00317 	ldw	r19,12(sp)
1000cb38:	dc800217 	ldw	r18,8(sp)
1000cb3c:	dc400117 	ldw	r17,4(sp)
1000cb40:	dc000017 	ldw	r16,0(sp)
1000cb44:	dec00604 	addi	sp,sp,24
1000cb48:	f800283a 	ret
1000cb4c:	00bfffc4 	movi	r2,-1
1000cb50:	003fde06 	br	1000cacc <__alt_data_end+0xf800cacc>

1000cb54 <_ungetc_r>:
1000cb54:	defffc04 	addi	sp,sp,-16
1000cb58:	dc800215 	stw	r18,8(sp)
1000cb5c:	dc400115 	stw	r17,4(sp)
1000cb60:	dc000015 	stw	r16,0(sp)
1000cb64:	dfc00315 	stw	ra,12(sp)
1000cb68:	00bfffc4 	movi	r2,-1
1000cb6c:	2825883a 	mov	r18,r5
1000cb70:	2023883a 	mov	r17,r4
1000cb74:	3021883a 	mov	r16,r6
1000cb78:	28803026 	beq	r5,r2,1000cc3c <_ungetc_r+0xe8>
1000cb7c:	20000226 	beq	r4,zero,1000cb88 <_ungetc_r+0x34>
1000cb80:	20800e17 	ldw	r2,56(r4)
1000cb84:	10002f26 	beq	r2,zero,1000cc44 <_ungetc_r+0xf0>
1000cb88:	80c0030b 	ldhu	r3,12(r16)
1000cb8c:	00bff7c4 	movi	r2,-33
1000cb90:	1900010c 	andi	r4,r3,4
1000cb94:	213fffcc 	andi	r4,r4,65535
1000cb98:	1884703a 	and	r2,r3,r2
1000cb9c:	2120001c 	xori	r4,r4,32768
1000cba0:	8080030d 	sth	r2,12(r16)
1000cba4:	21200004 	addi	r4,r4,-32768
1000cba8:	20000c1e 	bne	r4,zero,1000cbdc <_ungetc_r+0x88>
1000cbac:	1900040c 	andi	r4,r3,16
1000cbb0:	213fffcc 	andi	r4,r4,65535
1000cbb4:	2120001c 	xori	r4,r4,32768
1000cbb8:	21200004 	addi	r4,r4,-32768
1000cbbc:	20001f26 	beq	r4,zero,1000cc3c <_ungetc_r+0xe8>
1000cbc0:	18c0020c 	andi	r3,r3,8
1000cbc4:	18ffffcc 	andi	r3,r3,65535
1000cbc8:	18e0001c 	xori	r3,r3,32768
1000cbcc:	18e00004 	addi	r3,r3,-32768
1000cbd0:	1800371e 	bne	r3,zero,1000ccb0 <_ungetc_r+0x15c>
1000cbd4:	10800114 	ori	r2,r2,4
1000cbd8:	8080030d 	sth	r2,12(r16)
1000cbdc:	80800c17 	ldw	r2,48(r16)
1000cbe0:	94803fcc 	andi	r18,r18,255
1000cbe4:	10001926 	beq	r2,zero,1000cc4c <_ungetc_r+0xf8>
1000cbe8:	80c00117 	ldw	r3,4(r16)
1000cbec:	80800d17 	ldw	r2,52(r16)
1000cbf0:	18800e0e 	bge	r3,r2,1000cc2c <_ungetc_r+0xd8>
1000cbf4:	80800017 	ldw	r2,0(r16)
1000cbf8:	10ffffc4 	addi	r3,r2,-1
1000cbfc:	80c00015 	stw	r3,0(r16)
1000cc00:	14bfffc5 	stb	r18,-1(r2)
1000cc04:	80800117 	ldw	r2,4(r16)
1000cc08:	10800044 	addi	r2,r2,1
1000cc0c:	80800115 	stw	r2,4(r16)
1000cc10:	9005883a 	mov	r2,r18
1000cc14:	dfc00317 	ldw	ra,12(sp)
1000cc18:	dc800217 	ldw	r18,8(sp)
1000cc1c:	dc400117 	ldw	r17,4(sp)
1000cc20:	dc000017 	ldw	r16,0(sp)
1000cc24:	dec00404 	addi	sp,sp,16
1000cc28:	f800283a 	ret
1000cc2c:	8809883a 	mov	r4,r17
1000cc30:	800b883a 	mov	r5,r16
1000cc34:	000ca640 	call	1000ca64 <__submore>
1000cc38:	103fee26 	beq	r2,zero,1000cbf4 <__alt_data_end+0xf800cbf4>
1000cc3c:	04bfffc4 	movi	r18,-1
1000cc40:	003ff306 	br	1000cc10 <__alt_data_end+0xf800cc10>
1000cc44:	0006ab40 	call	10006ab4 <__sinit>
1000cc48:	003fcf06 	br	1000cb88 <__alt_data_end+0xf800cb88>
1000cc4c:	80c00417 	ldw	r3,16(r16)
1000cc50:	80800017 	ldw	r2,0(r16)
1000cc54:	18000326 	beq	r3,zero,1000cc64 <_ungetc_r+0x110>
1000cc58:	1880022e 	bgeu	r3,r2,1000cc64 <_ungetc_r+0x110>
1000cc5c:	10ffffc3 	ldbu	r3,-1(r2)
1000cc60:	1c801d26 	beq	r3,r18,1000ccd8 <_ungetc_r+0x184>
1000cc64:	81400117 	ldw	r5,4(r16)
1000cc68:	80800e15 	stw	r2,56(r16)
1000cc6c:	008000c4 	movi	r2,3
1000cc70:	80800d15 	stw	r2,52(r16)
1000cc74:	00800044 	movi	r2,1
1000cc78:	81001004 	addi	r4,r16,64
1000cc7c:	80c01084 	addi	r3,r16,66
1000cc80:	80800115 	stw	r2,4(r16)
1000cc84:	9005883a 	mov	r2,r18
1000cc88:	81400f15 	stw	r5,60(r16)
1000cc8c:	81000c15 	stw	r4,48(r16)
1000cc90:	84801085 	stb	r18,66(r16)
1000cc94:	80c00015 	stw	r3,0(r16)
1000cc98:	dfc00317 	ldw	ra,12(sp)
1000cc9c:	dc800217 	ldw	r18,8(sp)
1000cca0:	dc400117 	ldw	r17,4(sp)
1000cca4:	dc000017 	ldw	r16,0(sp)
1000cca8:	dec00404 	addi	sp,sp,16
1000ccac:	f800283a 	ret
1000ccb0:	8809883a 	mov	r4,r17
1000ccb4:	800b883a 	mov	r5,r16
1000ccb8:	00067f80 	call	100067f8 <_fflush_r>
1000ccbc:	103fdf1e 	bne	r2,zero,1000cc3c <__alt_data_end+0xf800cc3c>
1000ccc0:	8080030b 	ldhu	r2,12(r16)
1000ccc4:	00fffdc4 	movi	r3,-9
1000ccc8:	80000215 	stw	zero,8(r16)
1000cccc:	1884703a 	and	r2,r3,r2
1000ccd0:	80000615 	stw	zero,24(r16)
1000ccd4:	003fbf06 	br	1000cbd4 <__alt_data_end+0xf800cbd4>
1000ccd8:	80c00117 	ldw	r3,4(r16)
1000ccdc:	10bfffc4 	addi	r2,r2,-1
1000cce0:	80800015 	stw	r2,0(r16)
1000cce4:	18800044 	addi	r2,r3,1
1000cce8:	80800115 	stw	r2,4(r16)
1000ccec:	003fc806 	br	1000cc10 <__alt_data_end+0xf800cc10>

1000ccf0 <ungetc>:
1000ccf0:	00c40074 	movhi	r3,4097
1000ccf4:	18d36704 	addi	r3,r3,19868
1000ccf8:	2005883a 	mov	r2,r4
1000ccfc:	19000017 	ldw	r4,0(r3)
1000cd00:	280d883a 	mov	r6,r5
1000cd04:	100b883a 	mov	r5,r2
1000cd08:	000cb541 	jmpi	1000cb54 <_ungetc_r>

1000cd0c <__swbuf_r>:
1000cd0c:	defffc04 	addi	sp,sp,-16
1000cd10:	dc800215 	stw	r18,8(sp)
1000cd14:	dc400115 	stw	r17,4(sp)
1000cd18:	dc000015 	stw	r16,0(sp)
1000cd1c:	dfc00315 	stw	ra,12(sp)
1000cd20:	2023883a 	mov	r17,r4
1000cd24:	2825883a 	mov	r18,r5
1000cd28:	3021883a 	mov	r16,r6
1000cd2c:	20000226 	beq	r4,zero,1000cd38 <__swbuf_r+0x2c>
1000cd30:	20800e17 	ldw	r2,56(r4)
1000cd34:	10003b26 	beq	r2,zero,1000ce24 <__swbuf_r+0x118>
1000cd38:	8080030b 	ldhu	r2,12(r16)
1000cd3c:	80c00617 	ldw	r3,24(r16)
1000cd40:	1080020c 	andi	r2,r2,8
1000cd44:	10bfffcc 	andi	r2,r2,65535
1000cd48:	10a0001c 	xori	r2,r2,32768
1000cd4c:	80c00215 	stw	r3,8(r16)
1000cd50:	10a00004 	addi	r2,r2,-32768
1000cd54:	10002226 	beq	r2,zero,1000cde0 <__swbuf_r+0xd4>
1000cd58:	80800417 	ldw	r2,16(r16)
1000cd5c:	10002026 	beq	r2,zero,1000cde0 <__swbuf_r+0xd4>
1000cd60:	80c00017 	ldw	r3,0(r16)
1000cd64:	81000517 	ldw	r4,20(r16)
1000cd68:	94803fcc 	andi	r18,r18,255
1000cd6c:	1885c83a 	sub	r2,r3,r2
1000cd70:	1100250e 	bge	r2,r4,1000ce08 <__swbuf_r+0xfc>
1000cd74:	10800044 	addi	r2,r2,1
1000cd78:	81400217 	ldw	r5,8(r16)
1000cd7c:	19000044 	addi	r4,r3,1
1000cd80:	297fffc4 	addi	r5,r5,-1
1000cd84:	81400215 	stw	r5,8(r16)
1000cd88:	1c800005 	stb	r18,0(r3)
1000cd8c:	80c00517 	ldw	r3,20(r16)
1000cd90:	81000015 	stw	r4,0(r16)
1000cd94:	18800c26 	beq	r3,r2,1000cdc8 <__swbuf_r+0xbc>
1000cd98:	8080030b 	ldhu	r2,12(r16)
1000cd9c:	1080004c 	andi	r2,r2,1
1000cda0:	10000226 	beq	r2,zero,1000cdac <__swbuf_r+0xa0>
1000cda4:	00800284 	movi	r2,10
1000cda8:	90800726 	beq	r18,r2,1000cdc8 <__swbuf_r+0xbc>
1000cdac:	9005883a 	mov	r2,r18
1000cdb0:	dfc00317 	ldw	ra,12(sp)
1000cdb4:	dc800217 	ldw	r18,8(sp)
1000cdb8:	dc400117 	ldw	r17,4(sp)
1000cdbc:	dc000017 	ldw	r16,0(sp)
1000cdc0:	dec00404 	addi	sp,sp,16
1000cdc4:	f800283a 	ret
1000cdc8:	8809883a 	mov	r4,r17
1000cdcc:	800b883a 	mov	r5,r16
1000cdd0:	00067f80 	call	100067f8 <_fflush_r>
1000cdd4:	103ff526 	beq	r2,zero,1000cdac <__alt_data_end+0xf800cdac>
1000cdd8:	04bfffc4 	movi	r18,-1
1000cddc:	003ff306 	br	1000cdac <__alt_data_end+0xf800cdac>
1000cde0:	8809883a 	mov	r4,r17
1000cde4:	800b883a 	mov	r5,r16
1000cde8:	0004e2c0 	call	10004e2c <__swsetup_r>
1000cdec:	10000f1e 	bne	r2,zero,1000ce2c <__swbuf_r+0x120>
1000cdf0:	80800417 	ldw	r2,16(r16)
1000cdf4:	80c00017 	ldw	r3,0(r16)
1000cdf8:	81000517 	ldw	r4,20(r16)
1000cdfc:	94803fcc 	andi	r18,r18,255
1000ce00:	1885c83a 	sub	r2,r3,r2
1000ce04:	113fdb16 	blt	r2,r4,1000cd74 <__alt_data_end+0xf800cd74>
1000ce08:	8809883a 	mov	r4,r17
1000ce0c:	800b883a 	mov	r5,r16
1000ce10:	00067f80 	call	100067f8 <_fflush_r>
1000ce14:	103ff01e 	bne	r2,zero,1000cdd8 <__alt_data_end+0xf800cdd8>
1000ce18:	80c00017 	ldw	r3,0(r16)
1000ce1c:	00800044 	movi	r2,1
1000ce20:	003fd506 	br	1000cd78 <__alt_data_end+0xf800cd78>
1000ce24:	0006ab40 	call	10006ab4 <__sinit>
1000ce28:	003fc306 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000ce2c:	8080030b 	ldhu	r2,12(r16)
1000ce30:	04bfffc4 	movi	r18,-1
1000ce34:	10801014 	ori	r2,r2,64
1000ce38:	8080030d 	sth	r2,12(r16)
1000ce3c:	00800244 	movi	r2,9
1000ce40:	88800015 	stw	r2,0(r17)
1000ce44:	003fd906 	br	1000cdac <__alt_data_end+0xf800cdac>

1000ce48 <__swbuf>:
1000ce48:	00c40074 	movhi	r3,4097
1000ce4c:	18d36704 	addi	r3,r3,19868
1000ce50:	2005883a 	mov	r2,r4
1000ce54:	19000017 	ldw	r4,0(r3)
1000ce58:	280d883a 	mov	r6,r5
1000ce5c:	100b883a 	mov	r5,r2
1000ce60:	000cd0c1 	jmpi	1000cd0c <__swbuf_r>

1000ce64 <_write_r>:
1000ce64:	defffd04 	addi	sp,sp,-12
1000ce68:	dc400115 	stw	r17,4(sp)
1000ce6c:	dc000015 	stw	r16,0(sp)
1000ce70:	2023883a 	mov	r17,r4
1000ce74:	04040074 	movhi	r16,4097
1000ce78:	841aa604 	addi	r16,r16,27288
1000ce7c:	2809883a 	mov	r4,r5
1000ce80:	300b883a 	mov	r5,r6
1000ce84:	380d883a 	mov	r6,r7
1000ce88:	dfc00215 	stw	ra,8(sp)
1000ce8c:	80000015 	stw	zero,0(r16)
1000ce90:	0010c640 	call	10010c64 <write>
1000ce94:	00ffffc4 	movi	r3,-1
1000ce98:	10c00526 	beq	r2,r3,1000ceb0 <_write_r+0x4c>
1000ce9c:	dfc00217 	ldw	ra,8(sp)
1000cea0:	dc400117 	ldw	r17,4(sp)
1000cea4:	dc000017 	ldw	r16,0(sp)
1000cea8:	dec00304 	addi	sp,sp,12
1000ceac:	f800283a 	ret
1000ceb0:	80c00017 	ldw	r3,0(r16)
1000ceb4:	183ff926 	beq	r3,zero,1000ce9c <__alt_data_end+0xf800ce9c>
1000ceb8:	88c00015 	stw	r3,0(r17)
1000cebc:	dfc00217 	ldw	ra,8(sp)
1000cec0:	dc400117 	ldw	r17,4(sp)
1000cec4:	dc000017 	ldw	r16,0(sp)
1000cec8:	dec00304 	addi	sp,sp,12
1000cecc:	f800283a 	ret

1000ced0 <_calloc_r>:
1000ced0:	defffe04 	addi	sp,sp,-8
1000ced4:	dc000015 	stw	r16,0(sp)
1000ced8:	2021883a 	mov	r16,r4
1000cedc:	3009883a 	mov	r4,r6
1000cee0:	dfc00115 	stw	ra,4(sp)
1000cee4:	000158c0 	call	1000158c <__mulsi3>
1000cee8:	8009883a 	mov	r4,r16
1000ceec:	100b883a 	mov	r5,r2
1000cef0:	0007c840 	call	10007c84 <_malloc_r>
1000cef4:	1021883a 	mov	r16,r2
1000cef8:	10000c26 	beq	r2,zero,1000cf2c <_calloc_r+0x5c>
1000cefc:	11bfff17 	ldw	r6,-4(r2)
1000cf00:	00ffff04 	movi	r3,-4
1000cf04:	00800904 	movi	r2,36
1000cf08:	30cc703a 	and	r6,r6,r3
1000cf0c:	30cd883a 	add	r6,r6,r3
1000cf10:	11801436 	bltu	r2,r6,1000cf64 <_calloc_r+0x94>
1000cf14:	00c004c4 	movi	r3,19
1000cf18:	19800936 	bltu	r3,r6,1000cf40 <_calloc_r+0x70>
1000cf1c:	8005883a 	mov	r2,r16
1000cf20:	10000015 	stw	zero,0(r2)
1000cf24:	10000115 	stw	zero,4(r2)
1000cf28:	10000215 	stw	zero,8(r2)
1000cf2c:	8005883a 	mov	r2,r16
1000cf30:	dfc00117 	ldw	ra,4(sp)
1000cf34:	dc000017 	ldw	r16,0(sp)
1000cf38:	dec00204 	addi	sp,sp,8
1000cf3c:	f800283a 	ret
1000cf40:	80000015 	stw	zero,0(r16)
1000cf44:	80000115 	stw	zero,4(r16)
1000cf48:	00c006c4 	movi	r3,27
1000cf4c:	19800d2e 	bgeu	r3,r6,1000cf84 <_calloc_r+0xb4>
1000cf50:	80000215 	stw	zero,8(r16)
1000cf54:	80000315 	stw	zero,12(r16)
1000cf58:	30800c26 	beq	r6,r2,1000cf8c <_calloc_r+0xbc>
1000cf5c:	80800404 	addi	r2,r16,16
1000cf60:	003fef06 	br	1000cf20 <__alt_data_end+0xf800cf20>
1000cf64:	8009883a 	mov	r4,r16
1000cf68:	000b883a 	mov	r5,zero
1000cf6c:	00088b40 	call	100088b4 <memset>
1000cf70:	8005883a 	mov	r2,r16
1000cf74:	dfc00117 	ldw	ra,4(sp)
1000cf78:	dc000017 	ldw	r16,0(sp)
1000cf7c:	dec00204 	addi	sp,sp,8
1000cf80:	f800283a 	ret
1000cf84:	80800204 	addi	r2,r16,8
1000cf88:	003fe506 	br	1000cf20 <__alt_data_end+0xf800cf20>
1000cf8c:	80000415 	stw	zero,16(r16)
1000cf90:	80000515 	stw	zero,20(r16)
1000cf94:	80800604 	addi	r2,r16,24
1000cf98:	003fe106 	br	1000cf20 <__alt_data_end+0xf800cf20>

1000cf9c <_close_r>:
1000cf9c:	defffd04 	addi	sp,sp,-12
1000cfa0:	dc400115 	stw	r17,4(sp)
1000cfa4:	dc000015 	stw	r16,0(sp)
1000cfa8:	2023883a 	mov	r17,r4
1000cfac:	04040074 	movhi	r16,4097
1000cfb0:	841aa604 	addi	r16,r16,27288
1000cfb4:	2809883a 	mov	r4,r5
1000cfb8:	dfc00215 	stw	ra,8(sp)
1000cfbc:	80000015 	stw	zero,0(r16)
1000cfc0:	00103ec0 	call	100103ec <close>
1000cfc4:	00ffffc4 	movi	r3,-1
1000cfc8:	10c00526 	beq	r2,r3,1000cfe0 <_close_r+0x44>
1000cfcc:	dfc00217 	ldw	ra,8(sp)
1000cfd0:	dc400117 	ldw	r17,4(sp)
1000cfd4:	dc000017 	ldw	r16,0(sp)
1000cfd8:	dec00304 	addi	sp,sp,12
1000cfdc:	f800283a 	ret
1000cfe0:	80c00017 	ldw	r3,0(r16)
1000cfe4:	183ff926 	beq	r3,zero,1000cfcc <__alt_data_end+0xf800cfcc>
1000cfe8:	88c00015 	stw	r3,0(r17)
1000cfec:	dfc00217 	ldw	ra,8(sp)
1000cff0:	dc400117 	ldw	r17,4(sp)
1000cff4:	dc000017 	ldw	r16,0(sp)
1000cff8:	dec00304 	addi	sp,sp,12
1000cffc:	f800283a 	ret

1000d000 <_fclose_r>:
1000d000:	defffc04 	addi	sp,sp,-16
1000d004:	dc400115 	stw	r17,4(sp)
1000d008:	dc000015 	stw	r16,0(sp)
1000d00c:	dfc00315 	stw	ra,12(sp)
1000d010:	dc800215 	stw	r18,8(sp)
1000d014:	2821883a 	mov	r16,r5
1000d018:	2023883a 	mov	r17,r4
1000d01c:	28003426 	beq	r5,zero,1000d0f0 <_fclose_r+0xf0>
1000d020:	0006cbc0 	call	10006cbc <__sfp_lock_acquire>
1000d024:	88000226 	beq	r17,zero,1000d030 <_fclose_r+0x30>
1000d028:	88800e17 	ldw	r2,56(r17)
1000d02c:	10003826 	beq	r2,zero,1000d110 <_fclose_r+0x110>
1000d030:	8080030f 	ldh	r2,12(r16)
1000d034:	10002526 	beq	r2,zero,1000d0cc <_fclose_r+0xcc>
1000d038:	8809883a 	mov	r4,r17
1000d03c:	800b883a 	mov	r5,r16
1000d040:	00067f80 	call	100067f8 <_fflush_r>
1000d044:	1025883a 	mov	r18,r2
1000d048:	80800b17 	ldw	r2,44(r16)
1000d04c:	10000426 	beq	r2,zero,1000d060 <_fclose_r+0x60>
1000d050:	81400717 	ldw	r5,28(r16)
1000d054:	8809883a 	mov	r4,r17
1000d058:	103ee83a 	callr	r2
1000d05c:	10003516 	blt	r2,zero,1000d134 <_fclose_r+0x134>
1000d060:	8080030b 	ldhu	r2,12(r16)
1000d064:	1080200c 	andi	r2,r2,128
1000d068:	10bfffcc 	andi	r2,r2,65535
1000d06c:	10a0001c 	xori	r2,r2,32768
1000d070:	10a00004 	addi	r2,r2,-32768
1000d074:	10002b1e 	bne	r2,zero,1000d124 <_fclose_r+0x124>
1000d078:	81400c17 	ldw	r5,48(r16)
1000d07c:	28000526 	beq	r5,zero,1000d094 <_fclose_r+0x94>
1000d080:	80801004 	addi	r2,r16,64
1000d084:	28800226 	beq	r5,r2,1000d090 <_fclose_r+0x90>
1000d088:	8809883a 	mov	r4,r17
1000d08c:	00070b40 	call	100070b4 <_free_r>
1000d090:	80000c15 	stw	zero,48(r16)
1000d094:	81401117 	ldw	r5,68(r16)
1000d098:	28000326 	beq	r5,zero,1000d0a8 <_fclose_r+0xa8>
1000d09c:	8809883a 	mov	r4,r17
1000d0a0:	00070b40 	call	100070b4 <_free_r>
1000d0a4:	80001115 	stw	zero,68(r16)
1000d0a8:	8000030d 	sth	zero,12(r16)
1000d0ac:	0006cc00 	call	10006cc0 <__sfp_lock_release>
1000d0b0:	9005883a 	mov	r2,r18
1000d0b4:	dfc00317 	ldw	ra,12(sp)
1000d0b8:	dc800217 	ldw	r18,8(sp)
1000d0bc:	dc400117 	ldw	r17,4(sp)
1000d0c0:	dc000017 	ldw	r16,0(sp)
1000d0c4:	dec00404 	addi	sp,sp,16
1000d0c8:	f800283a 	ret
1000d0cc:	0006cc00 	call	10006cc0 <__sfp_lock_release>
1000d0d0:	0025883a 	mov	r18,zero
1000d0d4:	9005883a 	mov	r2,r18
1000d0d8:	dfc00317 	ldw	ra,12(sp)
1000d0dc:	dc800217 	ldw	r18,8(sp)
1000d0e0:	dc400117 	ldw	r17,4(sp)
1000d0e4:	dc000017 	ldw	r16,0(sp)
1000d0e8:	dec00404 	addi	sp,sp,16
1000d0ec:	f800283a 	ret
1000d0f0:	0025883a 	mov	r18,zero
1000d0f4:	9005883a 	mov	r2,r18
1000d0f8:	dfc00317 	ldw	ra,12(sp)
1000d0fc:	dc800217 	ldw	r18,8(sp)
1000d100:	dc400117 	ldw	r17,4(sp)
1000d104:	dc000017 	ldw	r16,0(sp)
1000d108:	dec00404 	addi	sp,sp,16
1000d10c:	f800283a 	ret
1000d110:	8809883a 	mov	r4,r17
1000d114:	0006ab40 	call	10006ab4 <__sinit>
1000d118:	8080030f 	ldh	r2,12(r16)
1000d11c:	103fc61e 	bne	r2,zero,1000d038 <__alt_data_end+0xf800d038>
1000d120:	003fea06 	br	1000d0cc <__alt_data_end+0xf800d0cc>
1000d124:	81400417 	ldw	r5,16(r16)
1000d128:	8809883a 	mov	r4,r17
1000d12c:	00070b40 	call	100070b4 <_free_r>
1000d130:	003fd106 	br	1000d078 <__alt_data_end+0xf800d078>
1000d134:	04bfffc4 	movi	r18,-1
1000d138:	003fc906 	br	1000d060 <__alt_data_end+0xf800d060>

1000d13c <fclose>:
1000d13c:	00840074 	movhi	r2,4097
1000d140:	10936704 	addi	r2,r2,19868
1000d144:	200b883a 	mov	r5,r4
1000d148:	11000017 	ldw	r4,0(r2)
1000d14c:	000d0001 	jmpi	1000d000 <_fclose_r>

1000d150 <_fstat_r>:
1000d150:	defffd04 	addi	sp,sp,-12
1000d154:	dc400115 	stw	r17,4(sp)
1000d158:	dc000015 	stw	r16,0(sp)
1000d15c:	2023883a 	mov	r17,r4
1000d160:	04040074 	movhi	r16,4097
1000d164:	841aa604 	addi	r16,r16,27288
1000d168:	2809883a 	mov	r4,r5
1000d16c:	300b883a 	mov	r5,r6
1000d170:	dfc00215 	stw	ra,8(sp)
1000d174:	80000015 	stw	zero,0(r16)
1000d178:	00105340 	call	10010534 <fstat>
1000d17c:	00ffffc4 	movi	r3,-1
1000d180:	10c00526 	beq	r2,r3,1000d198 <_fstat_r+0x48>
1000d184:	dfc00217 	ldw	ra,8(sp)
1000d188:	dc400117 	ldw	r17,4(sp)
1000d18c:	dc000017 	ldw	r16,0(sp)
1000d190:	dec00304 	addi	sp,sp,12
1000d194:	f800283a 	ret
1000d198:	80c00017 	ldw	r3,0(r16)
1000d19c:	183ff926 	beq	r3,zero,1000d184 <__alt_data_end+0xf800d184>
1000d1a0:	88c00015 	stw	r3,0(r17)
1000d1a4:	dfc00217 	ldw	ra,8(sp)
1000d1a8:	dc400117 	ldw	r17,4(sp)
1000d1ac:	dc000017 	ldw	r16,0(sp)
1000d1b0:	dec00304 	addi	sp,sp,12
1000d1b4:	f800283a 	ret

1000d1b8 <rshift>:
1000d1b8:	2805d17a 	srai	r2,r5,5
1000d1bc:	20c00417 	ldw	r3,16(r4)
1000d1c0:	22800504 	addi	r10,r4,20
1000d1c4:	10c0270e 	bge	r2,r3,1000d264 <rshift+0xac>
1000d1c8:	19800144 	addi	r6,r3,5
1000d1cc:	12c00144 	addi	r11,r2,5
1000d1d0:	318d883a 	add	r6,r6,r6
1000d1d4:	5ad7883a 	add	r11,r11,r11
1000d1d8:	318d883a 	add	r6,r6,r6
1000d1dc:	5ad7883a 	add	r11,r11,r11
1000d1e0:	294007cc 	andi	r5,r5,31
1000d1e4:	218d883a 	add	r6,r4,r6
1000d1e8:	22d7883a 	add	r11,r4,r11
1000d1ec:	28002026 	beq	r5,zero,1000d270 <rshift+0xb8>
1000d1f0:	59c00017 	ldw	r7,0(r11)
1000d1f4:	02400804 	movi	r9,32
1000d1f8:	58800104 	addi	r2,r11,4
1000d1fc:	4953c83a 	sub	r9,r9,r5
1000d200:	394ed83a 	srl	r7,r7,r5
1000d204:	11802e2e 	bgeu	r2,r6,1000d2c0 <rshift+0x108>
1000d208:	5007883a 	mov	r3,r10
1000d20c:	12000017 	ldw	r8,0(r2)
1000d210:	18c00104 	addi	r3,r3,4
1000d214:	10800104 	addi	r2,r2,4
1000d218:	4250983a 	sll	r8,r8,r9
1000d21c:	3a0eb03a 	or	r7,r7,r8
1000d220:	19ffff15 	stw	r7,-4(r3)
1000d224:	11ffff17 	ldw	r7,-4(r2)
1000d228:	394ed83a 	srl	r7,r7,r5
1000d22c:	11bff736 	bltu	r2,r6,1000d20c <__alt_data_end+0xf800d20c>
1000d230:	32c5c83a 	sub	r2,r6,r11
1000d234:	10bffec4 	addi	r2,r2,-5
1000d238:	1004d0ba 	srli	r2,r2,2
1000d23c:	10800184 	addi	r2,r2,6
1000d240:	1085883a 	add	r2,r2,r2
1000d244:	1085883a 	add	r2,r2,r2
1000d248:	2085883a 	add	r2,r4,r2
1000d24c:	11c00015 	stw	r7,0(r2)
1000d250:	38001626 	beq	r7,zero,1000d2ac <rshift+0xf4>
1000d254:	10800104 	addi	r2,r2,4
1000d258:	1295c83a 	sub	r10,r2,r10
1000d25c:	5015d0ba 	srai	r10,r10,2
1000d260:	00001406 	br	1000d2b4 <rshift+0xfc>
1000d264:	20000415 	stw	zero,16(r4)
1000d268:	20000515 	stw	zero,20(r4)
1000d26c:	f800283a 	ret
1000d270:	59bffc2e 	bgeu	r11,r6,1000d264 <__alt_data_end+0xf800d264>
1000d274:	5007883a 	mov	r3,r10
1000d278:	5805883a 	mov	r2,r11
1000d27c:	11400017 	ldw	r5,0(r2)
1000d280:	18c00104 	addi	r3,r3,4
1000d284:	10800104 	addi	r2,r2,4
1000d288:	197fff15 	stw	r5,-4(r3)
1000d28c:	11bffb36 	bltu	r2,r6,1000d27c <__alt_data_end+0xf800d27c>
1000d290:	02c4303a 	nor	r2,zero,r11
1000d294:	1185883a 	add	r2,r2,r6
1000d298:	1004d0ba 	srli	r2,r2,2
1000d29c:	10800184 	addi	r2,r2,6
1000d2a0:	1085883a 	add	r2,r2,r2
1000d2a4:	1085883a 	add	r2,r2,r2
1000d2a8:	2085883a 	add	r2,r4,r2
1000d2ac:	1295c83a 	sub	r10,r2,r10
1000d2b0:	5015d0ba 	srai	r10,r10,2
1000d2b4:	22800415 	stw	r10,16(r4)
1000d2b8:	503feb26 	beq	r10,zero,1000d268 <__alt_data_end+0xf800d268>
1000d2bc:	f800283a 	ret
1000d2c0:	5005883a 	mov	r2,r10
1000d2c4:	003fe106 	br	1000d24c <__alt_data_end+0xf800d24c>

1000d2c8 <__hexdig_init>:
1000d2c8:	01440074 	movhi	r5,4097
1000d2cc:	294bf544 	addi	r5,r5,12245
1000d2d0:	01000404 	movi	r4,16
1000d2d4:	00c00c04 	movi	r3,48
1000d2d8:	00840074 	movhi	r2,4097
1000d2dc:	109ab704 	addi	r2,r2,27356
1000d2e0:	29800003 	ldbu	r6,0(r5)
1000d2e4:	10c7883a 	add	r3,r2,r3
1000d2e8:	19000005 	stb	r4,0(r3)
1000d2ec:	29400044 	addi	r5,r5,1
1000d2f0:	3007883a 	mov	r3,r6
1000d2f4:	21000044 	addi	r4,r4,1
1000d2f8:	303ff91e 	bne	r6,zero,1000d2e0 <__alt_data_end+0xf800d2e0>
1000d2fc:	01440074 	movhi	r5,4097
1000d300:	294bf344 	addi	r5,r5,12237
1000d304:	01000684 	movi	r4,26
1000d308:	00c01844 	movi	r3,97
1000d30c:	29800003 	ldbu	r6,0(r5)
1000d310:	10c7883a 	add	r3,r2,r3
1000d314:	19000005 	stb	r4,0(r3)
1000d318:	29400044 	addi	r5,r5,1
1000d31c:	3007883a 	mov	r3,r6
1000d320:	21000044 	addi	r4,r4,1
1000d324:	303ff91e 	bne	r6,zero,1000d30c <__alt_data_end+0xf800d30c>
1000d328:	01440074 	movhi	r5,4097
1000d32c:	294bf144 	addi	r5,r5,12229
1000d330:	01000684 	movi	r4,26
1000d334:	00c01044 	movi	r3,65
1000d338:	29800003 	ldbu	r6,0(r5)
1000d33c:	10c7883a 	add	r3,r2,r3
1000d340:	19000005 	stb	r4,0(r3)
1000d344:	29400044 	addi	r5,r5,1
1000d348:	3007883a 	mov	r3,r6
1000d34c:	21000044 	addi	r4,r4,1
1000d350:	303ff91e 	bne	r6,zero,1000d338 <__alt_data_end+0xf800d338>
1000d354:	f800283a 	ret

1000d358 <__gethex>:
1000d358:	defff204 	addi	sp,sp,-56
1000d35c:	dc800615 	stw	r18,24(sp)
1000d360:	04840074 	movhi	r18,4097
1000d364:	949ab704 	addi	r18,r18,27356
1000d368:	90800c03 	ldbu	r2,48(r18)
1000d36c:	dd400915 	stw	r21,36(sp)
1000d370:	dc400515 	stw	r17,20(sp)
1000d374:	dfc00d15 	stw	ra,52(sp)
1000d378:	df000c15 	stw	fp,48(sp)
1000d37c:	ddc00b15 	stw	r23,44(sp)
1000d380:	dd800a15 	stw	r22,40(sp)
1000d384:	dd000815 	stw	r20,32(sp)
1000d388:	dcc00715 	stw	r19,28(sp)
1000d38c:	dc000415 	stw	r16,16(sp)
1000d390:	d9000115 	stw	r4,4(sp)
1000d394:	d9c00215 	stw	r7,8(sp)
1000d398:	282b883a 	mov	r21,r5
1000d39c:	3023883a 	mov	r17,r6
1000d3a0:	1000b926 	beq	r2,zero,1000d688 <__gethex+0x330>
1000d3a4:	a9000017 	ldw	r4,0(r21)
1000d3a8:	00800c04 	movi	r2,48
1000d3ac:	20c00083 	ldbu	r3,2(r4)
1000d3b0:	24c00084 	addi	r19,r4,2
1000d3b4:	1881601e 	bne	r3,r2,1000d938 <__gethex+0x5e0>
1000d3b8:	017fff84 	movi	r5,-2
1000d3bc:	208000c4 	addi	r2,r4,3
1000d3c0:	290bc83a 	sub	r5,r5,r4
1000d3c4:	1809883a 	mov	r4,r3
1000d3c8:	28b9883a 	add	fp,r5,r2
1000d3cc:	1027883a 	mov	r19,r2
1000d3d0:	10800044 	addi	r2,r2,1
1000d3d4:	10ffffc3 	ldbu	r3,-1(r2)
1000d3d8:	193ffb26 	beq	r3,r4,1000d3c8 <__alt_data_end+0xf800d3c8>
1000d3dc:	90c5883a 	add	r2,r18,r3
1000d3e0:	10800003 	ldbu	r2,0(r2)
1000d3e4:	01440074 	movhi	r5,4097
1000d3e8:	295ab704 	addi	r5,r5,27356
1000d3ec:	10002b26 	beq	r2,zero,1000d49c <__gethex+0x144>
1000d3f0:	98800003 	ldbu	r2,0(r19)
1000d3f4:	0009883a 	mov	r4,zero
1000d3f8:	288b883a 	add	r5,r5,r2
1000d3fc:	28c00003 	ldbu	r3,0(r5)
1000d400:	18016826 	beq	r3,zero,1000d9a4 <__gethex+0x64c>
1000d404:	9821883a 	mov	r16,r19
1000d408:	84000044 	addi	r16,r16,1
1000d40c:	80800003 	ldbu	r2,0(r16)
1000d410:	9087883a 	add	r3,r18,r2
1000d414:	18c00003 	ldbu	r3,0(r3)
1000d418:	183ffb1e 	bne	r3,zero,1000d408 <__alt_data_end+0xf800d408>
1000d41c:	d8000015 	stw	zero,0(sp)
1000d420:	00c00b84 	movi	r3,46
1000d424:	10c0f226 	beq	r2,r3,1000d7f0 <__gethex+0x498>
1000d428:	80800003 	ldbu	r2,0(r16)
1000d42c:	20014426 	beq	r4,zero,1000d940 <__gethex+0x5e8>
1000d430:	8109c83a 	sub	r4,r16,r4
1000d434:	2109883a 	add	r4,r4,r4
1000d438:	2109883a 	add	r4,r4,r4
1000d43c:	0129c83a 	sub	r20,zero,r4
1000d440:	00c01404 	movi	r3,80
1000d444:	10c01e26 	beq	r2,r3,1000d4c0 <__gethex+0x168>
1000d448:	00c01c04 	movi	r3,112
1000d44c:	10c01c26 	beq	r2,r3,1000d4c0 <__gethex+0x168>
1000d450:	d8c00017 	ldw	r3,0(sp)
1000d454:	802d883a 	mov	r22,r16
1000d458:	ad800015 	stw	r22,0(r21)
1000d45c:	18004026 	beq	r3,zero,1000d560 <__gethex+0x208>
1000d460:	e001061e 	bne	fp,zero,1000d87c <__gethex+0x524>
1000d464:	04000184 	movi	r16,6
1000d468:	8005883a 	mov	r2,r16
1000d46c:	dfc00d17 	ldw	ra,52(sp)
1000d470:	df000c17 	ldw	fp,48(sp)
1000d474:	ddc00b17 	ldw	r23,44(sp)
1000d478:	dd800a17 	ldw	r22,40(sp)
1000d47c:	dd400917 	ldw	r21,36(sp)
1000d480:	dd000817 	ldw	r20,32(sp)
1000d484:	dcc00717 	ldw	r19,28(sp)
1000d488:	dc800617 	ldw	r18,24(sp)
1000d48c:	dc400517 	ldw	r17,20(sp)
1000d490:	dc000417 	ldw	r16,16(sp)
1000d494:	dec00e04 	addi	sp,sp,56
1000d498:	f800283a 	ret
1000d49c:	00800b84 	movi	r2,46
1000d4a0:	1880d626 	beq	r3,r2,1000d7fc <__gethex+0x4a4>
1000d4a4:	98800003 	ldbu	r2,0(r19)
1000d4a8:	00c00044 	movi	r3,1
1000d4ac:	d8c00015 	stw	r3,0(sp)
1000d4b0:	00c01404 	movi	r3,80
1000d4b4:	9821883a 	mov	r16,r19
1000d4b8:	0029883a 	mov	r20,zero
1000d4bc:	10ffe21e 	bne	r2,r3,1000d448 <__alt_data_end+0xf800d448>
1000d4c0:	80800043 	ldbu	r2,1(r16)
1000d4c4:	00c00ac4 	movi	r3,43
1000d4c8:	10c0f326 	beq	r2,r3,1000d898 <__gethex+0x540>
1000d4cc:	00c00b44 	movi	r3,45
1000d4d0:	10c0ec26 	beq	r2,r3,1000d884 <__gethex+0x52c>
1000d4d4:	80c00044 	addi	r3,r16,1
1000d4d8:	d8000315 	stw	zero,12(sp)
1000d4dc:	9085883a 	add	r2,r18,r2
1000d4e0:	11000003 	ldbu	r4,0(r2)
1000d4e4:	203fda26 	beq	r4,zero,1000d450 <__alt_data_end+0xf800d450>
1000d4e8:	01800644 	movi	r6,25
1000d4ec:	313fd816 	blt	r6,r4,1000d450 <__alt_data_end+0xf800d450>
1000d4f0:	18800043 	ldbu	r2,1(r3)
1000d4f4:	01440074 	movhi	r5,4097
1000d4f8:	295ab704 	addi	r5,r5,27356
1000d4fc:	213ffc04 	addi	r4,r4,-16
1000d500:	2885883a 	add	r2,r5,r2
1000d504:	15c00003 	ldbu	r23,0(r2)
1000d508:	1d800044 	addi	r22,r3,1
1000d50c:	b8000d26 	beq	r23,zero,1000d544 <__gethex+0x1ec>
1000d510:	35c0030e 	bge	r6,r23,1000d520 <__gethex+0x1c8>
1000d514:	00000b06 	br	1000d544 <__gethex+0x1ec>
1000d518:	00800644 	movi	r2,25
1000d51c:	15c00916 	blt	r2,r23,1000d544 <__gethex+0x1ec>
1000d520:	01400284 	movi	r5,10
1000d524:	000158c0 	call	1000158c <__mulsi3>
1000d528:	b5800044 	addi	r22,r22,1
1000d52c:	b1400003 	ldbu	r5,0(r22)
1000d530:	15c5883a 	add	r2,r2,r23
1000d534:	113ffc04 	addi	r4,r2,-16
1000d538:	914b883a 	add	r5,r18,r5
1000d53c:	2dc00003 	ldbu	r23,0(r5)
1000d540:	b83ff51e 	bne	r23,zero,1000d518 <__alt_data_end+0xf800d518>
1000d544:	d8c00317 	ldw	r3,12(sp)
1000d548:	18000126 	beq	r3,zero,1000d550 <__gethex+0x1f8>
1000d54c:	0109c83a 	sub	r4,zero,r4
1000d550:	d8c00017 	ldw	r3,0(sp)
1000d554:	ad800015 	stw	r22,0(r21)
1000d558:	a129883a 	add	r20,r20,r4
1000d55c:	183fc01e 	bne	r3,zero,1000d460 <__alt_data_end+0xf800d460>
1000d560:	84c5c83a 	sub	r2,r16,r19
1000d564:	10bfffc4 	addi	r2,r2,-1
1000d568:	00c001c4 	movi	r3,7
1000d56c:	000b883a 	mov	r5,zero
1000d570:	1880030e 	bge	r3,r2,1000d580 <__gethex+0x228>
1000d574:	1005d07a 	srai	r2,r2,1
1000d578:	29400044 	addi	r5,r5,1
1000d57c:	18bffd16 	blt	r3,r2,1000d574 <__alt_data_end+0xf800d574>
1000d580:	d9000117 	ldw	r4,4(sp)
1000d584:	00089900 	call	10008990 <_Balloc>
1000d588:	102d883a 	mov	r22,r2
1000d58c:	15400504 	addi	r21,r2,20
1000d590:	9c001b2e 	bgeu	r19,r16,1000d600 <__gethex+0x2a8>
1000d594:	843fffc4 	addi	r16,r16,-1
1000d598:	98bfffc4 	addi	r2,r19,-1
1000d59c:	a80b883a 	mov	r5,r21
1000d5a0:	0009883a 	mov	r4,zero
1000d5a4:	0007883a 	mov	r3,zero
1000d5a8:	02800b84 	movi	r10,46
1000d5ac:	02c00804 	movi	r11,32
1000d5b0:	00000806 	br	1000d5d4 <__gethex+0x27c>
1000d5b4:	18c00104 	addi	r3,r3,4
1000d5b8:	918d883a 	add	r6,r18,r6
1000d5bc:	32400003 	ldbu	r9,0(r6)
1000d5c0:	4a4003cc 	andi	r9,r9,15
1000d5c4:	49ce983a 	sll	r7,r9,r7
1000d5c8:	21c8b03a 	or	r4,r4,r7
1000d5cc:	843fffc4 	addi	r16,r16,-1
1000d5d0:	80800d26 	beq	r16,r2,1000d608 <__gethex+0x2b0>
1000d5d4:	81800003 	ldbu	r6,0(r16)
1000d5d8:	180f883a 	mov	r7,r3
1000d5dc:	32bffb26 	beq	r6,r10,1000d5cc <__alt_data_end+0xf800d5cc>
1000d5e0:	1afff41e 	bne	r3,r11,1000d5b4 <__alt_data_end+0xf800d5b4>
1000d5e4:	29000015 	stw	r4,0(r5)
1000d5e8:	81800003 	ldbu	r6,0(r16)
1000d5ec:	0009883a 	mov	r4,zero
1000d5f0:	000f883a 	mov	r7,zero
1000d5f4:	29400104 	addi	r5,r5,4
1000d5f8:	00c00104 	movi	r3,4
1000d5fc:	003fee06 	br	1000d5b8 <__alt_data_end+0xf800d5b8>
1000d600:	a80b883a 	mov	r5,r21
1000d604:	0009883a 	mov	r4,zero
1000d608:	28c00104 	addi	r3,r5,4
1000d60c:	1d47c83a 	sub	r3,r3,r21
1000d610:	1807d0ba 	srai	r3,r3,2
1000d614:	29000015 	stw	r4,0(r5)
1000d618:	1820917a 	slli	r16,r3,5
1000d61c:	b0c00415 	stw	r3,16(r22)
1000d620:	0008ca80 	call	10008ca8 <__hi0bits>
1000d624:	8dc00017 	ldw	r23,0(r17)
1000d628:	8085c83a 	sub	r2,r16,r2
1000d62c:	b8809c16 	blt	r23,r2,1000d8a0 <__gethex+0x548>
1000d630:	15c0b716 	blt	r2,r23,1000d910 <__gethex+0x5b8>
1000d634:	0039883a 	mov	fp,zero
1000d638:	88c00217 	ldw	r3,8(r17)
1000d63c:	1d006516 	blt	r3,r20,1000d7d4 <__gethex+0x47c>
1000d640:	88800117 	ldw	r2,4(r17)
1000d644:	a080830e 	bge	r20,r2,1000d854 <__gethex+0x4fc>
1000d648:	1529c83a 	sub	r20,r2,r20
1000d64c:	a5c01016 	blt	r20,r23,1000d690 <__gethex+0x338>
1000d650:	88c00317 	ldw	r3,12(r17)
1000d654:	01000084 	movi	r4,2
1000d658:	1900c726 	beq	r3,r4,1000d978 <__gethex+0x620>
1000d65c:	010000c4 	movi	r4,3
1000d660:	1900f026 	beq	r3,r4,1000da24 <__gethex+0x6cc>
1000d664:	01000044 	movi	r4,1
1000d668:	1900e626 	beq	r3,r4,1000da04 <__gethex+0x6ac>
1000d66c:	d9000117 	ldw	r4,4(sp)
1000d670:	b00b883a 	mov	r5,r22
1000d674:	04001404 	movi	r16,80
1000d678:	0008a380 	call	10008a38 <_Bfree>
1000d67c:	d8c00e17 	ldw	r3,56(sp)
1000d680:	18000015 	stw	zero,0(r3)
1000d684:	003f7806 	br	1000d468 <__alt_data_end+0xf800d468>
1000d688:	000d2c80 	call	1000d2c8 <__hexdig_init>
1000d68c:	003f4506 	br	1000d3a4 <__alt_data_end+0xf800d3a4>
1000d690:	a43fffc4 	addi	r16,r20,-1
1000d694:	e000b21e 	bne	fp,zero,1000d960 <__gethex+0x608>
1000d698:	0400040e 	bge	zero,r16,1000d6ac <__gethex+0x354>
1000d69c:	b009883a 	mov	r4,r22
1000d6a0:	800b883a 	mov	r5,r16
1000d6a4:	000995c0 	call	1000995c <__any_on>
1000d6a8:	1039883a 	mov	fp,r2
1000d6ac:	8005d17a 	srai	r2,r16,5
1000d6b0:	00c00044 	movi	r3,1
1000d6b4:	840007cc 	andi	r16,r16,31
1000d6b8:	1085883a 	add	r2,r2,r2
1000d6bc:	1085883a 	add	r2,r2,r2
1000d6c0:	a885883a 	add	r2,r21,r2
1000d6c4:	1c06983a 	sll	r3,r3,r16
1000d6c8:	10800017 	ldw	r2,0(r2)
1000d6cc:	1884703a 	and	r2,r3,r2
1000d6d0:	10000126 	beq	r2,zero,1000d6d8 <__gethex+0x380>
1000d6d4:	e7000094 	ori	fp,fp,2
1000d6d8:	a00b883a 	mov	r5,r20
1000d6dc:	b009883a 	mov	r4,r22
1000d6e0:	000d1b80 	call	1000d1b8 <rshift>
1000d6e4:	bd2fc83a 	sub	r23,r23,r20
1000d6e8:	8d000117 	ldw	r20,4(r17)
1000d6ec:	04000084 	movi	r16,2
1000d6f0:	e0005d26 	beq	fp,zero,1000d868 <__gethex+0x510>
1000d6f4:	88800317 	ldw	r2,12(r17)
1000d6f8:	00c00084 	movi	r3,2
1000d6fc:	10c0b026 	beq	r2,r3,1000d9c0 <__gethex+0x668>
1000d700:	00c000c4 	movi	r3,3
1000d704:	10c05526 	beq	r2,r3,1000d85c <__gethex+0x504>
1000d708:	00c00044 	movi	r3,1
1000d70c:	10c0551e 	bne	r2,r3,1000d864 <__gethex+0x50c>
1000d710:	e080008c 	andi	r2,fp,2
1000d714:	10005326 	beq	r2,zero,1000d864 <__gethex+0x50c>
1000d718:	a8800017 	ldw	r2,0(r21)
1000d71c:	e084b03a 	or	r2,fp,r2
1000d720:	10c4703a 	and	r2,r2,r3
1000d724:	10004f26 	beq	r2,zero,1000d864 <__gethex+0x50c>
1000d728:	b7000417 	ldw	fp,16(r22)
1000d72c:	00ffffc4 	movi	r3,-1
1000d730:	e1000144 	addi	r4,fp,5
1000d734:	2109883a 	add	r4,r4,r4
1000d738:	2109883a 	add	r4,r4,r4
1000d73c:	b109883a 	add	r4,r22,r4
1000d740:	a8800017 	ldw	r2,0(r21)
1000d744:	10c0ba1e 	bne	r2,r3,1000da30 <__gethex+0x6d8>
1000d748:	a8000015 	stw	zero,0(r21)
1000d74c:	ad400104 	addi	r21,r21,4
1000d750:	a93ffb36 	bltu	r21,r4,1000d740 <__alt_data_end+0xf800d740>
1000d754:	b0800217 	ldw	r2,8(r22)
1000d758:	e080bd0e 	bge	fp,r2,1000da50 <__gethex+0x6f8>
1000d75c:	e005883a 	mov	r2,fp
1000d760:	10c00144 	addi	r3,r2,5
1000d764:	18c7883a 	add	r3,r3,r3
1000d768:	18c7883a 	add	r3,r3,r3
1000d76c:	b0c7883a 	add	r3,r22,r3
1000d770:	10800044 	addi	r2,r2,1
1000d774:	01000044 	movi	r4,1
1000d778:	19000015 	stw	r4,0(r3)
1000d77c:	b0800415 	stw	r2,16(r22)
1000d780:	00800084 	movi	r2,2
1000d784:	8080ad26 	beq	r16,r2,1000da3c <__gethex+0x6e4>
1000d788:	b0800417 	ldw	r2,16(r22)
1000d78c:	e0800b16 	blt	fp,r2,1000d7bc <__gethex+0x464>
1000d790:	bdc007cc 	andi	r23,r23,31
1000d794:	b8008626 	beq	r23,zero,1000d9b0 <__gethex+0x658>
1000d798:	e7000104 	addi	fp,fp,4
1000d79c:	e739883a 	add	fp,fp,fp
1000d7a0:	e739883a 	add	fp,fp,fp
1000d7a4:	b705883a 	add	r2,r22,fp
1000d7a8:	11000017 	ldw	r4,0(r2)
1000d7ac:	0008ca80 	call	10008ca8 <__hi0bits>
1000d7b0:	00c00804 	movi	r3,32
1000d7b4:	1defc83a 	sub	r23,r3,r23
1000d7b8:	15c07d0e 	bge	r2,r23,1000d9b0 <__gethex+0x658>
1000d7bc:	b009883a 	mov	r4,r22
1000d7c0:	01400044 	movi	r5,1
1000d7c4:	000d1b80 	call	1000d1b8 <rshift>
1000d7c8:	88800217 	ldw	r2,8(r17)
1000d7cc:	a5000044 	addi	r20,r20,1
1000d7d0:	1500770e 	bge	r2,r20,1000d9b0 <__gethex+0x658>
1000d7d4:	d9000117 	ldw	r4,4(sp)
1000d7d8:	b00b883a 	mov	r5,r22
1000d7dc:	040028c4 	movi	r16,163
1000d7e0:	0008a380 	call	10008a38 <_Bfree>
1000d7e4:	d8800e17 	ldw	r2,56(sp)
1000d7e8:	10000015 	stw	zero,0(r2)
1000d7ec:	003f1e06 	br	1000d468 <__alt_data_end+0xf800d468>
1000d7f0:	20007826 	beq	r4,zero,1000d9d4 <__gethex+0x67c>
1000d7f4:	80800003 	ldbu	r2,0(r16)
1000d7f8:	003f0d06 	br	1000d430 <__alt_data_end+0xf800d430>
1000d7fc:	98800043 	ldbu	r2,1(r19)
1000d800:	9c000044 	addi	r16,r19,1
1000d804:	288b883a 	add	r5,r5,r2
1000d808:	28c00003 	ldbu	r3,0(r5)
1000d80c:	18005026 	beq	r3,zero,1000d950 <__gethex+0x5f8>
1000d810:	00c00c04 	movi	r3,48
1000d814:	10c0541e 	bne	r2,r3,1000d968 <__gethex+0x610>
1000d818:	800d883a 	mov	r6,r16
1000d81c:	1007883a 	mov	r3,r2
1000d820:	31800044 	addi	r6,r6,1
1000d824:	30800003 	ldbu	r2,0(r6)
1000d828:	10fffd26 	beq	r2,r3,1000d820 <__alt_data_end+0xf800d820>
1000d82c:	9087883a 	add	r3,r18,r2
1000d830:	18c00003 	ldbu	r3,0(r3)
1000d834:	3027883a 	mov	r19,r6
1000d838:	18004c1e 	bne	r3,zero,1000d96c <__gethex+0x614>
1000d83c:	00c00044 	movi	r3,1
1000d840:	8009883a 	mov	r4,r16
1000d844:	d8c00015 	stw	r3,0(sp)
1000d848:	1839883a 	mov	fp,r3
1000d84c:	3021883a 	mov	r16,r6
1000d850:	003ef306 	br	1000d420 <__alt_data_end+0xf800d420>
1000d854:	04000044 	movi	r16,1
1000d858:	003fa506 	br	1000d6f0 <__alt_data_end+0xf800d6f0>
1000d85c:	d8800f17 	ldw	r2,60(sp)
1000d860:	103fb11e 	bne	r2,zero,1000d728 <__alt_data_end+0xf800d728>
1000d864:	84000414 	ori	r16,r16,16
1000d868:	d8800e17 	ldw	r2,56(sp)
1000d86c:	d8c00217 	ldw	r3,8(sp)
1000d870:	15800015 	stw	r22,0(r2)
1000d874:	1d000015 	stw	r20,0(r3)
1000d878:	003efb06 	br	1000d468 <__alt_data_end+0xf800d468>
1000d87c:	0021883a 	mov	r16,zero
1000d880:	003ef906 	br	1000d468 <__alt_data_end+0xf800d468>
1000d884:	00c00044 	movi	r3,1
1000d888:	d8c00315 	stw	r3,12(sp)
1000d88c:	80800083 	ldbu	r2,2(r16)
1000d890:	80c00084 	addi	r3,r16,2
1000d894:	003f1106 	br	1000d4dc <__alt_data_end+0xf800d4dc>
1000d898:	d8000315 	stw	zero,12(sp)
1000d89c:	003ffb06 	br	1000d88c <__alt_data_end+0xf800d88c>
1000d8a0:	15e1c83a 	sub	r16,r2,r23
1000d8a4:	b009883a 	mov	r4,r22
1000d8a8:	800b883a 	mov	r5,r16
1000d8ac:	000995c0 	call	1000995c <__any_on>
1000d8b0:	10002526 	beq	r2,zero,1000d948 <__gethex+0x5f0>
1000d8b4:	80bfffc4 	addi	r2,r16,-1
1000d8b8:	1007d17a 	srai	r3,r2,5
1000d8bc:	110007cc 	andi	r4,r2,31
1000d8c0:	07000044 	movi	fp,1
1000d8c4:	18c00144 	addi	r3,r3,5
1000d8c8:	18c7883a 	add	r3,r3,r3
1000d8cc:	18c7883a 	add	r3,r3,r3
1000d8d0:	b0c7883a 	add	r3,r22,r3
1000d8d4:	e108983a 	sll	r4,fp,r4
1000d8d8:	18c00017 	ldw	r3,0(r3)
1000d8dc:	20c6703a 	and	r3,r4,r3
1000d8e0:	18000626 	beq	r3,zero,1000d8fc <__gethex+0x5a4>
1000d8e4:	e080340e 	bge	fp,r2,1000d9b8 <__gethex+0x660>
1000d8e8:	b009883a 	mov	r4,r22
1000d8ec:	817fff84 	addi	r5,r16,-2
1000d8f0:	000995c0 	call	1000995c <__any_on>
1000d8f4:	10003026 	beq	r2,zero,1000d9b8 <__gethex+0x660>
1000d8f8:	070000c4 	movi	fp,3
1000d8fc:	b009883a 	mov	r4,r22
1000d900:	800b883a 	mov	r5,r16
1000d904:	000d1b80 	call	1000d1b8 <rshift>
1000d908:	a429883a 	add	r20,r20,r16
1000d90c:	003f4a06 	br	1000d638 <__alt_data_end+0xf800d638>
1000d910:	d9000117 	ldw	r4,4(sp)
1000d914:	b8a1c83a 	sub	r16,r23,r2
1000d918:	b00b883a 	mov	r5,r22
1000d91c:	800d883a 	mov	r6,r16
1000d920:	00091800 	call	10009180 <__lshift>
1000d924:	102d883a 	mov	r22,r2
1000d928:	a429c83a 	sub	r20,r20,r16
1000d92c:	15400504 	addi	r21,r2,20
1000d930:	0039883a 	mov	fp,zero
1000d934:	003f4006 	br	1000d638 <__alt_data_end+0xf800d638>
1000d938:	0039883a 	mov	fp,zero
1000d93c:	003ea706 	br	1000d3dc <__alt_data_end+0xf800d3dc>
1000d940:	0029883a 	mov	r20,zero
1000d944:	003ebe06 	br	1000d440 <__alt_data_end+0xf800d440>
1000d948:	0039883a 	mov	fp,zero
1000d94c:	003feb06 	br	1000d8fc <__alt_data_end+0xf800d8fc>
1000d950:	00c00044 	movi	r3,1
1000d954:	0029883a 	mov	r20,zero
1000d958:	d8c00015 	stw	r3,0(sp)
1000d95c:	003eb806 	br	1000d440 <__alt_data_end+0xf800d440>
1000d960:	07000044 	movi	fp,1
1000d964:	003f5106 	br	1000d6ac <__alt_data_end+0xf800d6ac>
1000d968:	8027883a 	mov	r19,r16
1000d96c:	8009883a 	mov	r4,r16
1000d970:	07000044 	movi	fp,1
1000d974:	003ea306 	br	1000d404 <__alt_data_end+0xf800d404>
1000d978:	d8c00f17 	ldw	r3,60(sp)
1000d97c:	183f3b1e 	bne	r3,zero,1000d66c <__alt_data_end+0xf800d66c>
1000d980:	d8c00217 	ldw	r3,8(sp)
1000d984:	04001884 	movi	r16,98
1000d988:	18800015 	stw	r2,0(r3)
1000d98c:	00800044 	movi	r2,1
1000d990:	b0800415 	stw	r2,16(r22)
1000d994:	a8800015 	stw	r2,0(r21)
1000d998:	d8800e17 	ldw	r2,56(sp)
1000d99c:	15800015 	stw	r22,0(r2)
1000d9a0:	003eb106 	br	1000d468 <__alt_data_end+0xf800d468>
1000d9a4:	9821883a 	mov	r16,r19
1000d9a8:	d8000015 	stw	zero,0(sp)
1000d9ac:	003e9c06 	br	1000d420 <__alt_data_end+0xf800d420>
1000d9b0:	04000844 	movi	r16,33
1000d9b4:	003fac06 	br	1000d868 <__alt_data_end+0xf800d868>
1000d9b8:	07000084 	movi	fp,2
1000d9bc:	003fcf06 	br	1000d8fc <__alt_data_end+0xf800d8fc>
1000d9c0:	d8c00f17 	ldw	r3,60(sp)
1000d9c4:	00800044 	movi	r2,1
1000d9c8:	10c5c83a 	sub	r2,r2,r3
1000d9cc:	103fa526 	beq	r2,zero,1000d864 <__alt_data_end+0xf800d864>
1000d9d0:	003f5506 	br	1000d728 <__alt_data_end+0xf800d728>
1000d9d4:	80800043 	ldbu	r2,1(r16)
1000d9d8:	81000044 	addi	r4,r16,1
1000d9dc:	2021883a 	mov	r16,r4
1000d9e0:	9087883a 	add	r3,r18,r2
1000d9e4:	18c00003 	ldbu	r3,0(r3)
1000d9e8:	183e9026 	beq	r3,zero,1000d42c <__alt_data_end+0xf800d42c>
1000d9ec:	84000044 	addi	r16,r16,1
1000d9f0:	80800003 	ldbu	r2,0(r16)
1000d9f4:	9087883a 	add	r3,r18,r2
1000d9f8:	18c00003 	ldbu	r3,0(r3)
1000d9fc:	183ffb1e 	bne	r3,zero,1000d9ec <__alt_data_end+0xf800d9ec>
1000da00:	003e8a06 	br	1000d42c <__alt_data_end+0xf800d42c>
1000da04:	a5ff191e 	bne	r20,r23,1000d66c <__alt_data_end+0xf800d66c>
1000da08:	1dffdd0e 	bge	r3,r23,1000d980 <__alt_data_end+0xf800d980>
1000da0c:	b009883a 	mov	r4,r22
1000da10:	b97fffc4 	addi	r5,r23,-1
1000da14:	000995c0 	call	1000995c <__any_on>
1000da18:	103f1426 	beq	r2,zero,1000d66c <__alt_data_end+0xf800d66c>
1000da1c:	88800117 	ldw	r2,4(r17)
1000da20:	003fd706 	br	1000d980 <__alt_data_end+0xf800d980>
1000da24:	d8c00f17 	ldw	r3,60(sp)
1000da28:	183f1026 	beq	r3,zero,1000d66c <__alt_data_end+0xf800d66c>
1000da2c:	003fd406 	br	1000d980 <__alt_data_end+0xf800d980>
1000da30:	10800044 	addi	r2,r2,1
1000da34:	a8800015 	stw	r2,0(r21)
1000da38:	003f5106 	br	1000d780 <__alt_data_end+0xf800d780>
1000da3c:	88800017 	ldw	r2,0(r17)
1000da40:	10bfffc4 	addi	r2,r2,-1
1000da44:	15c01426 	beq	r2,r23,1000da98 <__gethex+0x740>
1000da48:	04000884 	movi	r16,34
1000da4c:	003f8606 	br	1000d868 <__alt_data_end+0xf800d868>
1000da50:	b1400117 	ldw	r5,4(r22)
1000da54:	d9000117 	ldw	r4,4(sp)
1000da58:	29400044 	addi	r5,r5,1
1000da5c:	00089900 	call	10008990 <_Balloc>
1000da60:	b1800417 	ldw	r6,16(r22)
1000da64:	b1400304 	addi	r5,r22,12
1000da68:	11000304 	addi	r4,r2,12
1000da6c:	31800084 	addi	r6,r6,2
1000da70:	318d883a 	add	r6,r6,r6
1000da74:	318d883a 	add	r6,r6,r6
1000da78:	102b883a 	mov	r21,r2
1000da7c:	00085e80 	call	100085e8 <memcpy>
1000da80:	d9000117 	ldw	r4,4(sp)
1000da84:	b00b883a 	mov	r5,r22
1000da88:	a82d883a 	mov	r22,r21
1000da8c:	0008a380 	call	10008a38 <_Bfree>
1000da90:	a8800417 	ldw	r2,16(r21)
1000da94:	003f3206 	br	1000d760 <__alt_data_end+0xf800d760>
1000da98:	b805d17a 	srai	r2,r23,5
1000da9c:	04000044 	movi	r16,1
1000daa0:	bdc007cc 	andi	r23,r23,31
1000daa4:	10800144 	addi	r2,r2,5
1000daa8:	1085883a 	add	r2,r2,r2
1000daac:	1085883a 	add	r2,r2,r2
1000dab0:	b085883a 	add	r2,r22,r2
1000dab4:	10800017 	ldw	r2,0(r2)
1000dab8:	85e0983a 	sll	r16,r16,r23
1000dabc:	80a0703a 	and	r16,r16,r2
1000dac0:	8020c03a 	cmpne	r16,r16,zero
1000dac4:	00800884 	movi	r2,34
1000dac8:	1421c83a 	sub	r16,r2,r16
1000dacc:	003f6606 	br	1000d868 <__alt_data_end+0xf800d868>

1000dad0 <__hexnan>:
1000dad0:	defff604 	addi	sp,sp,-40
1000dad4:	dc000315 	stw	r16,12(sp)
1000dad8:	04040074 	movhi	r16,4097
1000dadc:	841ab704 	addi	r16,r16,27356
1000dae0:	80800c03 	ldbu	r2,48(r16)
1000dae4:	dfc00915 	stw	ra,36(sp)
1000dae8:	dd400815 	stw	r21,32(sp)
1000daec:	dd000715 	stw	r20,28(sp)
1000daf0:	dcc00615 	stw	r19,24(sp)
1000daf4:	dc800515 	stw	r18,20(sp)
1000daf8:	dc400415 	stw	r17,16(sp)
1000dafc:	10006c26 	beq	r2,zero,1000dcb0 <__hexnan+0x1e0>
1000db00:	2d000017 	ldw	r20,0(r5)
1000db04:	a025d17a 	srai	r18,r20,5
1000db08:	a50007cc 	andi	r20,r20,31
1000db0c:	94a5883a 	add	r18,r18,r18
1000db10:	94a5883a 	add	r18,r18,r18
1000db14:	34a5883a 	add	r18,r6,r18
1000db18:	a0000126 	beq	r20,zero,1000db20 <__hexnan+0x50>
1000db1c:	94800104 	addi	r18,r18,4
1000db20:	20c00017 	ldw	r3,0(r4)
1000db24:	903fff15 	stw	zero,-4(r18)
1000db28:	947fff04 	addi	r17,r18,-4
1000db2c:	18800043 	ldbu	r2,1(r3)
1000db30:	8817883a 	mov	r11,r17
1000db34:	880b883a 	mov	r5,r17
1000db38:	0011883a 	mov	r8,zero
1000db3c:	001b883a 	mov	r13,zero
1000db40:	0015883a 	mov	r10,zero
1000db44:	03c00204 	movi	r15,8
1000db48:	03800804 	movi	r14,32
1000db4c:	04c001c4 	movi	r19,7
1000db50:	10001b26 	beq	r2,zero,1000dbc0 <__hexnan+0xf0>
1000db54:	808f883a 	add	r7,r16,r2
1000db58:	39c00003 	ldbu	r7,0(r7)
1000db5c:	3a403fcc 	andi	r9,r7,255
1000db60:	4800301e 	bne	r9,zero,1000dc24 <__hexnan+0x154>
1000db64:	70804636 	bltu	r14,r2,1000dc80 <__hexnan+0x1b0>
1000db68:	6a80120e 	bge	r13,r10,1000dbb4 <__hexnan+0xe4>
1000db6c:	2ac00f2e 	bgeu	r5,r11,1000dbac <__hexnan+0xdc>
1000db70:	9a000e16 	blt	r19,r8,1000dbac <__hexnan+0xdc>
1000db74:	7a11c83a 	sub	r8,r15,r8
1000db78:	4211883a 	add	r8,r8,r8
1000db7c:	29c00017 	ldw	r7,0(r5)
1000db80:	4211883a 	add	r8,r8,r8
1000db84:	722bc83a 	sub	r21,r14,r8
1000db88:	2805883a 	mov	r2,r5
1000db8c:	12400117 	ldw	r9,4(r2)
1000db90:	10800104 	addi	r2,r2,4
1000db94:	4d58983a 	sll	r12,r9,r21
1000db98:	3b18b03a 	or	r12,r7,r12
1000db9c:	4a0ed83a 	srl	r7,r9,r8
1000dba0:	133fff15 	stw	r12,-4(r2)
1000dba4:	11c00015 	stw	r7,0(r2)
1000dba8:	12fff836 	bltu	r2,r11,1000db8c <__alt_data_end+0xf800db8c>
1000dbac:	31402d36 	bltu	r6,r5,1000dc64 <__hexnan+0x194>
1000dbb0:	02000204 	movi	r8,8
1000dbb4:	18c00044 	addi	r3,r3,1
1000dbb8:	18800043 	ldbu	r2,1(r3)
1000dbbc:	103fe51e 	bne	r2,zero,1000db54 <__alt_data_end+0xf800db54>
1000dbc0:	50003126 	beq	r10,zero,1000dc88 <__hexnan+0x1b8>
1000dbc4:	2ac0022e 	bgeu	r5,r11,1000dbd0 <__hexnan+0x100>
1000dbc8:	008001c4 	movi	r2,7
1000dbcc:	1200520e 	bge	r2,r8,1000dd18 <__hexnan+0x248>
1000dbd0:	31403f2e 	bgeu	r6,r5,1000dcd0 <__hexnan+0x200>
1000dbd4:	3005883a 	mov	r2,r6
1000dbd8:	28c00017 	ldw	r3,0(r5)
1000dbdc:	10800104 	addi	r2,r2,4
1000dbe0:	29400104 	addi	r5,r5,4
1000dbe4:	10ffff15 	stw	r3,-4(r2)
1000dbe8:	897ffb2e 	bgeu	r17,r5,1000dbd8 <__alt_data_end+0xf800dbd8>
1000dbec:	10000015 	stw	zero,0(r2)
1000dbf0:	10800104 	addi	r2,r2,4
1000dbf4:	88bffd2e 	bgeu	r17,r2,1000dbec <__alt_data_end+0xf800dbec>
1000dbf8:	90bfff17 	ldw	r2,-4(r18)
1000dbfc:	1000071e 	bne	r2,zero,1000dc1c <__hexnan+0x14c>
1000dc00:	34403c26 	beq	r6,r17,1000dcf4 <__hexnan+0x224>
1000dc04:	8805883a 	mov	r2,r17
1000dc08:	00000106 	br	1000dc10 <__hexnan+0x140>
1000dc0c:	30803a26 	beq	r6,r2,1000dcf8 <__hexnan+0x228>
1000dc10:	10bfff04 	addi	r2,r2,-4
1000dc14:	10c00017 	ldw	r3,0(r2)
1000dc18:	183ffc26 	beq	r3,zero,1000dc0c <__alt_data_end+0xf800dc0c>
1000dc1c:	00800144 	movi	r2,5
1000dc20:	00001a06 	br	1000dc8c <__hexnan+0x1bc>
1000dc24:	42000044 	addi	r8,r8,1
1000dc28:	52800044 	addi	r10,r10,1
1000dc2c:	7a000716 	blt	r15,r8,1000dc4c <__hexnan+0x17c>
1000dc30:	28800017 	ldw	r2,0(r5)
1000dc34:	1004913a 	slli	r2,r2,4
1000dc38:	39c003cc 	andi	r7,r7,15
1000dc3c:	11ceb03a 	or	r7,r2,r7
1000dc40:	29c00015 	stw	r7,0(r5)
1000dc44:	18c00044 	addi	r3,r3,1
1000dc48:	003fdb06 	br	1000dbb8 <__alt_data_end+0xf800dbb8>
1000dc4c:	317fd92e 	bgeu	r6,r5,1000dbb4 <__alt_data_end+0xf800dbb4>
1000dc50:	283fff15 	stw	zero,-4(r5)
1000dc54:	0005883a 	mov	r2,zero
1000dc58:	297fff04 	addi	r5,r5,-4
1000dc5c:	02000044 	movi	r8,1
1000dc60:	003ff506 	br	1000dc38 <__alt_data_end+0xf800dc38>
1000dc64:	283fff15 	stw	zero,-4(r5)
1000dc68:	297fff04 	addi	r5,r5,-4
1000dc6c:	501b883a 	mov	r13,r10
1000dc70:	2817883a 	mov	r11,r5
1000dc74:	0011883a 	mov	r8,zero
1000dc78:	18c00044 	addi	r3,r3,1
1000dc7c:	003fce06 	br	1000dbb8 <__alt_data_end+0xf800dbb8>
1000dc80:	01c00a44 	movi	r7,41
1000dc84:	11c02026 	beq	r2,r7,1000dd08 <__hexnan+0x238>
1000dc88:	00800104 	movi	r2,4
1000dc8c:	dfc00917 	ldw	ra,36(sp)
1000dc90:	dd400817 	ldw	r21,32(sp)
1000dc94:	dd000717 	ldw	r20,28(sp)
1000dc98:	dcc00617 	ldw	r19,24(sp)
1000dc9c:	dc800517 	ldw	r18,20(sp)
1000dca0:	dc400417 	ldw	r17,16(sp)
1000dca4:	dc000317 	ldw	r16,12(sp)
1000dca8:	dec00a04 	addi	sp,sp,40
1000dcac:	f800283a 	ret
1000dcb0:	d9000015 	stw	r4,0(sp)
1000dcb4:	d9400115 	stw	r5,4(sp)
1000dcb8:	d9800215 	stw	r6,8(sp)
1000dcbc:	000d2c80 	call	1000d2c8 <__hexdig_init>
1000dcc0:	d9800217 	ldw	r6,8(sp)
1000dcc4:	d9400117 	ldw	r5,4(sp)
1000dcc8:	d9000017 	ldw	r4,0(sp)
1000dccc:	003f8c06 	br	1000db00 <__alt_data_end+0xf800db00>
1000dcd0:	a03fc926 	beq	r20,zero,1000dbf8 <__alt_data_end+0xf800dbf8>
1000dcd4:	00800804 	movi	r2,32
1000dcd8:	1529c83a 	sub	r20,r2,r20
1000dcdc:	00ffffc4 	movi	r3,-1
1000dce0:	90bfff17 	ldw	r2,-4(r18)
1000dce4:	1d06d83a 	srl	r3,r3,r20
1000dce8:	1884703a 	and	r2,r3,r2
1000dcec:	90bfff15 	stw	r2,-4(r18)
1000dcf0:	003fc206 	br	1000dbfc <__alt_data_end+0xf800dbfc>
1000dcf4:	3005883a 	mov	r2,r6
1000dcf8:	00c00044 	movi	r3,1
1000dcfc:	10c00015 	stw	r3,0(r2)
1000dd00:	00800144 	movi	r2,5
1000dd04:	003fe106 	br	1000dc8c <__alt_data_end+0xf800dc8c>
1000dd08:	503fdf26 	beq	r10,zero,1000dc88 <__alt_data_end+0xf800dc88>
1000dd0c:	18c00084 	addi	r3,r3,2
1000dd10:	20c00015 	stw	r3,0(r4)
1000dd14:	003fab06 	br	1000dbc4 <__alt_data_end+0xf800dbc4>
1000dd18:	00800204 	movi	r2,8
1000dd1c:	1211c83a 	sub	r8,r2,r8
1000dd20:	4211883a 	add	r8,r8,r8
1000dd24:	28c00017 	ldw	r3,0(r5)
1000dd28:	4211883a 	add	r8,r8,r8
1000dd2c:	02400804 	movi	r9,32
1000dd30:	4a13c83a 	sub	r9,r9,r8
1000dd34:	2805883a 	mov	r2,r5
1000dd38:	11000117 	ldw	r4,4(r2)
1000dd3c:	10800104 	addi	r2,r2,4
1000dd40:	224e983a 	sll	r7,r4,r9
1000dd44:	19ceb03a 	or	r7,r3,r7
1000dd48:	2206d83a 	srl	r3,r4,r8
1000dd4c:	11ffff15 	stw	r7,-4(r2)
1000dd50:	10c00015 	stw	r3,0(r2)
1000dd54:	12fff836 	bltu	r2,r11,1000dd38 <__alt_data_end+0xf800dd38>
1000dd58:	003f9d06 	br	1000dbd0 <__alt_data_end+0xf800dbd0>

1000dd5c <_isatty_r>:
1000dd5c:	defffd04 	addi	sp,sp,-12
1000dd60:	dc400115 	stw	r17,4(sp)
1000dd64:	dc000015 	stw	r16,0(sp)
1000dd68:	2023883a 	mov	r17,r4
1000dd6c:	04040074 	movhi	r16,4097
1000dd70:	841aa604 	addi	r16,r16,27288
1000dd74:	2809883a 	mov	r4,r5
1000dd78:	dfc00215 	stw	ra,8(sp)
1000dd7c:	80000015 	stw	zero,0(r16)
1000dd80:	00106340 	call	10010634 <isatty>
1000dd84:	00ffffc4 	movi	r3,-1
1000dd88:	10c00526 	beq	r2,r3,1000dda0 <_isatty_r+0x44>
1000dd8c:	dfc00217 	ldw	ra,8(sp)
1000dd90:	dc400117 	ldw	r17,4(sp)
1000dd94:	dc000017 	ldw	r16,0(sp)
1000dd98:	dec00304 	addi	sp,sp,12
1000dd9c:	f800283a 	ret
1000dda0:	80c00017 	ldw	r3,0(r16)
1000dda4:	183ff926 	beq	r3,zero,1000dd8c <__alt_data_end+0xf800dd8c>
1000dda8:	88c00015 	stw	r3,0(r17)
1000ddac:	dfc00217 	ldw	ra,8(sp)
1000ddb0:	dc400117 	ldw	r17,4(sp)
1000ddb4:	dc000017 	ldw	r16,0(sp)
1000ddb8:	dec00304 	addi	sp,sp,12
1000ddbc:	f800283a 	ret

1000ddc0 <_lseek_r>:
1000ddc0:	defffd04 	addi	sp,sp,-12
1000ddc4:	dc400115 	stw	r17,4(sp)
1000ddc8:	dc000015 	stw	r16,0(sp)
1000ddcc:	2023883a 	mov	r17,r4
1000ddd0:	04040074 	movhi	r16,4097
1000ddd4:	841aa604 	addi	r16,r16,27288
1000ddd8:	2809883a 	mov	r4,r5
1000dddc:	300b883a 	mov	r5,r6
1000dde0:	380d883a 	mov	r6,r7
1000dde4:	dfc00215 	stw	ra,8(sp)
1000dde8:	80000015 	stw	zero,0(r16)
1000ddec:	00108140 	call	10010814 <lseek>
1000ddf0:	00ffffc4 	movi	r3,-1
1000ddf4:	10c00526 	beq	r2,r3,1000de0c <_lseek_r+0x4c>
1000ddf8:	dfc00217 	ldw	ra,8(sp)
1000ddfc:	dc400117 	ldw	r17,4(sp)
1000de00:	dc000017 	ldw	r16,0(sp)
1000de04:	dec00304 	addi	sp,sp,12
1000de08:	f800283a 	ret
1000de0c:	80c00017 	ldw	r3,0(r16)
1000de10:	183ff926 	beq	r3,zero,1000ddf8 <__alt_data_end+0xf800ddf8>
1000de14:	88c00015 	stw	r3,0(r17)
1000de18:	dfc00217 	ldw	ra,8(sp)
1000de1c:	dc400117 	ldw	r17,4(sp)
1000de20:	dc000017 	ldw	r16,0(sp)
1000de24:	dec00304 	addi	sp,sp,12
1000de28:	f800283a 	ret

1000de2c <_read_r>:
1000de2c:	defffd04 	addi	sp,sp,-12
1000de30:	dc400115 	stw	r17,4(sp)
1000de34:	dc000015 	stw	r16,0(sp)
1000de38:	2023883a 	mov	r17,r4
1000de3c:	04040074 	movhi	r16,4097
1000de40:	841aa604 	addi	r16,r16,27288
1000de44:	2809883a 	mov	r4,r5
1000de48:	300b883a 	mov	r5,r6
1000de4c:	380d883a 	mov	r6,r7
1000de50:	dfc00215 	stw	ra,8(sp)
1000de54:	80000015 	stw	zero,0(r16)
1000de58:	00109f00 	call	100109f0 <read>
1000de5c:	00ffffc4 	movi	r3,-1
1000de60:	10c00526 	beq	r2,r3,1000de78 <_read_r+0x4c>
1000de64:	dfc00217 	ldw	ra,8(sp)
1000de68:	dc400117 	ldw	r17,4(sp)
1000de6c:	dc000017 	ldw	r16,0(sp)
1000de70:	dec00304 	addi	sp,sp,12
1000de74:	f800283a 	ret
1000de78:	80c00017 	ldw	r3,0(r16)
1000de7c:	183ff926 	beq	r3,zero,1000de64 <__alt_data_end+0xf800de64>
1000de80:	88c00015 	stw	r3,0(r17)
1000de84:	dfc00217 	ldw	ra,8(sp)
1000de88:	dc400117 	ldw	r17,4(sp)
1000de8c:	dc000017 	ldw	r16,0(sp)
1000de90:	dec00304 	addi	sp,sp,12
1000de94:	f800283a 	ret

1000de98 <__muldi3>:
1000de98:	defff604 	addi	sp,sp,-40
1000de9c:	dd400515 	stw	r21,20(sp)
1000dea0:	dd000415 	stw	r20,16(sp)
1000dea4:	257fffcc 	andi	r21,r4,65535
1000dea8:	353fffcc 	andi	r20,r6,65535
1000deac:	dcc00315 	stw	r19,12(sp)
1000deb0:	3026d43a 	srli	r19,r6,16
1000deb4:	dd800615 	stw	r22,24(sp)
1000deb8:	dc800215 	stw	r18,8(sp)
1000debc:	dc400115 	stw	r17,4(sp)
1000dec0:	2024d43a 	srli	r18,r4,16
1000dec4:	2023883a 	mov	r17,r4
1000dec8:	282d883a 	mov	r22,r5
1000decc:	a009883a 	mov	r4,r20
1000ded0:	a80b883a 	mov	r5,r21
1000ded4:	dfc00915 	stw	ra,36(sp)
1000ded8:	df000815 	stw	fp,32(sp)
1000dedc:	ddc00715 	stw	r23,28(sp)
1000dee0:	3839883a 	mov	fp,r7
1000dee4:	dc000015 	stw	r16,0(sp)
1000dee8:	3021883a 	mov	r16,r6
1000deec:	000158c0 	call	1000158c <__mulsi3>
1000def0:	a80b883a 	mov	r5,r21
1000def4:	9809883a 	mov	r4,r19
1000def8:	102f883a 	mov	r23,r2
1000defc:	000158c0 	call	1000158c <__mulsi3>
1000df00:	a009883a 	mov	r4,r20
1000df04:	900b883a 	mov	r5,r18
1000df08:	102b883a 	mov	r21,r2
1000df0c:	000158c0 	call	1000158c <__mulsi3>
1000df10:	9809883a 	mov	r4,r19
1000df14:	900b883a 	mov	r5,r18
1000df18:	1029883a 	mov	r20,r2
1000df1c:	000158c0 	call	1000158c <__mulsi3>
1000df20:	1007883a 	mov	r3,r2
1000df24:	b804d43a 	srli	r2,r23,16
1000df28:	a549883a 	add	r4,r20,r21
1000df2c:	2089883a 	add	r4,r4,r2
1000df30:	2500022e 	bgeu	r4,r20,1000df3c <__muldi3+0xa4>
1000df34:	00800074 	movhi	r2,1
1000df38:	1887883a 	add	r3,r3,r2
1000df3c:	200cd43a 	srli	r6,r4,16
1000df40:	2004943a 	slli	r2,r4,16
1000df44:	e00b883a 	mov	r5,fp
1000df48:	8809883a 	mov	r4,r17
1000df4c:	bdffffcc 	andi	r23,r23,65535
1000df50:	19a3883a 	add	r17,r3,r6
1000df54:	15ef883a 	add	r23,r2,r23
1000df58:	000158c0 	call	1000158c <__mulsi3>
1000df5c:	8009883a 	mov	r4,r16
1000df60:	b00b883a 	mov	r5,r22
1000df64:	1025883a 	mov	r18,r2
1000df68:	000158c0 	call	1000158c <__mulsi3>
1000df6c:	9085883a 	add	r2,r18,r2
1000df70:	1447883a 	add	r3,r2,r17
1000df74:	b805883a 	mov	r2,r23
1000df78:	dfc00917 	ldw	ra,36(sp)
1000df7c:	df000817 	ldw	fp,32(sp)
1000df80:	ddc00717 	ldw	r23,28(sp)
1000df84:	dd800617 	ldw	r22,24(sp)
1000df88:	dd400517 	ldw	r21,20(sp)
1000df8c:	dd000417 	ldw	r20,16(sp)
1000df90:	dcc00317 	ldw	r19,12(sp)
1000df94:	dc800217 	ldw	r18,8(sp)
1000df98:	dc400117 	ldw	r17,4(sp)
1000df9c:	dc000017 	ldw	r16,0(sp)
1000dfa0:	dec00a04 	addi	sp,sp,40
1000dfa4:	f800283a 	ret

1000dfa8 <__fixunsdfsi>:
1000dfa8:	defffd04 	addi	sp,sp,-12
1000dfac:	000d883a 	mov	r6,zero
1000dfb0:	01d07834 	movhi	r7,16864
1000dfb4:	dc400115 	stw	r17,4(sp)
1000dfb8:	dc000015 	stw	r16,0(sp)
1000dfbc:	dfc00215 	stw	ra,8(sp)
1000dfc0:	2023883a 	mov	r17,r4
1000dfc4:	2821883a 	mov	r16,r5
1000dfc8:	000f7640 	call	1000f764 <__gedf2>
1000dfcc:	1000080e 	bge	r2,zero,1000dff0 <__fixunsdfsi+0x48>
1000dfd0:	8809883a 	mov	r4,r17
1000dfd4:	800b883a 	mov	r5,r16
1000dfd8:	000f9540 	call	1000f954 <__fixdfsi>
1000dfdc:	dfc00217 	ldw	ra,8(sp)
1000dfe0:	dc400117 	ldw	r17,4(sp)
1000dfe4:	dc000017 	ldw	r16,0(sp)
1000dfe8:	dec00304 	addi	sp,sp,12
1000dfec:	f800283a 	ret
1000dff0:	000d883a 	mov	r6,zero
1000dff4:	01d07834 	movhi	r7,16864
1000dff8:	8809883a 	mov	r4,r17
1000dffc:	800b883a 	mov	r5,r16
1000e000:	000f1500 	call	1000f150 <__subdf3>
1000e004:	180b883a 	mov	r5,r3
1000e008:	1009883a 	mov	r4,r2
1000e00c:	000f9540 	call	1000f954 <__fixdfsi>
1000e010:	00e00034 	movhi	r3,32768
1000e014:	10c5883a 	add	r2,r2,r3
1000e018:	dfc00217 	ldw	ra,8(sp)
1000e01c:	dc400117 	ldw	r17,4(sp)
1000e020:	dc000017 	ldw	r16,0(sp)
1000e024:	dec00304 	addi	sp,sp,12
1000e028:	f800283a 	ret

1000e02c <__udivdi3>:
1000e02c:	defff504 	addi	sp,sp,-44
1000e030:	dd000515 	stw	r20,20(sp)
1000e034:	dcc00415 	stw	r19,16(sp)
1000e038:	dc800315 	stw	r18,12(sp)
1000e03c:	dc400215 	stw	r17,8(sp)
1000e040:	dc000115 	stw	r16,4(sp)
1000e044:	dfc00a15 	stw	ra,40(sp)
1000e048:	df000915 	stw	fp,36(sp)
1000e04c:	ddc00815 	stw	r23,32(sp)
1000e050:	dd800715 	stw	r22,28(sp)
1000e054:	dd400615 	stw	r21,24(sp)
1000e058:	2025883a 	mov	r18,r4
1000e05c:	2823883a 	mov	r17,r5
1000e060:	3021883a 	mov	r16,r6
1000e064:	2027883a 	mov	r19,r4
1000e068:	2829883a 	mov	r20,r5
1000e06c:	3800451e 	bne	r7,zero,1000e184 <__udivdi3+0x158>
1000e070:	2980652e 	bgeu	r5,r6,1000e208 <__udivdi3+0x1dc>
1000e074:	00bfffd4 	movui	r2,65535
1000e078:	1180b436 	bltu	r2,r6,1000e34c <__udivdi3+0x320>
1000e07c:	00803fc4 	movi	r2,255
1000e080:	11816636 	bltu	r2,r6,1000e61c <__udivdi3+0x5f0>
1000e084:	0005883a 	mov	r2,zero
1000e088:	0007883a 	mov	r3,zero
1000e08c:	3084d83a 	srl	r2,r6,r2
1000e090:	01040074 	movhi	r4,4097
1000e094:	210bfd04 	addi	r4,r4,12276
1000e098:	2085883a 	add	r2,r4,r2
1000e09c:	10800003 	ldbu	r2,0(r2)
1000e0a0:	10c7883a 	add	r3,r2,r3
1000e0a4:	00800804 	movi	r2,32
1000e0a8:	10c5c83a 	sub	r2,r2,r3
1000e0ac:	10000526 	beq	r2,zero,1000e0c4 <__udivdi3+0x98>
1000e0b0:	88a2983a 	sll	r17,r17,r2
1000e0b4:	90c6d83a 	srl	r3,r18,r3
1000e0b8:	30a0983a 	sll	r16,r6,r2
1000e0bc:	90a6983a 	sll	r19,r18,r2
1000e0c0:	88e8b03a 	or	r20,r17,r3
1000e0c4:	8022d43a 	srli	r17,r16,16
1000e0c8:	a009883a 	mov	r4,r20
1000e0cc:	857fffcc 	andi	r21,r16,65535
1000e0d0:	880b883a 	mov	r5,r17
1000e0d4:	00015840 	call	10001584 <__umodsi3>
1000e0d8:	a009883a 	mov	r4,r20
1000e0dc:	880b883a 	mov	r5,r17
1000e0e0:	102d883a 	mov	r22,r2
1000e0e4:	000157c0 	call	1000157c <__udivsi3>
1000e0e8:	1009883a 	mov	r4,r2
1000e0ec:	a80b883a 	mov	r5,r21
1000e0f0:	1025883a 	mov	r18,r2
1000e0f4:	000158c0 	call	1000158c <__mulsi3>
1000e0f8:	1009883a 	mov	r4,r2
1000e0fc:	b006943a 	slli	r3,r22,16
1000e100:	9804d43a 	srli	r2,r19,16
1000e104:	1886b03a 	or	r3,r3,r2
1000e108:	1900052e 	bgeu	r3,r4,1000e120 <__udivdi3+0xf4>
1000e10c:	1c07883a 	add	r3,r3,r16
1000e110:	90bfffc4 	addi	r2,r18,-1
1000e114:	1c000136 	bltu	r3,r16,1000e11c <__udivdi3+0xf0>
1000e118:	19015536 	bltu	r3,r4,1000e670 <__udivdi3+0x644>
1000e11c:	1025883a 	mov	r18,r2
1000e120:	1929c83a 	sub	r20,r3,r4
1000e124:	880b883a 	mov	r5,r17
1000e128:	a009883a 	mov	r4,r20
1000e12c:	00015840 	call	10001584 <__umodsi3>
1000e130:	102d883a 	mov	r22,r2
1000e134:	880b883a 	mov	r5,r17
1000e138:	a009883a 	mov	r4,r20
1000e13c:	b02c943a 	slli	r22,r22,16
1000e140:	000157c0 	call	1000157c <__udivsi3>
1000e144:	1009883a 	mov	r4,r2
1000e148:	a80b883a 	mov	r5,r21
1000e14c:	9cffffcc 	andi	r19,r19,65535
1000e150:	1023883a 	mov	r17,r2
1000e154:	b4e6b03a 	or	r19,r22,r19
1000e158:	000158c0 	call	1000158c <__mulsi3>
1000e15c:	9880052e 	bgeu	r19,r2,1000e174 <__udivdi3+0x148>
1000e160:	9c27883a 	add	r19,r19,r16
1000e164:	88ffffc4 	addi	r3,r17,-1
1000e168:	9c011436 	bltu	r19,r16,1000e5bc <__udivdi3+0x590>
1000e16c:	9881132e 	bgeu	r19,r2,1000e5bc <__udivdi3+0x590>
1000e170:	8c7fff84 	addi	r17,r17,-2
1000e174:	9004943a 	slli	r2,r18,16
1000e178:	0007883a 	mov	r3,zero
1000e17c:	8884b03a 	or	r2,r17,r2
1000e180:	00001506 	br	1000e1d8 <__udivdi3+0x1ac>
1000e184:	29c06a36 	bltu	r5,r7,1000e330 <__udivdi3+0x304>
1000e188:	00bfffd4 	movui	r2,65535
1000e18c:	11c06a2e 	bgeu	r2,r7,1000e338 <__udivdi3+0x30c>
1000e190:	00804034 	movhi	r2,256
1000e194:	10bfffc4 	addi	r2,r2,-1
1000e198:	11c11436 	bltu	r2,r7,1000e5ec <__udivdi3+0x5c0>
1000e19c:	00c00404 	movi	r3,16
1000e1a0:	180b883a 	mov	r5,r3
1000e1a4:	38c6d83a 	srl	r3,r7,r3
1000e1a8:	01040074 	movhi	r4,4097
1000e1ac:	210bfd04 	addi	r4,r4,12276
1000e1b0:	04000804 	movi	r16,32
1000e1b4:	20c7883a 	add	r3,r4,r3
1000e1b8:	18800003 	ldbu	r2,0(r3)
1000e1bc:	1145883a 	add	r2,r2,r5
1000e1c0:	80a1c83a 	sub	r16,r16,r2
1000e1c4:	80006e1e 	bne	r16,zero,1000e380 <__udivdi3+0x354>
1000e1c8:	0007883a 	mov	r3,zero
1000e1cc:	3c406a36 	bltu	r7,r17,1000e378 <__udivdi3+0x34c>
1000e1d0:	9180692e 	bgeu	r18,r6,1000e378 <__udivdi3+0x34c>
1000e1d4:	0005883a 	mov	r2,zero
1000e1d8:	dfc00a17 	ldw	ra,40(sp)
1000e1dc:	df000917 	ldw	fp,36(sp)
1000e1e0:	ddc00817 	ldw	r23,32(sp)
1000e1e4:	dd800717 	ldw	r22,28(sp)
1000e1e8:	dd400617 	ldw	r21,24(sp)
1000e1ec:	dd000517 	ldw	r20,20(sp)
1000e1f0:	dcc00417 	ldw	r19,16(sp)
1000e1f4:	dc800317 	ldw	r18,12(sp)
1000e1f8:	dc400217 	ldw	r17,8(sp)
1000e1fc:	dc000117 	ldw	r16,4(sp)
1000e200:	dec00b04 	addi	sp,sp,44
1000e204:	f800283a 	ret
1000e208:	3000041e 	bne	r6,zero,1000e21c <__udivdi3+0x1f0>
1000e20c:	01000044 	movi	r4,1
1000e210:	000b883a 	mov	r5,zero
1000e214:	000157c0 	call	1000157c <__udivsi3>
1000e218:	1021883a 	mov	r16,r2
1000e21c:	00bfffd4 	movui	r2,65535
1000e220:	1400502e 	bgeu	r2,r16,1000e364 <__udivdi3+0x338>
1000e224:	00804034 	movhi	r2,256
1000e228:	10bfffc4 	addi	r2,r2,-1
1000e22c:	1400f536 	bltu	r2,r16,1000e604 <__udivdi3+0x5d8>
1000e230:	00800404 	movi	r2,16
1000e234:	1007883a 	mov	r3,r2
1000e238:	8084d83a 	srl	r2,r16,r2
1000e23c:	01040074 	movhi	r4,4097
1000e240:	210bfd04 	addi	r4,r4,12276
1000e244:	2085883a 	add	r2,r4,r2
1000e248:	10800003 	ldbu	r2,0(r2)
1000e24c:	10c7883a 	add	r3,r2,r3
1000e250:	00800804 	movi	r2,32
1000e254:	10c5c83a 	sub	r2,r2,r3
1000e258:	1000a01e 	bne	r2,zero,1000e4dc <__udivdi3+0x4b0>
1000e25c:	8028d43a 	srli	r20,r16,16
1000e260:	8c23c83a 	sub	r17,r17,r16
1000e264:	857fffcc 	andi	r21,r16,65535
1000e268:	00c00044 	movi	r3,1
1000e26c:	8809883a 	mov	r4,r17
1000e270:	a00b883a 	mov	r5,r20
1000e274:	d8c00015 	stw	r3,0(sp)
1000e278:	00015840 	call	10001584 <__umodsi3>
1000e27c:	8809883a 	mov	r4,r17
1000e280:	a00b883a 	mov	r5,r20
1000e284:	102d883a 	mov	r22,r2
1000e288:	000157c0 	call	1000157c <__udivsi3>
1000e28c:	1009883a 	mov	r4,r2
1000e290:	a80b883a 	mov	r5,r21
1000e294:	1025883a 	mov	r18,r2
1000e298:	000158c0 	call	1000158c <__mulsi3>
1000e29c:	1009883a 	mov	r4,r2
1000e2a0:	b00c943a 	slli	r6,r22,16
1000e2a4:	9804d43a 	srli	r2,r19,16
1000e2a8:	d8c00017 	ldw	r3,0(sp)
1000e2ac:	308cb03a 	or	r6,r6,r2
1000e2b0:	3100052e 	bgeu	r6,r4,1000e2c8 <__udivdi3+0x29c>
1000e2b4:	340d883a 	add	r6,r6,r16
1000e2b8:	90bfffc4 	addi	r2,r18,-1
1000e2bc:	34000136 	bltu	r6,r16,1000e2c4 <__udivdi3+0x298>
1000e2c0:	3100e836 	bltu	r6,r4,1000e664 <__udivdi3+0x638>
1000e2c4:	1025883a 	mov	r18,r2
1000e2c8:	3123c83a 	sub	r17,r6,r4
1000e2cc:	8809883a 	mov	r4,r17
1000e2d0:	a00b883a 	mov	r5,r20
1000e2d4:	d8c00015 	stw	r3,0(sp)
1000e2d8:	00015840 	call	10001584 <__umodsi3>
1000e2dc:	102d883a 	mov	r22,r2
1000e2e0:	8809883a 	mov	r4,r17
1000e2e4:	a00b883a 	mov	r5,r20
1000e2e8:	b02c943a 	slli	r22,r22,16
1000e2ec:	000157c0 	call	1000157c <__udivsi3>
1000e2f0:	1009883a 	mov	r4,r2
1000e2f4:	a80b883a 	mov	r5,r21
1000e2f8:	9cffffcc 	andi	r19,r19,65535
1000e2fc:	1023883a 	mov	r17,r2
1000e300:	b4e6b03a 	or	r19,r22,r19
1000e304:	000158c0 	call	1000158c <__mulsi3>
1000e308:	d8c00017 	ldw	r3,0(sp)
1000e30c:	9880052e 	bgeu	r19,r2,1000e324 <__udivdi3+0x2f8>
1000e310:	9c27883a 	add	r19,r19,r16
1000e314:	893fffc4 	addi	r4,r17,-1
1000e318:	9c00aa36 	bltu	r19,r16,1000e5c4 <__udivdi3+0x598>
1000e31c:	9880a92e 	bgeu	r19,r2,1000e5c4 <__udivdi3+0x598>
1000e320:	8c7fff84 	addi	r17,r17,-2
1000e324:	9004943a 	slli	r2,r18,16
1000e328:	8884b03a 	or	r2,r17,r2
1000e32c:	003faa06 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e330:	0007883a 	mov	r3,zero
1000e334:	003fa706 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e338:	00803fc4 	movi	r2,255
1000e33c:	11c0ae36 	bltu	r2,r7,1000e5f8 <__udivdi3+0x5cc>
1000e340:	0007883a 	mov	r3,zero
1000e344:	000b883a 	mov	r5,zero
1000e348:	003f9606 	br	1000e1a4 <__alt_data_end+0xf800e1a4>
1000e34c:	00804034 	movhi	r2,256
1000e350:	10bfffc4 	addi	r2,r2,-1
1000e354:	1180ae36 	bltu	r2,r6,1000e610 <__udivdi3+0x5e4>
1000e358:	00800404 	movi	r2,16
1000e35c:	1007883a 	mov	r3,r2
1000e360:	003f4a06 	br	1000e08c <__alt_data_end+0xf800e08c>
1000e364:	00803fc4 	movi	r2,255
1000e368:	1400af36 	bltu	r2,r16,1000e628 <__udivdi3+0x5fc>
1000e36c:	0005883a 	mov	r2,zero
1000e370:	0007883a 	mov	r3,zero
1000e374:	003fb006 	br	1000e238 <__alt_data_end+0xf800e238>
1000e378:	00800044 	movi	r2,1
1000e37c:	003f9606 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e380:	3c0e983a 	sll	r7,r7,r16
1000e384:	3086d83a 	srl	r3,r6,r2
1000e388:	88aed83a 	srl	r23,r17,r2
1000e38c:	9084d83a 	srl	r2,r18,r2
1000e390:	38e6b03a 	or	r19,r7,r3
1000e394:	9828d43a 	srli	r20,r19,16
1000e398:	8c22983a 	sll	r17,r17,r16
1000e39c:	b809883a 	mov	r4,r23
1000e3a0:	a00b883a 	mov	r5,r20
1000e3a4:	342a983a 	sll	r21,r6,r16
1000e3a8:	88a2b03a 	or	r17,r17,r2
1000e3ac:	00015840 	call	10001584 <__umodsi3>
1000e3b0:	b809883a 	mov	r4,r23
1000e3b4:	a00b883a 	mov	r5,r20
1000e3b8:	1039883a 	mov	fp,r2
1000e3bc:	9dbfffcc 	andi	r22,r19,65535
1000e3c0:	000157c0 	call	1000157c <__udivsi3>
1000e3c4:	1009883a 	mov	r4,r2
1000e3c8:	b00b883a 	mov	r5,r22
1000e3cc:	102f883a 	mov	r23,r2
1000e3d0:	000158c0 	call	1000158c <__mulsi3>
1000e3d4:	1009883a 	mov	r4,r2
1000e3d8:	e00e943a 	slli	r7,fp,16
1000e3dc:	8804d43a 	srli	r2,r17,16
1000e3e0:	388eb03a 	or	r7,r7,r2
1000e3e4:	3900042e 	bgeu	r7,r4,1000e3f8 <__udivdi3+0x3cc>
1000e3e8:	3ccf883a 	add	r7,r7,r19
1000e3ec:	b8bfffc4 	addi	r2,r23,-1
1000e3f0:	3cc0942e 	bgeu	r7,r19,1000e644 <__udivdi3+0x618>
1000e3f4:	102f883a 	mov	r23,r2
1000e3f8:	3939c83a 	sub	fp,r7,r4
1000e3fc:	a00b883a 	mov	r5,r20
1000e400:	e009883a 	mov	r4,fp
1000e404:	00015840 	call	10001584 <__umodsi3>
1000e408:	a00b883a 	mov	r5,r20
1000e40c:	e009883a 	mov	r4,fp
1000e410:	d8800015 	stw	r2,0(sp)
1000e414:	000157c0 	call	1000157c <__udivsi3>
1000e418:	1009883a 	mov	r4,r2
1000e41c:	b00b883a 	mov	r5,r22
1000e420:	1029883a 	mov	r20,r2
1000e424:	000158c0 	call	1000158c <__mulsi3>
1000e428:	d8c00017 	ldw	r3,0(sp)
1000e42c:	8c7fffcc 	andi	r17,r17,65535
1000e430:	1806943a 	slli	r3,r3,16
1000e434:	1c46b03a 	or	r3,r3,r17
1000e438:	1880042e 	bgeu	r3,r2,1000e44c <__udivdi3+0x420>
1000e43c:	1cc7883a 	add	r3,r3,r19
1000e440:	a13fffc4 	addi	r4,r20,-1
1000e444:	1cc07b2e 	bgeu	r3,r19,1000e634 <__udivdi3+0x608>
1000e448:	2029883a 	mov	r20,r4
1000e44c:	b82e943a 	slli	r23,r23,16
1000e450:	a822d43a 	srli	r17,r21,16
1000e454:	ad7fffcc 	andi	r21,r21,65535
1000e458:	a5e8b03a 	or	r20,r20,r23
1000e45c:	a5bfffcc 	andi	r22,r20,65535
1000e460:	b009883a 	mov	r4,r22
1000e464:	a80b883a 	mov	r5,r21
1000e468:	18afc83a 	sub	r23,r3,r2
1000e46c:	a026d43a 	srli	r19,r20,16
1000e470:	000158c0 	call	1000158c <__mulsi3>
1000e474:	b009883a 	mov	r4,r22
1000e478:	880b883a 	mov	r5,r17
1000e47c:	1039883a 	mov	fp,r2
1000e480:	000158c0 	call	1000158c <__mulsi3>
1000e484:	a80b883a 	mov	r5,r21
1000e488:	9809883a 	mov	r4,r19
1000e48c:	102d883a 	mov	r22,r2
1000e490:	000158c0 	call	1000158c <__mulsi3>
1000e494:	9809883a 	mov	r4,r19
1000e498:	880b883a 	mov	r5,r17
1000e49c:	102b883a 	mov	r21,r2
1000e4a0:	000158c0 	call	1000158c <__mulsi3>
1000e4a4:	100b883a 	mov	r5,r2
1000e4a8:	e004d43a 	srli	r2,fp,16
1000e4ac:	ad89883a 	add	r4,r21,r22
1000e4b0:	2089883a 	add	r4,r4,r2
1000e4b4:	2540022e 	bgeu	r4,r21,1000e4c0 <__udivdi3+0x494>
1000e4b8:	00800074 	movhi	r2,1
1000e4bc:	288b883a 	add	r5,r5,r2
1000e4c0:	2004d43a 	srli	r2,r4,16
1000e4c4:	288b883a 	add	r5,r5,r2
1000e4c8:	b9404536 	bltu	r23,r5,1000e5e0 <__udivdi3+0x5b4>
1000e4cc:	b9403f26 	beq	r23,r5,1000e5cc <__udivdi3+0x5a0>
1000e4d0:	a005883a 	mov	r2,r20
1000e4d4:	0007883a 	mov	r3,zero
1000e4d8:	003f3f06 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e4dc:	80a0983a 	sll	r16,r16,r2
1000e4e0:	88eed83a 	srl	r23,r17,r3
1000e4e4:	90c6d83a 	srl	r3,r18,r3
1000e4e8:	8028d43a 	srli	r20,r16,16
1000e4ec:	88a2983a 	sll	r17,r17,r2
1000e4f0:	b809883a 	mov	r4,r23
1000e4f4:	a00b883a 	mov	r5,r20
1000e4f8:	88ecb03a 	or	r22,r17,r3
1000e4fc:	90a6983a 	sll	r19,r18,r2
1000e500:	00015840 	call	10001584 <__umodsi3>
1000e504:	b809883a 	mov	r4,r23
1000e508:	a00b883a 	mov	r5,r20
1000e50c:	1023883a 	mov	r17,r2
1000e510:	857fffcc 	andi	r21,r16,65535
1000e514:	000157c0 	call	1000157c <__udivsi3>
1000e518:	1009883a 	mov	r4,r2
1000e51c:	a80b883a 	mov	r5,r21
1000e520:	102f883a 	mov	r23,r2
1000e524:	000158c0 	call	1000158c <__mulsi3>
1000e528:	1009883a 	mov	r4,r2
1000e52c:	880a943a 	slli	r5,r17,16
1000e530:	b004d43a 	srli	r2,r22,16
1000e534:	288ab03a 	or	r5,r5,r2
1000e538:	2900062e 	bgeu	r5,r4,1000e554 <__udivdi3+0x528>
1000e53c:	2c0b883a 	add	r5,r5,r16
1000e540:	b8bfffc4 	addi	r2,r23,-1
1000e544:	2c004536 	bltu	r5,r16,1000e65c <__udivdi3+0x630>
1000e548:	2900442e 	bgeu	r5,r4,1000e65c <__udivdi3+0x630>
1000e54c:	bdffff84 	addi	r23,r23,-2
1000e550:	2c0b883a 	add	r5,r5,r16
1000e554:	2925c83a 	sub	r18,r5,r4
1000e558:	9009883a 	mov	r4,r18
1000e55c:	a00b883a 	mov	r5,r20
1000e560:	00015840 	call	10001584 <__umodsi3>
1000e564:	1023883a 	mov	r17,r2
1000e568:	9009883a 	mov	r4,r18
1000e56c:	a00b883a 	mov	r5,r20
1000e570:	8822943a 	slli	r17,r17,16
1000e574:	000157c0 	call	1000157c <__udivsi3>
1000e578:	1009883a 	mov	r4,r2
1000e57c:	a80b883a 	mov	r5,r21
1000e580:	b5bfffcc 	andi	r22,r22,65535
1000e584:	1025883a 	mov	r18,r2
1000e588:	8da2b03a 	or	r17,r17,r22
1000e58c:	000158c0 	call	1000158c <__mulsi3>
1000e590:	8880062e 	bgeu	r17,r2,1000e5ac <__udivdi3+0x580>
1000e594:	8c23883a 	add	r17,r17,r16
1000e598:	90ffffc4 	addi	r3,r18,-1
1000e59c:	8c002d36 	bltu	r17,r16,1000e654 <__udivdi3+0x628>
1000e5a0:	88802c2e 	bgeu	r17,r2,1000e654 <__udivdi3+0x628>
1000e5a4:	94bfff84 	addi	r18,r18,-2
1000e5a8:	8c23883a 	add	r17,r17,r16
1000e5ac:	b806943a 	slli	r3,r23,16
1000e5b0:	88a3c83a 	sub	r17,r17,r2
1000e5b4:	90c6b03a 	or	r3,r18,r3
1000e5b8:	003f2c06 	br	1000e26c <__alt_data_end+0xf800e26c>
1000e5bc:	1823883a 	mov	r17,r3
1000e5c0:	003eec06 	br	1000e174 <__alt_data_end+0xf800e174>
1000e5c4:	2023883a 	mov	r17,r4
1000e5c8:	003f5606 	br	1000e324 <__alt_data_end+0xf800e324>
1000e5cc:	2008943a 	slli	r4,r4,16
1000e5d0:	9420983a 	sll	r16,r18,r16
1000e5d4:	e73fffcc 	andi	fp,fp,65535
1000e5d8:	2709883a 	add	r4,r4,fp
1000e5dc:	813fbc2e 	bgeu	r16,r4,1000e4d0 <__alt_data_end+0xf800e4d0>
1000e5e0:	a0bfffc4 	addi	r2,r20,-1
1000e5e4:	0007883a 	mov	r3,zero
1000e5e8:	003efb06 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e5ec:	00c00604 	movi	r3,24
1000e5f0:	180b883a 	mov	r5,r3
1000e5f4:	003eeb06 	br	1000e1a4 <__alt_data_end+0xf800e1a4>
1000e5f8:	00c00204 	movi	r3,8
1000e5fc:	180b883a 	mov	r5,r3
1000e600:	003ee806 	br	1000e1a4 <__alt_data_end+0xf800e1a4>
1000e604:	00800604 	movi	r2,24
1000e608:	1007883a 	mov	r3,r2
1000e60c:	003f0a06 	br	1000e238 <__alt_data_end+0xf800e238>
1000e610:	00800604 	movi	r2,24
1000e614:	1007883a 	mov	r3,r2
1000e618:	003e9c06 	br	1000e08c <__alt_data_end+0xf800e08c>
1000e61c:	00800204 	movi	r2,8
1000e620:	1007883a 	mov	r3,r2
1000e624:	003e9906 	br	1000e08c <__alt_data_end+0xf800e08c>
1000e628:	00800204 	movi	r2,8
1000e62c:	1007883a 	mov	r3,r2
1000e630:	003f0106 	br	1000e238 <__alt_data_end+0xf800e238>
1000e634:	18bf842e 	bgeu	r3,r2,1000e448 <__alt_data_end+0xf800e448>
1000e638:	a53fff84 	addi	r20,r20,-2
1000e63c:	1cc7883a 	add	r3,r3,r19
1000e640:	003f8206 	br	1000e44c <__alt_data_end+0xf800e44c>
1000e644:	393f6b2e 	bgeu	r7,r4,1000e3f4 <__alt_data_end+0xf800e3f4>
1000e648:	bdffff84 	addi	r23,r23,-2
1000e64c:	3ccf883a 	add	r7,r7,r19
1000e650:	003f6906 	br	1000e3f8 <__alt_data_end+0xf800e3f8>
1000e654:	1825883a 	mov	r18,r3
1000e658:	003fd406 	br	1000e5ac <__alt_data_end+0xf800e5ac>
1000e65c:	102f883a 	mov	r23,r2
1000e660:	003fbc06 	br	1000e554 <__alt_data_end+0xf800e554>
1000e664:	94bfff84 	addi	r18,r18,-2
1000e668:	340d883a 	add	r6,r6,r16
1000e66c:	003f1606 	br	1000e2c8 <__alt_data_end+0xf800e2c8>
1000e670:	94bfff84 	addi	r18,r18,-2
1000e674:	1c07883a 	add	r3,r3,r16
1000e678:	003ea906 	br	1000e120 <__alt_data_end+0xf800e120>

1000e67c <__umoddi3>:
1000e67c:	defff304 	addi	sp,sp,-52
1000e680:	dd000715 	stw	r20,28(sp)
1000e684:	dcc00615 	stw	r19,24(sp)
1000e688:	dc800515 	stw	r18,20(sp)
1000e68c:	dc400415 	stw	r17,16(sp)
1000e690:	dc000315 	stw	r16,12(sp)
1000e694:	dfc00c15 	stw	ra,48(sp)
1000e698:	df000b15 	stw	fp,44(sp)
1000e69c:	ddc00a15 	stw	r23,40(sp)
1000e6a0:	dd800915 	stw	r22,36(sp)
1000e6a4:	dd400815 	stw	r21,32(sp)
1000e6a8:	2025883a 	mov	r18,r4
1000e6ac:	2823883a 	mov	r17,r5
1000e6b0:	3021883a 	mov	r16,r6
1000e6b4:	2027883a 	mov	r19,r4
1000e6b8:	2829883a 	mov	r20,r5
1000e6bc:	38003a1e 	bne	r7,zero,1000e7a8 <__umoddi3+0x12c>
1000e6c0:	2980522e 	bgeu	r5,r6,1000e80c <__umoddi3+0x190>
1000e6c4:	00bfffd4 	movui	r2,65535
1000e6c8:	1180a436 	bltu	r2,r6,1000e95c <__umoddi3+0x2e0>
1000e6cc:	00803fc4 	movi	r2,255
1000e6d0:	11816036 	bltu	r2,r6,1000ec54 <__umoddi3+0x5d8>
1000e6d4:	0005883a 	mov	r2,zero
1000e6d8:	0009883a 	mov	r4,zero
1000e6dc:	3084d83a 	srl	r2,r6,r2
1000e6e0:	00c40074 	movhi	r3,4097
1000e6e4:	18cbfd04 	addi	r3,r3,12276
1000e6e8:	05400804 	movi	r21,32
1000e6ec:	1885883a 	add	r2,r3,r2
1000e6f0:	10800003 	ldbu	r2,0(r2)
1000e6f4:	1109883a 	add	r4,r2,r4
1000e6f8:	a92bc83a 	sub	r21,r21,r4
1000e6fc:	a8010e26 	beq	r21,zero,1000eb38 <__umoddi3+0x4bc>
1000e700:	8d62983a 	sll	r17,r17,r21
1000e704:	9108d83a 	srl	r4,r18,r4
1000e708:	3560983a 	sll	r16,r6,r21
1000e70c:	9566983a 	sll	r19,r18,r21
1000e710:	8928b03a 	or	r20,r17,r4
1000e714:	8022d43a 	srli	r17,r16,16
1000e718:	a009883a 	mov	r4,r20
1000e71c:	84bfffcc 	andi	r18,r16,65535
1000e720:	880b883a 	mov	r5,r17
1000e724:	00015840 	call	10001584 <__umodsi3>
1000e728:	a009883a 	mov	r4,r20
1000e72c:	880b883a 	mov	r5,r17
1000e730:	102d883a 	mov	r22,r2
1000e734:	000157c0 	call	1000157c <__udivsi3>
1000e738:	1009883a 	mov	r4,r2
1000e73c:	900b883a 	mov	r5,r18
1000e740:	000158c0 	call	1000158c <__mulsi3>
1000e744:	1009883a 	mov	r4,r2
1000e748:	b006943a 	slli	r3,r22,16
1000e74c:	9804d43a 	srli	r2,r19,16
1000e750:	1886b03a 	or	r3,r3,r2
1000e754:	1900042e 	bgeu	r3,r4,1000e768 <__umoddi3+0xec>
1000e758:	1c07883a 	add	r3,r3,r16
1000e75c:	1c000236 	bltu	r3,r16,1000e768 <__umoddi3+0xec>
1000e760:	1900012e 	bgeu	r3,r4,1000e768 <__umoddi3+0xec>
1000e764:	1c07883a 	add	r3,r3,r16
1000e768:	1929c83a 	sub	r20,r3,r4
1000e76c:	a009883a 	mov	r4,r20
1000e770:	880b883a 	mov	r5,r17
1000e774:	00015840 	call	10001584 <__umodsi3>
1000e778:	102d883a 	mov	r22,r2
1000e77c:	a009883a 	mov	r4,r20
1000e780:	880b883a 	mov	r5,r17
1000e784:	b02c943a 	slli	r22,r22,16
1000e788:	000157c0 	call	1000157c <__udivsi3>
1000e78c:	1009883a 	mov	r4,r2
1000e790:	900b883a 	mov	r5,r18
1000e794:	9cffffcc 	andi	r19,r19,65535
1000e798:	000158c0 	call	1000158c <__mulsi3>
1000e79c:	b4e6b03a 	or	r19,r22,r19
1000e7a0:	9880572e 	bgeu	r19,r2,1000e900 <__umoddi3+0x284>
1000e7a4:	00005206 	br	1000e8f0 <__umoddi3+0x274>
1000e7a8:	29c05936 	bltu	r5,r7,1000e910 <__umoddi3+0x294>
1000e7ac:	00bfffd4 	movui	r2,65535
1000e7b0:	11c0652e 	bgeu	r2,r7,1000e948 <__umoddi3+0x2cc>
1000e7b4:	00804034 	movhi	r2,256
1000e7b8:	10bfffc4 	addi	r2,r2,-1
1000e7bc:	11c11936 	bltu	r2,r7,1000ec24 <__umoddi3+0x5a8>
1000e7c0:	00c00404 	movi	r3,16
1000e7c4:	1827883a 	mov	r19,r3
1000e7c8:	38c6d83a 	srl	r3,r7,r3
1000e7cc:	01040074 	movhi	r4,4097
1000e7d0:	210bfd04 	addi	r4,r4,12276
1000e7d4:	04000804 	movi	r16,32
1000e7d8:	20c7883a 	add	r3,r4,r3
1000e7dc:	18800003 	ldbu	r2,0(r3)
1000e7e0:	14e7883a 	add	r19,r2,r19
1000e7e4:	84e1c83a 	sub	r16,r16,r19
1000e7e8:	8000671e 	bne	r16,zero,1000e988 <__umoddi3+0x30c>
1000e7ec:	3c400136 	bltu	r7,r17,1000e7f4 <__umoddi3+0x178>
1000e7f0:	91812536 	bltu	r18,r6,1000ec88 <__umoddi3+0x60c>
1000e7f4:	9185c83a 	sub	r2,r18,r6
1000e7f8:	89e3c83a 	sub	r17,r17,r7
1000e7fc:	90a5803a 	cmpltu	r18,r18,r2
1000e800:	8ca9c83a 	sub	r20,r17,r18
1000e804:	a007883a 	mov	r3,r20
1000e808:	00004306 	br	1000e918 <__umoddi3+0x29c>
1000e80c:	3000041e 	bne	r6,zero,1000e820 <__umoddi3+0x1a4>
1000e810:	01000044 	movi	r4,1
1000e814:	000b883a 	mov	r5,zero
1000e818:	000157c0 	call	1000157c <__udivsi3>
1000e81c:	1021883a 	mov	r16,r2
1000e820:	00bfffd4 	movui	r2,65535
1000e824:	1400532e 	bgeu	r2,r16,1000e974 <__umoddi3+0x2f8>
1000e828:	00804034 	movhi	r2,256
1000e82c:	10bfffc4 	addi	r2,r2,-1
1000e830:	14010536 	bltu	r2,r16,1000ec48 <__umoddi3+0x5cc>
1000e834:	00800404 	movi	r2,16
1000e838:	1007883a 	mov	r3,r2
1000e83c:	8084d83a 	srl	r2,r16,r2
1000e840:	01040074 	movhi	r4,4097
1000e844:	210bfd04 	addi	r4,r4,12276
1000e848:	05400804 	movi	r21,32
1000e84c:	2085883a 	add	r2,r4,r2
1000e850:	10800003 	ldbu	r2,0(r2)
1000e854:	10c7883a 	add	r3,r2,r3
1000e858:	a8ebc83a 	sub	r21,r21,r3
1000e85c:	a800b81e 	bne	r21,zero,1000eb40 <__umoddi3+0x4c4>
1000e860:	8028d43a 	srli	r20,r16,16
1000e864:	8c23c83a 	sub	r17,r17,r16
1000e868:	85bfffcc 	andi	r22,r16,65535
1000e86c:	8809883a 	mov	r4,r17
1000e870:	a00b883a 	mov	r5,r20
1000e874:	00015840 	call	10001584 <__umodsi3>
1000e878:	8809883a 	mov	r4,r17
1000e87c:	a00b883a 	mov	r5,r20
1000e880:	1025883a 	mov	r18,r2
1000e884:	000157c0 	call	1000157c <__udivsi3>
1000e888:	1009883a 	mov	r4,r2
1000e88c:	b00b883a 	mov	r5,r22
1000e890:	000158c0 	call	1000158c <__mulsi3>
1000e894:	1009883a 	mov	r4,r2
1000e898:	9006943a 	slli	r3,r18,16
1000e89c:	9804d43a 	srli	r2,r19,16
1000e8a0:	1886b03a 	or	r3,r3,r2
1000e8a4:	1900032e 	bgeu	r3,r4,1000e8b4 <__umoddi3+0x238>
1000e8a8:	1c07883a 	add	r3,r3,r16
1000e8ac:	1c000136 	bltu	r3,r16,1000e8b4 <__umoddi3+0x238>
1000e8b0:	1900f336 	bltu	r3,r4,1000ec80 <__umoddi3+0x604>
1000e8b4:	1923c83a 	sub	r17,r3,r4
1000e8b8:	8809883a 	mov	r4,r17
1000e8bc:	a00b883a 	mov	r5,r20
1000e8c0:	00015840 	call	10001584 <__umodsi3>
1000e8c4:	102f883a 	mov	r23,r2
1000e8c8:	8809883a 	mov	r4,r17
1000e8cc:	a00b883a 	mov	r5,r20
1000e8d0:	b82e943a 	slli	r23,r23,16
1000e8d4:	000157c0 	call	1000157c <__udivsi3>
1000e8d8:	1009883a 	mov	r4,r2
1000e8dc:	b00b883a 	mov	r5,r22
1000e8e0:	9cffffcc 	andi	r19,r19,65535
1000e8e4:	000158c0 	call	1000158c <__mulsi3>
1000e8e8:	bce6b03a 	or	r19,r23,r19
1000e8ec:	9880042e 	bgeu	r19,r2,1000e900 <__umoddi3+0x284>
1000e8f0:	9c27883a 	add	r19,r19,r16
1000e8f4:	9c000236 	bltu	r19,r16,1000e900 <__umoddi3+0x284>
1000e8f8:	9880012e 	bgeu	r19,r2,1000e900 <__umoddi3+0x284>
1000e8fc:	9c27883a 	add	r19,r19,r16
1000e900:	9885c83a 	sub	r2,r19,r2
1000e904:	1544d83a 	srl	r2,r2,r21
1000e908:	0007883a 	mov	r3,zero
1000e90c:	00000206 	br	1000e918 <__umoddi3+0x29c>
1000e910:	2005883a 	mov	r2,r4
1000e914:	2807883a 	mov	r3,r5
1000e918:	dfc00c17 	ldw	ra,48(sp)
1000e91c:	df000b17 	ldw	fp,44(sp)
1000e920:	ddc00a17 	ldw	r23,40(sp)
1000e924:	dd800917 	ldw	r22,36(sp)
1000e928:	dd400817 	ldw	r21,32(sp)
1000e92c:	dd000717 	ldw	r20,28(sp)
1000e930:	dcc00617 	ldw	r19,24(sp)
1000e934:	dc800517 	ldw	r18,20(sp)
1000e938:	dc400417 	ldw	r17,16(sp)
1000e93c:	dc000317 	ldw	r16,12(sp)
1000e940:	dec00d04 	addi	sp,sp,52
1000e944:	f800283a 	ret
1000e948:	00803fc4 	movi	r2,255
1000e94c:	11c0b236 	bltu	r2,r7,1000ec18 <__umoddi3+0x59c>
1000e950:	0007883a 	mov	r3,zero
1000e954:	0027883a 	mov	r19,zero
1000e958:	003f9b06 	br	1000e7c8 <__alt_data_end+0xf800e7c8>
1000e95c:	00804034 	movhi	r2,256
1000e960:	10bfffc4 	addi	r2,r2,-1
1000e964:	1180b236 	bltu	r2,r6,1000ec30 <__umoddi3+0x5b4>
1000e968:	00800404 	movi	r2,16
1000e96c:	1009883a 	mov	r4,r2
1000e970:	003f5a06 	br	1000e6dc <__alt_data_end+0xf800e6dc>
1000e974:	00803fc4 	movi	r2,255
1000e978:	1400b036 	bltu	r2,r16,1000ec3c <__umoddi3+0x5c0>
1000e97c:	0005883a 	mov	r2,zero
1000e980:	0007883a 	mov	r3,zero
1000e984:	003fad06 	br	1000e83c <__alt_data_end+0xf800e83c>
1000e988:	34c4d83a 	srl	r2,r6,r19
1000e98c:	3c0e983a 	sll	r7,r7,r16
1000e990:	8cf8d83a 	srl	fp,r17,r19
1000e994:	8c22983a 	sll	r17,r17,r16
1000e998:	38a8b03a 	or	r20,r7,r2
1000e99c:	a02ad43a 	srli	r21,r20,16
1000e9a0:	94c4d83a 	srl	r2,r18,r19
1000e9a4:	e009883a 	mov	r4,fp
1000e9a8:	a80b883a 	mov	r5,r21
1000e9ac:	342c983a 	sll	r22,r6,r16
1000e9b0:	88a2b03a 	or	r17,r17,r2
1000e9b4:	00015840 	call	10001584 <__umodsi3>
1000e9b8:	e009883a 	mov	r4,fp
1000e9bc:	a80b883a 	mov	r5,r21
1000e9c0:	a5ffffcc 	andi	r23,r20,65535
1000e9c4:	d8800215 	stw	r2,8(sp)
1000e9c8:	000157c0 	call	1000157c <__udivsi3>
1000e9cc:	1009883a 	mov	r4,r2
1000e9d0:	b80b883a 	mov	r5,r23
1000e9d4:	1039883a 	mov	fp,r2
1000e9d8:	000158c0 	call	1000158c <__mulsi3>
1000e9dc:	d8c00217 	ldw	r3,8(sp)
1000e9e0:	1009883a 	mov	r4,r2
1000e9e4:	8804d43a 	srli	r2,r17,16
1000e9e8:	1806943a 	slli	r3,r3,16
1000e9ec:	9424983a 	sll	r18,r18,r16
1000e9f0:	1886b03a 	or	r3,r3,r2
1000e9f4:	1900042e 	bgeu	r3,r4,1000ea08 <__umoddi3+0x38c>
1000e9f8:	1d07883a 	add	r3,r3,r20
1000e9fc:	e0bfffc4 	addi	r2,fp,-1
1000ea00:	1d009b2e 	bgeu	r3,r20,1000ec70 <__umoddi3+0x5f4>
1000ea04:	1039883a 	mov	fp,r2
1000ea08:	1907c83a 	sub	r3,r3,r4
1000ea0c:	1809883a 	mov	r4,r3
1000ea10:	a80b883a 	mov	r5,r21
1000ea14:	d8c00215 	stw	r3,8(sp)
1000ea18:	00015840 	call	10001584 <__umodsi3>
1000ea1c:	d8c00217 	ldw	r3,8(sp)
1000ea20:	a80b883a 	mov	r5,r21
1000ea24:	d8800015 	stw	r2,0(sp)
1000ea28:	1809883a 	mov	r4,r3
1000ea2c:	000157c0 	call	1000157c <__udivsi3>
1000ea30:	1009883a 	mov	r4,r2
1000ea34:	b80b883a 	mov	r5,r23
1000ea38:	102b883a 	mov	r21,r2
1000ea3c:	000158c0 	call	1000158c <__mulsi3>
1000ea40:	d9c00017 	ldw	r7,0(sp)
1000ea44:	8c7fffcc 	andi	r17,r17,65535
1000ea48:	380e943a 	slli	r7,r7,16
1000ea4c:	3c4eb03a 	or	r7,r7,r17
1000ea50:	3880042e 	bgeu	r7,r2,1000ea64 <__umoddi3+0x3e8>
1000ea54:	3d0f883a 	add	r7,r7,r20
1000ea58:	a8ffffc4 	addi	r3,r21,-1
1000ea5c:	3d00802e 	bgeu	r7,r20,1000ec60 <__umoddi3+0x5e4>
1000ea60:	182b883a 	mov	r21,r3
1000ea64:	e038943a 	slli	fp,fp,16
1000ea68:	b010d43a 	srli	r8,r22,16
1000ea6c:	b1bfffcc 	andi	r6,r22,65535
1000ea70:	af2ab03a 	or	r21,r21,fp
1000ea74:	a82ed43a 	srli	r23,r21,16
1000ea78:	ad7fffcc 	andi	r21,r21,65535
1000ea7c:	300b883a 	mov	r5,r6
1000ea80:	a809883a 	mov	r4,r21
1000ea84:	38a3c83a 	sub	r17,r7,r2
1000ea88:	d9800115 	stw	r6,4(sp)
1000ea8c:	da000015 	stw	r8,0(sp)
1000ea90:	000158c0 	call	1000158c <__mulsi3>
1000ea94:	da000017 	ldw	r8,0(sp)
1000ea98:	a809883a 	mov	r4,r21
1000ea9c:	1039883a 	mov	fp,r2
1000eaa0:	400b883a 	mov	r5,r8
1000eaa4:	da000215 	stw	r8,8(sp)
1000eaa8:	000158c0 	call	1000158c <__mulsi3>
1000eaac:	d9800117 	ldw	r6,4(sp)
1000eab0:	b809883a 	mov	r4,r23
1000eab4:	d8800015 	stw	r2,0(sp)
1000eab8:	300b883a 	mov	r5,r6
1000eabc:	000158c0 	call	1000158c <__mulsi3>
1000eac0:	d8c00217 	ldw	r3,8(sp)
1000eac4:	b809883a 	mov	r4,r23
1000eac8:	102b883a 	mov	r21,r2
1000eacc:	180b883a 	mov	r5,r3
1000ead0:	000158c0 	call	1000158c <__mulsi3>
1000ead4:	d9c00017 	ldw	r7,0(sp)
1000ead8:	1007883a 	mov	r3,r2
1000eadc:	e004d43a 	srli	r2,fp,16
1000eae0:	a9c9883a 	add	r4,r21,r7
1000eae4:	2089883a 	add	r4,r4,r2
1000eae8:	2540022e 	bgeu	r4,r21,1000eaf4 <__umoddi3+0x478>
1000eaec:	00800074 	movhi	r2,1
1000eaf0:	1887883a 	add	r3,r3,r2
1000eaf4:	2004d43a 	srli	r2,r4,16
1000eaf8:	2008943a 	slli	r4,r4,16
1000eafc:	e73fffcc 	andi	fp,fp,65535
1000eb00:	1887883a 	add	r3,r3,r2
1000eb04:	2709883a 	add	r4,r4,fp
1000eb08:	88c03d36 	bltu	r17,r3,1000ec00 <__umoddi3+0x584>
1000eb0c:	88c06126 	beq	r17,r3,1000ec94 <__umoddi3+0x618>
1000eb10:	88c7c83a 	sub	r3,r17,r3
1000eb14:	202d883a 	mov	r22,r4
1000eb18:	95adc83a 	sub	r22,r18,r22
1000eb1c:	95a5803a 	cmpltu	r18,r18,r22
1000eb20:	1c87c83a 	sub	r3,r3,r18
1000eb24:	1cc4983a 	sll	r2,r3,r19
1000eb28:	b42cd83a 	srl	r22,r22,r16
1000eb2c:	1c06d83a 	srl	r3,r3,r16
1000eb30:	1584b03a 	or	r2,r2,r22
1000eb34:	003f7806 	br	1000e918 <__alt_data_end+0xf800e918>
1000eb38:	002b883a 	mov	r21,zero
1000eb3c:	003ef506 	br	1000e714 <__alt_data_end+0xf800e714>
1000eb40:	8560983a 	sll	r16,r16,r21
1000eb44:	88e6d83a 	srl	r19,r17,r3
1000eb48:	90c6d83a 	srl	r3,r18,r3
1000eb4c:	8028d43a 	srli	r20,r16,16
1000eb50:	8d62983a 	sll	r17,r17,r21
1000eb54:	9809883a 	mov	r4,r19
1000eb58:	a00b883a 	mov	r5,r20
1000eb5c:	88eeb03a 	or	r23,r17,r3
1000eb60:	00015840 	call	10001584 <__umodsi3>
1000eb64:	9809883a 	mov	r4,r19
1000eb68:	a00b883a 	mov	r5,r20
1000eb6c:	1023883a 	mov	r17,r2
1000eb70:	85bfffcc 	andi	r22,r16,65535
1000eb74:	000157c0 	call	1000157c <__udivsi3>
1000eb78:	1009883a 	mov	r4,r2
1000eb7c:	b00b883a 	mov	r5,r22
1000eb80:	000158c0 	call	1000158c <__mulsi3>
1000eb84:	1007883a 	mov	r3,r2
1000eb88:	8808943a 	slli	r4,r17,16
1000eb8c:	b804d43a 	srli	r2,r23,16
1000eb90:	9566983a 	sll	r19,r18,r21
1000eb94:	2088b03a 	or	r4,r4,r2
1000eb98:	20c0042e 	bgeu	r4,r3,1000ebac <__umoddi3+0x530>
1000eb9c:	2409883a 	add	r4,r4,r16
1000eba0:	24000236 	bltu	r4,r16,1000ebac <__umoddi3+0x530>
1000eba4:	20c0012e 	bgeu	r4,r3,1000ebac <__umoddi3+0x530>
1000eba8:	2409883a 	add	r4,r4,r16
1000ebac:	20e5c83a 	sub	r18,r4,r3
1000ebb0:	9009883a 	mov	r4,r18
1000ebb4:	a00b883a 	mov	r5,r20
1000ebb8:	00015840 	call	10001584 <__umodsi3>
1000ebbc:	1023883a 	mov	r17,r2
1000ebc0:	9009883a 	mov	r4,r18
1000ebc4:	a00b883a 	mov	r5,r20
1000ebc8:	8822943a 	slli	r17,r17,16
1000ebcc:	000157c0 	call	1000157c <__udivsi3>
1000ebd0:	1009883a 	mov	r4,r2
1000ebd4:	b00b883a 	mov	r5,r22
1000ebd8:	bdffffcc 	andi	r23,r23,65535
1000ebdc:	000158c0 	call	1000158c <__mulsi3>
1000ebe0:	8de2b03a 	or	r17,r17,r23
1000ebe4:	8880042e 	bgeu	r17,r2,1000ebf8 <__umoddi3+0x57c>
1000ebe8:	8c23883a 	add	r17,r17,r16
1000ebec:	8c000236 	bltu	r17,r16,1000ebf8 <__umoddi3+0x57c>
1000ebf0:	8880012e 	bgeu	r17,r2,1000ebf8 <__umoddi3+0x57c>
1000ebf4:	8c23883a 	add	r17,r17,r16
1000ebf8:	88a3c83a 	sub	r17,r17,r2
1000ebfc:	003f1b06 	br	1000e86c <__alt_data_end+0xf800e86c>
1000ec00:	25adc83a 	sub	r22,r4,r22
1000ec04:	1d07c83a 	sub	r3,r3,r20
1000ec08:	2589803a 	cmpltu	r4,r4,r22
1000ec0c:	1907c83a 	sub	r3,r3,r4
1000ec10:	88c7c83a 	sub	r3,r17,r3
1000ec14:	003fc006 	br	1000eb18 <__alt_data_end+0xf800eb18>
1000ec18:	00c00204 	movi	r3,8
1000ec1c:	1827883a 	mov	r19,r3
1000ec20:	003ee906 	br	1000e7c8 <__alt_data_end+0xf800e7c8>
1000ec24:	00c00604 	movi	r3,24
1000ec28:	1827883a 	mov	r19,r3
1000ec2c:	003ee606 	br	1000e7c8 <__alt_data_end+0xf800e7c8>
1000ec30:	00800604 	movi	r2,24
1000ec34:	1009883a 	mov	r4,r2
1000ec38:	003ea806 	br	1000e6dc <__alt_data_end+0xf800e6dc>
1000ec3c:	00800204 	movi	r2,8
1000ec40:	1007883a 	mov	r3,r2
1000ec44:	003efd06 	br	1000e83c <__alt_data_end+0xf800e83c>
1000ec48:	00800604 	movi	r2,24
1000ec4c:	1007883a 	mov	r3,r2
1000ec50:	003efa06 	br	1000e83c <__alt_data_end+0xf800e83c>
1000ec54:	00800204 	movi	r2,8
1000ec58:	1009883a 	mov	r4,r2
1000ec5c:	003e9f06 	br	1000e6dc <__alt_data_end+0xf800e6dc>
1000ec60:	38bf7f2e 	bgeu	r7,r2,1000ea60 <__alt_data_end+0xf800ea60>
1000ec64:	ad7fff84 	addi	r21,r21,-2
1000ec68:	3d0f883a 	add	r7,r7,r20
1000ec6c:	003f7d06 	br	1000ea64 <__alt_data_end+0xf800ea64>
1000ec70:	193f642e 	bgeu	r3,r4,1000ea04 <__alt_data_end+0xf800ea04>
1000ec74:	e73fff84 	addi	fp,fp,-2
1000ec78:	1d07883a 	add	r3,r3,r20
1000ec7c:	003f6206 	br	1000ea08 <__alt_data_end+0xf800ea08>
1000ec80:	1c07883a 	add	r3,r3,r16
1000ec84:	003f0b06 	br	1000e8b4 <__alt_data_end+0xf800e8b4>
1000ec88:	9005883a 	mov	r2,r18
1000ec8c:	a007883a 	mov	r3,r20
1000ec90:	003f2106 	br	1000e918 <__alt_data_end+0xf800e918>
1000ec94:	913fda36 	bltu	r18,r4,1000ec00 <__alt_data_end+0xf800ec00>
1000ec98:	202d883a 	mov	r22,r4
1000ec9c:	0007883a 	mov	r3,zero
1000eca0:	003f9d06 	br	1000eb18 <__alt_data_end+0xf800eb18>

1000eca4 <__nesf2>:
1000eca4:	defff504 	addi	sp,sp,-44
1000eca8:	d9000915 	stw	r4,36(sp)
1000ecac:	d9400815 	stw	r5,32(sp)
1000ecb0:	d9000904 	addi	r4,sp,36
1000ecb4:	d9400404 	addi	r5,sp,16
1000ecb8:	dfc00a15 	stw	ra,40(sp)
1000ecbc:	000fc400 	call	1000fc40 <__unpack_f>
1000ecc0:	d9000804 	addi	r4,sp,32
1000ecc4:	d80b883a 	mov	r5,sp
1000ecc8:	000fc400 	call	1000fc40 <__unpack_f>
1000eccc:	d8c00417 	ldw	r3,16(sp)
1000ecd0:	00800044 	movi	r2,1
1000ecd4:	10c0052e 	bgeu	r2,r3,1000ecec <__nesf2+0x48>
1000ecd8:	d8c00017 	ldw	r3,0(sp)
1000ecdc:	10c0032e 	bgeu	r2,r3,1000ecec <__nesf2+0x48>
1000ece0:	d9000404 	addi	r4,sp,16
1000ece4:	d80b883a 	mov	r5,sp
1000ece8:	000fd080 	call	1000fd08 <__fpcmp_parts_f>
1000ecec:	dfc00a17 	ldw	ra,40(sp)
1000ecf0:	dec00b04 	addi	sp,sp,44
1000ecf4:	f800283a 	ret

1000ecf8 <__gtsf2>:
1000ecf8:	defff504 	addi	sp,sp,-44
1000ecfc:	d9000915 	stw	r4,36(sp)
1000ed00:	d9400815 	stw	r5,32(sp)
1000ed04:	d9000904 	addi	r4,sp,36
1000ed08:	d9400404 	addi	r5,sp,16
1000ed0c:	dfc00a15 	stw	ra,40(sp)
1000ed10:	000fc400 	call	1000fc40 <__unpack_f>
1000ed14:	d9000804 	addi	r4,sp,32
1000ed18:	d80b883a 	mov	r5,sp
1000ed1c:	000fc400 	call	1000fc40 <__unpack_f>
1000ed20:	d8c00417 	ldw	r3,16(sp)
1000ed24:	00800044 	movi	r2,1
1000ed28:	10c0082e 	bgeu	r2,r3,1000ed4c <__gtsf2+0x54>
1000ed2c:	d8c00017 	ldw	r3,0(sp)
1000ed30:	10c0062e 	bgeu	r2,r3,1000ed4c <__gtsf2+0x54>
1000ed34:	d9000404 	addi	r4,sp,16
1000ed38:	d80b883a 	mov	r5,sp
1000ed3c:	000fd080 	call	1000fd08 <__fpcmp_parts_f>
1000ed40:	dfc00a17 	ldw	ra,40(sp)
1000ed44:	dec00b04 	addi	sp,sp,44
1000ed48:	f800283a 	ret
1000ed4c:	00bfffc4 	movi	r2,-1
1000ed50:	003ffb06 	br	1000ed40 <__alt_data_end+0xf800ed40>

1000ed54 <__ltsf2>:
1000ed54:	defff504 	addi	sp,sp,-44
1000ed58:	d9000915 	stw	r4,36(sp)
1000ed5c:	d9400815 	stw	r5,32(sp)
1000ed60:	d9000904 	addi	r4,sp,36
1000ed64:	d9400404 	addi	r5,sp,16
1000ed68:	dfc00a15 	stw	ra,40(sp)
1000ed6c:	000fc400 	call	1000fc40 <__unpack_f>
1000ed70:	d9000804 	addi	r4,sp,32
1000ed74:	d80b883a 	mov	r5,sp
1000ed78:	000fc400 	call	1000fc40 <__unpack_f>
1000ed7c:	d8c00417 	ldw	r3,16(sp)
1000ed80:	00800044 	movi	r2,1
1000ed84:	10c0052e 	bgeu	r2,r3,1000ed9c <__ltsf2+0x48>
1000ed88:	d8c00017 	ldw	r3,0(sp)
1000ed8c:	10c0032e 	bgeu	r2,r3,1000ed9c <__ltsf2+0x48>
1000ed90:	d9000404 	addi	r4,sp,16
1000ed94:	d80b883a 	mov	r5,sp
1000ed98:	000fd080 	call	1000fd08 <__fpcmp_parts_f>
1000ed9c:	dfc00a17 	ldw	ra,40(sp)
1000eda0:	dec00b04 	addi	sp,sp,44
1000eda4:	f800283a 	ret

1000eda8 <_fpadd_parts>:
1000eda8:	2005883a 	mov	r2,r4
1000edac:	21000017 	ldw	r4,0(r4)
1000edb0:	01c00044 	movi	r7,1
1000edb4:	3900622e 	bgeu	r7,r4,1000ef40 <_fpadd_parts+0x198>
1000edb8:	28c00017 	ldw	r3,0(r5)
1000edbc:	38c05f2e 	bgeu	r7,r3,1000ef3c <_fpadd_parts+0x194>
1000edc0:	01c00104 	movi	r7,4
1000edc4:	21c0c626 	beq	r4,r7,1000f0e0 <_fpadd_parts+0x338>
1000edc8:	19c05c26 	beq	r3,r7,1000ef3c <_fpadd_parts+0x194>
1000edcc:	01c00084 	movi	r7,2
1000edd0:	19c06b26 	beq	r3,r7,1000ef80 <_fpadd_parts+0x1d8>
1000edd4:	21c05926 	beq	r4,r7,1000ef3c <_fpadd_parts+0x194>
1000edd8:	11c00217 	ldw	r7,8(r2)
1000eddc:	2ac00217 	ldw	r11,8(r5)
1000ede0:	13000317 	ldw	r12,12(r2)
1000ede4:	13400417 	ldw	r13,16(r2)
1000ede8:	3ac9c83a 	sub	r4,r7,r11
1000edec:	2a000317 	ldw	r8,12(r5)
1000edf0:	2a400417 	ldw	r9,16(r5)
1000edf4:	2015883a 	mov	r10,r4
1000edf8:	20007516 	blt	r4,zero,1000efd0 <_fpadd_parts+0x228>
1000edfc:	00c00fc4 	movi	r3,63
1000ee00:	1a805016 	blt	r3,r10,1000ef44 <_fpadd_parts+0x19c>
1000ee04:	0100870e 	bge	zero,r4,1000f024 <_fpadd_parts+0x27c>
1000ee08:	50fff804 	addi	r3,r10,-32
1000ee0c:	18009916 	blt	r3,zero,1000f074 <_fpadd_parts+0x2cc>
1000ee10:	48d6d83a 	srl	r11,r9,r3
1000ee14:	001d883a 	mov	r14,zero
1000ee18:	18009e16 	blt	r3,zero,1000f094 <_fpadd_parts+0x2ec>
1000ee1c:	01000044 	movi	r4,1
1000ee20:	20c6983a 	sll	r3,r4,r3
1000ee24:	0015883a 	mov	r10,zero
1000ee28:	513fffc4 	addi	r4,r10,-1
1000ee2c:	2295403a 	cmpgeu	r10,r4,r10
1000ee30:	1a87c83a 	sub	r3,r3,r10
1000ee34:	1a52703a 	and	r9,r3,r9
1000ee38:	2210703a 	and	r8,r4,r8
1000ee3c:	4250b03a 	or	r8,r8,r9
1000ee40:	4010c03a 	cmpne	r8,r8,zero
1000ee44:	42d0b03a 	or	r8,r8,r11
1000ee48:	7013883a 	mov	r9,r14
1000ee4c:	11000117 	ldw	r4,4(r2)
1000ee50:	28800117 	ldw	r2,4(r5)
1000ee54:	20804126 	beq	r4,r2,1000ef5c <_fpadd_parts+0x1b4>
1000ee58:	20006326 	beq	r4,zero,1000efe8 <_fpadd_parts+0x240>
1000ee5c:	4305c83a 	sub	r2,r8,r12
1000ee60:	4091803a 	cmpltu	r8,r8,r2
1000ee64:	4b47c83a 	sub	r3,r9,r13
1000ee68:	1a07c83a 	sub	r3,r3,r8
1000ee6c:	18006316 	blt	r3,zero,1000effc <_fpadd_parts+0x254>
1000ee70:	30000115 	stw	zero,4(r6)
1000ee74:	31c00215 	stw	r7,8(r6)
1000ee78:	30800315 	stw	r2,12(r6)
1000ee7c:	30c00415 	stw	r3,16(r6)
1000ee80:	11ffffc4 	addi	r7,r2,-1
1000ee84:	388b403a 	cmpgeu	r5,r7,r2
1000ee88:	194bc83a 	sub	r5,r3,r5
1000ee8c:	01040034 	movhi	r4,4096
1000ee90:	213fffc4 	addi	r4,r4,-1
1000ee94:	21401736 	bltu	r4,r5,1000eef4 <_fpadd_parts+0x14c>
1000ee98:	29008226 	beq	r5,r4,1000f0a4 <_fpadd_parts+0x2fc>
1000ee9c:	31400217 	ldw	r5,8(r6)
1000eea0:	02840034 	movhi	r10,4096
1000eea4:	52bfffc4 	addi	r10,r10,-1
1000eea8:	033fff84 	movi	r12,-2
1000eeac:	297fffc4 	addi	r5,r5,-1
1000eeb0:	00000106 	br	1000eeb8 <_fpadd_parts+0x110>
1000eeb4:	3a804a26 	beq	r7,r10,1000efe0 <_fpadd_parts+0x238>
1000eeb8:	1089883a 	add	r4,r2,r2
1000eebc:	2091803a 	cmpltu	r8,r4,r2
1000eec0:	18c7883a 	add	r3,r3,r3
1000eec4:	227fffc4 	addi	r9,r4,-1
1000eec8:	40d1883a 	add	r8,r8,r3
1000eecc:	490f403a 	cmpgeu	r7,r9,r4
1000eed0:	41cfc83a 	sub	r7,r8,r7
1000eed4:	2817883a 	mov	r11,r5
1000eed8:	2005883a 	mov	r2,r4
1000eedc:	4007883a 	mov	r3,r8
1000eee0:	297fffc4 	addi	r5,r5,-1
1000eee4:	51fff32e 	bgeu	r10,r7,1000eeb4 <__alt_data_end+0xf800eeb4>
1000eee8:	31000315 	stw	r4,12(r6)
1000eeec:	32000415 	stw	r8,16(r6)
1000eef0:	32c00215 	stw	r11,8(r6)
1000eef4:	010000c4 	movi	r4,3
1000eef8:	31000015 	stw	r4,0(r6)
1000eefc:	01080034 	movhi	r4,8192
1000ef00:	213fffc4 	addi	r4,r4,-1
1000ef04:	20c00b2e 	bgeu	r4,r3,1000ef34 <_fpadd_parts+0x18c>
1000ef08:	180e97fa 	slli	r7,r3,31
1000ef0c:	1008d07a 	srli	r4,r2,1
1000ef10:	31400217 	ldw	r5,8(r6)
1000ef14:	1806d07a 	srli	r3,r3,1
1000ef18:	1080004c 	andi	r2,r2,1
1000ef1c:	3908b03a 	or	r4,r7,r4
1000ef20:	1108b03a 	or	r4,r2,r4
1000ef24:	29400044 	addi	r5,r5,1
1000ef28:	31000315 	stw	r4,12(r6)
1000ef2c:	30c00415 	stw	r3,16(r6)
1000ef30:	31400215 	stw	r5,8(r6)
1000ef34:	3005883a 	mov	r2,r6
1000ef38:	f800283a 	ret
1000ef3c:	2805883a 	mov	r2,r5
1000ef40:	f800283a 	ret
1000ef44:	59c01e0e 	bge	r11,r7,1000efc0 <_fpadd_parts+0x218>
1000ef48:	11000117 	ldw	r4,4(r2)
1000ef4c:	28800117 	ldw	r2,4(r5)
1000ef50:	0011883a 	mov	r8,zero
1000ef54:	0013883a 	mov	r9,zero
1000ef58:	20bfbf1e 	bne	r4,r2,1000ee58 <__alt_data_end+0xf800ee58>
1000ef5c:	4305883a 	add	r2,r8,r12
1000ef60:	1207803a 	cmpltu	r3,r2,r8
1000ef64:	4b53883a 	add	r9,r9,r13
1000ef68:	1a47883a 	add	r3,r3,r9
1000ef6c:	31000115 	stw	r4,4(r6)
1000ef70:	31c00215 	stw	r7,8(r6)
1000ef74:	30800315 	stw	r2,12(r6)
1000ef78:	30c00415 	stw	r3,16(r6)
1000ef7c:	003fdd06 	br	1000eef4 <__alt_data_end+0xf800eef4>
1000ef80:	20ffef1e 	bne	r4,r3,1000ef40 <__alt_data_end+0xf800ef40>
1000ef84:	31000015 	stw	r4,0(r6)
1000ef88:	10c00117 	ldw	r3,4(r2)
1000ef8c:	30c00115 	stw	r3,4(r6)
1000ef90:	10c00217 	ldw	r3,8(r2)
1000ef94:	11000117 	ldw	r4,4(r2)
1000ef98:	29400117 	ldw	r5,4(r5)
1000ef9c:	30c00215 	stw	r3,8(r6)
1000efa0:	10c00317 	ldw	r3,12(r2)
1000efa4:	2908703a 	and	r4,r5,r4
1000efa8:	30c00315 	stw	r3,12(r6)
1000efac:	10c00417 	ldw	r3,16(r2)
1000efb0:	31000115 	stw	r4,4(r6)
1000efb4:	3005883a 	mov	r2,r6
1000efb8:	30c00415 	stw	r3,16(r6)
1000efbc:	f800283a 	ret
1000efc0:	580f883a 	mov	r7,r11
1000efc4:	0019883a 	mov	r12,zero
1000efc8:	001b883a 	mov	r13,zero
1000efcc:	003f9f06 	br	1000ee4c <__alt_data_end+0xf800ee4c>
1000efd0:	0115c83a 	sub	r10,zero,r4
1000efd4:	00c00fc4 	movi	r3,63
1000efd8:	1abfda16 	blt	r3,r10,1000ef44 <__alt_data_end+0xf800ef44>
1000efdc:	003f8906 	br	1000ee04 <__alt_data_end+0xf800ee04>
1000efe0:	627fb52e 	bgeu	r12,r9,1000eeb8 <__alt_data_end+0xf800eeb8>
1000efe4:	003fc006 	br	1000eee8 <__alt_data_end+0xf800eee8>
1000efe8:	6205c83a 	sub	r2,r12,r8
1000efec:	6099803a 	cmpltu	r12,r12,r2
1000eff0:	6a47c83a 	sub	r3,r13,r9
1000eff4:	1b07c83a 	sub	r3,r3,r12
1000eff8:	183f9d0e 	bge	r3,zero,1000ee70 <__alt_data_end+0xf800ee70>
1000effc:	0085c83a 	sub	r2,zero,r2
1000f000:	1008c03a 	cmpne	r4,r2,zero
1000f004:	00c7c83a 	sub	r3,zero,r3
1000f008:	1907c83a 	sub	r3,r3,r4
1000f00c:	01000044 	movi	r4,1
1000f010:	31000115 	stw	r4,4(r6)
1000f014:	31c00215 	stw	r7,8(r6)
1000f018:	30800315 	stw	r2,12(r6)
1000f01c:	30c00415 	stw	r3,16(r6)
1000f020:	003f9706 	br	1000ee80 <__alt_data_end+0xf800ee80>
1000f024:	203f8926 	beq	r4,zero,1000ee4c <__alt_data_end+0xf800ee4c>
1000f028:	50fff804 	addi	r3,r10,-32
1000f02c:	3a8f883a 	add	r7,r7,r10
1000f030:	18002316 	blt	r3,zero,1000f0c0 <_fpadd_parts+0x318>
1000f034:	68d6d83a 	srl	r11,r13,r3
1000f038:	001d883a 	mov	r14,zero
1000f03c:	18001c16 	blt	r3,zero,1000f0b0 <_fpadd_parts+0x308>
1000f040:	01000044 	movi	r4,1
1000f044:	20c6983a 	sll	r3,r4,r3
1000f048:	0015883a 	mov	r10,zero
1000f04c:	513fffc4 	addi	r4,r10,-1
1000f050:	2295403a 	cmpgeu	r10,r4,r10
1000f054:	1a87c83a 	sub	r3,r3,r10
1000f058:	1b5a703a 	and	r13,r3,r13
1000f05c:	2318703a 	and	r12,r4,r12
1000f060:	6358b03a 	or	r12,r12,r13
1000f064:	6018c03a 	cmpne	r12,r12,zero
1000f068:	62d8b03a 	or	r12,r12,r11
1000f06c:	701b883a 	mov	r13,r14
1000f070:	003f7606 	br	1000ee4c <__alt_data_end+0xf800ee4c>
1000f074:	4808907a 	slli	r4,r9,1
1000f078:	02c007c4 	movi	r11,31
1000f07c:	5a97c83a 	sub	r11,r11,r10
1000f080:	22c8983a 	sll	r4,r4,r11
1000f084:	4296d83a 	srl	r11,r8,r10
1000f088:	4a9cd83a 	srl	r14,r9,r10
1000f08c:	22d6b03a 	or	r11,r4,r11
1000f090:	003f6106 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000f094:	00c00044 	movi	r3,1
1000f098:	1a94983a 	sll	r10,r3,r10
1000f09c:	0007883a 	mov	r3,zero
1000f0a0:	003f6106 	br	1000ee28 <__alt_data_end+0xf800ee28>
1000f0a4:	013fff84 	movi	r4,-2
1000f0a8:	21ff7c2e 	bgeu	r4,r7,1000ee9c <__alt_data_end+0xf800ee9c>
1000f0ac:	003f9106 	br	1000eef4 <__alt_data_end+0xf800eef4>
1000f0b0:	00c00044 	movi	r3,1
1000f0b4:	1a94983a 	sll	r10,r3,r10
1000f0b8:	0007883a 	mov	r3,zero
1000f0bc:	003fe306 	br	1000f04c <__alt_data_end+0xf800f04c>
1000f0c0:	6816907a 	slli	r11,r13,1
1000f0c4:	010007c4 	movi	r4,31
1000f0c8:	2289c83a 	sub	r4,r4,r10
1000f0cc:	5908983a 	sll	r4,r11,r4
1000f0d0:	6296d83a 	srl	r11,r12,r10
1000f0d4:	6a9cd83a 	srl	r14,r13,r10
1000f0d8:	22d6b03a 	or	r11,r4,r11
1000f0dc:	003fd706 	br	1000f03c <__alt_data_end+0xf800f03c>
1000f0e0:	193f971e 	bne	r3,r4,1000ef40 <__alt_data_end+0xf800ef40>
1000f0e4:	11000117 	ldw	r4,4(r2)
1000f0e8:	28c00117 	ldw	r3,4(r5)
1000f0ec:	20ff9426 	beq	r4,r3,1000ef40 <__alt_data_end+0xf800ef40>
1000f0f0:	00840074 	movhi	r2,4097
1000f0f4:	108bf804 	addi	r2,r2,12256
1000f0f8:	f800283a 	ret

1000f0fc <__adddf3>:
1000f0fc:	deffec04 	addi	sp,sp,-80
1000f100:	d9001115 	stw	r4,68(sp)
1000f104:	d9401215 	stw	r5,72(sp)
1000f108:	d9001104 	addi	r4,sp,68
1000f10c:	d9400a04 	addi	r5,sp,40
1000f110:	dfc01315 	stw	ra,76(sp)
1000f114:	d9c01015 	stw	r7,64(sp)
1000f118:	d9800f15 	stw	r6,60(sp)
1000f11c:	00100140 	call	10010014 <__unpack_d>
1000f120:	d9000f04 	addi	r4,sp,60
1000f124:	d9400504 	addi	r5,sp,20
1000f128:	00100140 	call	10010014 <__unpack_d>
1000f12c:	d9000a04 	addi	r4,sp,40
1000f130:	d9400504 	addi	r5,sp,20
1000f134:	d80d883a 	mov	r6,sp
1000f138:	000eda80 	call	1000eda8 <_fpadd_parts>
1000f13c:	1009883a 	mov	r4,r2
1000f140:	000fdf00 	call	1000fdf0 <__pack_d>
1000f144:	dfc01317 	ldw	ra,76(sp)
1000f148:	dec01404 	addi	sp,sp,80
1000f14c:	f800283a 	ret

1000f150 <__subdf3>:
1000f150:	deffec04 	addi	sp,sp,-80
1000f154:	d9001115 	stw	r4,68(sp)
1000f158:	d9401215 	stw	r5,72(sp)
1000f15c:	d9001104 	addi	r4,sp,68
1000f160:	d9400a04 	addi	r5,sp,40
1000f164:	dfc01315 	stw	ra,76(sp)
1000f168:	d9c01015 	stw	r7,64(sp)
1000f16c:	d9800f15 	stw	r6,60(sp)
1000f170:	00100140 	call	10010014 <__unpack_d>
1000f174:	d9000f04 	addi	r4,sp,60
1000f178:	d9400504 	addi	r5,sp,20
1000f17c:	00100140 	call	10010014 <__unpack_d>
1000f180:	d8800617 	ldw	r2,24(sp)
1000f184:	d9000a04 	addi	r4,sp,40
1000f188:	d9400504 	addi	r5,sp,20
1000f18c:	d80d883a 	mov	r6,sp
1000f190:	1080005c 	xori	r2,r2,1
1000f194:	d8800615 	stw	r2,24(sp)
1000f198:	000eda80 	call	1000eda8 <_fpadd_parts>
1000f19c:	1009883a 	mov	r4,r2
1000f1a0:	000fdf00 	call	1000fdf0 <__pack_d>
1000f1a4:	dfc01317 	ldw	ra,76(sp)
1000f1a8:	dec01404 	addi	sp,sp,80
1000f1ac:	f800283a 	ret

1000f1b0 <__muldf3>:
1000f1b0:	deffe404 	addi	sp,sp,-112
1000f1b4:	d9001115 	stw	r4,68(sp)
1000f1b8:	d9401215 	stw	r5,72(sp)
1000f1bc:	d9001104 	addi	r4,sp,68
1000f1c0:	d9400a04 	addi	r5,sp,40
1000f1c4:	dfc01b15 	stw	ra,108(sp)
1000f1c8:	d9800f15 	stw	r6,60(sp)
1000f1cc:	d9c01015 	stw	r7,64(sp)
1000f1d0:	ddc01a15 	stw	r23,104(sp)
1000f1d4:	dd801915 	stw	r22,100(sp)
1000f1d8:	dd401815 	stw	r21,96(sp)
1000f1dc:	dd001715 	stw	r20,92(sp)
1000f1e0:	dcc01615 	stw	r19,88(sp)
1000f1e4:	dc801515 	stw	r18,84(sp)
1000f1e8:	dc401415 	stw	r17,80(sp)
1000f1ec:	dc001315 	stw	r16,76(sp)
1000f1f0:	00100140 	call	10010014 <__unpack_d>
1000f1f4:	d9000f04 	addi	r4,sp,60
1000f1f8:	d9400504 	addi	r5,sp,20
1000f1fc:	00100140 	call	10010014 <__unpack_d>
1000f200:	d8c00a17 	ldw	r3,40(sp)
1000f204:	00800044 	movi	r2,1
1000f208:	10c01136 	bltu	r2,r3,1000f250 <__muldf3+0xa0>
1000f20c:	d8c00b17 	ldw	r3,44(sp)
1000f210:	d8800617 	ldw	r2,24(sp)
1000f214:	d9000a04 	addi	r4,sp,40
1000f218:	1884c03a 	cmpne	r2,r3,r2
1000f21c:	d8800b15 	stw	r2,44(sp)
1000f220:	000fdf00 	call	1000fdf0 <__pack_d>
1000f224:	dfc01b17 	ldw	ra,108(sp)
1000f228:	ddc01a17 	ldw	r23,104(sp)
1000f22c:	dd801917 	ldw	r22,100(sp)
1000f230:	dd401817 	ldw	r21,96(sp)
1000f234:	dd001717 	ldw	r20,92(sp)
1000f238:	dcc01617 	ldw	r19,88(sp)
1000f23c:	dc801517 	ldw	r18,84(sp)
1000f240:	dc401417 	ldw	r17,80(sp)
1000f244:	dc001317 	ldw	r16,76(sp)
1000f248:	dec01c04 	addi	sp,sp,112
1000f24c:	f800283a 	ret
1000f250:	d9000517 	ldw	r4,20(sp)
1000f254:	11000636 	bltu	r2,r4,1000f270 <__muldf3+0xc0>
1000f258:	d8800617 	ldw	r2,24(sp)
1000f25c:	d8c00b17 	ldw	r3,44(sp)
1000f260:	d9000504 	addi	r4,sp,20
1000f264:	1884c03a 	cmpne	r2,r3,r2
1000f268:	d8800615 	stw	r2,24(sp)
1000f26c:	003fec06 	br	1000f220 <__alt_data_end+0xf800f220>
1000f270:	00800104 	movi	r2,4
1000f274:	1880051e 	bne	r3,r2,1000f28c <__muldf3+0xdc>
1000f278:	00800084 	movi	r2,2
1000f27c:	20bfe31e 	bne	r4,r2,1000f20c <__alt_data_end+0xf800f20c>
1000f280:	01040074 	movhi	r4,4097
1000f284:	210bf804 	addi	r4,r4,12256
1000f288:	003fe506 	br	1000f220 <__alt_data_end+0xf800f220>
1000f28c:	2080031e 	bne	r4,r2,1000f29c <__muldf3+0xec>
1000f290:	00800084 	movi	r2,2
1000f294:	18bffa26 	beq	r3,r2,1000f280 <__alt_data_end+0xf800f280>
1000f298:	003fef06 	br	1000f258 <__alt_data_end+0xf800f258>
1000f29c:	00800084 	movi	r2,2
1000f2a0:	18bfda26 	beq	r3,r2,1000f20c <__alt_data_end+0xf800f20c>
1000f2a4:	20bfec26 	beq	r4,r2,1000f258 <__alt_data_end+0xf800f258>
1000f2a8:	dc000d17 	ldw	r16,52(sp)
1000f2ac:	dd000817 	ldw	r20,32(sp)
1000f2b0:	dc800917 	ldw	r18,36(sp)
1000f2b4:	8009883a 	mov	r4,r16
1000f2b8:	000b883a 	mov	r5,zero
1000f2bc:	a00d883a 	mov	r6,r20
1000f2c0:	000f883a 	mov	r7,zero
1000f2c4:	000de980 	call	1000de98 <__muldi3>
1000f2c8:	dc400e17 	ldw	r17,56(sp)
1000f2cc:	9009883a 	mov	r4,r18
1000f2d0:	800d883a 	mov	r6,r16
1000f2d4:	000b883a 	mov	r5,zero
1000f2d8:	000f883a 	mov	r7,zero
1000f2dc:	102f883a 	mov	r23,r2
1000f2e0:	1827883a 	mov	r19,r3
1000f2e4:	000de980 	call	1000de98 <__muldi3>
1000f2e8:	900d883a 	mov	r6,r18
1000f2ec:	8809883a 	mov	r4,r17
1000f2f0:	000b883a 	mov	r5,zero
1000f2f4:	000f883a 	mov	r7,zero
1000f2f8:	102b883a 	mov	r21,r2
1000f2fc:	1821883a 	mov	r16,r3
1000f300:	000de980 	call	1000de98 <__muldi3>
1000f304:	8809883a 	mov	r4,r17
1000f308:	000b883a 	mov	r5,zero
1000f30c:	a00d883a 	mov	r6,r20
1000f310:	000f883a 	mov	r7,zero
1000f314:	102d883a 	mov	r22,r2
1000f318:	1825883a 	mov	r18,r3
1000f31c:	000de980 	call	1000de98 <__muldi3>
1000f320:	154b883a 	add	r5,r2,r21
1000f324:	2889803a 	cmpltu	r4,r5,r2
1000f328:	1c07883a 	add	r3,r3,r16
1000f32c:	20c9883a 	add	r4,r4,r3
1000f330:	24004b36 	bltu	r4,r16,1000f460 <__muldf3+0x2b0>
1000f334:	8100011e 	bne	r16,r4,1000f33c <__muldf3+0x18c>
1000f338:	2d404936 	bltu	r5,r21,1000f460 <__muldf3+0x2b0>
1000f33c:	0011883a 	mov	r8,zero
1000f340:	0007883a 	mov	r3,zero
1000f344:	2ccb883a 	add	r5,r5,r19
1000f348:	b80d883a 	mov	r6,r23
1000f34c:	2cc0012e 	bgeu	r5,r19,1000f354 <__muldf3+0x1a4>
1000f350:	02000044 	movi	r8,1
1000f354:	258f883a 	add	r7,r4,r22
1000f358:	3909803a 	cmpltu	r4,r7,r4
1000f35c:	da400c17 	ldw	r9,48(sp)
1000f360:	2489883a 	add	r4,r4,r18
1000f364:	d8800717 	ldw	r2,28(sp)
1000f368:	20c9883a 	add	r4,r4,r3
1000f36c:	da800b17 	ldw	r10,44(sp)
1000f370:	d8c00617 	ldw	r3,24(sp)
1000f374:	3a11883a 	add	r8,r7,r8
1000f378:	4885883a 	add	r2,r9,r2
1000f37c:	50c6c03a 	cmpne	r3,r10,r3
1000f380:	41cf803a 	cmpltu	r7,r8,r7
1000f384:	12400104 	addi	r9,r2,4
1000f388:	d8c00115 	stw	r3,4(sp)
1000f38c:	3909883a 	add	r4,r7,r4
1000f390:	da400215 	stw	r9,8(sp)
1000f394:	03480034 	movhi	r13,8192
1000f398:	6b7fffc4 	addi	r13,r13,-1
1000f39c:	4007883a 	mov	r3,r8
1000f3a0:	6900102e 	bgeu	r13,r4,1000f3e4 <__muldf3+0x234>
1000f3a4:	10800144 	addi	r2,r2,5
1000f3a8:	180ed07a 	srli	r7,r3,1
1000f3ac:	18c0004c 	andi	r3,r3,1
1000f3b0:	201097fa 	slli	r8,r4,31
1000f3b4:	281697fa 	slli	r11,r5,31
1000f3b8:	2008d07a 	srli	r4,r4,1
1000f3bc:	3014d07a 	srli	r10,r6,1
1000f3c0:	2812d07a 	srli	r9,r5,1
1000f3c4:	1019883a 	mov	r12,r2
1000f3c8:	18000226 	beq	r3,zero,1000f3d4 <__muldf3+0x224>
1000f3cc:	5a8cb03a 	or	r6,r11,r10
1000f3d0:	49600034 	orhi	r5,r9,32768
1000f3d4:	41c6b03a 	or	r3,r8,r7
1000f3d8:	10800044 	addi	r2,r2,1
1000f3dc:	693ff236 	bltu	r13,r4,1000f3a8 <__alt_data_end+0xf800f3a8>
1000f3e0:	db000215 	stw	r12,8(sp)
1000f3e4:	03440034 	movhi	r13,4096
1000f3e8:	6b7fffc4 	addi	r13,r13,-1
1000f3ec:	69001336 	bltu	r13,r4,1000f43c <__muldf3+0x28c>
1000f3f0:	d8800217 	ldw	r2,8(sp)
1000f3f4:	10bfffc4 	addi	r2,r2,-1
1000f3f8:	18d3883a 	add	r9,r3,r3
1000f3fc:	48c7803a 	cmpltu	r3,r9,r3
1000f400:	2109883a 	add	r4,r4,r4
1000f404:	190f883a 	add	r7,r3,r4
1000f408:	3191883a 	add	r8,r6,r6
1000f40c:	4197803a 	cmpltu	r11,r8,r6
1000f410:	2955883a 	add	r10,r5,r5
1000f414:	1019883a 	mov	r12,r2
1000f418:	4807883a 	mov	r3,r9
1000f41c:	3809883a 	mov	r4,r7
1000f420:	2800010e 	bge	r5,zero,1000f428 <__muldf3+0x278>
1000f424:	48c00054 	ori	r3,r9,1
1000f428:	400d883a 	mov	r6,r8
1000f42c:	5a8b883a 	add	r5,r11,r10
1000f430:	10bfffc4 	addi	r2,r2,-1
1000f434:	69fff02e 	bgeu	r13,r7,1000f3f8 <__alt_data_end+0xf800f3f8>
1000f438:	db000215 	stw	r12,8(sp)
1000f43c:	18803fcc 	andi	r2,r3,255
1000f440:	01c02004 	movi	r7,128
1000f444:	11c00926 	beq	r2,r7,1000f46c <__muldf3+0x2bc>
1000f448:	008000c4 	movi	r2,3
1000f44c:	d9000415 	stw	r4,16(sp)
1000f450:	d8c00315 	stw	r3,12(sp)
1000f454:	d8800015 	stw	r2,0(sp)
1000f458:	d809883a 	mov	r4,sp
1000f45c:	003f7006 	br	1000f220 <__alt_data_end+0xf800f220>
1000f460:	0011883a 	mov	r8,zero
1000f464:	00c00044 	movi	r3,1
1000f468:	003fb606 	br	1000f344 <__alt_data_end+0xf800f344>
1000f46c:	19c0400c 	andi	r7,r3,256
1000f470:	383ff51e 	bne	r7,zero,1000f448 <__alt_data_end+0xf800f448>
1000f474:	314ab03a 	or	r5,r6,r5
1000f478:	283ff326 	beq	r5,zero,1000f448 <__alt_data_end+0xf800f448>
1000f47c:	1885883a 	add	r2,r3,r2
1000f480:	10cb803a 	cmpltu	r5,r2,r3
1000f484:	00ffc004 	movi	r3,-256
1000f488:	10c6703a 	and	r3,r2,r3
1000f48c:	2909883a 	add	r4,r5,r4
1000f490:	003fed06 	br	1000f448 <__alt_data_end+0xf800f448>

1000f494 <__divdf3>:
1000f494:	defff104 	addi	sp,sp,-60
1000f498:	d9000c15 	stw	r4,48(sp)
1000f49c:	d9400d15 	stw	r5,52(sp)
1000f4a0:	d9000c04 	addi	r4,sp,48
1000f4a4:	d9400504 	addi	r5,sp,20
1000f4a8:	dfc00e15 	stw	ra,56(sp)
1000f4ac:	d9800a15 	stw	r6,40(sp)
1000f4b0:	d9c00b15 	stw	r7,44(sp)
1000f4b4:	00100140 	call	10010014 <__unpack_d>
1000f4b8:	d9000a04 	addi	r4,sp,40
1000f4bc:	d80b883a 	mov	r5,sp
1000f4c0:	00100140 	call	10010014 <__unpack_d>
1000f4c4:	d8c00517 	ldw	r3,20(sp)
1000f4c8:	00800044 	movi	r2,1
1000f4cc:	10c00536 	bltu	r2,r3,1000f4e4 <__divdf3+0x50>
1000f4d0:	d9000504 	addi	r4,sp,20
1000f4d4:	000fdf00 	call	1000fdf0 <__pack_d>
1000f4d8:	dfc00e17 	ldw	ra,56(sp)
1000f4dc:	dec00f04 	addi	sp,sp,60
1000f4e0:	f800283a 	ret
1000f4e4:	d9000017 	ldw	r4,0(sp)
1000f4e8:	11000536 	bltu	r2,r4,1000f500 <__divdf3+0x6c>
1000f4ec:	d809883a 	mov	r4,sp
1000f4f0:	000fdf00 	call	1000fdf0 <__pack_d>
1000f4f4:	dfc00e17 	ldw	ra,56(sp)
1000f4f8:	dec00f04 	addi	sp,sp,60
1000f4fc:	f800283a 	ret
1000f500:	d9800617 	ldw	r6,24(sp)
1000f504:	d9400117 	ldw	r5,4(sp)
1000f508:	00800104 	movi	r2,4
1000f50c:	314af03a 	xor	r5,r6,r5
1000f510:	d9400615 	stw	r5,24(sp)
1000f514:	18800226 	beq	r3,r2,1000f520 <__divdf3+0x8c>
1000f518:	01400084 	movi	r5,2
1000f51c:	1940041e 	bne	r3,r5,1000f530 <__divdf3+0x9c>
1000f520:	193feb1e 	bne	r3,r4,1000f4d0 <__alt_data_end+0xf800f4d0>
1000f524:	01040074 	movhi	r4,4097
1000f528:	210bf804 	addi	r4,r4,12256
1000f52c:	003fe906 	br	1000f4d4 <__alt_data_end+0xf800f4d4>
1000f530:	20803326 	beq	r4,r2,1000f600 <__divdf3+0x16c>
1000f534:	21403726 	beq	r4,r5,1000f614 <__divdf3+0x180>
1000f538:	d8800217 	ldw	r2,8(sp)
1000f53c:	d9000717 	ldw	r4,28(sp)
1000f540:	d8c00917 	ldw	r3,36(sp)
1000f544:	da000417 	ldw	r8,16(sp)
1000f548:	2089c83a 	sub	r4,r4,r2
1000f54c:	d9000715 	stw	r4,28(sp)
1000f550:	d8800817 	ldw	r2,32(sp)
1000f554:	dbc00317 	ldw	r15,12(sp)
1000f558:	1a000236 	bltu	r3,r8,1000f564 <__divdf3+0xd0>
1000f55c:	40c0081e 	bne	r8,r3,1000f580 <__divdf3+0xec>
1000f560:	13c0072e 	bgeu	r2,r15,1000f580 <__divdf3+0xec>
1000f564:	108b883a 	add	r5,r2,r2
1000f568:	288d803a 	cmpltu	r6,r5,r2
1000f56c:	18c7883a 	add	r3,r3,r3
1000f570:	213fffc4 	addi	r4,r4,-1
1000f574:	2805883a 	mov	r2,r5
1000f578:	30c7883a 	add	r3,r6,r3
1000f57c:	d9000715 	stw	r4,28(sp)
1000f580:	01400f44 	movi	r5,61
1000f584:	000f883a 	mov	r7,zero
1000f588:	01040034 	movhi	r4,4096
1000f58c:	0019883a 	mov	r12,zero
1000f590:	001b883a 	mov	r13,zero
1000f594:	201697fa 	slli	r11,r4,31
1000f598:	3814d07a 	srli	r10,r7,1
1000f59c:	297fffc4 	addi	r5,r5,-1
1000f5a0:	1a000936 	bltu	r3,r8,1000f5c8 <__divdf3+0x134>
1000f5a4:	13cdc83a 	sub	r6,r2,r15
1000f5a8:	1193803a 	cmpltu	r9,r2,r6
1000f5ac:	1a1dc83a 	sub	r14,r3,r8
1000f5b0:	40c0011e 	bne	r8,r3,1000f5b8 <__divdf3+0x124>
1000f5b4:	13c00436 	bltu	r2,r15,1000f5c8 <__divdf3+0x134>
1000f5b8:	3005883a 	mov	r2,r6
1000f5bc:	7247c83a 	sub	r3,r14,r9
1000f5c0:	61d8b03a 	or	r12,r12,r7
1000f5c4:	691ab03a 	or	r13,r13,r4
1000f5c8:	108d883a 	add	r6,r2,r2
1000f5cc:	3093803a 	cmpltu	r9,r6,r2
1000f5d0:	18c7883a 	add	r3,r3,r3
1000f5d4:	5a8eb03a 	or	r7,r11,r10
1000f5d8:	2008d07a 	srli	r4,r4,1
1000f5dc:	3005883a 	mov	r2,r6
1000f5e0:	48c7883a 	add	r3,r9,r3
1000f5e4:	283feb1e 	bne	r5,zero,1000f594 <__alt_data_end+0xf800f594>
1000f5e8:	61003fcc 	andi	r4,r12,255
1000f5ec:	01402004 	movi	r5,128
1000f5f0:	21400b26 	beq	r4,r5,1000f620 <__divdf3+0x18c>
1000f5f4:	db000815 	stw	r12,32(sp)
1000f5f8:	db400915 	stw	r13,36(sp)
1000f5fc:	003fb406 	br	1000f4d0 <__alt_data_end+0xf800f4d0>
1000f600:	d8000815 	stw	zero,32(sp)
1000f604:	d8000915 	stw	zero,36(sp)
1000f608:	d8000715 	stw	zero,28(sp)
1000f60c:	d9000504 	addi	r4,sp,20
1000f610:	003fb006 	br	1000f4d4 <__alt_data_end+0xf800f4d4>
1000f614:	d8800515 	stw	r2,20(sp)
1000f618:	d9000504 	addi	r4,sp,20
1000f61c:	003fad06 	br	1000f4d4 <__alt_data_end+0xf800f4d4>
1000f620:	6140400c 	andi	r5,r12,256
1000f624:	283ff31e 	bne	r5,zero,1000f5f4 <__alt_data_end+0xf800f5f4>
1000f628:	30c4b03a 	or	r2,r6,r3
1000f62c:	103ff126 	beq	r2,zero,1000f5f4 <__alt_data_end+0xf800f5f4>
1000f630:	6109883a 	add	r4,r12,r4
1000f634:	2305803a 	cmpltu	r2,r4,r12
1000f638:	033fc004 	movi	r12,-256
1000f63c:	2318703a 	and	r12,r4,r12
1000f640:	135b883a 	add	r13,r2,r13
1000f644:	003feb06 	br	1000f5f4 <__alt_data_end+0xf800f5f4>

1000f648 <__eqdf2>:
1000f648:	defff104 	addi	sp,sp,-60
1000f64c:	d9000c15 	stw	r4,48(sp)
1000f650:	d9400d15 	stw	r5,52(sp)
1000f654:	d9000c04 	addi	r4,sp,48
1000f658:	d9400504 	addi	r5,sp,20
1000f65c:	dfc00e15 	stw	ra,56(sp)
1000f660:	d9800a15 	stw	r6,40(sp)
1000f664:	d9c00b15 	stw	r7,44(sp)
1000f668:	00100140 	call	10010014 <__unpack_d>
1000f66c:	d9000a04 	addi	r4,sp,40
1000f670:	d80b883a 	mov	r5,sp
1000f674:	00100140 	call	10010014 <__unpack_d>
1000f678:	d8c00517 	ldw	r3,20(sp)
1000f67c:	00800044 	movi	r2,1
1000f680:	10c0052e 	bgeu	r2,r3,1000f698 <__eqdf2+0x50>
1000f684:	d8c00017 	ldw	r3,0(sp)
1000f688:	10c0032e 	bgeu	r2,r3,1000f698 <__eqdf2+0x50>
1000f68c:	d9000504 	addi	r4,sp,20
1000f690:	d80b883a 	mov	r5,sp
1000f694:	00101180 	call	10010118 <__fpcmp_parts_d>
1000f698:	dfc00e17 	ldw	ra,56(sp)
1000f69c:	dec00f04 	addi	sp,sp,60
1000f6a0:	f800283a 	ret

1000f6a4 <__nedf2>:
1000f6a4:	defff104 	addi	sp,sp,-60
1000f6a8:	d9000c15 	stw	r4,48(sp)
1000f6ac:	d9400d15 	stw	r5,52(sp)
1000f6b0:	d9000c04 	addi	r4,sp,48
1000f6b4:	d9400504 	addi	r5,sp,20
1000f6b8:	dfc00e15 	stw	ra,56(sp)
1000f6bc:	d9800a15 	stw	r6,40(sp)
1000f6c0:	d9c00b15 	stw	r7,44(sp)
1000f6c4:	00100140 	call	10010014 <__unpack_d>
1000f6c8:	d9000a04 	addi	r4,sp,40
1000f6cc:	d80b883a 	mov	r5,sp
1000f6d0:	00100140 	call	10010014 <__unpack_d>
1000f6d4:	d8c00517 	ldw	r3,20(sp)
1000f6d8:	00800044 	movi	r2,1
1000f6dc:	10c0052e 	bgeu	r2,r3,1000f6f4 <__nedf2+0x50>
1000f6e0:	d8c00017 	ldw	r3,0(sp)
1000f6e4:	10c0032e 	bgeu	r2,r3,1000f6f4 <__nedf2+0x50>
1000f6e8:	d9000504 	addi	r4,sp,20
1000f6ec:	d80b883a 	mov	r5,sp
1000f6f0:	00101180 	call	10010118 <__fpcmp_parts_d>
1000f6f4:	dfc00e17 	ldw	ra,56(sp)
1000f6f8:	dec00f04 	addi	sp,sp,60
1000f6fc:	f800283a 	ret

1000f700 <__gtdf2>:
1000f700:	defff104 	addi	sp,sp,-60
1000f704:	d9000c15 	stw	r4,48(sp)
1000f708:	d9400d15 	stw	r5,52(sp)
1000f70c:	d9000c04 	addi	r4,sp,48
1000f710:	d9400504 	addi	r5,sp,20
1000f714:	dfc00e15 	stw	ra,56(sp)
1000f718:	d9800a15 	stw	r6,40(sp)
1000f71c:	d9c00b15 	stw	r7,44(sp)
1000f720:	00100140 	call	10010014 <__unpack_d>
1000f724:	d9000a04 	addi	r4,sp,40
1000f728:	d80b883a 	mov	r5,sp
1000f72c:	00100140 	call	10010014 <__unpack_d>
1000f730:	d8c00517 	ldw	r3,20(sp)
1000f734:	00800044 	movi	r2,1
1000f738:	10c0082e 	bgeu	r2,r3,1000f75c <__gtdf2+0x5c>
1000f73c:	d8c00017 	ldw	r3,0(sp)
1000f740:	10c0062e 	bgeu	r2,r3,1000f75c <__gtdf2+0x5c>
1000f744:	d9000504 	addi	r4,sp,20
1000f748:	d80b883a 	mov	r5,sp
1000f74c:	00101180 	call	10010118 <__fpcmp_parts_d>
1000f750:	dfc00e17 	ldw	ra,56(sp)
1000f754:	dec00f04 	addi	sp,sp,60
1000f758:	f800283a 	ret
1000f75c:	00bfffc4 	movi	r2,-1
1000f760:	003ffb06 	br	1000f750 <__alt_data_end+0xf800f750>

1000f764 <__gedf2>:
1000f764:	defff104 	addi	sp,sp,-60
1000f768:	d9000c15 	stw	r4,48(sp)
1000f76c:	d9400d15 	stw	r5,52(sp)
1000f770:	d9000c04 	addi	r4,sp,48
1000f774:	d9400504 	addi	r5,sp,20
1000f778:	dfc00e15 	stw	ra,56(sp)
1000f77c:	d9800a15 	stw	r6,40(sp)
1000f780:	d9c00b15 	stw	r7,44(sp)
1000f784:	00100140 	call	10010014 <__unpack_d>
1000f788:	d9000a04 	addi	r4,sp,40
1000f78c:	d80b883a 	mov	r5,sp
1000f790:	00100140 	call	10010014 <__unpack_d>
1000f794:	d8c00517 	ldw	r3,20(sp)
1000f798:	00800044 	movi	r2,1
1000f79c:	10c0082e 	bgeu	r2,r3,1000f7c0 <__gedf2+0x5c>
1000f7a0:	d8c00017 	ldw	r3,0(sp)
1000f7a4:	10c0062e 	bgeu	r2,r3,1000f7c0 <__gedf2+0x5c>
1000f7a8:	d9000504 	addi	r4,sp,20
1000f7ac:	d80b883a 	mov	r5,sp
1000f7b0:	00101180 	call	10010118 <__fpcmp_parts_d>
1000f7b4:	dfc00e17 	ldw	ra,56(sp)
1000f7b8:	dec00f04 	addi	sp,sp,60
1000f7bc:	f800283a 	ret
1000f7c0:	00bfffc4 	movi	r2,-1
1000f7c4:	003ffb06 	br	1000f7b4 <__alt_data_end+0xf800f7b4>

1000f7c8 <__ltdf2>:
1000f7c8:	defff104 	addi	sp,sp,-60
1000f7cc:	d9000c15 	stw	r4,48(sp)
1000f7d0:	d9400d15 	stw	r5,52(sp)
1000f7d4:	d9000c04 	addi	r4,sp,48
1000f7d8:	d9400504 	addi	r5,sp,20
1000f7dc:	dfc00e15 	stw	ra,56(sp)
1000f7e0:	d9800a15 	stw	r6,40(sp)
1000f7e4:	d9c00b15 	stw	r7,44(sp)
1000f7e8:	00100140 	call	10010014 <__unpack_d>
1000f7ec:	d9000a04 	addi	r4,sp,40
1000f7f0:	d80b883a 	mov	r5,sp
1000f7f4:	00100140 	call	10010014 <__unpack_d>
1000f7f8:	d8c00517 	ldw	r3,20(sp)
1000f7fc:	00800044 	movi	r2,1
1000f800:	10c0052e 	bgeu	r2,r3,1000f818 <__ltdf2+0x50>
1000f804:	d8c00017 	ldw	r3,0(sp)
1000f808:	10c0032e 	bgeu	r2,r3,1000f818 <__ltdf2+0x50>
1000f80c:	d9000504 	addi	r4,sp,20
1000f810:	d80b883a 	mov	r5,sp
1000f814:	00101180 	call	10010118 <__fpcmp_parts_d>
1000f818:	dfc00e17 	ldw	ra,56(sp)
1000f81c:	dec00f04 	addi	sp,sp,60
1000f820:	f800283a 	ret

1000f824 <__ledf2>:
1000f824:	defff104 	addi	sp,sp,-60
1000f828:	d9000c15 	stw	r4,48(sp)
1000f82c:	d9400d15 	stw	r5,52(sp)
1000f830:	d9000c04 	addi	r4,sp,48
1000f834:	d9400504 	addi	r5,sp,20
1000f838:	dfc00e15 	stw	ra,56(sp)
1000f83c:	d9800a15 	stw	r6,40(sp)
1000f840:	d9c00b15 	stw	r7,44(sp)
1000f844:	00100140 	call	10010014 <__unpack_d>
1000f848:	d9000a04 	addi	r4,sp,40
1000f84c:	d80b883a 	mov	r5,sp
1000f850:	00100140 	call	10010014 <__unpack_d>
1000f854:	d8c00517 	ldw	r3,20(sp)
1000f858:	00800044 	movi	r2,1
1000f85c:	10c0052e 	bgeu	r2,r3,1000f874 <__ledf2+0x50>
1000f860:	d8c00017 	ldw	r3,0(sp)
1000f864:	10c0032e 	bgeu	r2,r3,1000f874 <__ledf2+0x50>
1000f868:	d9000504 	addi	r4,sp,20
1000f86c:	d80b883a 	mov	r5,sp
1000f870:	00101180 	call	10010118 <__fpcmp_parts_d>
1000f874:	dfc00e17 	ldw	ra,56(sp)
1000f878:	dec00f04 	addi	sp,sp,60
1000f87c:	f800283a 	ret

1000f880 <__floatsidf>:
1000f880:	2004d7fa 	srli	r2,r4,31
1000f884:	defff904 	addi	sp,sp,-28
1000f888:	00c000c4 	movi	r3,3
1000f88c:	dfc00615 	stw	ra,24(sp)
1000f890:	dc000515 	stw	r16,20(sp)
1000f894:	d8c00015 	stw	r3,0(sp)
1000f898:	d8800115 	stw	r2,4(sp)
1000f89c:	2000081e 	bne	r4,zero,1000f8c0 <__floatsidf+0x40>
1000f8a0:	00800084 	movi	r2,2
1000f8a4:	d8800015 	stw	r2,0(sp)
1000f8a8:	d809883a 	mov	r4,sp
1000f8ac:	000fdf00 	call	1000fdf0 <__pack_d>
1000f8b0:	dfc00617 	ldw	ra,24(sp)
1000f8b4:	dc000517 	ldw	r16,20(sp)
1000f8b8:	dec00704 	addi	sp,sp,28
1000f8bc:	f800283a 	ret
1000f8c0:	00c00f04 	movi	r3,60
1000f8c4:	d8c00215 	stw	r3,8(sp)
1000f8c8:	10000f1e 	bne	r2,zero,1000f908 <__floatsidf+0x88>
1000f8cc:	2021883a 	mov	r16,r4
1000f8d0:	8009883a 	mov	r4,r16
1000f8d4:	000fb940 	call	1000fb94 <__clzsi2>
1000f8d8:	11000744 	addi	r4,r2,29
1000f8dc:	0100110e 	bge	zero,r4,1000f924 <__floatsidf+0xa4>
1000f8e0:	10ffff44 	addi	r3,r2,-3
1000f8e4:	18001216 	blt	r3,zero,1000f930 <__floatsidf+0xb0>
1000f8e8:	80c6983a 	sll	r3,r16,r3
1000f8ec:	0009883a 	mov	r4,zero
1000f8f0:	014007c4 	movi	r5,31
1000f8f4:	2885c83a 	sub	r2,r5,r2
1000f8f8:	d9000315 	stw	r4,12(sp)
1000f8fc:	d8c00415 	stw	r3,16(sp)
1000f900:	d8800215 	stw	r2,8(sp)
1000f904:	003fe806 	br	1000f8a8 <__alt_data_end+0xf800f8a8>
1000f908:	00a00034 	movhi	r2,32768
1000f90c:	20800e26 	beq	r4,r2,1000f948 <__floatsidf+0xc8>
1000f910:	0121c83a 	sub	r16,zero,r4
1000f914:	8009883a 	mov	r4,r16
1000f918:	000fb940 	call	1000fb94 <__clzsi2>
1000f91c:	11000744 	addi	r4,r2,29
1000f920:	013fef16 	blt	zero,r4,1000f8e0 <__alt_data_end+0xf800f8e0>
1000f924:	dc000315 	stw	r16,12(sp)
1000f928:	d8000415 	stw	zero,16(sp)
1000f92c:	003fde06 	br	1000f8a8 <__alt_data_end+0xf800f8a8>
1000f930:	800ad07a 	srli	r5,r16,1
1000f934:	00c007c4 	movi	r3,31
1000f938:	1907c83a 	sub	r3,r3,r4
1000f93c:	28c6d83a 	srl	r3,r5,r3
1000f940:	8108983a 	sll	r4,r16,r4
1000f944:	003fea06 	br	1000f8f0 <__alt_data_end+0xf800f8f0>
1000f948:	0005883a 	mov	r2,zero
1000f94c:	00f07834 	movhi	r3,49632
1000f950:	003fd706 	br	1000f8b0 <__alt_data_end+0xf800f8b0>

1000f954 <__fixdfsi>:
1000f954:	defff804 	addi	sp,sp,-32
1000f958:	d9000515 	stw	r4,20(sp)
1000f95c:	d9400615 	stw	r5,24(sp)
1000f960:	d9000504 	addi	r4,sp,20
1000f964:	d80b883a 	mov	r5,sp
1000f968:	dfc00715 	stw	ra,28(sp)
1000f96c:	00100140 	call	10010014 <__unpack_d>
1000f970:	d8800017 	ldw	r2,0(sp)
1000f974:	00c00084 	movi	r3,2
1000f978:	10c01c26 	beq	r2,r3,1000f9ec <__fixdfsi+0x98>
1000f97c:	00c00044 	movi	r3,1
1000f980:	18801a2e 	bgeu	r3,r2,1000f9ec <__fixdfsi+0x98>
1000f984:	00c00104 	movi	r3,4
1000f988:	10c01126 	beq	r2,r3,1000f9d0 <__fixdfsi+0x7c>
1000f98c:	d8800217 	ldw	r2,8(sp)
1000f990:	10001616 	blt	r2,zero,1000f9ec <__fixdfsi+0x98>
1000f994:	00c00784 	movi	r3,30
1000f998:	18800d16 	blt	r3,r2,1000f9d0 <__fixdfsi+0x7c>
1000f99c:	00c00f04 	movi	r3,60
1000f9a0:	1885c83a 	sub	r2,r3,r2
1000f9a4:	10fff804 	addi	r3,r2,-32
1000f9a8:	d9400317 	ldw	r5,12(sp)
1000f9ac:	d9000417 	ldw	r4,16(sp)
1000f9b0:	18001216 	blt	r3,zero,1000f9fc <__fixdfsi+0xa8>
1000f9b4:	20c4d83a 	srl	r2,r4,r3
1000f9b8:	d8c00117 	ldw	r3,4(sp)
1000f9bc:	18000826 	beq	r3,zero,1000f9e0 <__fixdfsi+0x8c>
1000f9c0:	0085c83a 	sub	r2,zero,r2
1000f9c4:	dfc00717 	ldw	ra,28(sp)
1000f9c8:	dec00804 	addi	sp,sp,32
1000f9cc:	f800283a 	ret
1000f9d0:	d8800117 	ldw	r2,4(sp)
1000f9d4:	00e00034 	movhi	r3,32768
1000f9d8:	1005003a 	cmpeq	r2,r2,zero
1000f9dc:	1885c83a 	sub	r2,r3,r2
1000f9e0:	dfc00717 	ldw	ra,28(sp)
1000f9e4:	dec00804 	addi	sp,sp,32
1000f9e8:	f800283a 	ret
1000f9ec:	0005883a 	mov	r2,zero
1000f9f0:	dfc00717 	ldw	ra,28(sp)
1000f9f4:	dec00804 	addi	sp,sp,32
1000f9f8:	f800283a 	ret
1000f9fc:	2008907a 	slli	r4,r4,1
1000fa00:	018007c4 	movi	r6,31
1000fa04:	308dc83a 	sub	r6,r6,r2
1000fa08:	2188983a 	sll	r4,r4,r6
1000fa0c:	2884d83a 	srl	r2,r5,r2
1000fa10:	2084b03a 	or	r2,r4,r2
1000fa14:	003fe806 	br	1000f9b8 <__alt_data_end+0xf800f9b8>

1000fa18 <__truncdfsf2>:
1000fa18:	defff804 	addi	sp,sp,-32
1000fa1c:	d9000515 	stw	r4,20(sp)
1000fa20:	d9400615 	stw	r5,24(sp)
1000fa24:	d9000504 	addi	r4,sp,20
1000fa28:	d80b883a 	mov	r5,sp
1000fa2c:	dfc00715 	stw	ra,28(sp)
1000fa30:	00100140 	call	10010014 <__unpack_d>
1000fa34:	d8800317 	ldw	r2,12(sp)
1000fa38:	d8c00417 	ldw	r3,16(sp)
1000fa3c:	01100034 	movhi	r4,16384
1000fa40:	213fffc4 	addi	r4,r4,-1
1000fa44:	100ed7ba 	srli	r7,r2,30
1000fa48:	180690ba 	slli	r3,r3,2
1000fa4c:	1104703a 	and	r2,r2,r4
1000fa50:	19ceb03a 	or	r7,r3,r7
1000fa54:	10000126 	beq	r2,zero,1000fa5c <__truncdfsf2+0x44>
1000fa58:	39c00054 	ori	r7,r7,1
1000fa5c:	d9000017 	ldw	r4,0(sp)
1000fa60:	d9400117 	ldw	r5,4(sp)
1000fa64:	d9800217 	ldw	r6,8(sp)
1000fa68:	000fdc40 	call	1000fdc4 <__make_fp>
1000fa6c:	dfc00717 	ldw	ra,28(sp)
1000fa70:	dec00804 	addi	sp,sp,32
1000fa74:	f800283a 	ret

1000fa78 <__floatunsidf>:
1000fa78:	defff904 	addi	sp,sp,-28
1000fa7c:	dc000515 	stw	r16,20(sp)
1000fa80:	dfc00615 	stw	ra,24(sp)
1000fa84:	d8000115 	stw	zero,4(sp)
1000fa88:	2021883a 	mov	r16,r4
1000fa8c:	20001726 	beq	r4,zero,1000faec <__floatunsidf+0x74>
1000fa90:	008000c4 	movi	r2,3
1000fa94:	d8800015 	stw	r2,0(sp)
1000fa98:	00800f04 	movi	r2,60
1000fa9c:	d8800215 	stw	r2,8(sp)
1000faa0:	000fb940 	call	1000fb94 <__clzsi2>
1000faa4:	10c00744 	addi	r3,r2,29
1000faa8:	18001816 	blt	r3,zero,1000fb0c <__floatunsidf+0x94>
1000faac:	18002d26 	beq	r3,zero,1000fb64 <__floatunsidf+0xec>
1000fab0:	113fff44 	addi	r4,r2,-3
1000fab4:	20002e16 	blt	r4,zero,1000fb70 <__floatunsidf+0xf8>
1000fab8:	8108983a 	sll	r4,r16,r4
1000fabc:	0021883a 	mov	r16,zero
1000fac0:	014007c4 	movi	r5,31
1000fac4:	2885c83a 	sub	r2,r5,r2
1000fac8:	dc000315 	stw	r16,12(sp)
1000facc:	d9000415 	stw	r4,16(sp)
1000fad0:	d8800215 	stw	r2,8(sp)
1000fad4:	d809883a 	mov	r4,sp
1000fad8:	000fdf00 	call	1000fdf0 <__pack_d>
1000fadc:	dfc00617 	ldw	ra,24(sp)
1000fae0:	dc000517 	ldw	r16,20(sp)
1000fae4:	dec00704 	addi	sp,sp,28
1000fae8:	f800283a 	ret
1000faec:	00800084 	movi	r2,2
1000faf0:	d809883a 	mov	r4,sp
1000faf4:	d8800015 	stw	r2,0(sp)
1000faf8:	000fdf00 	call	1000fdf0 <__pack_d>
1000fafc:	dfc00617 	ldw	ra,24(sp)
1000fb00:	dc000517 	ldw	r16,20(sp)
1000fb04:	dec00704 	addi	sp,sp,28
1000fb08:	f800283a 	ret
1000fb0c:	00c7c83a 	sub	r3,zero,r3
1000fb10:	193ff804 	addi	r4,r3,-32
1000fb14:	20001c16 	blt	r4,zero,1000fb88 <__floatunsidf+0x110>
1000fb18:	000b883a 	mov	r5,zero
1000fb1c:	2009d7fa 	srai	r4,r4,31
1000fb20:	80c6d83a 	srl	r3,r16,r3
1000fb24:	297fffc4 	addi	r5,r5,-1
1000fb28:	2c20703a 	and	r16,r5,r16
1000fb2c:	8020c03a 	cmpne	r16,r16,zero
1000fb30:	1906703a 	and	r3,r3,r4
1000fb34:	010007c4 	movi	r4,31
1000fb38:	80c6b03a 	or	r3,r16,r3
1000fb3c:	2085c83a 	sub	r2,r4,r2
1000fb40:	d809883a 	mov	r4,sp
1000fb44:	d8c00315 	stw	r3,12(sp)
1000fb48:	d8000415 	stw	zero,16(sp)
1000fb4c:	d8800215 	stw	r2,8(sp)
1000fb50:	000fdf00 	call	1000fdf0 <__pack_d>
1000fb54:	dfc00617 	ldw	ra,24(sp)
1000fb58:	dc000517 	ldw	r16,20(sp)
1000fb5c:	dec00704 	addi	sp,sp,28
1000fb60:	f800283a 	ret
1000fb64:	dc000315 	stw	r16,12(sp)
1000fb68:	d8000415 	stw	zero,16(sp)
1000fb6c:	003fd906 	br	1000fad4 <__alt_data_end+0xf800fad4>
1000fb70:	800ad07a 	srli	r5,r16,1
1000fb74:	010007c4 	movi	r4,31
1000fb78:	20c9c83a 	sub	r4,r4,r3
1000fb7c:	2908d83a 	srl	r4,r5,r4
1000fb80:	80e0983a 	sll	r16,r16,r3
1000fb84:	003fce06 	br	1000fac0 <__alt_data_end+0xf800fac0>
1000fb88:	01400044 	movi	r5,1
1000fb8c:	28ca983a 	sll	r5,r5,r3
1000fb90:	003fe206 	br	1000fb1c <__alt_data_end+0xf800fb1c>

1000fb94 <__clzsi2>:
1000fb94:	00bfffd4 	movui	r2,65535
1000fb98:	11000b36 	bltu	r2,r4,1000fbc8 <__clzsi2+0x34>
1000fb9c:	00803fc4 	movi	r2,255
1000fba0:	11001e2e 	bgeu	r2,r4,1000fc1c <__clzsi2+0x88>
1000fba4:	00c00204 	movi	r3,8
1000fba8:	20c8d83a 	srl	r4,r4,r3
1000fbac:	00c40074 	movhi	r3,4097
1000fbb0:	18cbfd04 	addi	r3,r3,12276
1000fbb4:	00800604 	movi	r2,24
1000fbb8:	1909883a 	add	r4,r3,r4
1000fbbc:	20c00003 	ldbu	r3,0(r4)
1000fbc0:	10c5c83a 	sub	r2,r2,r3
1000fbc4:	f800283a 	ret
1000fbc8:	00804034 	movhi	r2,256
1000fbcc:	10bfffc4 	addi	r2,r2,-1
1000fbd0:	11000936 	bltu	r2,r4,1000fbf8 <__clzsi2+0x64>
1000fbd4:	00800404 	movi	r2,16
1000fbd8:	1007883a 	mov	r3,r2
1000fbdc:	20c8d83a 	srl	r4,r4,r3
1000fbe0:	00c40074 	movhi	r3,4097
1000fbe4:	18cbfd04 	addi	r3,r3,12276
1000fbe8:	1909883a 	add	r4,r3,r4
1000fbec:	20c00003 	ldbu	r3,0(r4)
1000fbf0:	10c5c83a 	sub	r2,r2,r3
1000fbf4:	f800283a 	ret
1000fbf8:	00c00604 	movi	r3,24
1000fbfc:	20c8d83a 	srl	r4,r4,r3
1000fc00:	00c40074 	movhi	r3,4097
1000fc04:	18cbfd04 	addi	r3,r3,12276
1000fc08:	00800204 	movi	r2,8
1000fc0c:	1909883a 	add	r4,r3,r4
1000fc10:	20c00003 	ldbu	r3,0(r4)
1000fc14:	10c5c83a 	sub	r2,r2,r3
1000fc18:	f800283a 	ret
1000fc1c:	0007883a 	mov	r3,zero
1000fc20:	20c8d83a 	srl	r4,r4,r3
1000fc24:	00c40074 	movhi	r3,4097
1000fc28:	18cbfd04 	addi	r3,r3,12276
1000fc2c:	00800804 	movi	r2,32
1000fc30:	1909883a 	add	r4,r3,r4
1000fc34:	20c00003 	ldbu	r3,0(r4)
1000fc38:	10c5c83a 	sub	r2,r2,r3
1000fc3c:	f800283a 	ret

1000fc40 <__unpack_f>:
1000fc40:	20c00017 	ldw	r3,0(r4)
1000fc44:	00802034 	movhi	r2,128
1000fc48:	10bfffc4 	addi	r2,r2,-1
1000fc4c:	1808d5fa 	srli	r4,r3,23
1000fc50:	180cd7fa 	srli	r6,r3,31
1000fc54:	1884703a 	and	r2,r3,r2
1000fc58:	21003fcc 	andi	r4,r4,255
1000fc5c:	29800115 	stw	r6,4(r5)
1000fc60:	2000111e 	bne	r4,zero,1000fca8 <__unpack_f+0x68>
1000fc64:	10001a26 	beq	r2,zero,1000fcd0 <__unpack_f+0x90>
1000fc68:	00ffe084 	movi	r3,-126
1000fc6c:	100491fa 	slli	r2,r2,7
1000fc70:	28c00215 	stw	r3,8(r5)
1000fc74:	00c000c4 	movi	r3,3
1000fc78:	28c00015 	stw	r3,0(r5)
1000fc7c:	01900034 	movhi	r6,16384
1000fc80:	31bfffc4 	addi	r6,r6,-1
1000fc84:	30801036 	bltu	r6,r2,1000fcc8 <__unpack_f+0x88>
1000fc88:	00ffe044 	movi	r3,-127
1000fc8c:	1085883a 	add	r2,r2,r2
1000fc90:	1809883a 	mov	r4,r3
1000fc94:	18ffffc4 	addi	r3,r3,-1
1000fc98:	30bffc2e 	bgeu	r6,r2,1000fc8c <__alt_data_end+0xf800fc8c>
1000fc9c:	29000215 	stw	r4,8(r5)
1000fca0:	28800315 	stw	r2,12(r5)
1000fca4:	f800283a 	ret
1000fca8:	01803fc4 	movi	r6,255
1000fcac:	21800b26 	beq	r4,r6,1000fcdc <__unpack_f+0x9c>
1000fcb0:	100491fa 	slli	r2,r2,7
1000fcb4:	213fe044 	addi	r4,r4,-127
1000fcb8:	00c000c4 	movi	r3,3
1000fcbc:	10900034 	orhi	r2,r2,16384
1000fcc0:	29000215 	stw	r4,8(r5)
1000fcc4:	28c00015 	stw	r3,0(r5)
1000fcc8:	28800315 	stw	r2,12(r5)
1000fccc:	f800283a 	ret
1000fcd0:	00800084 	movi	r2,2
1000fcd4:	28800015 	stw	r2,0(r5)
1000fcd8:	f800283a 	ret
1000fcdc:	10000526 	beq	r2,zero,1000fcf4 <__unpack_f+0xb4>
1000fce0:	18c0042c 	andhi	r3,r3,16
1000fce4:	18000626 	beq	r3,zero,1000fd00 <__unpack_f+0xc0>
1000fce8:	00c00044 	movi	r3,1
1000fcec:	28c00015 	stw	r3,0(r5)
1000fcf0:	003ff506 	br	1000fcc8 <__alt_data_end+0xf800fcc8>
1000fcf4:	00800104 	movi	r2,4
1000fcf8:	28800015 	stw	r2,0(r5)
1000fcfc:	f800283a 	ret
1000fd00:	28000015 	stw	zero,0(r5)
1000fd04:	003ff006 	br	1000fcc8 <__alt_data_end+0xf800fcc8>

1000fd08 <__fpcmp_parts_f>:
1000fd08:	20c00017 	ldw	r3,0(r4)
1000fd0c:	00800044 	movi	r2,1
1000fd10:	10c0172e 	bgeu	r2,r3,1000fd70 <__fpcmp_parts_f+0x68>
1000fd14:	29800017 	ldw	r6,0(r5)
1000fd18:	1180152e 	bgeu	r2,r6,1000fd70 <__fpcmp_parts_f+0x68>
1000fd1c:	01c00104 	movi	r7,4
1000fd20:	19c02326 	beq	r3,r7,1000fdb0 <__fpcmp_parts_f+0xa8>
1000fd24:	31c00926 	beq	r6,r7,1000fd4c <__fpcmp_parts_f+0x44>
1000fd28:	01c00084 	movi	r7,2
1000fd2c:	19c00626 	beq	r3,r7,1000fd48 <__fpcmp_parts_f+0x40>
1000fd30:	31c01126 	beq	r6,r7,1000fd78 <__fpcmp_parts_f+0x70>
1000fd34:	20c00117 	ldw	r3,4(r4)
1000fd38:	29800117 	ldw	r6,4(r5)
1000fd3c:	19801226 	beq	r3,r6,1000fd88 <__fpcmp_parts_f+0x80>
1000fd40:	1800041e 	bne	r3,zero,1000fd54 <__fpcmp_parts_f+0x4c>
1000fd44:	f800283a 	ret
1000fd48:	30c01526 	beq	r6,r3,1000fda0 <__fpcmp_parts_f+0x98>
1000fd4c:	28800117 	ldw	r2,4(r5)
1000fd50:	1000071e 	bne	r2,zero,1000fd70 <__fpcmp_parts_f+0x68>
1000fd54:	00bfffc4 	movi	r2,-1
1000fd58:	f800283a 	ret
1000fd5c:	39801216 	blt	r7,r6,1000fda8 <__fpcmp_parts_f+0xa0>
1000fd60:	21000317 	ldw	r4,12(r4)
1000fd64:	28800317 	ldw	r2,12(r5)
1000fd68:	11000c2e 	bgeu	r2,r4,1000fd9c <__fpcmp_parts_f+0x94>
1000fd6c:	183ff91e 	bne	r3,zero,1000fd54 <__alt_data_end+0xf800fd54>
1000fd70:	00800044 	movi	r2,1
1000fd74:	f800283a 	ret
1000fd78:	20800117 	ldw	r2,4(r4)
1000fd7c:	103ff51e 	bne	r2,zero,1000fd54 <__alt_data_end+0xf800fd54>
1000fd80:	00800044 	movi	r2,1
1000fd84:	f800283a 	ret
1000fd88:	21c00217 	ldw	r7,8(r4)
1000fd8c:	29800217 	ldw	r6,8(r5)
1000fd90:	31fff20e 	bge	r6,r7,1000fd5c <__alt_data_end+0xf800fd5c>
1000fd94:	183fef1e 	bne	r3,zero,1000fd54 <__alt_data_end+0xf800fd54>
1000fd98:	f800283a 	ret
1000fd9c:	20800236 	bltu	r4,r2,1000fda8 <__fpcmp_parts_f+0xa0>
1000fda0:	0005883a 	mov	r2,zero
1000fda4:	f800283a 	ret
1000fda8:	183fea26 	beq	r3,zero,1000fd54 <__alt_data_end+0xf800fd54>
1000fdac:	003ff006 	br	1000fd70 <__alt_data_end+0xf800fd70>
1000fdb0:	30fff11e 	bne	r6,r3,1000fd78 <__alt_data_end+0xf800fd78>
1000fdb4:	28c00117 	ldw	r3,4(r5)
1000fdb8:	20800117 	ldw	r2,4(r4)
1000fdbc:	1885c83a 	sub	r2,r3,r2
1000fdc0:	f800283a 	ret

1000fdc4 <__make_fp>:
1000fdc4:	defffb04 	addi	sp,sp,-20
1000fdc8:	d9000015 	stw	r4,0(sp)
1000fdcc:	d809883a 	mov	r4,sp
1000fdd0:	dfc00415 	stw	ra,16(sp)
1000fdd4:	d9400115 	stw	r5,4(sp)
1000fdd8:	d9800215 	stw	r6,8(sp)
1000fddc:	d9c00315 	stw	r7,12(sp)
1000fde0:	00102700 	call	10010270 <__pack_f>
1000fde4:	dfc00417 	ldw	ra,16(sp)
1000fde8:	dec00504 	addi	sp,sp,20
1000fdec:	f800283a 	ret

1000fdf0 <__pack_d>:
1000fdf0:	20800017 	ldw	r2,0(r4)
1000fdf4:	defff804 	addi	sp,sp,-32
1000fdf8:	dcc00315 	stw	r19,12(sp)
1000fdfc:	dc800215 	stw	r18,8(sp)
1000fe00:	dfc00715 	stw	ra,28(sp)
1000fe04:	dd800615 	stw	r22,24(sp)
1000fe08:	dd400515 	stw	r21,20(sp)
1000fe0c:	dd000415 	stw	r20,16(sp)
1000fe10:	dc400115 	stw	r17,4(sp)
1000fe14:	dc000015 	stw	r16,0(sp)
1000fe18:	04800044 	movi	r18,1
1000fe1c:	24400317 	ldw	r17,12(r4)
1000fe20:	24000417 	ldw	r16,16(r4)
1000fe24:	24c00117 	ldw	r19,4(r4)
1000fe28:	9080422e 	bgeu	r18,r2,1000ff34 <__pack_d+0x144>
1000fe2c:	00c00104 	movi	r3,4
1000fe30:	10c03c26 	beq	r2,r3,1000ff24 <__pack_d+0x134>
1000fe34:	00c00084 	movi	r3,2
1000fe38:	10c01926 	beq	r2,r3,1000fea0 <__pack_d+0xb0>
1000fe3c:	8c04b03a 	or	r2,r17,r16
1000fe40:	10001726 	beq	r2,zero,1000fea0 <__pack_d+0xb0>
1000fe44:	21000217 	ldw	r4,8(r4)
1000fe48:	00bf0084 	movi	r2,-1022
1000fe4c:	20804016 	blt	r4,r2,1000ff50 <__pack_d+0x160>
1000fe50:	0080ffc4 	movi	r2,1023
1000fe54:	11003316 	blt	r2,r4,1000ff24 <__pack_d+0x134>
1000fe58:	88803fcc 	andi	r2,r17,255
1000fe5c:	00c02004 	movi	r3,128
1000fe60:	10c02926 	beq	r2,r3,1000ff08 <__pack_d+0x118>
1000fe64:	88801fc4 	addi	r2,r17,127
1000fe68:	1463803a 	cmpltu	r17,r2,r17
1000fe6c:	8c21883a 	add	r16,r17,r16
1000fe70:	1023883a 	mov	r17,r2
1000fe74:	00880034 	movhi	r2,8192
1000fe78:	10bfffc4 	addi	r2,r2,-1
1000fe7c:	14001c36 	bltu	r2,r16,1000fef0 <__pack_d+0x100>
1000fe80:	2100ffc4 	addi	r4,r4,1023
1000fe84:	8006963a 	slli	r3,r16,24
1000fe88:	8804d23a 	srli	r2,r17,8
1000fe8c:	8020913a 	slli	r16,r16,4
1000fe90:	2101ffcc 	andi	r4,r4,2047
1000fe94:	1884b03a 	or	r2,r3,r2
1000fe98:	8020d33a 	srli	r16,r16,12
1000fe9c:	00000306 	br	1000feac <__pack_d+0xbc>
1000fea0:	0009883a 	mov	r4,zero
1000fea4:	0005883a 	mov	r2,zero
1000fea8:	0021883a 	mov	r16,zero
1000feac:	2008953a 	slli	r4,r4,20
1000feb0:	982697fa 	slli	r19,r19,31
1000feb4:	00c00434 	movhi	r3,16
1000feb8:	18ffffc4 	addi	r3,r3,-1
1000febc:	80e0703a 	and	r16,r16,r3
1000fec0:	8106b03a 	or	r3,r16,r4
1000fec4:	1cc6b03a 	or	r3,r3,r19
1000fec8:	dfc00717 	ldw	ra,28(sp)
1000fecc:	dd800617 	ldw	r22,24(sp)
1000fed0:	dd400517 	ldw	r21,20(sp)
1000fed4:	dd000417 	ldw	r20,16(sp)
1000fed8:	dcc00317 	ldw	r19,12(sp)
1000fedc:	dc800217 	ldw	r18,8(sp)
1000fee0:	dc400117 	ldw	r17,4(sp)
1000fee4:	dc000017 	ldw	r16,0(sp)
1000fee8:	dec00804 	addi	sp,sp,32
1000feec:	f800283a 	ret
1000fef0:	800697fa 	slli	r3,r16,31
1000fef4:	8804d07a 	srli	r2,r17,1
1000fef8:	21010004 	addi	r4,r4,1024
1000fefc:	8020d07a 	srli	r16,r16,1
1000ff00:	18a2b03a 	or	r17,r3,r2
1000ff04:	003fdf06 	br	1000fe84 <__alt_data_end+0xf800fe84>
1000ff08:	88c0400c 	andi	r3,r17,256
1000ff0c:	183fd926 	beq	r3,zero,1000fe74 <__alt_data_end+0xf800fe74>
1000ff10:	8885883a 	add	r2,r17,r2
1000ff14:	1463803a 	cmpltu	r17,r2,r17
1000ff18:	8c21883a 	add	r16,r17,r16
1000ff1c:	1023883a 	mov	r17,r2
1000ff20:	003fd406 	br	1000fe74 <__alt_data_end+0xf800fe74>
1000ff24:	0101ffc4 	movi	r4,2047
1000ff28:	0005883a 	mov	r2,zero
1000ff2c:	0021883a 	mov	r16,zero
1000ff30:	003fde06 	br	1000feac <__alt_data_end+0xf800feac>
1000ff34:	84000234 	orhi	r16,r16,8
1000ff38:	00c00434 	movhi	r3,16
1000ff3c:	18ffffc4 	addi	r3,r3,-1
1000ff40:	8805883a 	mov	r2,r17
1000ff44:	80e0703a 	and	r16,r16,r3
1000ff48:	0101ffc4 	movi	r4,2047
1000ff4c:	003fd706 	br	1000feac <__alt_data_end+0xf800feac>
1000ff50:	1129c83a 	sub	r20,r2,r4
1000ff54:	00800e04 	movi	r2,56
1000ff58:	15002716 	blt	r2,r20,1000fff8 <__pack_d+0x208>
1000ff5c:	800b883a 	mov	r5,r16
1000ff60:	a00d883a 	mov	r6,r20
1000ff64:	8809883a 	mov	r4,r17
1000ff68:	00101e80 	call	100101e8 <__lshrdi3>
1000ff6c:	9009883a 	mov	r4,r18
1000ff70:	000b883a 	mov	r5,zero
1000ff74:	a00d883a 	mov	r6,r20
1000ff78:	102d883a 	mov	r22,r2
1000ff7c:	182b883a 	mov	r21,r3
1000ff80:	001022c0 	call	1001022c <__ashldi3>
1000ff84:	1009003a 	cmpeq	r4,r2,zero
1000ff88:	1907c83a 	sub	r3,r3,r4
1000ff8c:	10bfffc4 	addi	r2,r2,-1
1000ff90:	1c20703a 	and	r16,r3,r16
1000ff94:	1444703a 	and	r2,r2,r17
1000ff98:	1404b03a 	or	r2,r2,r16
1000ff9c:	1004c03a 	cmpne	r2,r2,zero
1000ffa0:	1584b03a 	or	r2,r2,r22
1000ffa4:	11003fcc 	andi	r4,r2,255
1000ffa8:	01402004 	movi	r5,128
1000ffac:	a807883a 	mov	r3,r21
1000ffb0:	2140131e 	bne	r4,r5,10010000 <__pack_d+0x210>
1000ffb4:	1140400c 	andi	r5,r2,256
1000ffb8:	28000426 	beq	r5,zero,1000ffcc <__pack_d+0x1dc>
1000ffbc:	1109883a 	add	r4,r2,r4
1000ffc0:	2085803a 	cmpltu	r2,r4,r2
1000ffc4:	1547883a 	add	r3,r2,r21
1000ffc8:	2005883a 	mov	r2,r4
1000ffcc:	1808963a 	slli	r4,r3,24
1000ffd0:	1004d23a 	srli	r2,r2,8
1000ffd4:	1820913a 	slli	r16,r3,4
1000ffd8:	01440034 	movhi	r5,4096
1000ffdc:	297fffc4 	addi	r5,r5,-1
1000ffe0:	2084b03a 	or	r2,r4,r2
1000ffe4:	8020d33a 	srli	r16,r16,12
1000ffe8:	01000044 	movi	r4,1
1000ffec:	28ffaf36 	bltu	r5,r3,1000feac <__alt_data_end+0xf800feac>
1000fff0:	0009883a 	mov	r4,zero
1000fff4:	003fad06 	br	1000feac <__alt_data_end+0xf800feac>
1000fff8:	0005883a 	mov	r2,zero
1000fffc:	0007883a 	mov	r3,zero
10010000:	11001fc4 	addi	r4,r2,127
10010004:	2085803a 	cmpltu	r2,r4,r2
10010008:	10c7883a 	add	r3,r2,r3
1001000c:	2005883a 	mov	r2,r4
10010010:	003fee06 	br	1000ffcc <__alt_data_end+0xf800ffcc>

10010014 <__unpack_d>:
10010014:	21800117 	ldw	r6,4(r4)
10010018:	20c00017 	ldw	r3,0(r4)
1001001c:	3004d7fa 	srli	r2,r6,31
10010020:	3008d53a 	srli	r4,r6,20
10010024:	28800115 	stw	r2,4(r5)
10010028:	2101ffcc 	andi	r4,r4,2047
1001002c:	00800434 	movhi	r2,16
10010030:	10bfffc4 	addi	r2,r2,-1
10010034:	3084703a 	and	r2,r6,r2
10010038:	20001a1e 	bne	r4,zero,100100a4 <__unpack_d+0x90>
1001003c:	1888b03a 	or	r4,r3,r2
10010040:	20002626 	beq	r4,zero,100100dc <__unpack_d+0xc8>
10010044:	1808d63a 	srli	r4,r3,24
10010048:	1004923a 	slli	r2,r2,8
1001004c:	01bf0084 	movi	r6,-1022
10010050:	29800215 	stw	r6,8(r5)
10010054:	2084b03a 	or	r2,r4,r2
10010058:	010000c4 	movi	r4,3
1001005c:	29000015 	stw	r4,0(r5)
10010060:	02040034 	movhi	r8,4096
10010064:	423fffc4 	addi	r8,r8,-1
10010068:	1806923a 	slli	r3,r3,8
1001006c:	40801836 	bltu	r8,r2,100100d0 <__unpack_d+0xbc>
10010070:	013f0044 	movi	r4,-1023
10010074:	18cd883a 	add	r6,r3,r3
10010078:	30c7803a 	cmpltu	r3,r6,r3
1001007c:	1085883a 	add	r2,r2,r2
10010080:	1885883a 	add	r2,r3,r2
10010084:	200f883a 	mov	r7,r4
10010088:	3007883a 	mov	r3,r6
1001008c:	213fffc4 	addi	r4,r4,-1
10010090:	40bff82e 	bgeu	r8,r2,10010074 <__alt_data_end+0xf8010074>
10010094:	29c00215 	stw	r7,8(r5)
10010098:	28c00315 	stw	r3,12(r5)
1001009c:	28800415 	stw	r2,16(r5)
100100a0:	f800283a 	ret
100100a4:	01c1ffc4 	movi	r7,2047
100100a8:	21c00f26 	beq	r4,r7,100100e8 <__unpack_d+0xd4>
100100ac:	180cd63a 	srli	r6,r3,24
100100b0:	1004923a 	slli	r2,r2,8
100100b4:	213f0044 	addi	r4,r4,-1023
100100b8:	1806923a 	slli	r3,r3,8
100100bc:	3084b03a 	or	r2,r6,r2
100100c0:	29000215 	stw	r4,8(r5)
100100c4:	010000c4 	movi	r4,3
100100c8:	10840034 	orhi	r2,r2,4096
100100cc:	29000015 	stw	r4,0(r5)
100100d0:	28c00315 	stw	r3,12(r5)
100100d4:	28800415 	stw	r2,16(r5)
100100d8:	f800283a 	ret
100100dc:	00800084 	movi	r2,2
100100e0:	28800015 	stw	r2,0(r5)
100100e4:	f800283a 	ret
100100e8:	1888b03a 	or	r4,r3,r2
100100ec:	20000526 	beq	r4,zero,10010104 <__unpack_d+0xf0>
100100f0:	3180022c 	andhi	r6,r6,8
100100f4:	30000626 	beq	r6,zero,10010110 <__unpack_d+0xfc>
100100f8:	01000044 	movi	r4,1
100100fc:	29000015 	stw	r4,0(r5)
10010100:	003ff306 	br	100100d0 <__alt_data_end+0xf80100d0>
10010104:	00800104 	movi	r2,4
10010108:	28800015 	stw	r2,0(r5)
1001010c:	f800283a 	ret
10010110:	28000015 	stw	zero,0(r5)
10010114:	003fee06 	br	100100d0 <__alt_data_end+0xf80100d0>

10010118 <__fpcmp_parts_d>:
10010118:	20c00017 	ldw	r3,0(r4)
1001011c:	00800044 	movi	r2,1
10010120:	10c0142e 	bgeu	r2,r3,10010174 <__fpcmp_parts_d+0x5c>
10010124:	29800017 	ldw	r6,0(r5)
10010128:	1180122e 	bgeu	r2,r6,10010174 <__fpcmp_parts_d+0x5c>
1001012c:	01c00104 	movi	r7,4
10010130:	19c02826 	beq	r3,r7,100101d4 <__fpcmp_parts_d+0xbc>
10010134:	31c00926 	beq	r6,r7,1001015c <__fpcmp_parts_d+0x44>
10010138:	01c00084 	movi	r7,2
1001013c:	19c00626 	beq	r3,r7,10010158 <__fpcmp_parts_d+0x40>
10010140:	31c00a26 	beq	r6,r7,1001016c <__fpcmp_parts_d+0x54>
10010144:	20c00117 	ldw	r3,4(r4)
10010148:	29800117 	ldw	r6,4(r5)
1001014c:	19800b26 	beq	r3,r6,1001017c <__fpcmp_parts_d+0x64>
10010150:	1800041e 	bne	r3,zero,10010164 <__fpcmp_parts_d+0x4c>
10010154:	f800283a 	ret
10010158:	30c01a26 	beq	r6,r3,100101c4 <__fpcmp_parts_d+0xac>
1001015c:	28800117 	ldw	r2,4(r5)
10010160:	1000041e 	bne	r2,zero,10010174 <__fpcmp_parts_d+0x5c>
10010164:	00bfffc4 	movi	r2,-1
10010168:	f800283a 	ret
1001016c:	20800117 	ldw	r2,4(r4)
10010170:	103ffc1e 	bne	r2,zero,10010164 <__alt_data_end+0xf8010164>
10010174:	00800044 	movi	r2,1
10010178:	f800283a 	ret
1001017c:	21c00217 	ldw	r7,8(r4)
10010180:	29800217 	ldw	r6,8(r5)
10010184:	31c0020e 	bge	r6,r7,10010190 <__fpcmp_parts_d+0x78>
10010188:	183ff61e 	bne	r3,zero,10010164 <__alt_data_end+0xf8010164>
1001018c:	f800283a 	ret
10010190:	39800a16 	blt	r7,r6,100101bc <__fpcmp_parts_d+0xa4>
10010194:	20800417 	ldw	r2,16(r4)
10010198:	29800417 	ldw	r6,16(r5)
1001019c:	21c00317 	ldw	r7,12(r4)
100101a0:	29000317 	ldw	r4,12(r5)
100101a4:	30800936 	bltu	r6,r2,100101cc <__fpcmp_parts_d+0xb4>
100101a8:	1180011e 	bne	r2,r6,100101b0 <__fpcmp_parts_d+0x98>
100101ac:	21c00736 	bltu	r4,r7,100101cc <__fpcmp_parts_d+0xb4>
100101b0:	11800236 	bltu	r2,r6,100101bc <__fpcmp_parts_d+0xa4>
100101b4:	3080031e 	bne	r6,r2,100101c4 <__fpcmp_parts_d+0xac>
100101b8:	3900022e 	bgeu	r7,r4,100101c4 <__fpcmp_parts_d+0xac>
100101bc:	183fe926 	beq	r3,zero,10010164 <__alt_data_end+0xf8010164>
100101c0:	003fec06 	br	10010174 <__alt_data_end+0xf8010174>
100101c4:	0005883a 	mov	r2,zero
100101c8:	f800283a 	ret
100101cc:	183fe926 	beq	r3,zero,10010174 <__alt_data_end+0xf8010174>
100101d0:	003fe406 	br	10010164 <__alt_data_end+0xf8010164>
100101d4:	30ffe51e 	bne	r6,r3,1001016c <__alt_data_end+0xf801016c>
100101d8:	28c00117 	ldw	r3,4(r5)
100101dc:	20800117 	ldw	r2,4(r4)
100101e0:	1885c83a 	sub	r2,r3,r2
100101e4:	f800283a 	ret

100101e8 <__lshrdi3>:
100101e8:	2005883a 	mov	r2,r4
100101ec:	2807883a 	mov	r3,r5
100101f0:	30000826 	beq	r6,zero,10010214 <__lshrdi3+0x2c>
100101f4:	01000804 	movi	r4,32
100101f8:	2189c83a 	sub	r4,r4,r6
100101fc:	0100060e 	bge	zero,r4,10010218 <__lshrdi3+0x30>
10010200:	1184d83a 	srl	r2,r2,r6
10010204:	2908983a 	sll	r4,r5,r4
10010208:	298cd83a 	srl	r6,r5,r6
1001020c:	2084b03a 	or	r2,r4,r2
10010210:	3007883a 	mov	r3,r6
10010214:	f800283a 	ret
10010218:	0105c83a 	sub	r2,zero,r4
1001021c:	000d883a 	mov	r6,zero
10010220:	2884d83a 	srl	r2,r5,r2
10010224:	3007883a 	mov	r3,r6
10010228:	003ffa06 	br	10010214 <__alt_data_end+0xf8010214>

1001022c <__ashldi3>:
1001022c:	2005883a 	mov	r2,r4
10010230:	2807883a 	mov	r3,r5
10010234:	30000826 	beq	r6,zero,10010258 <__ashldi3+0x2c>
10010238:	01000804 	movi	r4,32
1001023c:	2189c83a 	sub	r4,r4,r6
10010240:	0100060e 	bge	zero,r4,1001025c <__ashldi3+0x30>
10010244:	1108d83a 	srl	r4,r2,r4
10010248:	2986983a 	sll	r3,r5,r6
1001024c:	118c983a 	sll	r6,r2,r6
10010250:	20c6b03a 	or	r3,r4,r3
10010254:	3005883a 	mov	r2,r6
10010258:	f800283a 	ret
1001025c:	0107c83a 	sub	r3,zero,r4
10010260:	000d883a 	mov	r6,zero
10010264:	10c6983a 	sll	r3,r2,r3
10010268:	3005883a 	mov	r2,r6
1001026c:	003ffa06 	br	10010258 <__alt_data_end+0xf8010258>

10010270 <__pack_f>:
10010270:	21400017 	ldw	r5,0(r4)
10010274:	01800044 	movi	r6,1
10010278:	20c00317 	ldw	r3,12(r4)
1001027c:	21c00117 	ldw	r7,4(r4)
10010280:	3140282e 	bgeu	r6,r5,10010324 <__pack_f+0xb4>
10010284:	00800104 	movi	r2,4
10010288:	28802326 	beq	r5,r2,10010318 <__pack_f+0xa8>
1001028c:	00800084 	movi	r2,2
10010290:	28800f26 	beq	r5,r2,100102d0 <__pack_f+0x60>
10010294:	18000e26 	beq	r3,zero,100102d0 <__pack_f+0x60>
10010298:	21000217 	ldw	r4,8(r4)
1001029c:	00bfe084 	movi	r2,-126
100102a0:	20802616 	blt	r4,r2,1001033c <__pack_f+0xcc>
100102a4:	00801fc4 	movi	r2,127
100102a8:	11001b16 	blt	r2,r4,10010318 <__pack_f+0xa8>
100102ac:	188a703a 	and	r5,r3,r2
100102b0:	00801004 	movi	r2,64
100102b4:	28801126 	beq	r5,r2,100102fc <__pack_f+0x8c>
100102b8:	18c00fc4 	addi	r3,r3,63
100102bc:	18001316 	blt	r3,zero,1001030c <__pack_f+0x9c>
100102c0:	21001fc4 	addi	r4,r4,127
100102c4:	180690ba 	slli	r3,r3,2
100102c8:	1806d27a 	srli	r3,r3,9
100102cc:	00000206 	br	100102d8 <__pack_f+0x68>
100102d0:	0009883a 	mov	r4,zero
100102d4:	0007883a 	mov	r3,zero
100102d8:	21003fcc 	andi	r4,r4,255
100102dc:	200895fa 	slli	r4,r4,23
100102e0:	380a97fa 	slli	r5,r7,31
100102e4:	00802034 	movhi	r2,128
100102e8:	10bfffc4 	addi	r2,r2,-1
100102ec:	1886703a 	and	r3,r3,r2
100102f0:	1904b03a 	or	r2,r3,r4
100102f4:	1144b03a 	or	r2,r2,r5
100102f8:	f800283a 	ret
100102fc:	1880200c 	andi	r2,r3,128
10010300:	103fee26 	beq	r2,zero,100102bc <__alt_data_end+0xf80102bc>
10010304:	18c01004 	addi	r3,r3,64
10010308:	183fed0e 	bge	r3,zero,100102c0 <__alt_data_end+0xf80102c0>
1001030c:	1806d07a 	srli	r3,r3,1
10010310:	21002004 	addi	r4,r4,128
10010314:	003feb06 	br	100102c4 <__alt_data_end+0xf80102c4>
10010318:	013fffc4 	movi	r4,-1
1001031c:	0007883a 	mov	r3,zero
10010320:	003fed06 	br	100102d8 <__alt_data_end+0xf80102d8>
10010324:	18c00434 	orhi	r3,r3,16
10010328:	00802034 	movhi	r2,128
1001032c:	10bfffc4 	addi	r2,r2,-1
10010330:	1886703a 	and	r3,r3,r2
10010334:	013fffc4 	movi	r4,-1
10010338:	003fe706 	br	100102d8 <__alt_data_end+0xf80102d8>
1001033c:	1105c83a 	sub	r2,r2,r4
10010340:	01000644 	movi	r4,25
10010344:	20801216 	blt	r4,r2,10010390 <__pack_f+0x120>
10010348:	3088983a 	sll	r4,r6,r2
1001034c:	1884d83a 	srl	r2,r3,r2
10010350:	213fffc4 	addi	r4,r4,-1
10010354:	20c6703a 	and	r3,r4,r3
10010358:	1806c03a 	cmpne	r3,r3,zero
1001035c:	1884b03a 	or	r2,r3,r2
10010360:	11001fcc 	andi	r4,r2,127
10010364:	00c01004 	movi	r3,64
10010368:	20c00a1e 	bne	r4,r3,10010394 <__pack_f+0x124>
1001036c:	10c0200c 	andi	r3,r2,128
10010370:	18000126 	beq	r3,zero,10010378 <__pack_f+0x108>
10010374:	10801004 	addi	r2,r2,64
10010378:	100690ba 	slli	r3,r2,2
1001037c:	01100034 	movhi	r4,16384
10010380:	1105403a 	cmpgeu	r2,r2,r4
10010384:	1806d27a 	srli	r3,r3,9
10010388:	1009883a 	mov	r4,r2
1001038c:	003fd206 	br	100102d8 <__alt_data_end+0xf80102d8>
10010390:	0005883a 	mov	r2,zero
10010394:	10800fc4 	addi	r2,r2,63
10010398:	003ff706 	br	10010378 <__alt_data_end+0xf8010378>

1001039c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001039c:	defffe04 	addi	sp,sp,-8
100103a0:	dfc00115 	stw	ra,4(sp)
100103a4:	df000015 	stw	fp,0(sp)
100103a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100103ac:	00840074 	movhi	r2,4097
100103b0:	10937004 	addi	r2,r2,19904
100103b4:	10800017 	ldw	r2,0(r2)
100103b8:	10000526 	beq	r2,zero,100103d0 <alt_get_errno+0x34>
100103bc:	00840074 	movhi	r2,4097
100103c0:	10937004 	addi	r2,r2,19904
100103c4:	10800017 	ldw	r2,0(r2)
100103c8:	103ee83a 	callr	r2
100103cc:	00000206 	br	100103d8 <alt_get_errno+0x3c>
100103d0:	00840074 	movhi	r2,4097
100103d4:	109aa604 	addi	r2,r2,27288
}
100103d8:	e037883a 	mov	sp,fp
100103dc:	dfc00117 	ldw	ra,4(sp)
100103e0:	df000017 	ldw	fp,0(sp)
100103e4:	dec00204 	addi	sp,sp,8
100103e8:	f800283a 	ret

100103ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100103ec:	defffb04 	addi	sp,sp,-20
100103f0:	dfc00415 	stw	ra,16(sp)
100103f4:	df000315 	stw	fp,12(sp)
100103f8:	df000304 	addi	fp,sp,12
100103fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10010400:	e0bfff17 	ldw	r2,-4(fp)
10010404:	10000716 	blt	r2,zero,10010424 <close+0x38>
10010408:	e13fff17 	ldw	r4,-4(fp)
1001040c:	01400304 	movi	r5,12
10010410:	000158c0 	call	1000158c <__mulsi3>
10010414:	00c40074 	movhi	r3,4097
10010418:	18ceed04 	addi	r3,r3,15284
1001041c:	10c5883a 	add	r2,r2,r3
10010420:	00000106 	br	10010428 <close+0x3c>
10010424:	0005883a 	mov	r2,zero
10010428:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1001042c:	e0bffd17 	ldw	r2,-12(fp)
10010430:	10001826 	beq	r2,zero,10010494 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10010434:	e0bffd17 	ldw	r2,-12(fp)
10010438:	10800017 	ldw	r2,0(r2)
1001043c:	10800417 	ldw	r2,16(r2)
10010440:	10000626 	beq	r2,zero,1001045c <close+0x70>
10010444:	e0bffd17 	ldw	r2,-12(fp)
10010448:	10800017 	ldw	r2,0(r2)
1001044c:	10800417 	ldw	r2,16(r2)
10010450:	e13ffd17 	ldw	r4,-12(fp)
10010454:	103ee83a 	callr	r2
10010458:	00000106 	br	10010460 <close+0x74>
1001045c:	0005883a 	mov	r2,zero
10010460:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10010464:	e13fff17 	ldw	r4,-4(fp)
10010468:	0010ae40 	call	10010ae4 <alt_release_fd>
    if (rval < 0)
1001046c:	e0bffe17 	ldw	r2,-8(fp)
10010470:	1000060e 	bge	r2,zero,1001048c <close+0xa0>
    {
      ALT_ERRNO = -rval;
10010474:	001039c0 	call	1001039c <alt_get_errno>
10010478:	e0fffe17 	ldw	r3,-8(fp)
1001047c:	00c7c83a 	sub	r3,zero,r3
10010480:	10c00015 	stw	r3,0(r2)
      return -1;
10010484:	00bfffc4 	movi	r2,-1
10010488:	00000606 	br	100104a4 <close+0xb8>
    }
    return 0;
1001048c:	0005883a 	mov	r2,zero
10010490:	00000406 	br	100104a4 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010494:	001039c0 	call	1001039c <alt_get_errno>
10010498:	00c01444 	movi	r3,81
1001049c:	10c00015 	stw	r3,0(r2)
    return -1;
100104a0:	00bfffc4 	movi	r2,-1
  }
}
100104a4:	e037883a 	mov	sp,fp
100104a8:	dfc00117 	ldw	ra,4(sp)
100104ac:	df000017 	ldw	fp,0(sp)
100104b0:	dec00204 	addi	sp,sp,8
100104b4:	f800283a 	ret

100104b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100104b8:	defffc04 	addi	sp,sp,-16
100104bc:	df000315 	stw	fp,12(sp)
100104c0:	df000304 	addi	fp,sp,12
100104c4:	e13ffd15 	stw	r4,-12(fp)
100104c8:	e17ffe15 	stw	r5,-8(fp)
100104cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
100104d0:	e0bfff17 	ldw	r2,-4(fp)
}
100104d4:	e037883a 	mov	sp,fp
100104d8:	df000017 	ldw	fp,0(sp)
100104dc:	dec00104 	addi	sp,sp,4
100104e0:	f800283a 	ret

100104e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100104e4:	defffe04 	addi	sp,sp,-8
100104e8:	dfc00115 	stw	ra,4(sp)
100104ec:	df000015 	stw	fp,0(sp)
100104f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100104f4:	00840074 	movhi	r2,4097
100104f8:	10937004 	addi	r2,r2,19904
100104fc:	10800017 	ldw	r2,0(r2)
10010500:	10000526 	beq	r2,zero,10010518 <alt_get_errno+0x34>
10010504:	00840074 	movhi	r2,4097
10010508:	10937004 	addi	r2,r2,19904
1001050c:	10800017 	ldw	r2,0(r2)
10010510:	103ee83a 	callr	r2
10010514:	00000206 	br	10010520 <alt_get_errno+0x3c>
10010518:	00840074 	movhi	r2,4097
1001051c:	109aa604 	addi	r2,r2,27288
}
10010520:	e037883a 	mov	sp,fp
10010524:	dfc00117 	ldw	ra,4(sp)
10010528:	df000017 	ldw	fp,0(sp)
1001052c:	dec00204 	addi	sp,sp,8
10010530:	f800283a 	ret

10010534 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10010534:	defffb04 	addi	sp,sp,-20
10010538:	dfc00415 	stw	ra,16(sp)
1001053c:	df000315 	stw	fp,12(sp)
10010540:	df000304 	addi	fp,sp,12
10010544:	e13ffe15 	stw	r4,-8(fp)
10010548:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001054c:	e0bffe17 	ldw	r2,-8(fp)
10010550:	10000716 	blt	r2,zero,10010570 <fstat+0x3c>
10010554:	e13ffe17 	ldw	r4,-8(fp)
10010558:	01400304 	movi	r5,12
1001055c:	000158c0 	call	1000158c <__mulsi3>
10010560:	00c40074 	movhi	r3,4097
10010564:	18ceed04 	addi	r3,r3,15284
10010568:	10c5883a 	add	r2,r2,r3
1001056c:	00000106 	br	10010574 <fstat+0x40>
10010570:	0005883a 	mov	r2,zero
10010574:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10010578:	e0bffd17 	ldw	r2,-12(fp)
1001057c:	10001026 	beq	r2,zero,100105c0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10010580:	e0bffd17 	ldw	r2,-12(fp)
10010584:	10800017 	ldw	r2,0(r2)
10010588:	10800817 	ldw	r2,32(r2)
1001058c:	10000726 	beq	r2,zero,100105ac <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
10010590:	e0bffd17 	ldw	r2,-12(fp)
10010594:	10800017 	ldw	r2,0(r2)
10010598:	10800817 	ldw	r2,32(r2)
1001059c:	e13ffd17 	ldw	r4,-12(fp)
100105a0:	e17fff17 	ldw	r5,-4(fp)
100105a4:	103ee83a 	callr	r2
100105a8:	00000906 	br	100105d0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100105ac:	e0bfff17 	ldw	r2,-4(fp)
100105b0:	00c80004 	movi	r3,8192
100105b4:	10c00115 	stw	r3,4(r2)
      return 0;
100105b8:	0005883a 	mov	r2,zero
100105bc:	00000406 	br	100105d0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100105c0:	00104e40 	call	100104e4 <alt_get_errno>
100105c4:	00c01444 	movi	r3,81
100105c8:	10c00015 	stw	r3,0(r2)
    return -1;
100105cc:	00bfffc4 	movi	r2,-1
  }
}
100105d0:	e037883a 	mov	sp,fp
100105d4:	dfc00117 	ldw	ra,4(sp)
100105d8:	df000017 	ldw	fp,0(sp)
100105dc:	dec00204 	addi	sp,sp,8
100105e0:	f800283a 	ret

100105e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100105e4:	defffe04 	addi	sp,sp,-8
100105e8:	dfc00115 	stw	ra,4(sp)
100105ec:	df000015 	stw	fp,0(sp)
100105f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100105f4:	00840074 	movhi	r2,4097
100105f8:	10937004 	addi	r2,r2,19904
100105fc:	10800017 	ldw	r2,0(r2)
10010600:	10000526 	beq	r2,zero,10010618 <alt_get_errno+0x34>
10010604:	00840074 	movhi	r2,4097
10010608:	10937004 	addi	r2,r2,19904
1001060c:	10800017 	ldw	r2,0(r2)
10010610:	103ee83a 	callr	r2
10010614:	00000206 	br	10010620 <alt_get_errno+0x3c>
10010618:	00840074 	movhi	r2,4097
1001061c:	109aa604 	addi	r2,r2,27288
}
10010620:	e037883a 	mov	sp,fp
10010624:	dfc00117 	ldw	ra,4(sp)
10010628:	df000017 	ldw	fp,0(sp)
1001062c:	dec00204 	addi	sp,sp,8
10010630:	f800283a 	ret

10010634 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10010634:	deffed04 	addi	sp,sp,-76
10010638:	dfc01215 	stw	ra,72(sp)
1001063c:	df001115 	stw	fp,68(sp)
10010640:	df001104 	addi	fp,sp,68
10010644:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010648:	e0bfff17 	ldw	r2,-4(fp)
1001064c:	10000716 	blt	r2,zero,1001066c <isatty+0x38>
10010650:	e13fff17 	ldw	r4,-4(fp)
10010654:	01400304 	movi	r5,12
10010658:	000158c0 	call	1000158c <__mulsi3>
1001065c:	00c40074 	movhi	r3,4097
10010660:	18ceed04 	addi	r3,r3,15284
10010664:	10c5883a 	add	r2,r2,r3
10010668:	00000106 	br	10010670 <isatty+0x3c>
1001066c:	0005883a 	mov	r2,zero
10010670:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10010674:	e0bfef17 	ldw	r2,-68(fp)
10010678:	10000e26 	beq	r2,zero,100106b4 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1001067c:	e0bfef17 	ldw	r2,-68(fp)
10010680:	10800017 	ldw	r2,0(r2)
10010684:	10800817 	ldw	r2,32(r2)
10010688:	1000021e 	bne	r2,zero,10010694 <isatty+0x60>
    {
      return 1;
1001068c:	00800044 	movi	r2,1
10010690:	00000c06 	br	100106c4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10010694:	e0bff004 	addi	r2,fp,-64
10010698:	e13fff17 	ldw	r4,-4(fp)
1001069c:	100b883a 	mov	r5,r2
100106a0:	00105340 	call	10010534 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100106a4:	e0bff117 	ldw	r2,-60(fp)
100106a8:	10880020 	cmpeqi	r2,r2,8192
100106ac:	10803fcc 	andi	r2,r2,255
100106b0:	00000406 	br	100106c4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100106b4:	00105e40 	call	100105e4 <alt_get_errno>
100106b8:	00c01444 	movi	r3,81
100106bc:	10c00015 	stw	r3,0(r2)
    return 0;
100106c0:	0005883a 	mov	r2,zero
  }
}
100106c4:	e037883a 	mov	sp,fp
100106c8:	dfc00117 	ldw	ra,4(sp)
100106cc:	df000017 	ldw	fp,0(sp)
100106d0:	dec00204 	addi	sp,sp,8
100106d4:	f800283a 	ret

100106d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100106d8:	defffc04 	addi	sp,sp,-16
100106dc:	df000315 	stw	fp,12(sp)
100106e0:	df000304 	addi	fp,sp,12
100106e4:	e13ffd15 	stw	r4,-12(fp)
100106e8:	e17ffe15 	stw	r5,-8(fp)
100106ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
100106f0:	e0fffe17 	ldw	r3,-8(fp)
100106f4:	e0bffd17 	ldw	r2,-12(fp)
100106f8:	18800e26 	beq	r3,r2,10010734 <alt_load_section+0x5c>
  {
    while( to != end )
100106fc:	00000a06 	br	10010728 <alt_load_section+0x50>
    {
      *to++ = *from++;
10010700:	e0bffd17 	ldw	r2,-12(fp)
10010704:	10c00017 	ldw	r3,0(r2)
10010708:	e0bffe17 	ldw	r2,-8(fp)
1001070c:	10c00015 	stw	r3,0(r2)
10010710:	e0bffe17 	ldw	r2,-8(fp)
10010714:	10800104 	addi	r2,r2,4
10010718:	e0bffe15 	stw	r2,-8(fp)
1001071c:	e0bffd17 	ldw	r2,-12(fp)
10010720:	10800104 	addi	r2,r2,4
10010724:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10010728:	e0fffe17 	ldw	r3,-8(fp)
1001072c:	e0bfff17 	ldw	r2,-4(fp)
10010730:	18bff31e 	bne	r3,r2,10010700 <__alt_data_end+0xf8010700>
    {
      *to++ = *from++;
    }
  }
}
10010734:	e037883a 	mov	sp,fp
10010738:	df000017 	ldw	fp,0(sp)
1001073c:	dec00104 	addi	sp,sp,4
10010740:	f800283a 	ret

10010744 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10010744:	defffe04 	addi	sp,sp,-8
10010748:	dfc00115 	stw	ra,4(sp)
1001074c:	df000015 	stw	fp,0(sp)
10010750:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10010754:	01040074 	movhi	r4,4097
10010758:	21137504 	addi	r4,r4,19924
1001075c:	01440074 	movhi	r5,4097
10010760:	294c4a04 	addi	r5,r5,12584
10010764:	01840074 	movhi	r6,4097
10010768:	31937504 	addi	r6,r6,19924
1001076c:	00106d80 	call	100106d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10010770:	01040034 	movhi	r4,4096
10010774:	21000804 	addi	r4,r4,32
10010778:	01440034 	movhi	r5,4096
1001077c:	29400804 	addi	r5,r5,32
10010780:	01840034 	movhi	r6,4096
10010784:	31806e04 	addi	r6,r6,440
10010788:	00106d80 	call	100106d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1001078c:	01040074 	movhi	r4,4097
10010790:	210a9204 	addi	r4,r4,10824
10010794:	01440074 	movhi	r5,4097
10010798:	294a9204 	addi	r5,r5,10824
1001079c:	01840074 	movhi	r6,4097
100107a0:	318c4a04 	addi	r6,r6,12584
100107a4:	00106d80 	call	100106d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100107a8:	00119a80 	call	100119a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
100107ac:	0011b6c0 	call	10011b6c <alt_icache_flush_all>
}
100107b0:	e037883a 	mov	sp,fp
100107b4:	dfc00117 	ldw	ra,4(sp)
100107b8:	df000017 	ldw	fp,0(sp)
100107bc:	dec00204 	addi	sp,sp,8
100107c0:	f800283a 	ret

100107c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100107c4:	defffe04 	addi	sp,sp,-8
100107c8:	dfc00115 	stw	ra,4(sp)
100107cc:	df000015 	stw	fp,0(sp)
100107d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100107d4:	00840074 	movhi	r2,4097
100107d8:	10937004 	addi	r2,r2,19904
100107dc:	10800017 	ldw	r2,0(r2)
100107e0:	10000526 	beq	r2,zero,100107f8 <alt_get_errno+0x34>
100107e4:	00840074 	movhi	r2,4097
100107e8:	10937004 	addi	r2,r2,19904
100107ec:	10800017 	ldw	r2,0(r2)
100107f0:	103ee83a 	callr	r2
100107f4:	00000206 	br	10010800 <alt_get_errno+0x3c>
100107f8:	00840074 	movhi	r2,4097
100107fc:	109aa604 	addi	r2,r2,27288
}
10010800:	e037883a 	mov	sp,fp
10010804:	dfc00117 	ldw	ra,4(sp)
10010808:	df000017 	ldw	fp,0(sp)
1001080c:	dec00204 	addi	sp,sp,8
10010810:	f800283a 	ret

10010814 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10010814:	defff904 	addi	sp,sp,-28
10010818:	dfc00615 	stw	ra,24(sp)
1001081c:	df000515 	stw	fp,20(sp)
10010820:	df000504 	addi	fp,sp,20
10010824:	e13ffd15 	stw	r4,-12(fp)
10010828:	e17ffe15 	stw	r5,-8(fp)
1001082c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10010830:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010834:	e0bffd17 	ldw	r2,-12(fp)
10010838:	10000716 	blt	r2,zero,10010858 <lseek+0x44>
1001083c:	e13ffd17 	ldw	r4,-12(fp)
10010840:	01400304 	movi	r5,12
10010844:	000158c0 	call	1000158c <__mulsi3>
10010848:	00c40074 	movhi	r3,4097
1001084c:	18ceed04 	addi	r3,r3,15284
10010850:	10c5883a 	add	r2,r2,r3
10010854:	00000106 	br	1001085c <lseek+0x48>
10010858:	0005883a 	mov	r2,zero
1001085c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10010860:	e0bffc17 	ldw	r2,-16(fp)
10010864:	10001026 	beq	r2,zero,100108a8 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10010868:	e0bffc17 	ldw	r2,-16(fp)
1001086c:	10800017 	ldw	r2,0(r2)
10010870:	10800717 	ldw	r2,28(r2)
10010874:	10000926 	beq	r2,zero,1001089c <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10010878:	e0bffc17 	ldw	r2,-16(fp)
1001087c:	10800017 	ldw	r2,0(r2)
10010880:	10800717 	ldw	r2,28(r2)
10010884:	e13ffc17 	ldw	r4,-16(fp)
10010888:	e17ffe17 	ldw	r5,-8(fp)
1001088c:	e1bfff17 	ldw	r6,-4(fp)
10010890:	103ee83a 	callr	r2
10010894:	e0bffb15 	stw	r2,-20(fp)
10010898:	00000506 	br	100108b0 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1001089c:	00bfde84 	movi	r2,-134
100108a0:	e0bffb15 	stw	r2,-20(fp)
100108a4:	00000206 	br	100108b0 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
100108a8:	00bfebc4 	movi	r2,-81
100108ac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100108b0:	e0bffb17 	ldw	r2,-20(fp)
100108b4:	1000060e 	bge	r2,zero,100108d0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
100108b8:	00107c40 	call	100107c4 <alt_get_errno>
100108bc:	e0fffb17 	ldw	r3,-20(fp)
100108c0:	00c7c83a 	sub	r3,zero,r3
100108c4:	10c00015 	stw	r3,0(r2)
    rc = -1;
100108c8:	00bfffc4 	movi	r2,-1
100108cc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100108d0:	e0bffb17 	ldw	r2,-20(fp)
}
100108d4:	e037883a 	mov	sp,fp
100108d8:	dfc00117 	ldw	ra,4(sp)
100108dc:	df000017 	ldw	fp,0(sp)
100108e0:	dec00204 	addi	sp,sp,8
100108e4:	f800283a 	ret

100108e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100108e8:	defffd04 	addi	sp,sp,-12
100108ec:	dfc00215 	stw	ra,8(sp)
100108f0:	df000115 	stw	fp,4(sp)
100108f4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100108f8:	0009883a 	mov	r4,zero
100108fc:	0010d8c0 	call	10010d8c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10010900:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10010904:	0010dc00 	call	10010dc0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10010908:	01040074 	movhi	r4,4097
1001090c:	210c4004 	addi	r4,r4,12544
10010910:	01440074 	movhi	r5,4097
10010914:	294c4004 	addi	r5,r5,12544
10010918:	01840074 	movhi	r6,4097
1001091c:	318c4004 	addi	r6,r6,12544
10010920:	0011f300 	call	10011f30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10010924:	0011ab40 	call	10011ab4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010928:	01040074 	movhi	r4,4097
1001092c:	2106c404 	addi	r4,r4,6928
10010930:	00126740 	call	10012674 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10010934:	d1274217 	ldw	r4,-25336(gp)
10010938:	d0e74317 	ldw	r3,-25332(gp)
1001093c:	d0a74417 	ldw	r2,-25328(gp)
10010940:	180b883a 	mov	r5,r3
10010944:	100d883a 	mov	r6,r2
10010948:	0000f9c0 	call	10000f9c <main>
1001094c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10010950:	01000044 	movi	r4,1
10010954:	00103ec0 	call	100103ec <close>
  exit (result);
10010958:	e13fff17 	ldw	r4,-4(fp)
1001095c:	00126880 	call	10012688 <exit>

10010960 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10010960:	defffe04 	addi	sp,sp,-8
10010964:	df000115 	stw	fp,4(sp)
10010968:	df000104 	addi	fp,sp,4
1001096c:	e13fff15 	stw	r4,-4(fp)
}
10010970:	e037883a 	mov	sp,fp
10010974:	df000017 	ldw	fp,0(sp)
10010978:	dec00104 	addi	sp,sp,4
1001097c:	f800283a 	ret

10010980 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10010980:	defffe04 	addi	sp,sp,-8
10010984:	df000115 	stw	fp,4(sp)
10010988:	df000104 	addi	fp,sp,4
1001098c:	e13fff15 	stw	r4,-4(fp)
}
10010990:	e037883a 	mov	sp,fp
10010994:	df000017 	ldw	fp,0(sp)
10010998:	dec00104 	addi	sp,sp,4
1001099c:	f800283a 	ret

100109a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100109a0:	defffe04 	addi	sp,sp,-8
100109a4:	dfc00115 	stw	ra,4(sp)
100109a8:	df000015 	stw	fp,0(sp)
100109ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100109b0:	00840074 	movhi	r2,4097
100109b4:	10937004 	addi	r2,r2,19904
100109b8:	10800017 	ldw	r2,0(r2)
100109bc:	10000526 	beq	r2,zero,100109d4 <alt_get_errno+0x34>
100109c0:	00840074 	movhi	r2,4097
100109c4:	10937004 	addi	r2,r2,19904
100109c8:	10800017 	ldw	r2,0(r2)
100109cc:	103ee83a 	callr	r2
100109d0:	00000206 	br	100109dc <alt_get_errno+0x3c>
100109d4:	00840074 	movhi	r2,4097
100109d8:	109aa604 	addi	r2,r2,27288
}
100109dc:	e037883a 	mov	sp,fp
100109e0:	dfc00117 	ldw	ra,4(sp)
100109e4:	df000017 	ldw	fp,0(sp)
100109e8:	dec00204 	addi	sp,sp,8
100109ec:	f800283a 	ret

100109f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
100109f0:	defff904 	addi	sp,sp,-28
100109f4:	dfc00615 	stw	ra,24(sp)
100109f8:	df000515 	stw	fp,20(sp)
100109fc:	df000504 	addi	fp,sp,20
10010a00:	e13ffd15 	stw	r4,-12(fp)
10010a04:	e17ffe15 	stw	r5,-8(fp)
10010a08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010a0c:	e0bffd17 	ldw	r2,-12(fp)
10010a10:	10000716 	blt	r2,zero,10010a30 <read+0x40>
10010a14:	e13ffd17 	ldw	r4,-12(fp)
10010a18:	01400304 	movi	r5,12
10010a1c:	000158c0 	call	1000158c <__mulsi3>
10010a20:	00c40074 	movhi	r3,4097
10010a24:	18ceed04 	addi	r3,r3,15284
10010a28:	10c5883a 	add	r2,r2,r3
10010a2c:	00000106 	br	10010a34 <read+0x44>
10010a30:	0005883a 	mov	r2,zero
10010a34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010a38:	e0bffb17 	ldw	r2,-20(fp)
10010a3c:	10002026 	beq	r2,zero,10010ac0 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10010a40:	e0bffb17 	ldw	r2,-20(fp)
10010a44:	10800217 	ldw	r2,8(r2)
10010a48:	108000cc 	andi	r2,r2,3
10010a4c:	10800060 	cmpeqi	r2,r2,1
10010a50:	1000171e 	bne	r2,zero,10010ab0 <read+0xc0>
        (fd->dev->read))
10010a54:	e0bffb17 	ldw	r2,-20(fp)
10010a58:	10800017 	ldw	r2,0(r2)
10010a5c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10010a60:	10001326 	beq	r2,zero,10010ab0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10010a64:	e0bffb17 	ldw	r2,-20(fp)
10010a68:	10800017 	ldw	r2,0(r2)
10010a6c:	10c00517 	ldw	r3,20(r2)
10010a70:	e0bfff17 	ldw	r2,-4(fp)
10010a74:	e13ffb17 	ldw	r4,-20(fp)
10010a78:	e17ffe17 	ldw	r5,-8(fp)
10010a7c:	100d883a 	mov	r6,r2
10010a80:	183ee83a 	callr	r3
10010a84:	e0bffc15 	stw	r2,-16(fp)
10010a88:	e0bffc17 	ldw	r2,-16(fp)
10010a8c:	1000060e 	bge	r2,zero,10010aa8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10010a90:	00109a00 	call	100109a0 <alt_get_errno>
10010a94:	e0fffc17 	ldw	r3,-16(fp)
10010a98:	00c7c83a 	sub	r3,zero,r3
10010a9c:	10c00015 	stw	r3,0(r2)
          return -1;
10010aa0:	00bfffc4 	movi	r2,-1
10010aa4:	00000a06 	br	10010ad0 <read+0xe0>
        }
        return rval;
10010aa8:	e0bffc17 	ldw	r2,-16(fp)
10010aac:	00000806 	br	10010ad0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10010ab0:	00109a00 	call	100109a0 <alt_get_errno>
10010ab4:	00c00344 	movi	r3,13
10010ab8:	10c00015 	stw	r3,0(r2)
10010abc:	00000306 	br	10010acc <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10010ac0:	00109a00 	call	100109a0 <alt_get_errno>
10010ac4:	00c01444 	movi	r3,81
10010ac8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
10010acc:	00bfffc4 	movi	r2,-1
}
10010ad0:	e037883a 	mov	sp,fp
10010ad4:	dfc00117 	ldw	ra,4(sp)
10010ad8:	df000017 	ldw	fp,0(sp)
10010adc:	dec00204 	addi	sp,sp,8
10010ae0:	f800283a 	ret

10010ae4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010ae4:	defffc04 	addi	sp,sp,-16
10010ae8:	dfc00315 	stw	ra,12(sp)
10010aec:	df000215 	stw	fp,8(sp)
10010af0:	dc000115 	stw	r16,4(sp)
10010af4:	df000104 	addi	fp,sp,4
10010af8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10010afc:	e0bfff17 	ldw	r2,-4(fp)
10010b00:	108000d0 	cmplti	r2,r2,3
10010b04:	1000111e 	bne	r2,zero,10010b4c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010b08:	04040074 	movhi	r16,4097
10010b0c:	840eed04 	addi	r16,r16,15284
10010b10:	e0bfff17 	ldw	r2,-4(fp)
10010b14:	1009883a 	mov	r4,r2
10010b18:	01400304 	movi	r5,12
10010b1c:	000158c0 	call	1000158c <__mulsi3>
10010b20:	8085883a 	add	r2,r16,r2
10010b24:	10800204 	addi	r2,r2,8
10010b28:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10010b2c:	04040074 	movhi	r16,4097
10010b30:	840eed04 	addi	r16,r16,15284
10010b34:	e0bfff17 	ldw	r2,-4(fp)
10010b38:	1009883a 	mov	r4,r2
10010b3c:	01400304 	movi	r5,12
10010b40:	000158c0 	call	1000158c <__mulsi3>
10010b44:	8085883a 	add	r2,r16,r2
10010b48:	10000015 	stw	zero,0(r2)
  }
}
10010b4c:	e037883a 	mov	sp,fp
10010b50:	dfc00217 	ldw	ra,8(sp)
10010b54:	df000117 	ldw	fp,4(sp)
10010b58:	dc000017 	ldw	r16,0(sp)
10010b5c:	dec00304 	addi	sp,sp,12
10010b60:	f800283a 	ret

10010b64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10010b64:	defff904 	addi	sp,sp,-28
10010b68:	df000615 	stw	fp,24(sp)
10010b6c:	df000604 	addi	fp,sp,24
10010b70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010b74:	0005303a 	rdctl	r2,status
10010b78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b7c:	e0fffc17 	ldw	r3,-16(fp)
10010b80:	00bfff84 	movi	r2,-2
10010b84:	1884703a 	and	r2,r3,r2
10010b88:	1001703a 	wrctl	status,r2
  
  return context;
10010b8c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10010b90:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10010b94:	d0a00c17 	ldw	r2,-32720(gp)
10010b98:	10c000c4 	addi	r3,r2,3
10010b9c:	00bfff04 	movi	r2,-4
10010ba0:	1884703a 	and	r2,r3,r2
10010ba4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010ba8:	d0e00c17 	ldw	r3,-32720(gp)
10010bac:	e0bfff17 	ldw	r2,-4(fp)
10010bb0:	1885883a 	add	r2,r3,r2
10010bb4:	00c60034 	movhi	r3,6144
10010bb8:	18c00004 	addi	r3,r3,0
10010bbc:	1880062e 	bgeu	r3,r2,10010bd8 <sbrk+0x74>
10010bc0:	e0bffa17 	ldw	r2,-24(fp)
10010bc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010bc8:	e0bffd17 	ldw	r2,-12(fp)
10010bcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010bd0:	00bfffc4 	movi	r2,-1
10010bd4:	00000b06 	br	10010c04 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010bd8:	d0a00c17 	ldw	r2,-32720(gp)
10010bdc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10010be0:	d0e00c17 	ldw	r3,-32720(gp)
10010be4:	e0bfff17 	ldw	r2,-4(fp)
10010be8:	1885883a 	add	r2,r3,r2
10010bec:	d0a00c15 	stw	r2,-32720(gp)
10010bf0:	e0bffa17 	ldw	r2,-24(fp)
10010bf4:	e0bffe15 	stw	r2,-8(fp)
10010bf8:	e0bffe17 	ldw	r2,-8(fp)
10010bfc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010c00:	e0bffb17 	ldw	r2,-20(fp)
} 
10010c04:	e037883a 	mov	sp,fp
10010c08:	df000017 	ldw	fp,0(sp)
10010c0c:	dec00104 	addi	sp,sp,4
10010c10:	f800283a 	ret

10010c14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010c14:	defffe04 	addi	sp,sp,-8
10010c18:	dfc00115 	stw	ra,4(sp)
10010c1c:	df000015 	stw	fp,0(sp)
10010c20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010c24:	00840074 	movhi	r2,4097
10010c28:	10937004 	addi	r2,r2,19904
10010c2c:	10800017 	ldw	r2,0(r2)
10010c30:	10000526 	beq	r2,zero,10010c48 <alt_get_errno+0x34>
10010c34:	00840074 	movhi	r2,4097
10010c38:	10937004 	addi	r2,r2,19904
10010c3c:	10800017 	ldw	r2,0(r2)
10010c40:	103ee83a 	callr	r2
10010c44:	00000206 	br	10010c50 <alt_get_errno+0x3c>
10010c48:	00840074 	movhi	r2,4097
10010c4c:	109aa604 	addi	r2,r2,27288
}
10010c50:	e037883a 	mov	sp,fp
10010c54:	dfc00117 	ldw	ra,4(sp)
10010c58:	df000017 	ldw	fp,0(sp)
10010c5c:	dec00204 	addi	sp,sp,8
10010c60:	f800283a 	ret

10010c64 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10010c64:	defff904 	addi	sp,sp,-28
10010c68:	dfc00615 	stw	ra,24(sp)
10010c6c:	df000515 	stw	fp,20(sp)
10010c70:	df000504 	addi	fp,sp,20
10010c74:	e13ffd15 	stw	r4,-12(fp)
10010c78:	e17ffe15 	stw	r5,-8(fp)
10010c7c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010c80:	e0bffd17 	ldw	r2,-12(fp)
10010c84:	10000716 	blt	r2,zero,10010ca4 <write+0x40>
10010c88:	e13ffd17 	ldw	r4,-12(fp)
10010c8c:	01400304 	movi	r5,12
10010c90:	000158c0 	call	1000158c <__mulsi3>
10010c94:	00c40074 	movhi	r3,4097
10010c98:	18ceed04 	addi	r3,r3,15284
10010c9c:	10c5883a 	add	r2,r2,r3
10010ca0:	00000106 	br	10010ca8 <write+0x44>
10010ca4:	0005883a 	mov	r2,zero
10010ca8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010cac:	e0bffb17 	ldw	r2,-20(fp)
10010cb0:	10001f26 	beq	r2,zero,10010d30 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010cb4:	e0bffb17 	ldw	r2,-20(fp)
10010cb8:	10800217 	ldw	r2,8(r2)
10010cbc:	108000cc 	andi	r2,r2,3
10010cc0:	10001726 	beq	r2,zero,10010d20 <write+0xbc>
10010cc4:	e0bffb17 	ldw	r2,-20(fp)
10010cc8:	10800017 	ldw	r2,0(r2)
10010ccc:	10800617 	ldw	r2,24(r2)
10010cd0:	10001326 	beq	r2,zero,10010d20 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010cd4:	e0bffb17 	ldw	r2,-20(fp)
10010cd8:	10800017 	ldw	r2,0(r2)
10010cdc:	10c00617 	ldw	r3,24(r2)
10010ce0:	e0bfff17 	ldw	r2,-4(fp)
10010ce4:	e13ffb17 	ldw	r4,-20(fp)
10010ce8:	e17ffe17 	ldw	r5,-8(fp)
10010cec:	100d883a 	mov	r6,r2
10010cf0:	183ee83a 	callr	r3
10010cf4:	e0bffc15 	stw	r2,-16(fp)
10010cf8:	e0bffc17 	ldw	r2,-16(fp)
10010cfc:	1000060e 	bge	r2,zero,10010d18 <write+0xb4>
      {
        ALT_ERRNO = -rval;
10010d00:	0010c140 	call	10010c14 <alt_get_errno>
10010d04:	e0fffc17 	ldw	r3,-16(fp)
10010d08:	00c7c83a 	sub	r3,zero,r3
10010d0c:	10c00015 	stw	r3,0(r2)
        return -1;
10010d10:	00bfffc4 	movi	r2,-1
10010d14:	00000a06 	br	10010d40 <write+0xdc>
      }
      return rval;
10010d18:	e0bffc17 	ldw	r2,-16(fp)
10010d1c:	00000806 	br	10010d40 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010d20:	0010c140 	call	10010c14 <alt_get_errno>
10010d24:	00c00344 	movi	r3,13
10010d28:	10c00015 	stw	r3,0(r2)
10010d2c:	00000306 	br	10010d3c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010d30:	0010c140 	call	10010c14 <alt_get_errno>
10010d34:	00c01444 	movi	r3,81
10010d38:	10c00015 	stw	r3,0(r2)
  }
  return -1;
10010d3c:	00bfffc4 	movi	r2,-1
}
10010d40:	e037883a 	mov	sp,fp
10010d44:	dfc00117 	ldw	ra,4(sp)
10010d48:	df000017 	ldw	fp,0(sp)
10010d4c:	dec00204 	addi	sp,sp,8
10010d50:	f800283a 	ret

10010d54 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010d54:	defffd04 	addi	sp,sp,-12
10010d58:	dfc00215 	stw	ra,8(sp)
10010d5c:	df000115 	stw	fp,4(sp)
10010d60:	df000104 	addi	fp,sp,4
10010d64:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010d68:	e13fff17 	ldw	r4,-4(fp)
10010d6c:	01440074 	movhi	r5,4097
10010d70:	29536d04 	addi	r5,r5,19892
10010d74:	0011a140 	call	10011a14 <alt_dev_llist_insert>
}
10010d78:	e037883a 	mov	sp,fp
10010d7c:	dfc00117 	ldw	ra,4(sp)
10010d80:	df000017 	ldw	fp,0(sp)
10010d84:	dec00204 	addi	sp,sp,8
10010d88:	f800283a 	ret

10010d8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010d8c:	defffd04 	addi	sp,sp,-12
10010d90:	dfc00215 	stw	ra,8(sp)
10010d94:	df000115 	stw	fp,4(sp)
10010d98:	df000104 	addi	fp,sp,4
10010d9c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10010da0:	00123dc0 	call	100123dc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010da4:	00800044 	movi	r2,1
10010da8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010dac:	e037883a 	mov	sp,fp
10010db0:	dfc00117 	ldw	ra,4(sp)
10010db4:	df000017 	ldw	fp,0(sp)
10010db8:	dec00204 	addi	sp,sp,8
10010dbc:	f800283a 	ret

10010dc0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010dc0:	defffe04 	addi	sp,sp,-8
10010dc4:	dfc00115 	stw	ra,4(sp)
10010dc8:	df000015 	stw	fp,0(sp)
10010dcc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010dd0:	01040074 	movhi	r4,4097
10010dd4:	210f5704 	addi	r4,r4,15708
10010dd8:	000b883a 	mov	r5,zero
10010ddc:	01800144 	movi	r6,5
10010de0:	0010f6c0 	call	10010f6c <altera_avalon_jtag_uart_init>
10010de4:	01040074 	movhi	r4,4097
10010de8:	210f4d04 	addi	r4,r4,15668
10010dec:	0010d540 	call	10010d54 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010df0:	0001883a 	nop
}
10010df4:	e037883a 	mov	sp,fp
10010df8:	dfc00117 	ldw	ra,4(sp)
10010dfc:	df000017 	ldw	fp,0(sp)
10010e00:	dec00204 	addi	sp,sp,8
10010e04:	f800283a 	ret

10010e08 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010e08:	defffa04 	addi	sp,sp,-24
10010e0c:	dfc00515 	stw	ra,20(sp)
10010e10:	df000415 	stw	fp,16(sp)
10010e14:	df000404 	addi	fp,sp,16
10010e18:	e13ffd15 	stw	r4,-12(fp)
10010e1c:	e17ffe15 	stw	r5,-8(fp)
10010e20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010e24:	e0bffd17 	ldw	r2,-12(fp)
10010e28:	10800017 	ldw	r2,0(r2)
10010e2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010e30:	e0bffc17 	ldw	r2,-16(fp)
10010e34:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
10010e38:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010e3c:	10800217 	ldw	r2,8(r2)
10010e40:	1809883a 	mov	r4,r3
10010e44:	e17ffe17 	ldw	r5,-8(fp)
10010e48:	e1bfff17 	ldw	r6,-4(fp)
10010e4c:	100f883a 	mov	r7,r2
10010e50:	00114300 	call	10011430 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010e54:	e037883a 	mov	sp,fp
10010e58:	dfc00117 	ldw	ra,4(sp)
10010e5c:	df000017 	ldw	fp,0(sp)
10010e60:	dec00204 	addi	sp,sp,8
10010e64:	f800283a 	ret

10010e68 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010e68:	defffa04 	addi	sp,sp,-24
10010e6c:	dfc00515 	stw	ra,20(sp)
10010e70:	df000415 	stw	fp,16(sp)
10010e74:	df000404 	addi	fp,sp,16
10010e78:	e13ffd15 	stw	r4,-12(fp)
10010e7c:	e17ffe15 	stw	r5,-8(fp)
10010e80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010e84:	e0bffd17 	ldw	r2,-12(fp)
10010e88:	10800017 	ldw	r2,0(r2)
10010e8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010e90:	e0bffc17 	ldw	r2,-16(fp)
10010e94:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
10010e98:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010e9c:	10800217 	ldw	r2,8(r2)
10010ea0:	1809883a 	mov	r4,r3
10010ea4:	e17ffe17 	ldw	r5,-8(fp)
10010ea8:	e1bfff17 	ldw	r6,-4(fp)
10010eac:	100f883a 	mov	r7,r2
10010eb0:	00116480 	call	10011648 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010eb4:	e037883a 	mov	sp,fp
10010eb8:	dfc00117 	ldw	ra,4(sp)
10010ebc:	df000017 	ldw	fp,0(sp)
10010ec0:	dec00204 	addi	sp,sp,8
10010ec4:	f800283a 	ret

10010ec8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010ec8:	defffc04 	addi	sp,sp,-16
10010ecc:	dfc00315 	stw	ra,12(sp)
10010ed0:	df000215 	stw	fp,8(sp)
10010ed4:	df000204 	addi	fp,sp,8
10010ed8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010edc:	e0bfff17 	ldw	r2,-4(fp)
10010ee0:	10800017 	ldw	r2,0(r2)
10010ee4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010ee8:	e0bffe17 	ldw	r2,-8(fp)
10010eec:	10c00a04 	addi	r3,r2,40
10010ef0:	e0bfff17 	ldw	r2,-4(fp)
10010ef4:	10800217 	ldw	r2,8(r2)
10010ef8:	1809883a 	mov	r4,r3
10010efc:	100b883a 	mov	r5,r2
10010f00:	00112d40 	call	100112d4 <altera_avalon_jtag_uart_close>
}
10010f04:	e037883a 	mov	sp,fp
10010f08:	dfc00117 	ldw	ra,4(sp)
10010f0c:	df000017 	ldw	fp,0(sp)
10010f10:	dec00204 	addi	sp,sp,8
10010f14:	f800283a 	ret

10010f18 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010f18:	defffa04 	addi	sp,sp,-24
10010f1c:	dfc00515 	stw	ra,20(sp)
10010f20:	df000415 	stw	fp,16(sp)
10010f24:	df000404 	addi	fp,sp,16
10010f28:	e13ffd15 	stw	r4,-12(fp)
10010f2c:	e17ffe15 	stw	r5,-8(fp)
10010f30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010f34:	e0bffd17 	ldw	r2,-12(fp)
10010f38:	10800017 	ldw	r2,0(r2)
10010f3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010f40:	e0bffc17 	ldw	r2,-16(fp)
10010f44:	10800a04 	addi	r2,r2,40
10010f48:	1009883a 	mov	r4,r2
10010f4c:	e17ffe17 	ldw	r5,-8(fp)
10010f50:	e1bfff17 	ldw	r6,-4(fp)
10010f54:	001133c0 	call	1001133c <altera_avalon_jtag_uart_ioctl>
}
10010f58:	e037883a 	mov	sp,fp
10010f5c:	dfc00117 	ldw	ra,4(sp)
10010f60:	df000017 	ldw	fp,0(sp)
10010f64:	dec00204 	addi	sp,sp,8
10010f68:	f800283a 	ret

10010f6c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010f6c:	defffa04 	addi	sp,sp,-24
10010f70:	dfc00515 	stw	ra,20(sp)
10010f74:	df000415 	stw	fp,16(sp)
10010f78:	df000404 	addi	fp,sp,16
10010f7c:	e13ffd15 	stw	r4,-12(fp)
10010f80:	e17ffe15 	stw	r5,-8(fp)
10010f84:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010f88:	e0bffd17 	ldw	r2,-12(fp)
10010f8c:	00c00044 	movi	r3,1
10010f90:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010f94:	e0bffd17 	ldw	r2,-12(fp)
10010f98:	10800017 	ldw	r2,0(r2)
10010f9c:	10800104 	addi	r2,r2,4
10010fa0:	e0fffd17 	ldw	r3,-12(fp)
10010fa4:	18c00817 	ldw	r3,32(r3)
10010fa8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010fac:	e0fffe17 	ldw	r3,-8(fp)
10010fb0:	e0bfff17 	ldw	r2,-4(fp)
10010fb4:	d8000015 	stw	zero,0(sp)
10010fb8:	1809883a 	mov	r4,r3
10010fbc:	100b883a 	mov	r5,r2
10010fc0:	01840074 	movhi	r6,4097
10010fc4:	31840b04 	addi	r6,r6,4140
10010fc8:	e1fffd17 	ldw	r7,-12(fp)
10010fcc:	0011b880 	call	10011b88 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010fd0:	e0bffd17 	ldw	r2,-12(fp)
10010fd4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010fd8:	e0bffd17 	ldw	r2,-12(fp)
10010fdc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010fe0:	00840074 	movhi	r2,4097
10010fe4:	109aab04 	addi	r2,r2,27308
10010fe8:	10800017 	ldw	r2,0(r2)
10010fec:	1809883a 	mov	r4,r3
10010ff0:	100b883a 	mov	r5,r2
10010ff4:	01840074 	movhi	r6,4097
10010ff8:	31848c04 	addi	r6,r6,4656
10010ffc:	e1fffd17 	ldw	r7,-12(fp)
10011000:	00118680 	call	10011868 <alt_alarm_start>
10011004:	1000040e 	bge	r2,zero,10011018 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10011008:	e0bffd17 	ldw	r2,-12(fp)
1001100c:	00e00034 	movhi	r3,32768
10011010:	18ffffc4 	addi	r3,r3,-1
10011014:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10011018:	e037883a 	mov	sp,fp
1001101c:	dfc00117 	ldw	ra,4(sp)
10011020:	df000017 	ldw	fp,0(sp)
10011024:	dec00204 	addi	sp,sp,8
10011028:	f800283a 	ret

1001102c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1001102c:	defff804 	addi	sp,sp,-32
10011030:	df000715 	stw	fp,28(sp)
10011034:	df000704 	addi	fp,sp,28
10011038:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1001103c:	e0bfff17 	ldw	r2,-4(fp)
10011040:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10011044:	e0bffb17 	ldw	r2,-20(fp)
10011048:	10800017 	ldw	r2,0(r2)
1001104c:	e0bffc15 	stw	r2,-16(fp)
10011050:	00000106 	br	10011058 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
10011054:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011058:	e0bffc17 	ldw	r2,-16(fp)
1001105c:	10800104 	addi	r2,r2,4
10011060:	10800037 	ldwio	r2,0(r2)
10011064:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10011068:	e0bffd17 	ldw	r2,-12(fp)
1001106c:	1080c00c 	andi	r2,r2,768
10011070:	10006a26 	beq	r2,zero,1001121c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10011074:	e0bffd17 	ldw	r2,-12(fp)
10011078:	1080400c 	andi	r2,r2,256
1001107c:	10003326 	beq	r2,zero,1001114c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10011080:	00800074 	movhi	r2,1
10011084:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011088:	e0bffb17 	ldw	r2,-20(fp)
1001108c:	10800a17 	ldw	r2,40(r2)
10011090:	10800044 	addi	r2,r2,1
10011094:	1081ffcc 	andi	r2,r2,2047
10011098:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1001109c:	e0bffb17 	ldw	r2,-20(fp)
100110a0:	10c00b17 	ldw	r3,44(r2)
100110a4:	e0bffe17 	ldw	r2,-8(fp)
100110a8:	18801426 	beq	r3,r2,100110fc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100110ac:	e0bffc17 	ldw	r2,-16(fp)
100110b0:	10800037 	ldwio	r2,0(r2)
100110b4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100110b8:	e0bff917 	ldw	r2,-28(fp)
100110bc:	10a0000c 	andi	r2,r2,32768
100110c0:	10001026 	beq	r2,zero,10011104 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100110c4:	e0bffb17 	ldw	r2,-20(fp)
100110c8:	10800a17 	ldw	r2,40(r2)
100110cc:	e0fff917 	ldw	r3,-28(fp)
100110d0:	e13ffb17 	ldw	r4,-20(fp)
100110d4:	2085883a 	add	r2,r4,r2
100110d8:	10800e04 	addi	r2,r2,56
100110dc:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100110e0:	e0bffb17 	ldw	r2,-20(fp)
100110e4:	10800a17 	ldw	r2,40(r2)
100110e8:	10800044 	addi	r2,r2,1
100110ec:	10c1ffcc 	andi	r3,r2,2047
100110f0:	e0bffb17 	ldw	r2,-20(fp)
100110f4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100110f8:	003fe306 	br	10011088 <__alt_data_end+0xf8011088>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100110fc:	0001883a 	nop
10011100:	00000106 	br	10011108 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10011104:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10011108:	e0bff917 	ldw	r2,-28(fp)
1001110c:	10bfffec 	andhi	r2,r2,65535
10011110:	10000e26 	beq	r2,zero,1001114c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011114:	e0bffb17 	ldw	r2,-20(fp)
10011118:	10c00817 	ldw	r3,32(r2)
1001111c:	00bfff84 	movi	r2,-2
10011120:	1886703a 	and	r3,r3,r2
10011124:	e0bffb17 	ldw	r2,-20(fp)
10011128:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1001112c:	e0bffc17 	ldw	r2,-16(fp)
10011130:	10800104 	addi	r2,r2,4
10011134:	e0fffb17 	ldw	r3,-20(fp)
10011138:	18c00817 	ldw	r3,32(r3)
1001113c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011140:	e0bffc17 	ldw	r2,-16(fp)
10011144:	10800104 	addi	r2,r2,4
10011148:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1001114c:	e0bffd17 	ldw	r2,-12(fp)
10011150:	1080800c 	andi	r2,r2,512
10011154:	103fbf26 	beq	r2,zero,10011054 <__alt_data_end+0xf8011054>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10011158:	e0bffd17 	ldw	r2,-12(fp)
1001115c:	1004d43a 	srli	r2,r2,16
10011160:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10011164:	00001406 	br	100111b8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10011168:	e0bffc17 	ldw	r2,-16(fp)
1001116c:	e0fffb17 	ldw	r3,-20(fp)
10011170:	18c00d17 	ldw	r3,52(r3)
10011174:	e13ffb17 	ldw	r4,-20(fp)
10011178:	20c7883a 	add	r3,r4,r3
1001117c:	18c20e04 	addi	r3,r3,2104
10011180:	18c00003 	ldbu	r3,0(r3)
10011184:	18c03fcc 	andi	r3,r3,255
10011188:	18c0201c 	xori	r3,r3,128
1001118c:	18ffe004 	addi	r3,r3,-128
10011190:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011194:	e0bffb17 	ldw	r2,-20(fp)
10011198:	10800d17 	ldw	r2,52(r2)
1001119c:	10800044 	addi	r2,r2,1
100111a0:	10c1ffcc 	andi	r3,r2,2047
100111a4:	e0bffb17 	ldw	r2,-20(fp)
100111a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100111ac:	e0bffa17 	ldw	r2,-24(fp)
100111b0:	10bfffc4 	addi	r2,r2,-1
100111b4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100111b8:	e0bffa17 	ldw	r2,-24(fp)
100111bc:	10000526 	beq	r2,zero,100111d4 <altera_avalon_jtag_uart_irq+0x1a8>
100111c0:	e0bffb17 	ldw	r2,-20(fp)
100111c4:	10c00d17 	ldw	r3,52(r2)
100111c8:	e0bffb17 	ldw	r2,-20(fp)
100111cc:	10800c17 	ldw	r2,48(r2)
100111d0:	18bfe51e 	bne	r3,r2,10011168 <__alt_data_end+0xf8011168>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100111d4:	e0bffa17 	ldw	r2,-24(fp)
100111d8:	103f9e26 	beq	r2,zero,10011054 <__alt_data_end+0xf8011054>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100111dc:	e0bffb17 	ldw	r2,-20(fp)
100111e0:	10c00817 	ldw	r3,32(r2)
100111e4:	00bfff44 	movi	r2,-3
100111e8:	1886703a 	and	r3,r3,r2
100111ec:	e0bffb17 	ldw	r2,-20(fp)
100111f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100111f4:	e0bffb17 	ldw	r2,-20(fp)
100111f8:	10800017 	ldw	r2,0(r2)
100111fc:	10800104 	addi	r2,r2,4
10011200:	e0fffb17 	ldw	r3,-20(fp)
10011204:	18c00817 	ldw	r3,32(r3)
10011208:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001120c:	e0bffc17 	ldw	r2,-16(fp)
10011210:	10800104 	addi	r2,r2,4
10011214:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10011218:	003f8e06 	br	10011054 <__alt_data_end+0xf8011054>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1001121c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10011220:	e037883a 	mov	sp,fp
10011224:	df000017 	ldw	fp,0(sp)
10011228:	dec00104 	addi	sp,sp,4
1001122c:	f800283a 	ret

10011230 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10011230:	defffc04 	addi	sp,sp,-16
10011234:	df000315 	stw	fp,12(sp)
10011238:	df000304 	addi	fp,sp,12
1001123c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10011240:	e0bfff17 	ldw	r2,-4(fp)
10011244:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10011248:	e0bffd17 	ldw	r2,-12(fp)
1001124c:	10800017 	ldw	r2,0(r2)
10011250:	10800104 	addi	r2,r2,4
10011254:	10800037 	ldwio	r2,0(r2)
10011258:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1001125c:	e0bffe17 	ldw	r2,-8(fp)
10011260:	1081000c 	andi	r2,r2,1024
10011264:	10000a26 	beq	r2,zero,10011290 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10011268:	e0bffd17 	ldw	r2,-12(fp)
1001126c:	10800017 	ldw	r2,0(r2)
10011270:	10800104 	addi	r2,r2,4
10011274:	e0fffd17 	ldw	r3,-12(fp)
10011278:	18c00817 	ldw	r3,32(r3)
1001127c:	18c10014 	ori	r3,r3,1024
10011280:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
10011284:	e0bffd17 	ldw	r2,-12(fp)
10011288:	10000915 	stw	zero,36(r2)
1001128c:	00000a06 	br	100112b8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10011290:	e0bffd17 	ldw	r2,-12(fp)
10011294:	10800917 	ldw	r2,36(r2)
10011298:	00e00034 	movhi	r3,32768
1001129c:	18ffff04 	addi	r3,r3,-4
100112a0:	18800536 	bltu	r3,r2,100112b8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
100112a4:	e0bffd17 	ldw	r2,-12(fp)
100112a8:	10800917 	ldw	r2,36(r2)
100112ac:	10c00044 	addi	r3,r2,1
100112b0:	e0bffd17 	ldw	r2,-12(fp)
100112b4:	10c00915 	stw	r3,36(r2)
100112b8:	00840074 	movhi	r2,4097
100112bc:	109aab04 	addi	r2,r2,27308
100112c0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100112c4:	e037883a 	mov	sp,fp
100112c8:	df000017 	ldw	fp,0(sp)
100112cc:	dec00104 	addi	sp,sp,4
100112d0:	f800283a 	ret

100112d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100112d4:	defffd04 	addi	sp,sp,-12
100112d8:	df000215 	stw	fp,8(sp)
100112dc:	df000204 	addi	fp,sp,8
100112e0:	e13ffe15 	stw	r4,-8(fp)
100112e4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100112e8:	00000506 	br	10011300 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100112ec:	e0bfff17 	ldw	r2,-4(fp)
100112f0:	1090000c 	andi	r2,r2,16384
100112f4:	10000226 	beq	r2,zero,10011300 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100112f8:	00bffd44 	movi	r2,-11
100112fc:	00000b06 	br	1001132c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10011300:	e0bffe17 	ldw	r2,-8(fp)
10011304:	10c00d17 	ldw	r3,52(r2)
10011308:	e0bffe17 	ldw	r2,-8(fp)
1001130c:	10800c17 	ldw	r2,48(r2)
10011310:	18800526 	beq	r3,r2,10011328 <altera_avalon_jtag_uart_close+0x54>
10011314:	e0bffe17 	ldw	r2,-8(fp)
10011318:	10c00917 	ldw	r3,36(r2)
1001131c:	e0bffe17 	ldw	r2,-8(fp)
10011320:	10800117 	ldw	r2,4(r2)
10011324:	18bff136 	bltu	r3,r2,100112ec <__alt_data_end+0xf80112ec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10011328:	0005883a 	mov	r2,zero
}
1001132c:	e037883a 	mov	sp,fp
10011330:	df000017 	ldw	fp,0(sp)
10011334:	dec00104 	addi	sp,sp,4
10011338:	f800283a 	ret

1001133c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1001133c:	defffa04 	addi	sp,sp,-24
10011340:	df000515 	stw	fp,20(sp)
10011344:	df000504 	addi	fp,sp,20
10011348:	e13ffd15 	stw	r4,-12(fp)
1001134c:	e17ffe15 	stw	r5,-8(fp)
10011350:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10011354:	00bff9c4 	movi	r2,-25
10011358:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1001135c:	e0bffe17 	ldw	r2,-8(fp)
10011360:	10da8060 	cmpeqi	r3,r2,27137
10011364:	1800031e 	bne	r3,zero,10011374 <altera_avalon_jtag_uart_ioctl+0x38>
10011368:	109a80a0 	cmpeqi	r2,r2,27138
1001136c:	1000181e 	bne	r2,zero,100113d0 <altera_avalon_jtag_uart_ioctl+0x94>
10011370:	00002606 	br	1001140c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10011374:	e0bffd17 	ldw	r2,-12(fp)
10011378:	10c00117 	ldw	r3,4(r2)
1001137c:	00a00034 	movhi	r2,32768
10011380:	10bfffc4 	addi	r2,r2,-1
10011384:	18802226 	beq	r3,r2,10011410 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
10011388:	e0bfff17 	ldw	r2,-4(fp)
1001138c:	10800017 	ldw	r2,0(r2)
10011390:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10011394:	e0bffc17 	ldw	r2,-16(fp)
10011398:	10800090 	cmplti	r2,r2,2
1001139c:	1000061e 	bne	r2,zero,100113b8 <altera_avalon_jtag_uart_ioctl+0x7c>
100113a0:	e0fffc17 	ldw	r3,-16(fp)
100113a4:	00a00034 	movhi	r2,32768
100113a8:	10bfffc4 	addi	r2,r2,-1
100113ac:	18800226 	beq	r3,r2,100113b8 <altera_avalon_jtag_uart_ioctl+0x7c>
100113b0:	e0bffc17 	ldw	r2,-16(fp)
100113b4:	00000206 	br	100113c0 <altera_avalon_jtag_uart_ioctl+0x84>
100113b8:	00a00034 	movhi	r2,32768
100113bc:	10bfff84 	addi	r2,r2,-2
100113c0:	e0fffd17 	ldw	r3,-12(fp)
100113c4:	18800115 	stw	r2,4(r3)
      rc = 0;
100113c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100113cc:	00001006 	br	10011410 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100113d0:	e0bffd17 	ldw	r2,-12(fp)
100113d4:	10c00117 	ldw	r3,4(r2)
100113d8:	00a00034 	movhi	r2,32768
100113dc:	10bfffc4 	addi	r2,r2,-1
100113e0:	18800d26 	beq	r3,r2,10011418 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100113e4:	e0bffd17 	ldw	r2,-12(fp)
100113e8:	10c00917 	ldw	r3,36(r2)
100113ec:	e0bffd17 	ldw	r2,-12(fp)
100113f0:	10800117 	ldw	r2,4(r2)
100113f4:	1885803a 	cmpltu	r2,r3,r2
100113f8:	10c03fcc 	andi	r3,r2,255
100113fc:	e0bfff17 	ldw	r2,-4(fp)
10011400:	10c00015 	stw	r3,0(r2)
      rc = 0;
10011404:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011408:	00000306 	br	10011418 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
1001140c:	00000306 	br	1001141c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10011410:	0001883a 	nop
10011414:	00000106 	br	1001141c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10011418:	0001883a 	nop

  default:
    break;
  }

  return rc;
1001141c:	e0bffb17 	ldw	r2,-20(fp)
}
10011420:	e037883a 	mov	sp,fp
10011424:	df000017 	ldw	fp,0(sp)
10011428:	dec00104 	addi	sp,sp,4
1001142c:	f800283a 	ret

10011430 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10011430:	defff304 	addi	sp,sp,-52
10011434:	dfc00c15 	stw	ra,48(sp)
10011438:	df000b15 	stw	fp,44(sp)
1001143c:	df000b04 	addi	fp,sp,44
10011440:	e13ffc15 	stw	r4,-16(fp)
10011444:	e17ffd15 	stw	r5,-12(fp)
10011448:	e1bffe15 	stw	r6,-8(fp)
1001144c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10011450:	e0bffd17 	ldw	r2,-12(fp)
10011454:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011458:	00004706 	br	10011578 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1001145c:	e0bffc17 	ldw	r2,-16(fp)
10011460:	10800a17 	ldw	r2,40(r2)
10011464:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10011468:	e0bffc17 	ldw	r2,-16(fp)
1001146c:	10800b17 	ldw	r2,44(r2)
10011470:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10011474:	e0fff717 	ldw	r3,-36(fp)
10011478:	e0bff817 	ldw	r2,-32(fp)
1001147c:	18800536 	bltu	r3,r2,10011494 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10011480:	e0fff717 	ldw	r3,-36(fp)
10011484:	e0bff817 	ldw	r2,-32(fp)
10011488:	1885c83a 	sub	r2,r3,r2
1001148c:	e0bff615 	stw	r2,-40(fp)
10011490:	00000406 	br	100114a4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10011494:	00c20004 	movi	r3,2048
10011498:	e0bff817 	ldw	r2,-32(fp)
1001149c:	1885c83a 	sub	r2,r3,r2
100114a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100114a4:	e0bff617 	ldw	r2,-40(fp)
100114a8:	10001e26 	beq	r2,zero,10011524 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100114ac:	e0fffe17 	ldw	r3,-8(fp)
100114b0:	e0bff617 	ldw	r2,-40(fp)
100114b4:	1880022e 	bgeu	r3,r2,100114c0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
100114b8:	e0bffe17 	ldw	r2,-8(fp)
100114bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100114c0:	e0bff817 	ldw	r2,-32(fp)
100114c4:	10800e04 	addi	r2,r2,56
100114c8:	e0fffc17 	ldw	r3,-16(fp)
100114cc:	1885883a 	add	r2,r3,r2
100114d0:	e13ff517 	ldw	r4,-44(fp)
100114d4:	100b883a 	mov	r5,r2
100114d8:	e1bff617 	ldw	r6,-40(fp)
100114dc:	00085e80 	call	100085e8 <memcpy>
      ptr   += n;
100114e0:	e0fff517 	ldw	r3,-44(fp)
100114e4:	e0bff617 	ldw	r2,-40(fp)
100114e8:	1885883a 	add	r2,r3,r2
100114ec:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100114f0:	e0fffe17 	ldw	r3,-8(fp)
100114f4:	e0bff617 	ldw	r2,-40(fp)
100114f8:	1885c83a 	sub	r2,r3,r2
100114fc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011500:	e0fff817 	ldw	r3,-32(fp)
10011504:	e0bff617 	ldw	r2,-40(fp)
10011508:	1885883a 	add	r2,r3,r2
1001150c:	10c1ffcc 	andi	r3,r2,2047
10011510:	e0bffc17 	ldw	r2,-16(fp)
10011514:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10011518:	e0bffe17 	ldw	r2,-8(fp)
1001151c:	00bfcf16 	blt	zero,r2,1001145c <__alt_data_end+0xf801145c>
10011520:	00000106 	br	10011528 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10011524:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10011528:	e0fff517 	ldw	r3,-44(fp)
1001152c:	e0bffd17 	ldw	r2,-12(fp)
10011530:	1880141e 	bne	r3,r2,10011584 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10011534:	e0bfff17 	ldw	r2,-4(fp)
10011538:	1090000c 	andi	r2,r2,16384
1001153c:	1000131e 	bne	r2,zero,1001158c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10011540:	0001883a 	nop
10011544:	e0bffc17 	ldw	r2,-16(fp)
10011548:	10c00a17 	ldw	r3,40(r2)
1001154c:	e0bff717 	ldw	r2,-36(fp)
10011550:	1880051e 	bne	r3,r2,10011568 <altera_avalon_jtag_uart_read+0x138>
10011554:	e0bffc17 	ldw	r2,-16(fp)
10011558:	10c00917 	ldw	r3,36(r2)
1001155c:	e0bffc17 	ldw	r2,-16(fp)
10011560:	10800117 	ldw	r2,4(r2)
10011564:	18bff736 	bltu	r3,r2,10011544 <__alt_data_end+0xf8011544>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10011568:	e0bffc17 	ldw	r2,-16(fp)
1001156c:	10c00a17 	ldw	r3,40(r2)
10011570:	e0bff717 	ldw	r2,-36(fp)
10011574:	18800726 	beq	r3,r2,10011594 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011578:	e0bffe17 	ldw	r2,-8(fp)
1001157c:	00bfb716 	blt	zero,r2,1001145c <__alt_data_end+0xf801145c>
10011580:	00000506 	br	10011598 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10011584:	0001883a 	nop
10011588:	00000306 	br	10011598 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1001158c:	0001883a 	nop
10011590:	00000106 	br	10011598 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10011594:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10011598:	e0fff517 	ldw	r3,-44(fp)
1001159c:	e0bffd17 	ldw	r2,-12(fp)
100115a0:	18801726 	beq	r3,r2,10011600 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100115a4:	0005303a 	rdctl	r2,status
100115a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100115ac:	e0fffa17 	ldw	r3,-24(fp)
100115b0:	00bfff84 	movi	r2,-2
100115b4:	1884703a 	and	r2,r3,r2
100115b8:	1001703a 	wrctl	status,r2
  
  return context;
100115bc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100115c0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100115c4:	e0bffc17 	ldw	r2,-16(fp)
100115c8:	10800817 	ldw	r2,32(r2)
100115cc:	10c00054 	ori	r3,r2,1
100115d0:	e0bffc17 	ldw	r2,-16(fp)
100115d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100115d8:	e0bffc17 	ldw	r2,-16(fp)
100115dc:	10800017 	ldw	r2,0(r2)
100115e0:	10800104 	addi	r2,r2,4
100115e4:	e0fffc17 	ldw	r3,-16(fp)
100115e8:	18c00817 	ldw	r3,32(r3)
100115ec:	10c00035 	stwio	r3,0(r2)
100115f0:	e0bff917 	ldw	r2,-28(fp)
100115f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100115f8:	e0bffb17 	ldw	r2,-20(fp)
100115fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10011600:	e0fff517 	ldw	r3,-44(fp)
10011604:	e0bffd17 	ldw	r2,-12(fp)
10011608:	18800426 	beq	r3,r2,1001161c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
1001160c:	e0fff517 	ldw	r3,-44(fp)
10011610:	e0bffd17 	ldw	r2,-12(fp)
10011614:	1885c83a 	sub	r2,r3,r2
10011618:	00000606 	br	10011634 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
1001161c:	e0bfff17 	ldw	r2,-4(fp)
10011620:	1090000c 	andi	r2,r2,16384
10011624:	10000226 	beq	r2,zero,10011630 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
10011628:	00bffd44 	movi	r2,-11
1001162c:	00000106 	br	10011634 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
10011630:	00bffec4 	movi	r2,-5
}
10011634:	e037883a 	mov	sp,fp
10011638:	dfc00117 	ldw	ra,4(sp)
1001163c:	df000017 	ldw	fp,0(sp)
10011640:	dec00204 	addi	sp,sp,8
10011644:	f800283a 	ret

10011648 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10011648:	defff304 	addi	sp,sp,-52
1001164c:	dfc00c15 	stw	ra,48(sp)
10011650:	df000b15 	stw	fp,44(sp)
10011654:	df000b04 	addi	fp,sp,44
10011658:	e13ffc15 	stw	r4,-16(fp)
1001165c:	e17ffd15 	stw	r5,-12(fp)
10011660:	e1bffe15 	stw	r6,-8(fp)
10011664:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10011668:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1001166c:	e0bffd17 	ldw	r2,-12(fp)
10011670:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011674:	00003706 	br	10011754 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10011678:	e0bffc17 	ldw	r2,-16(fp)
1001167c:	10800c17 	ldw	r2,48(r2)
10011680:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10011684:	e0bffc17 	ldw	r2,-16(fp)
10011688:	10800d17 	ldw	r2,52(r2)
1001168c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10011690:	e0fff817 	ldw	r3,-32(fp)
10011694:	e0bff517 	ldw	r2,-44(fp)
10011698:	1880062e 	bgeu	r3,r2,100116b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1001169c:	e0fff517 	ldw	r3,-44(fp)
100116a0:	e0bff817 	ldw	r2,-32(fp)
100116a4:	1885c83a 	sub	r2,r3,r2
100116a8:	10bfffc4 	addi	r2,r2,-1
100116ac:	e0bff615 	stw	r2,-40(fp)
100116b0:	00000b06 	br	100116e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100116b4:	e0bff517 	ldw	r2,-44(fp)
100116b8:	10000526 	beq	r2,zero,100116d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100116bc:	00c20004 	movi	r3,2048
100116c0:	e0bff817 	ldw	r2,-32(fp)
100116c4:	1885c83a 	sub	r2,r3,r2
100116c8:	e0bff615 	stw	r2,-40(fp)
100116cc:	00000406 	br	100116e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100116d0:	00c1ffc4 	movi	r3,2047
100116d4:	e0bff817 	ldw	r2,-32(fp)
100116d8:	1885c83a 	sub	r2,r3,r2
100116dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100116e0:	e0bff617 	ldw	r2,-40(fp)
100116e4:	10001e26 	beq	r2,zero,10011760 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100116e8:	e0fffe17 	ldw	r3,-8(fp)
100116ec:	e0bff617 	ldw	r2,-40(fp)
100116f0:	1880022e 	bgeu	r3,r2,100116fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100116f4:	e0bffe17 	ldw	r2,-8(fp)
100116f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100116fc:	e0bff817 	ldw	r2,-32(fp)
10011700:	10820e04 	addi	r2,r2,2104
10011704:	e0fffc17 	ldw	r3,-16(fp)
10011708:	1885883a 	add	r2,r3,r2
1001170c:	1009883a 	mov	r4,r2
10011710:	e17ffd17 	ldw	r5,-12(fp)
10011714:	e1bff617 	ldw	r6,-40(fp)
10011718:	00085e80 	call	100085e8 <memcpy>
      ptr   += n;
1001171c:	e0fffd17 	ldw	r3,-12(fp)
10011720:	e0bff617 	ldw	r2,-40(fp)
10011724:	1885883a 	add	r2,r3,r2
10011728:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1001172c:	e0fffe17 	ldw	r3,-8(fp)
10011730:	e0bff617 	ldw	r2,-40(fp)
10011734:	1885c83a 	sub	r2,r3,r2
10011738:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001173c:	e0fff817 	ldw	r3,-32(fp)
10011740:	e0bff617 	ldw	r2,-40(fp)
10011744:	1885883a 	add	r2,r3,r2
10011748:	10c1ffcc 	andi	r3,r2,2047
1001174c:	e0bffc17 	ldw	r2,-16(fp)
10011750:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011754:	e0bffe17 	ldw	r2,-8(fp)
10011758:	00bfc716 	blt	zero,r2,10011678 <__alt_data_end+0xf8011678>
1001175c:	00000106 	br	10011764 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10011760:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011764:	0005303a 	rdctl	r2,status
10011768:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001176c:	e0fffa17 	ldw	r3,-24(fp)
10011770:	00bfff84 	movi	r2,-2
10011774:	1884703a 	and	r2,r3,r2
10011778:	1001703a 	wrctl	status,r2
  
  return context;
1001177c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10011780:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10011784:	e0bffc17 	ldw	r2,-16(fp)
10011788:	10800817 	ldw	r2,32(r2)
1001178c:	10c00094 	ori	r3,r2,2
10011790:	e0bffc17 	ldw	r2,-16(fp)
10011794:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011798:	e0bffc17 	ldw	r2,-16(fp)
1001179c:	10800017 	ldw	r2,0(r2)
100117a0:	10800104 	addi	r2,r2,4
100117a4:	e0fffc17 	ldw	r3,-16(fp)
100117a8:	18c00817 	ldw	r3,32(r3)
100117ac:	10c00035 	stwio	r3,0(r2)
100117b0:	e0bff917 	ldw	r2,-28(fp)
100117b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100117b8:	e0bffb17 	ldw	r2,-20(fp)
100117bc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100117c0:	e0bffe17 	ldw	r2,-8(fp)
100117c4:	0080100e 	bge	zero,r2,10011808 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
100117c8:	e0bfff17 	ldw	r2,-4(fp)
100117cc:	1090000c 	andi	r2,r2,16384
100117d0:	1000101e 	bne	r2,zero,10011814 <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100117d4:	0001883a 	nop
100117d8:	e0bffc17 	ldw	r2,-16(fp)
100117dc:	10c00d17 	ldw	r3,52(r2)
100117e0:	e0bff517 	ldw	r2,-44(fp)
100117e4:	1880051e 	bne	r3,r2,100117fc <altera_avalon_jtag_uart_write+0x1b4>
100117e8:	e0bffc17 	ldw	r2,-16(fp)
100117ec:	10c00917 	ldw	r3,36(r2)
100117f0:	e0bffc17 	ldw	r2,-16(fp)
100117f4:	10800117 	ldw	r2,4(r2)
100117f8:	18bff736 	bltu	r3,r2,100117d8 <__alt_data_end+0xf80117d8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100117fc:	e0bffc17 	ldw	r2,-16(fp)
10011800:	10800917 	ldw	r2,36(r2)
10011804:	1000051e 	bne	r2,zero,1001181c <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
10011808:	e0bffe17 	ldw	r2,-8(fp)
1001180c:	00bfd116 	blt	zero,r2,10011754 <__alt_data_end+0xf8011754>
10011810:	00000306 	br	10011820 <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10011814:	0001883a 	nop
10011818:	00000106 	br	10011820 <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1001181c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10011820:	e0fffd17 	ldw	r3,-12(fp)
10011824:	e0bff717 	ldw	r2,-36(fp)
10011828:	18800426 	beq	r3,r2,1001183c <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
1001182c:	e0fffd17 	ldw	r3,-12(fp)
10011830:	e0bff717 	ldw	r2,-36(fp)
10011834:	1885c83a 	sub	r2,r3,r2
10011838:	00000606 	br	10011854 <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
1001183c:	e0bfff17 	ldw	r2,-4(fp)
10011840:	1090000c 	andi	r2,r2,16384
10011844:	10000226 	beq	r2,zero,10011850 <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
10011848:	00bffd44 	movi	r2,-11
1001184c:	00000106 	br	10011854 <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10011850:	00bffec4 	movi	r2,-5
}
10011854:	e037883a 	mov	sp,fp
10011858:	dfc00117 	ldw	ra,4(sp)
1001185c:	df000017 	ldw	fp,0(sp)
10011860:	dec00204 	addi	sp,sp,8
10011864:	f800283a 	ret

10011868 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10011868:	defff504 	addi	sp,sp,-44
1001186c:	df000a15 	stw	fp,40(sp)
10011870:	df000a04 	addi	fp,sp,40
10011874:	e13ffc15 	stw	r4,-16(fp)
10011878:	e17ffd15 	stw	r5,-12(fp)
1001187c:	e1bffe15 	stw	r6,-8(fp)
10011880:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10011884:	e03ff615 	stw	zero,-40(fp)
10011888:	00840074 	movhi	r2,4097
1001188c:	109aab04 	addi	r2,r2,27308
10011890:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10011894:	10003f26 	beq	r2,zero,10011994 <alt_alarm_start+0x12c>
  {
    if (alarm)
10011898:	e0bffc17 	ldw	r2,-16(fp)
1001189c:	10003b26 	beq	r2,zero,1001198c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100118a0:	e0bffc17 	ldw	r2,-16(fp)
100118a4:	e0fffe17 	ldw	r3,-8(fp)
100118a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100118ac:	e0bffc17 	ldw	r2,-16(fp)
100118b0:	e0ffff17 	ldw	r3,-4(fp)
100118b4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100118b8:	0005303a 	rdctl	r2,status
100118bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100118c0:	e0fff817 	ldw	r3,-32(fp)
100118c4:	00bfff84 	movi	r2,-2
100118c8:	1884703a 	and	r2,r3,r2
100118cc:	1001703a 	wrctl	status,r2
  
  return context;
100118d0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100118d4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100118d8:	00840074 	movhi	r2,4097
100118dc:	109aac04 	addi	r2,r2,27312
100118e0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100118e4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100118e8:	e0fffd17 	ldw	r3,-12(fp)
100118ec:	e0bff617 	ldw	r2,-40(fp)
100118f0:	1885883a 	add	r2,r3,r2
100118f4:	10c00044 	addi	r3,r2,1
100118f8:	e0bffc17 	ldw	r2,-16(fp)
100118fc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10011900:	e0bffc17 	ldw	r2,-16(fp)
10011904:	10c00217 	ldw	r3,8(r2)
10011908:	e0bff617 	ldw	r2,-40(fp)
1001190c:	1880042e 	bgeu	r3,r2,10011920 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10011910:	e0bffc17 	ldw	r2,-16(fp)
10011914:	00c00044 	movi	r3,1
10011918:	10c00405 	stb	r3,16(r2)
1001191c:	00000206 	br	10011928 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10011920:	e0bffc17 	ldw	r2,-16(fp)
10011924:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10011928:	e0bffc17 	ldw	r2,-16(fp)
1001192c:	00c40074 	movhi	r3,4097
10011930:	18d37304 	addi	r3,r3,19916
10011934:	e0fff915 	stw	r3,-28(fp)
10011938:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001193c:	e0bffa17 	ldw	r2,-24(fp)
10011940:	e0fff917 	ldw	r3,-28(fp)
10011944:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011948:	e0bff917 	ldw	r2,-28(fp)
1001194c:	10c00017 	ldw	r3,0(r2)
10011950:	e0bffa17 	ldw	r2,-24(fp)
10011954:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011958:	e0bff917 	ldw	r2,-28(fp)
1001195c:	10800017 	ldw	r2,0(r2)
10011960:	e0fffa17 	ldw	r3,-24(fp)
10011964:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011968:	e0bff917 	ldw	r2,-28(fp)
1001196c:	e0fffa17 	ldw	r3,-24(fp)
10011970:	10c00015 	stw	r3,0(r2)
10011974:	e0bff717 	ldw	r2,-36(fp)
10011978:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001197c:	e0bffb17 	ldw	r2,-20(fp)
10011980:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10011984:	0005883a 	mov	r2,zero
10011988:	00000306 	br	10011998 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1001198c:	00bffa84 	movi	r2,-22
10011990:	00000106 	br	10011998 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10011994:	00bfde84 	movi	r2,-134
  }
}
10011998:	e037883a 	mov	sp,fp
1001199c:	df000017 	ldw	fp,0(sp)
100119a0:	dec00104 	addi	sp,sp,4
100119a4:	f800283a 	ret

100119a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100119a8:	deffff04 	addi	sp,sp,-4
100119ac:	df000015 	stw	fp,0(sp)
100119b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100119b4:	e037883a 	mov	sp,fp
100119b8:	df000017 	ldw	fp,0(sp)
100119bc:	dec00104 	addi	sp,sp,4
100119c0:	f800283a 	ret

100119c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100119c4:	defffe04 	addi	sp,sp,-8
100119c8:	dfc00115 	stw	ra,4(sp)
100119cc:	df000015 	stw	fp,0(sp)
100119d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100119d4:	00840074 	movhi	r2,4097
100119d8:	10937004 	addi	r2,r2,19904
100119dc:	10800017 	ldw	r2,0(r2)
100119e0:	10000526 	beq	r2,zero,100119f8 <alt_get_errno+0x34>
100119e4:	00840074 	movhi	r2,4097
100119e8:	10937004 	addi	r2,r2,19904
100119ec:	10800017 	ldw	r2,0(r2)
100119f0:	103ee83a 	callr	r2
100119f4:	00000206 	br	10011a00 <alt_get_errno+0x3c>
100119f8:	00840074 	movhi	r2,4097
100119fc:	109aa604 	addi	r2,r2,27288
}
10011a00:	e037883a 	mov	sp,fp
10011a04:	dfc00117 	ldw	ra,4(sp)
10011a08:	df000017 	ldw	fp,0(sp)
10011a0c:	dec00204 	addi	sp,sp,8
10011a10:	f800283a 	ret

10011a14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10011a14:	defffa04 	addi	sp,sp,-24
10011a18:	dfc00515 	stw	ra,20(sp)
10011a1c:	df000415 	stw	fp,16(sp)
10011a20:	df000404 	addi	fp,sp,16
10011a24:	e13ffe15 	stw	r4,-8(fp)
10011a28:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10011a2c:	e0bffe17 	ldw	r2,-8(fp)
10011a30:	10000326 	beq	r2,zero,10011a40 <alt_dev_llist_insert+0x2c>
10011a34:	e0bffe17 	ldw	r2,-8(fp)
10011a38:	10800217 	ldw	r2,8(r2)
10011a3c:	1000051e 	bne	r2,zero,10011a54 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
10011a40:	00119c40 	call	100119c4 <alt_get_errno>
10011a44:	00c00584 	movi	r3,22
10011a48:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
10011a4c:	00bffa84 	movi	r2,-22
10011a50:	00001306 	br	10011aa0 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10011a54:	e0bffe17 	ldw	r2,-8(fp)
10011a58:	e0ffff17 	ldw	r3,-4(fp)
10011a5c:	e0fffc15 	stw	r3,-16(fp)
10011a60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011a64:	e0bffd17 	ldw	r2,-12(fp)
10011a68:	e0fffc17 	ldw	r3,-16(fp)
10011a6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011a70:	e0bffc17 	ldw	r2,-16(fp)
10011a74:	10c00017 	ldw	r3,0(r2)
10011a78:	e0bffd17 	ldw	r2,-12(fp)
10011a7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011a80:	e0bffc17 	ldw	r2,-16(fp)
10011a84:	10800017 	ldw	r2,0(r2)
10011a88:	e0fffd17 	ldw	r3,-12(fp)
10011a8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011a90:	e0bffc17 	ldw	r2,-16(fp)
10011a94:	e0fffd17 	ldw	r3,-12(fp)
10011a98:	10c00015 	stw	r3,0(r2)

  return 0;  
10011a9c:	0005883a 	mov	r2,zero
}
10011aa0:	e037883a 	mov	sp,fp
10011aa4:	dfc00117 	ldw	ra,4(sp)
10011aa8:	df000017 	ldw	fp,0(sp)
10011aac:	dec00204 	addi	sp,sp,8
10011ab0:	f800283a 	ret

10011ab4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011ab4:	defffd04 	addi	sp,sp,-12
10011ab8:	dfc00215 	stw	ra,8(sp)
10011abc:	df000115 	stw	fp,4(sp)
10011ac0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011ac4:	00840074 	movhi	r2,4097
10011ac8:	108a9104 	addi	r2,r2,10820
10011acc:	e0bfff15 	stw	r2,-4(fp)
10011ad0:	00000606 	br	10011aec <_do_ctors+0x38>
        (*ctor) (); 
10011ad4:	e0bfff17 	ldw	r2,-4(fp)
10011ad8:	10800017 	ldw	r2,0(r2)
10011adc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011ae0:	e0bfff17 	ldw	r2,-4(fp)
10011ae4:	10bfff04 	addi	r2,r2,-4
10011ae8:	e0bfff15 	stw	r2,-4(fp)
10011aec:	e0ffff17 	ldw	r3,-4(fp)
10011af0:	00840074 	movhi	r2,4097
10011af4:	108a9204 	addi	r2,r2,10824
10011af8:	18bff62e 	bgeu	r3,r2,10011ad4 <__alt_data_end+0xf8011ad4>
        (*ctor) (); 
}
10011afc:	e037883a 	mov	sp,fp
10011b00:	dfc00117 	ldw	ra,4(sp)
10011b04:	df000017 	ldw	fp,0(sp)
10011b08:	dec00204 	addi	sp,sp,8
10011b0c:	f800283a 	ret

10011b10 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10011b10:	defffd04 	addi	sp,sp,-12
10011b14:	dfc00215 	stw	ra,8(sp)
10011b18:	df000115 	stw	fp,4(sp)
10011b1c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011b20:	00840074 	movhi	r2,4097
10011b24:	108a9104 	addi	r2,r2,10820
10011b28:	e0bfff15 	stw	r2,-4(fp)
10011b2c:	00000606 	br	10011b48 <_do_dtors+0x38>
        (*dtor) (); 
10011b30:	e0bfff17 	ldw	r2,-4(fp)
10011b34:	10800017 	ldw	r2,0(r2)
10011b38:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011b3c:	e0bfff17 	ldw	r2,-4(fp)
10011b40:	10bfff04 	addi	r2,r2,-4
10011b44:	e0bfff15 	stw	r2,-4(fp)
10011b48:	e0ffff17 	ldw	r3,-4(fp)
10011b4c:	00840074 	movhi	r2,4097
10011b50:	108a9204 	addi	r2,r2,10824
10011b54:	18bff62e 	bgeu	r3,r2,10011b30 <__alt_data_end+0xf8011b30>
        (*dtor) (); 
}
10011b58:	e037883a 	mov	sp,fp
10011b5c:	dfc00117 	ldw	ra,4(sp)
10011b60:	df000017 	ldw	fp,0(sp)
10011b64:	dec00204 	addi	sp,sp,8
10011b68:	f800283a 	ret

10011b6c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011b6c:	deffff04 	addi	sp,sp,-4
10011b70:	df000015 	stw	fp,0(sp)
10011b74:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10011b78:	e037883a 	mov	sp,fp
10011b7c:	df000017 	ldw	fp,0(sp)
10011b80:	dec00104 	addi	sp,sp,4
10011b84:	f800283a 	ret

10011b88 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011b88:	defff904 	addi	sp,sp,-28
10011b8c:	dfc00615 	stw	ra,24(sp)
10011b90:	df000515 	stw	fp,20(sp)
10011b94:	df000504 	addi	fp,sp,20
10011b98:	e13ffc15 	stw	r4,-16(fp)
10011b9c:	e17ffd15 	stw	r5,-12(fp)
10011ba0:	e1bffe15 	stw	r6,-8(fp)
10011ba4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011ba8:	e0800217 	ldw	r2,8(fp)
10011bac:	d8800015 	stw	r2,0(sp)
10011bb0:	e13ffc17 	ldw	r4,-16(fp)
10011bb4:	e17ffd17 	ldw	r5,-12(fp)
10011bb8:	e1bffe17 	ldw	r6,-8(fp)
10011bbc:	e1ffff17 	ldw	r7,-4(fp)
10011bc0:	0011d600 	call	10011d60 <alt_iic_isr_register>
}  
10011bc4:	e037883a 	mov	sp,fp
10011bc8:	dfc00117 	ldw	ra,4(sp)
10011bcc:	df000017 	ldw	fp,0(sp)
10011bd0:	dec00204 	addi	sp,sp,8
10011bd4:	f800283a 	ret

10011bd8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011bd8:	defff904 	addi	sp,sp,-28
10011bdc:	df000615 	stw	fp,24(sp)
10011be0:	df000604 	addi	fp,sp,24
10011be4:	e13ffe15 	stw	r4,-8(fp)
10011be8:	e17fff15 	stw	r5,-4(fp)
10011bec:	e0bfff17 	ldw	r2,-4(fp)
10011bf0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011bf4:	0005303a 	rdctl	r2,status
10011bf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011bfc:	e0fffb17 	ldw	r3,-20(fp)
10011c00:	00bfff84 	movi	r2,-2
10011c04:	1884703a 	and	r2,r3,r2
10011c08:	1001703a 	wrctl	status,r2
  
  return context;
10011c0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011c10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10011c14:	e0bffa17 	ldw	r2,-24(fp)
10011c18:	00c00044 	movi	r3,1
10011c1c:	1884983a 	sll	r2,r3,r2
10011c20:	1007883a 	mov	r3,r2
10011c24:	00840074 	movhi	r2,4097
10011c28:	109aaa04 	addi	r2,r2,27304
10011c2c:	10800017 	ldw	r2,0(r2)
10011c30:	1886b03a 	or	r3,r3,r2
10011c34:	00840074 	movhi	r2,4097
10011c38:	109aaa04 	addi	r2,r2,27304
10011c3c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011c40:	00840074 	movhi	r2,4097
10011c44:	109aaa04 	addi	r2,r2,27304
10011c48:	10800017 	ldw	r2,0(r2)
10011c4c:	100170fa 	wrctl	ienable,r2
10011c50:	e0bffc17 	ldw	r2,-16(fp)
10011c54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011c58:	e0bffd17 	ldw	r2,-12(fp)
10011c5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011c60:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
10011c64:	e037883a 	mov	sp,fp
10011c68:	df000017 	ldw	fp,0(sp)
10011c6c:	dec00104 	addi	sp,sp,4
10011c70:	f800283a 	ret

10011c74 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011c74:	defff904 	addi	sp,sp,-28
10011c78:	df000615 	stw	fp,24(sp)
10011c7c:	df000604 	addi	fp,sp,24
10011c80:	e13ffe15 	stw	r4,-8(fp)
10011c84:	e17fff15 	stw	r5,-4(fp)
10011c88:	e0bfff17 	ldw	r2,-4(fp)
10011c8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011c90:	0005303a 	rdctl	r2,status
10011c94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011c98:	e0fffb17 	ldw	r3,-20(fp)
10011c9c:	00bfff84 	movi	r2,-2
10011ca0:	1884703a 	and	r2,r3,r2
10011ca4:	1001703a 	wrctl	status,r2
  
  return context;
10011ca8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011cac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011cb0:	e0bffa17 	ldw	r2,-24(fp)
10011cb4:	00c00044 	movi	r3,1
10011cb8:	1884983a 	sll	r2,r3,r2
10011cbc:	0084303a 	nor	r2,zero,r2
10011cc0:	1007883a 	mov	r3,r2
10011cc4:	00840074 	movhi	r2,4097
10011cc8:	109aaa04 	addi	r2,r2,27304
10011ccc:	10800017 	ldw	r2,0(r2)
10011cd0:	1886703a 	and	r3,r3,r2
10011cd4:	00840074 	movhi	r2,4097
10011cd8:	109aaa04 	addi	r2,r2,27304
10011cdc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011ce0:	00840074 	movhi	r2,4097
10011ce4:	109aaa04 	addi	r2,r2,27304
10011ce8:	10800017 	ldw	r2,0(r2)
10011cec:	100170fa 	wrctl	ienable,r2
10011cf0:	e0bffc17 	ldw	r2,-16(fp)
10011cf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011cf8:	e0bffd17 	ldw	r2,-12(fp)
10011cfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011d00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
10011d04:	e037883a 	mov	sp,fp
10011d08:	df000017 	ldw	fp,0(sp)
10011d0c:	dec00104 	addi	sp,sp,4
10011d10:	f800283a 	ret

10011d14 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011d14:	defffc04 	addi	sp,sp,-16
10011d18:	df000315 	stw	fp,12(sp)
10011d1c:	df000304 	addi	fp,sp,12
10011d20:	e13ffe15 	stw	r4,-8(fp)
10011d24:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011d28:	000530fa 	rdctl	r2,ienable
10011d2c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011d30:	e0bfff17 	ldw	r2,-4(fp)
10011d34:	00c00044 	movi	r3,1
10011d38:	1884983a 	sll	r2,r3,r2
10011d3c:	1007883a 	mov	r3,r2
10011d40:	e0bffd17 	ldw	r2,-12(fp)
10011d44:	1884703a 	and	r2,r3,r2
10011d48:	1004c03a 	cmpne	r2,r2,zero
10011d4c:	10803fcc 	andi	r2,r2,255
}
10011d50:	e037883a 	mov	sp,fp
10011d54:	df000017 	ldw	fp,0(sp)
10011d58:	dec00104 	addi	sp,sp,4
10011d5c:	f800283a 	ret

10011d60 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011d60:	defff504 	addi	sp,sp,-44
10011d64:	dfc00a15 	stw	ra,40(sp)
10011d68:	df000915 	stw	fp,36(sp)
10011d6c:	df000904 	addi	fp,sp,36
10011d70:	e13ffc15 	stw	r4,-16(fp)
10011d74:	e17ffd15 	stw	r5,-12(fp)
10011d78:	e1bffe15 	stw	r6,-8(fp)
10011d7c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011d80:	00bffa84 	movi	r2,-22
10011d84:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011d88:	e0bffd17 	ldw	r2,-12(fp)
10011d8c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011d90:	e0bff817 	ldw	r2,-32(fp)
10011d94:	10800808 	cmpgei	r2,r2,32
10011d98:	1000271e 	bne	r2,zero,10011e38 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011d9c:	0005303a 	rdctl	r2,status
10011da0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011da4:	e0fffa17 	ldw	r3,-24(fp)
10011da8:	00bfff84 	movi	r2,-2
10011dac:	1884703a 	and	r2,r3,r2
10011db0:	1001703a 	wrctl	status,r2
  
  return context;
10011db4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011db8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10011dbc:	00c40074 	movhi	r3,4097
10011dc0:	18daf704 	addi	r3,r3,27612
10011dc4:	e0bff817 	ldw	r2,-32(fp)
10011dc8:	100490fa 	slli	r2,r2,3
10011dcc:	1885883a 	add	r2,r3,r2
10011dd0:	e0fffe17 	ldw	r3,-8(fp)
10011dd4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011dd8:	00c40074 	movhi	r3,4097
10011ddc:	18daf704 	addi	r3,r3,27612
10011de0:	e0bff817 	ldw	r2,-32(fp)
10011de4:	100490fa 	slli	r2,r2,3
10011de8:	1885883a 	add	r2,r3,r2
10011dec:	10800104 	addi	r2,r2,4
10011df0:	e0ffff17 	ldw	r3,-4(fp)
10011df4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011df8:	e0bffe17 	ldw	r2,-8(fp)
10011dfc:	10000526 	beq	r2,zero,10011e14 <alt_iic_isr_register+0xb4>
10011e00:	e0bff817 	ldw	r2,-32(fp)
10011e04:	e13ffc17 	ldw	r4,-16(fp)
10011e08:	100b883a 	mov	r5,r2
10011e0c:	0011bd80 	call	10011bd8 <alt_ic_irq_enable>
10011e10:	00000406 	br	10011e24 <alt_iic_isr_register+0xc4>
10011e14:	e0bff817 	ldw	r2,-32(fp)
10011e18:	e13ffc17 	ldw	r4,-16(fp)
10011e1c:	100b883a 	mov	r5,r2
10011e20:	0011c740 	call	10011c74 <alt_ic_irq_disable>
10011e24:	e0bff715 	stw	r2,-36(fp)
10011e28:	e0bff917 	ldw	r2,-28(fp)
10011e2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011e30:	e0bffb17 	ldw	r2,-20(fp)
10011e34:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011e38:	e0bff717 	ldw	r2,-36(fp)
}
10011e3c:	e037883a 	mov	sp,fp
10011e40:	dfc00117 	ldw	ra,4(sp)
10011e44:	df000017 	ldw	fp,0(sp)
10011e48:	dec00204 	addi	sp,sp,8
10011e4c:	f800283a 	ret

10011e50 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011e50:	defff804 	addi	sp,sp,-32
10011e54:	dfc00715 	stw	ra,28(sp)
10011e58:	df000615 	stw	fp,24(sp)
10011e5c:	dc000515 	stw	r16,20(sp)
10011e60:	df000504 	addi	fp,sp,20
10011e64:	e13ffc15 	stw	r4,-16(fp)
10011e68:	e17ffd15 	stw	r5,-12(fp)
10011e6c:	e1bffe15 	stw	r6,-8(fp)
10011e70:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10011e74:	e13ffd17 	ldw	r4,-12(fp)
10011e78:	e17ffe17 	ldw	r5,-8(fp)
10011e7c:	e1bfff17 	ldw	r6,-4(fp)
10011e80:	00120e80 	call	100120e8 <open>
10011e84:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10011e88:	e0bffb17 	ldw	r2,-20(fp)
10011e8c:	10002216 	blt	r2,zero,10011f18 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011e90:	04040074 	movhi	r16,4097
10011e94:	840eed04 	addi	r16,r16,15284
10011e98:	e0bffb17 	ldw	r2,-20(fp)
10011e9c:	1009883a 	mov	r4,r2
10011ea0:	01400304 	movi	r5,12
10011ea4:	000158c0 	call	1000158c <__mulsi3>
10011ea8:	8085883a 	add	r2,r16,r2
10011eac:	10c00017 	ldw	r3,0(r2)
10011eb0:	e0bffc17 	ldw	r2,-16(fp)
10011eb4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011eb8:	04040074 	movhi	r16,4097
10011ebc:	840eed04 	addi	r16,r16,15284
10011ec0:	e0bffb17 	ldw	r2,-20(fp)
10011ec4:	1009883a 	mov	r4,r2
10011ec8:	01400304 	movi	r5,12
10011ecc:	000158c0 	call	1000158c <__mulsi3>
10011ed0:	8085883a 	add	r2,r16,r2
10011ed4:	10800104 	addi	r2,r2,4
10011ed8:	10c00017 	ldw	r3,0(r2)
10011edc:	e0bffc17 	ldw	r2,-16(fp)
10011ee0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011ee4:	04040074 	movhi	r16,4097
10011ee8:	840eed04 	addi	r16,r16,15284
10011eec:	e0bffb17 	ldw	r2,-20(fp)
10011ef0:	1009883a 	mov	r4,r2
10011ef4:	01400304 	movi	r5,12
10011ef8:	000158c0 	call	1000158c <__mulsi3>
10011efc:	8085883a 	add	r2,r16,r2
10011f00:	10800204 	addi	r2,r2,8
10011f04:	10c00017 	ldw	r3,0(r2)
10011f08:	e0bffc17 	ldw	r2,-16(fp)
10011f0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011f10:	e13ffb17 	ldw	r4,-20(fp)
10011f14:	0010ae40 	call	10010ae4 <alt_release_fd>
  }
} 
10011f18:	e037883a 	mov	sp,fp
10011f1c:	dfc00217 	ldw	ra,8(sp)
10011f20:	df000117 	ldw	fp,4(sp)
10011f24:	dc000017 	ldw	r16,0(sp)
10011f28:	dec00304 	addi	sp,sp,12
10011f2c:	f800283a 	ret

10011f30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10011f30:	defffb04 	addi	sp,sp,-20
10011f34:	dfc00415 	stw	ra,16(sp)
10011f38:	df000315 	stw	fp,12(sp)
10011f3c:	df000304 	addi	fp,sp,12
10011f40:	e13ffd15 	stw	r4,-12(fp)
10011f44:	e17ffe15 	stw	r5,-8(fp)
10011f48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011f4c:	01040074 	movhi	r4,4097
10011f50:	210ef004 	addi	r4,r4,15296
10011f54:	e17ffd17 	ldw	r5,-12(fp)
10011f58:	01800044 	movi	r6,1
10011f5c:	01c07fc4 	movi	r7,511
10011f60:	0011e500 	call	10011e50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011f64:	01040074 	movhi	r4,4097
10011f68:	210eed04 	addi	r4,r4,15284
10011f6c:	e17ffe17 	ldw	r5,-8(fp)
10011f70:	000d883a 	mov	r6,zero
10011f74:	01c07fc4 	movi	r7,511
10011f78:	0011e500 	call	10011e50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011f7c:	01040074 	movhi	r4,4097
10011f80:	210ef304 	addi	r4,r4,15308
10011f84:	e17fff17 	ldw	r5,-4(fp)
10011f88:	01800044 	movi	r6,1
10011f8c:	01c07fc4 	movi	r7,511
10011f90:	0011e500 	call	10011e50 <alt_open_fd>
}  
10011f94:	e037883a 	mov	sp,fp
10011f98:	dfc00117 	ldw	ra,4(sp)
10011f9c:	df000017 	ldw	fp,0(sp)
10011fa0:	dec00204 	addi	sp,sp,8
10011fa4:	f800283a 	ret

10011fa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011fa8:	defffe04 	addi	sp,sp,-8
10011fac:	dfc00115 	stw	ra,4(sp)
10011fb0:	df000015 	stw	fp,0(sp)
10011fb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011fb8:	00840074 	movhi	r2,4097
10011fbc:	10937004 	addi	r2,r2,19904
10011fc0:	10800017 	ldw	r2,0(r2)
10011fc4:	10000526 	beq	r2,zero,10011fdc <alt_get_errno+0x34>
10011fc8:	00840074 	movhi	r2,4097
10011fcc:	10937004 	addi	r2,r2,19904
10011fd0:	10800017 	ldw	r2,0(r2)
10011fd4:	103ee83a 	callr	r2
10011fd8:	00000206 	br	10011fe4 <alt_get_errno+0x3c>
10011fdc:	00840074 	movhi	r2,4097
10011fe0:	109aa604 	addi	r2,r2,27288
}
10011fe4:	e037883a 	mov	sp,fp
10011fe8:	dfc00117 	ldw	ra,4(sp)
10011fec:	df000017 	ldw	fp,0(sp)
10011ff0:	dec00204 	addi	sp,sp,8
10011ff4:	f800283a 	ret

10011ff8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10011ff8:	defffb04 	addi	sp,sp,-20
10011ffc:	dfc00415 	stw	ra,16(sp)
10012000:	df000315 	stw	fp,12(sp)
10012004:	dc000215 	stw	r16,8(sp)
10012008:	df000204 	addi	fp,sp,8
1001200c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10012010:	e0bfff17 	ldw	r2,-4(fp)
10012014:	10800217 	ldw	r2,8(r2)
10012018:	10d00034 	orhi	r3,r2,16384
1001201c:	e0bfff17 	ldw	r2,-4(fp)
10012020:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012024:	e03ffe15 	stw	zero,-8(fp)
10012028:	00002206 	br	100120b4 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1001202c:	04040074 	movhi	r16,4097
10012030:	840eed04 	addi	r16,r16,15284
10012034:	e0bffe17 	ldw	r2,-8(fp)
10012038:	1009883a 	mov	r4,r2
1001203c:	01400304 	movi	r5,12
10012040:	000158c0 	call	1000158c <__mulsi3>
10012044:	8085883a 	add	r2,r16,r2
10012048:	10c00017 	ldw	r3,0(r2)
1001204c:	e0bfff17 	ldw	r2,-4(fp)
10012050:	10800017 	ldw	r2,0(r2)
10012054:	1880141e 	bne	r3,r2,100120a8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012058:	04040074 	movhi	r16,4097
1001205c:	840eed04 	addi	r16,r16,15284
10012060:	e0bffe17 	ldw	r2,-8(fp)
10012064:	1009883a 	mov	r4,r2
10012068:	01400304 	movi	r5,12
1001206c:	000158c0 	call	1000158c <__mulsi3>
10012070:	8085883a 	add	r2,r16,r2
10012074:	10800204 	addi	r2,r2,8
10012078:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1001207c:	10000a0e 	bge	r2,zero,100120a8 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10012080:	e13ffe17 	ldw	r4,-8(fp)
10012084:	01400304 	movi	r5,12
10012088:	000158c0 	call	1000158c <__mulsi3>
1001208c:	00c40074 	movhi	r3,4097
10012090:	18ceed04 	addi	r3,r3,15284
10012094:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012098:	e0bfff17 	ldw	r2,-4(fp)
1001209c:	18800226 	beq	r3,r2,100120a8 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100120a0:	00bffcc4 	movi	r2,-13
100120a4:	00000a06 	br	100120d0 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100120a8:	e0bffe17 	ldw	r2,-8(fp)
100120ac:	10800044 	addi	r2,r2,1
100120b0:	e0bffe15 	stw	r2,-8(fp)
100120b4:	00840074 	movhi	r2,4097
100120b8:	10936f04 	addi	r2,r2,19900
100120bc:	10800017 	ldw	r2,0(r2)
100120c0:	1007883a 	mov	r3,r2
100120c4:	e0bffe17 	ldw	r2,-8(fp)
100120c8:	18bfd82e 	bgeu	r3,r2,1001202c <__alt_data_end+0xf801202c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100120cc:	0005883a 	mov	r2,zero
}
100120d0:	e037883a 	mov	sp,fp
100120d4:	dfc00217 	ldw	ra,8(sp)
100120d8:	df000117 	ldw	fp,4(sp)
100120dc:	dc000017 	ldw	r16,0(sp)
100120e0:	dec00304 	addi	sp,sp,12
100120e4:	f800283a 	ret

100120e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100120e8:	defff604 	addi	sp,sp,-40
100120ec:	dfc00915 	stw	ra,36(sp)
100120f0:	df000815 	stw	fp,32(sp)
100120f4:	df000804 	addi	fp,sp,32
100120f8:	e13ffd15 	stw	r4,-12(fp)
100120fc:	e17ffe15 	stw	r5,-8(fp)
10012100:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10012104:	00bfffc4 	movi	r2,-1
10012108:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1001210c:	00bffb44 	movi	r2,-19
10012110:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10012114:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10012118:	e13ffd17 	ldw	r4,-12(fp)
1001211c:	01440074 	movhi	r5,4097
10012120:	29536d04 	addi	r5,r5,19892
10012124:	00123fc0 	call	100123fc <alt_find_dev>
10012128:	e0bff815 	stw	r2,-32(fp)
1001212c:	e0bff817 	ldw	r2,-32(fp)
10012130:	1000051e 	bne	r2,zero,10012148 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10012134:	e13ffd17 	ldw	r4,-12(fp)
10012138:	001248c0 	call	1001248c <alt_find_file>
1001213c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10012140:	00800044 	movi	r2,1
10012144:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10012148:	e0bff817 	ldw	r2,-32(fp)
1001214c:	10002a26 	beq	r2,zero,100121f8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10012150:	e13ff817 	ldw	r4,-32(fp)
10012154:	00125a00 	call	100125a0 <alt_get_fd>
10012158:	e0bff915 	stw	r2,-28(fp)
1001215c:	e0bff917 	ldw	r2,-28(fp)
10012160:	1000030e 	bge	r2,zero,10012170 <open+0x88>
    {
      status = index;
10012164:	e0bff917 	ldw	r2,-28(fp)
10012168:	e0bffa15 	stw	r2,-24(fp)
1001216c:	00002406 	br	10012200 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10012170:	e13ff917 	ldw	r4,-28(fp)
10012174:	01400304 	movi	r5,12
10012178:	000158c0 	call	1000158c <__mulsi3>
1001217c:	00c40074 	movhi	r3,4097
10012180:	18ceed04 	addi	r3,r3,15284
10012184:	10c5883a 	add	r2,r2,r3
10012188:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1001218c:	e0fffe17 	ldw	r3,-8(fp)
10012190:	00900034 	movhi	r2,16384
10012194:	10bfffc4 	addi	r2,r2,-1
10012198:	1886703a 	and	r3,r3,r2
1001219c:	e0bffc17 	ldw	r2,-16(fp)
100121a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100121a4:	e0bffb17 	ldw	r2,-20(fp)
100121a8:	1000051e 	bne	r2,zero,100121c0 <open+0xd8>
100121ac:	e13ffc17 	ldw	r4,-16(fp)
100121b0:	0011ff80 	call	10011ff8 <alt_file_locked>
100121b4:	e0bffa15 	stw	r2,-24(fp)
100121b8:	e0bffa17 	ldw	r2,-24(fp)
100121bc:	10001016 	blt	r2,zero,10012200 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100121c0:	e0bff817 	ldw	r2,-32(fp)
100121c4:	10800317 	ldw	r2,12(r2)
100121c8:	10000826 	beq	r2,zero,100121ec <open+0x104>
100121cc:	e0bff817 	ldw	r2,-32(fp)
100121d0:	10800317 	ldw	r2,12(r2)
100121d4:	e13ffc17 	ldw	r4,-16(fp)
100121d8:	e17ffd17 	ldw	r5,-12(fp)
100121dc:	e1bffe17 	ldw	r6,-8(fp)
100121e0:	e1ffff17 	ldw	r7,-4(fp)
100121e4:	103ee83a 	callr	r2
100121e8:	00000106 	br	100121f0 <open+0x108>
100121ec:	0005883a 	mov	r2,zero
100121f0:	e0bffa15 	stw	r2,-24(fp)
100121f4:	00000206 	br	10012200 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100121f8:	00bffb44 	movi	r2,-19
100121fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10012200:	e0bffa17 	ldw	r2,-24(fp)
10012204:	1000080e 	bge	r2,zero,10012228 <open+0x140>
  {
    alt_release_fd (index);  
10012208:	e13ff917 	ldw	r4,-28(fp)
1001220c:	0010ae40 	call	10010ae4 <alt_release_fd>
    ALT_ERRNO = -status;
10012210:	0011fa80 	call	10011fa8 <alt_get_errno>
10012214:	e0fffa17 	ldw	r3,-24(fp)
10012218:	00c7c83a 	sub	r3,zero,r3
1001221c:	10c00015 	stw	r3,0(r2)
    return -1;
10012220:	00bfffc4 	movi	r2,-1
10012224:	00000106 	br	1001222c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
10012228:	e0bff917 	ldw	r2,-28(fp)
}
1001222c:	e037883a 	mov	sp,fp
10012230:	dfc00117 	ldw	ra,4(sp)
10012234:	df000017 	ldw	fp,0(sp)
10012238:	dec00204 	addi	sp,sp,8
1001223c:	f800283a 	ret

10012240 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10012240:	defffa04 	addi	sp,sp,-24
10012244:	df000515 	stw	fp,20(sp)
10012248:	df000504 	addi	fp,sp,20
1001224c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012250:	0005303a 	rdctl	r2,status
10012254:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012258:	e0fffc17 	ldw	r3,-16(fp)
1001225c:	00bfff84 	movi	r2,-2
10012260:	1884703a 	and	r2,r3,r2
10012264:	1001703a 	wrctl	status,r2
  
  return context;
10012268:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001226c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10012270:	e0bfff17 	ldw	r2,-4(fp)
10012274:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10012278:	e0bffd17 	ldw	r2,-12(fp)
1001227c:	10800017 	ldw	r2,0(r2)
10012280:	e0fffd17 	ldw	r3,-12(fp)
10012284:	18c00117 	ldw	r3,4(r3)
10012288:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001228c:	e0bffd17 	ldw	r2,-12(fp)
10012290:	10800117 	ldw	r2,4(r2)
10012294:	e0fffd17 	ldw	r3,-12(fp)
10012298:	18c00017 	ldw	r3,0(r3)
1001229c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100122a0:	e0bffd17 	ldw	r2,-12(fp)
100122a4:	e0fffd17 	ldw	r3,-12(fp)
100122a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100122ac:	e0bffd17 	ldw	r2,-12(fp)
100122b0:	e0fffd17 	ldw	r3,-12(fp)
100122b4:	10c00015 	stw	r3,0(r2)
100122b8:	e0bffb17 	ldw	r2,-20(fp)
100122bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100122c0:	e0bffe17 	ldw	r2,-8(fp)
100122c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100122c8:	e037883a 	mov	sp,fp
100122cc:	df000017 	ldw	fp,0(sp)
100122d0:	dec00104 	addi	sp,sp,4
100122d4:	f800283a 	ret

100122d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100122d8:	defffb04 	addi	sp,sp,-20
100122dc:	dfc00415 	stw	ra,16(sp)
100122e0:	df000315 	stw	fp,12(sp)
100122e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100122e8:	d0a00e17 	ldw	r2,-32712(gp)
100122ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100122f0:	d0a74717 	ldw	r2,-25316(gp)
100122f4:	10800044 	addi	r2,r2,1
100122f8:	d0a74715 	stw	r2,-25316(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100122fc:	00002e06 	br	100123b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10012300:	e0bffd17 	ldw	r2,-12(fp)
10012304:	10800017 	ldw	r2,0(r2)
10012308:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001230c:	e0bffd17 	ldw	r2,-12(fp)
10012310:	10800403 	ldbu	r2,16(r2)
10012314:	10803fcc 	andi	r2,r2,255
10012318:	10000426 	beq	r2,zero,1001232c <alt_tick+0x54>
1001231c:	d0a74717 	ldw	r2,-25316(gp)
10012320:	1000021e 	bne	r2,zero,1001232c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10012324:	e0bffd17 	ldw	r2,-12(fp)
10012328:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001232c:	e0bffd17 	ldw	r2,-12(fp)
10012330:	10800217 	ldw	r2,8(r2)
10012334:	d0e74717 	ldw	r3,-25316(gp)
10012338:	18801d36 	bltu	r3,r2,100123b0 <alt_tick+0xd8>
1001233c:	e0bffd17 	ldw	r2,-12(fp)
10012340:	10800403 	ldbu	r2,16(r2)
10012344:	10803fcc 	andi	r2,r2,255
10012348:	1000191e 	bne	r2,zero,100123b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001234c:	e0bffd17 	ldw	r2,-12(fp)
10012350:	10c00317 	ldw	r3,12(r2)
10012354:	e0bffd17 	ldw	r2,-12(fp)
10012358:	10800517 	ldw	r2,20(r2)
1001235c:	1009883a 	mov	r4,r2
10012360:	183ee83a 	callr	r3
10012364:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10012368:	e0bfff17 	ldw	r2,-4(fp)
1001236c:	1000031e 	bne	r2,zero,1001237c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10012370:	e13ffd17 	ldw	r4,-12(fp)
10012374:	00122400 	call	10012240 <alt_alarm_stop>
10012378:	00000d06 	br	100123b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1001237c:	e0bffd17 	ldw	r2,-12(fp)
10012380:	10c00217 	ldw	r3,8(r2)
10012384:	e0bfff17 	ldw	r2,-4(fp)
10012388:	1887883a 	add	r3,r3,r2
1001238c:	e0bffd17 	ldw	r2,-12(fp)
10012390:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10012394:	e0bffd17 	ldw	r2,-12(fp)
10012398:	10c00217 	ldw	r3,8(r2)
1001239c:	d0a74717 	ldw	r2,-25316(gp)
100123a0:	1880032e 	bgeu	r3,r2,100123b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100123a4:	e0bffd17 	ldw	r2,-12(fp)
100123a8:	00c00044 	movi	r3,1
100123ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100123b0:	e0bffe17 	ldw	r2,-8(fp)
100123b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100123b8:	e0fffd17 	ldw	r3,-12(fp)
100123bc:	d0a00e04 	addi	r2,gp,-32712
100123c0:	18bfcf1e 	bne	r3,r2,10012300 <__alt_data_end+0xf8012300>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100123c4:	0001883a 	nop
}
100123c8:	e037883a 	mov	sp,fp
100123cc:	dfc00117 	ldw	ra,4(sp)
100123d0:	df000017 	ldw	fp,0(sp)
100123d4:	dec00204 	addi	sp,sp,8
100123d8:	f800283a 	ret

100123dc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
100123dc:	deffff04 	addi	sp,sp,-4
100123e0:	df000015 	stw	fp,0(sp)
100123e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100123e8:	000170fa 	wrctl	ienable,zero
}
100123ec:	e037883a 	mov	sp,fp
100123f0:	df000017 	ldw	fp,0(sp)
100123f4:	dec00104 	addi	sp,sp,4
100123f8:	f800283a 	ret

100123fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100123fc:	defffa04 	addi	sp,sp,-24
10012400:	dfc00515 	stw	ra,20(sp)
10012404:	df000415 	stw	fp,16(sp)
10012408:	df000404 	addi	fp,sp,16
1001240c:	e13ffe15 	stw	r4,-8(fp)
10012410:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10012414:	e0bfff17 	ldw	r2,-4(fp)
10012418:	10800017 	ldw	r2,0(r2)
1001241c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10012420:	e13ffe17 	ldw	r4,-8(fp)
10012424:	00017440 	call	10001744 <strlen>
10012428:	10800044 	addi	r2,r2,1
1001242c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10012430:	00000d06 	br	10012468 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10012434:	e0bffc17 	ldw	r2,-16(fp)
10012438:	10c00217 	ldw	r3,8(r2)
1001243c:	e0bffd17 	ldw	r2,-12(fp)
10012440:	1809883a 	mov	r4,r3
10012444:	e17ffe17 	ldw	r5,-8(fp)
10012448:	100d883a 	mov	r6,r2
1001244c:	00126c00 	call	100126c0 <memcmp>
10012450:	1000021e 	bne	r2,zero,1001245c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10012454:	e0bffc17 	ldw	r2,-16(fp)
10012458:	00000706 	br	10012478 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1001245c:	e0bffc17 	ldw	r2,-16(fp)
10012460:	10800017 	ldw	r2,0(r2)
10012464:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10012468:	e0fffc17 	ldw	r3,-16(fp)
1001246c:	e0bfff17 	ldw	r2,-4(fp)
10012470:	18bff01e 	bne	r3,r2,10012434 <__alt_data_end+0xf8012434>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10012474:	0005883a 	mov	r2,zero
}
10012478:	e037883a 	mov	sp,fp
1001247c:	dfc00117 	ldw	ra,4(sp)
10012480:	df000017 	ldw	fp,0(sp)
10012484:	dec00204 	addi	sp,sp,8
10012488:	f800283a 	ret

1001248c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1001248c:	defffb04 	addi	sp,sp,-20
10012490:	dfc00415 	stw	ra,16(sp)
10012494:	df000315 	stw	fp,12(sp)
10012498:	df000304 	addi	fp,sp,12
1001249c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100124a0:	00840074 	movhi	r2,4097
100124a4:	10936b04 	addi	r2,r2,19884
100124a8:	10800017 	ldw	r2,0(r2)
100124ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100124b0:	00003106 	br	10012578 <alt_find_file+0xec>
  {
    len = strlen(next->name);
100124b4:	e0bffd17 	ldw	r2,-12(fp)
100124b8:	10800217 	ldw	r2,8(r2)
100124bc:	1009883a 	mov	r4,r2
100124c0:	00017440 	call	10001744 <strlen>
100124c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100124c8:	e0bffd17 	ldw	r2,-12(fp)
100124cc:	10c00217 	ldw	r3,8(r2)
100124d0:	e0bffe17 	ldw	r2,-8(fp)
100124d4:	10bfffc4 	addi	r2,r2,-1
100124d8:	1885883a 	add	r2,r3,r2
100124dc:	10800003 	ldbu	r2,0(r2)
100124e0:	10803fcc 	andi	r2,r2,255
100124e4:	1080201c 	xori	r2,r2,128
100124e8:	10bfe004 	addi	r2,r2,-128
100124ec:	10800bd8 	cmpnei	r2,r2,47
100124f0:	1000031e 	bne	r2,zero,10012500 <alt_find_file+0x74>
    {
      len -= 1;
100124f4:	e0bffe17 	ldw	r2,-8(fp)
100124f8:	10bfffc4 	addi	r2,r2,-1
100124fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10012500:	e0bffe17 	ldw	r2,-8(fp)
10012504:	e0ffff17 	ldw	r3,-4(fp)
10012508:	1885883a 	add	r2,r3,r2
1001250c:	10800003 	ldbu	r2,0(r2)
10012510:	10803fcc 	andi	r2,r2,255
10012514:	1080201c 	xori	r2,r2,128
10012518:	10bfe004 	addi	r2,r2,-128
1001251c:	10800be0 	cmpeqi	r2,r2,47
10012520:	1000081e 	bne	r2,zero,10012544 <alt_find_file+0xb8>
10012524:	e0bffe17 	ldw	r2,-8(fp)
10012528:	e0ffff17 	ldw	r3,-4(fp)
1001252c:	1885883a 	add	r2,r3,r2
10012530:	10800003 	ldbu	r2,0(r2)
10012534:	10803fcc 	andi	r2,r2,255
10012538:	1080201c 	xori	r2,r2,128
1001253c:	10bfe004 	addi	r2,r2,-128
10012540:	10000a1e 	bne	r2,zero,1001256c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10012544:	e0bffd17 	ldw	r2,-12(fp)
10012548:	10c00217 	ldw	r3,8(r2)
1001254c:	e0bffe17 	ldw	r2,-8(fp)
10012550:	1809883a 	mov	r4,r3
10012554:	e17fff17 	ldw	r5,-4(fp)
10012558:	100d883a 	mov	r6,r2
1001255c:	00126c00 	call	100126c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10012560:	1000021e 	bne	r2,zero,1001256c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10012564:	e0bffd17 	ldw	r2,-12(fp)
10012568:	00000806 	br	1001258c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1001256c:	e0bffd17 	ldw	r2,-12(fp)
10012570:	10800017 	ldw	r2,0(r2)
10012574:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10012578:	e0fffd17 	ldw	r3,-12(fp)
1001257c:	00840074 	movhi	r2,4097
10012580:	10936b04 	addi	r2,r2,19884
10012584:	18bfcb1e 	bne	r3,r2,100124b4 <__alt_data_end+0xf80124b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10012588:	0005883a 	mov	r2,zero
}
1001258c:	e037883a 	mov	sp,fp
10012590:	dfc00117 	ldw	ra,4(sp)
10012594:	df000017 	ldw	fp,0(sp)
10012598:	dec00204 	addi	sp,sp,8
1001259c:	f800283a 	ret

100125a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100125a0:	defffa04 	addi	sp,sp,-24
100125a4:	dfc00515 	stw	ra,20(sp)
100125a8:	df000415 	stw	fp,16(sp)
100125ac:	dc000315 	stw	r16,12(sp)
100125b0:	df000304 	addi	fp,sp,12
100125b4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
100125b8:	00bffa04 	movi	r2,-24
100125bc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100125c0:	e03ffd15 	stw	zero,-12(fp)
100125c4:	00002106 	br	1001264c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
100125c8:	04040074 	movhi	r16,4097
100125cc:	840eed04 	addi	r16,r16,15284
100125d0:	e0bffd17 	ldw	r2,-12(fp)
100125d4:	1009883a 	mov	r4,r2
100125d8:	01400304 	movi	r5,12
100125dc:	000158c0 	call	1000158c <__mulsi3>
100125e0:	8085883a 	add	r2,r16,r2
100125e4:	10800017 	ldw	r2,0(r2)
100125e8:	1000151e 	bne	r2,zero,10012640 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
100125ec:	04040074 	movhi	r16,4097
100125f0:	840eed04 	addi	r16,r16,15284
100125f4:	e0bffd17 	ldw	r2,-12(fp)
100125f8:	1009883a 	mov	r4,r2
100125fc:	01400304 	movi	r5,12
10012600:	000158c0 	call	1000158c <__mulsi3>
10012604:	8085883a 	add	r2,r16,r2
10012608:	e0ffff17 	ldw	r3,-4(fp)
1001260c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10012610:	00840074 	movhi	r2,4097
10012614:	10936f04 	addi	r2,r2,19900
10012618:	10c00017 	ldw	r3,0(r2)
1001261c:	e0bffd17 	ldw	r2,-12(fp)
10012620:	1880040e 	bge	r3,r2,10012634 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10012624:	00840074 	movhi	r2,4097
10012628:	10936f04 	addi	r2,r2,19900
1001262c:	e0fffd17 	ldw	r3,-12(fp)
10012630:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10012634:	e0bffd17 	ldw	r2,-12(fp)
10012638:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1001263c:	00000606 	br	10012658 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012640:	e0bffd17 	ldw	r2,-12(fp)
10012644:	10800044 	addi	r2,r2,1
10012648:	e0bffd15 	stw	r2,-12(fp)
1001264c:	e0bffd17 	ldw	r2,-12(fp)
10012650:	10800810 	cmplti	r2,r2,32
10012654:	103fdc1e 	bne	r2,zero,100125c8 <__alt_data_end+0xf80125c8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10012658:	e0bffe17 	ldw	r2,-8(fp)
}
1001265c:	e037883a 	mov	sp,fp
10012660:	dfc00217 	ldw	ra,8(sp)
10012664:	df000117 	ldw	fp,4(sp)
10012668:	dc000017 	ldw	r16,0(sp)
1001266c:	dec00304 	addi	sp,sp,12
10012670:	f800283a 	ret

10012674 <atexit>:
10012674:	200b883a 	mov	r5,r4
10012678:	000d883a 	mov	r6,zero
1001267c:	0009883a 	mov	r4,zero
10012680:	000f883a 	mov	r7,zero
10012684:	001273c1 	jmpi	1001273c <__register_exitproc>

10012688 <exit>:
10012688:	defffe04 	addi	sp,sp,-8
1001268c:	000b883a 	mov	r5,zero
10012690:	dc000015 	stw	r16,0(sp)
10012694:	dfc00115 	stw	ra,4(sp)
10012698:	2021883a 	mov	r16,r4
1001269c:	001286c0 	call	1001286c <__call_exitprocs>
100126a0:	00840074 	movhi	r2,4097
100126a4:	10936604 	addi	r2,r2,19864
100126a8:	11000017 	ldw	r4,0(r2)
100126ac:	20800f17 	ldw	r2,60(r4)
100126b0:	10000126 	beq	r2,zero,100126b8 <exit+0x30>
100126b4:	103ee83a 	callr	r2
100126b8:	8009883a 	mov	r4,r16
100126bc:	0012a0c0 	call	10012a0c <_exit>

100126c0 <memcmp>:
100126c0:	01c000c4 	movi	r7,3
100126c4:	3980192e 	bgeu	r7,r6,1001272c <memcmp+0x6c>
100126c8:	2904b03a 	or	r2,r5,r4
100126cc:	11c4703a 	and	r2,r2,r7
100126d0:	10000f26 	beq	r2,zero,10012710 <memcmp+0x50>
100126d4:	20c00003 	ldbu	r3,0(r4)
100126d8:	28800003 	ldbu	r2,0(r5)
100126dc:	1880151e 	bne	r3,r2,10012734 <memcmp+0x74>
100126e0:	31bfff84 	addi	r6,r6,-2
100126e4:	01ffffc4 	movi	r7,-1
100126e8:	00000406 	br	100126fc <memcmp+0x3c>
100126ec:	20c00003 	ldbu	r3,0(r4)
100126f0:	28800003 	ldbu	r2,0(r5)
100126f4:	31bfffc4 	addi	r6,r6,-1
100126f8:	18800e1e 	bne	r3,r2,10012734 <memcmp+0x74>
100126fc:	21000044 	addi	r4,r4,1
10012700:	29400044 	addi	r5,r5,1
10012704:	31fff91e 	bne	r6,r7,100126ec <__alt_data_end+0xf80126ec>
10012708:	0005883a 	mov	r2,zero
1001270c:	f800283a 	ret
10012710:	20c00017 	ldw	r3,0(r4)
10012714:	28800017 	ldw	r2,0(r5)
10012718:	1880041e 	bne	r3,r2,1001272c <memcmp+0x6c>
1001271c:	31bfff04 	addi	r6,r6,-4
10012720:	21000104 	addi	r4,r4,4
10012724:	29400104 	addi	r5,r5,4
10012728:	39bff936 	bltu	r7,r6,10012710 <__alt_data_end+0xf8012710>
1001272c:	303fe91e 	bne	r6,zero,100126d4 <__alt_data_end+0xf80126d4>
10012730:	003ff506 	br	10012708 <__alt_data_end+0xf8012708>
10012734:	1885c83a 	sub	r2,r3,r2
10012738:	f800283a 	ret

1001273c <__register_exitproc>:
1001273c:	defffa04 	addi	sp,sp,-24
10012740:	00840074 	movhi	r2,4097
10012744:	10936604 	addi	r2,r2,19864
10012748:	dc000315 	stw	r16,12(sp)
1001274c:	14000017 	ldw	r16,0(r2)
10012750:	dc400415 	stw	r17,16(sp)
10012754:	dfc00515 	stw	ra,20(sp)
10012758:	80805217 	ldw	r2,328(r16)
1001275c:	2023883a 	mov	r17,r4
10012760:	10003e26 	beq	r2,zero,1001285c <__register_exitproc+0x120>
10012764:	10c00117 	ldw	r3,4(r2)
10012768:	020007c4 	movi	r8,31
1001276c:	40c0180e 	bge	r8,r3,100127d0 <__register_exitproc+0x94>
10012770:	00800034 	movhi	r2,0
10012774:	10800004 	addi	r2,r2,0
10012778:	1000061e 	bne	r2,zero,10012794 <__register_exitproc+0x58>
1001277c:	00bfffc4 	movi	r2,-1
10012780:	dfc00517 	ldw	ra,20(sp)
10012784:	dc400417 	ldw	r17,16(sp)
10012788:	dc000317 	ldw	r16,12(sp)
1001278c:	dec00604 	addi	sp,sp,24
10012790:	f800283a 	ret
10012794:	01006404 	movi	r4,400
10012798:	d9400015 	stw	r5,0(sp)
1001279c:	d9800115 	stw	r6,4(sp)
100127a0:	d9c00215 	stw	r7,8(sp)
100127a4:	00000000 	call	10000000 <__reset>
100127a8:	d9400017 	ldw	r5,0(sp)
100127ac:	d9800117 	ldw	r6,4(sp)
100127b0:	d9c00217 	ldw	r7,8(sp)
100127b4:	103ff126 	beq	r2,zero,1001277c <__alt_data_end+0xf801277c>
100127b8:	80c05217 	ldw	r3,328(r16)
100127bc:	10000115 	stw	zero,4(r2)
100127c0:	10c00015 	stw	r3,0(r2)
100127c4:	80805215 	stw	r2,328(r16)
100127c8:	10006215 	stw	zero,392(r2)
100127cc:	10006315 	stw	zero,396(r2)
100127d0:	10c00117 	ldw	r3,4(r2)
100127d4:	88000d1e 	bne	r17,zero,1001280c <__register_exitproc+0xd0>
100127d8:	19000084 	addi	r4,r3,2
100127dc:	2109883a 	add	r4,r4,r4
100127e0:	18c00044 	addi	r3,r3,1
100127e4:	2109883a 	add	r4,r4,r4
100127e8:	1109883a 	add	r4,r2,r4
100127ec:	10c00115 	stw	r3,4(r2)
100127f0:	0005883a 	mov	r2,zero
100127f4:	21400015 	stw	r5,0(r4)
100127f8:	dfc00517 	ldw	ra,20(sp)
100127fc:	dc400417 	ldw	r17,16(sp)
10012800:	dc000317 	ldw	r16,12(sp)
10012804:	dec00604 	addi	sp,sp,24
10012808:	f800283a 	ret
1001280c:	02400044 	movi	r9,1
10012810:	12806217 	ldw	r10,392(r2)
10012814:	48d2983a 	sll	r9,r9,r3
10012818:	19000804 	addi	r4,r3,32
1001281c:	18d1883a 	add	r8,r3,r3
10012820:	2109883a 	add	r4,r4,r4
10012824:	4211883a 	add	r8,r8,r8
10012828:	2109883a 	add	r4,r4,r4
1001282c:	1109883a 	add	r4,r2,r4
10012830:	1211883a 	add	r8,r2,r8
10012834:	5254b03a 	or	r10,r10,r9
10012838:	21c02215 	stw	r7,136(r4)
1001283c:	41802215 	stw	r6,136(r8)
10012840:	12806215 	stw	r10,392(r2)
10012844:	01000084 	movi	r4,2
10012848:	893fe31e 	bne	r17,r4,100127d8 <__alt_data_end+0xf80127d8>
1001284c:	11006317 	ldw	r4,396(r2)
10012850:	2252b03a 	or	r9,r4,r9
10012854:	12406315 	stw	r9,396(r2)
10012858:	003fdf06 	br	100127d8 <__alt_data_end+0xf80127d8>
1001285c:	00840074 	movhi	r2,4097
10012860:	109b3704 	addi	r2,r2,27868
10012864:	80805215 	stw	r2,328(r16)
10012868:	003fbe06 	br	10012764 <__alt_data_end+0xf8012764>

1001286c <__call_exitprocs>:
1001286c:	00840074 	movhi	r2,4097
10012870:	10936604 	addi	r2,r2,19864
10012874:	10800017 	ldw	r2,0(r2)
10012878:	defff304 	addi	sp,sp,-52
1001287c:	df000b15 	stw	fp,44(sp)
10012880:	d8800015 	stw	r2,0(sp)
10012884:	10805204 	addi	r2,r2,328
10012888:	dd400815 	stw	r21,32(sp)
1001288c:	dfc00c15 	stw	ra,48(sp)
10012890:	ddc00a15 	stw	r23,40(sp)
10012894:	dd800915 	stw	r22,36(sp)
10012898:	dd000715 	stw	r20,28(sp)
1001289c:	dcc00615 	stw	r19,24(sp)
100128a0:	dc800515 	stw	r18,20(sp)
100128a4:	dc400415 	stw	r17,16(sp)
100128a8:	dc000315 	stw	r16,12(sp)
100128ac:	d9000115 	stw	r4,4(sp)
100128b0:	2839883a 	mov	fp,r5
100128b4:	d8800215 	stw	r2,8(sp)
100128b8:	057fffc4 	movi	r21,-1
100128bc:	d8800017 	ldw	r2,0(sp)
100128c0:	ddc00217 	ldw	r23,8(sp)
100128c4:	14805217 	ldw	r18,328(r2)
100128c8:	90001726 	beq	r18,zero,10012928 <__call_exitprocs+0xbc>
100128cc:	94400117 	ldw	r17,4(r18)
100128d0:	8c3fffc4 	addi	r16,r17,-1
100128d4:	80001116 	blt	r16,zero,1001291c <__call_exitprocs+0xb0>
100128d8:	8c400044 	addi	r17,r17,1
100128dc:	8427883a 	add	r19,r16,r16
100128e0:	8c63883a 	add	r17,r17,r17
100128e4:	95802204 	addi	r22,r18,136
100128e8:	9ce7883a 	add	r19,r19,r19
100128ec:	8c63883a 	add	r17,r17,r17
100128f0:	b4e7883a 	add	r19,r22,r19
100128f4:	9463883a 	add	r17,r18,r17
100128f8:	e0001726 	beq	fp,zero,10012958 <__call_exitprocs+0xec>
100128fc:	8c87c83a 	sub	r3,r17,r18
10012900:	b0c7883a 	add	r3,r22,r3
10012904:	18c01e17 	ldw	r3,120(r3)
10012908:	1f001326 	beq	r3,fp,10012958 <__call_exitprocs+0xec>
1001290c:	843fffc4 	addi	r16,r16,-1
10012910:	9cffff04 	addi	r19,r19,-4
10012914:	8c7fff04 	addi	r17,r17,-4
10012918:	857ff71e 	bne	r16,r21,100128f8 <__alt_data_end+0xf80128f8>
1001291c:	00800034 	movhi	r2,0
10012920:	10800004 	addi	r2,r2,0
10012924:	10002a1e 	bne	r2,zero,100129d0 <__call_exitprocs+0x164>
10012928:	dfc00c17 	ldw	ra,48(sp)
1001292c:	df000b17 	ldw	fp,44(sp)
10012930:	ddc00a17 	ldw	r23,40(sp)
10012934:	dd800917 	ldw	r22,36(sp)
10012938:	dd400817 	ldw	r21,32(sp)
1001293c:	dd000717 	ldw	r20,28(sp)
10012940:	dcc00617 	ldw	r19,24(sp)
10012944:	dc800517 	ldw	r18,20(sp)
10012948:	dc400417 	ldw	r17,16(sp)
1001294c:	dc000317 	ldw	r16,12(sp)
10012950:	dec00d04 	addi	sp,sp,52
10012954:	f800283a 	ret
10012958:	91000117 	ldw	r4,4(r18)
1001295c:	88c00017 	ldw	r3,0(r17)
10012960:	213fffc4 	addi	r4,r4,-1
10012964:	24001526 	beq	r4,r16,100129bc <__call_exitprocs+0x150>
10012968:	88000015 	stw	zero,0(r17)
1001296c:	183fe726 	beq	r3,zero,1001290c <__alt_data_end+0xf801290c>
10012970:	00800044 	movi	r2,1
10012974:	1408983a 	sll	r4,r2,r16
10012978:	91406217 	ldw	r5,392(r18)
1001297c:	95000117 	ldw	r20,4(r18)
10012980:	214a703a 	and	r5,r4,r5
10012984:	28000b26 	beq	r5,zero,100129b4 <__call_exitprocs+0x148>
10012988:	91406317 	ldw	r5,396(r18)
1001298c:	2148703a 	and	r4,r4,r5
10012990:	20000c1e 	bne	r4,zero,100129c4 <__call_exitprocs+0x158>
10012994:	99400017 	ldw	r5,0(r19)
10012998:	d9000117 	ldw	r4,4(sp)
1001299c:	183ee83a 	callr	r3
100129a0:	90c00117 	ldw	r3,4(r18)
100129a4:	1d3fc51e 	bne	r3,r20,100128bc <__alt_data_end+0xf80128bc>
100129a8:	b8c00017 	ldw	r3,0(r23)
100129ac:	1cbfd726 	beq	r3,r18,1001290c <__alt_data_end+0xf801290c>
100129b0:	003fc206 	br	100128bc <__alt_data_end+0xf80128bc>
100129b4:	183ee83a 	callr	r3
100129b8:	003ff906 	br	100129a0 <__alt_data_end+0xf80129a0>
100129bc:	94000115 	stw	r16,4(r18)
100129c0:	003fea06 	br	1001296c <__alt_data_end+0xf801296c>
100129c4:	99000017 	ldw	r4,0(r19)
100129c8:	183ee83a 	callr	r3
100129cc:	003ff406 	br	100129a0 <__alt_data_end+0xf80129a0>
100129d0:	90c00117 	ldw	r3,4(r18)
100129d4:	1800071e 	bne	r3,zero,100129f4 <__call_exitprocs+0x188>
100129d8:	90c00017 	ldw	r3,0(r18)
100129dc:	18000926 	beq	r3,zero,10012a04 <__call_exitprocs+0x198>
100129e0:	9009883a 	mov	r4,r18
100129e4:	b8c00015 	stw	r3,0(r23)
100129e8:	00000000 	call	10000000 <__reset>
100129ec:	bc800017 	ldw	r18,0(r23)
100129f0:	003fb506 	br	100128c8 <__alt_data_end+0xf80128c8>
100129f4:	90c00017 	ldw	r3,0(r18)
100129f8:	902f883a 	mov	r23,r18
100129fc:	1825883a 	mov	r18,r3
10012a00:	003fb106 	br	100128c8 <__alt_data_end+0xf80128c8>
10012a04:	0007883a 	mov	r3,zero
10012a08:	003ffb06 	br	100129f8 <__alt_data_end+0xf80129f8>

10012a0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10012a0c:	defffc04 	addi	sp,sp,-16
10012a10:	df000315 	stw	fp,12(sp)
10012a14:	df000304 	addi	fp,sp,12
10012a18:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10012a1c:	0001883a 	nop
10012a20:	e0bfff17 	ldw	r2,-4(fp)
10012a24:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
10012a28:	e0bffd17 	ldw	r2,-12(fp)
10012a2c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10012a30:	e0bffe17 	ldw	r2,-8(fp)
10012a34:	10000226 	beq	r2,zero,10012a40 <_exit+0x34>
    ALT_SIM_FAIL();
10012a38:	002af070 	cmpltui	zero,zero,43969
10012a3c:	00000106 	br	10012a44 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
10012a40:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012a44:	003fff06 	br	10012a44 <__alt_data_end+0xf8012a44>
